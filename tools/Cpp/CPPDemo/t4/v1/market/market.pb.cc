// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: t4/v1/market/market.proto
// Protobuf C++ Version: 5.29.3

#include "t4/v1/market/market.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace t4proto {
namespace v1 {
namespace market {

inline constexpr MarketDepthSubscribe::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : exchange_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        contract_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        market_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        buffer_{static_cast< ::t4proto::v1::common::DepthBuffer >(0)},
        depth_levels_{static_cast< ::t4proto::v1::common::DepthLevels >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MarketDepthSubscribe::MarketDepthSubscribe(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketDepthSubscribeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDepthSubscribeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDepthSubscribeDefaultTypeInternal() {}
  union {
    MarketDepthSubscribe _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDepthSubscribeDefaultTypeInternal _MarketDepthSubscribe_default_instance_;

inline constexpr MarketByOrderSubscribe::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : exchange_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        contract_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        market_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        subscribe_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MarketByOrderSubscribe::MarketByOrderSubscribe(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketByOrderSubscribeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketByOrderSubscribeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketByOrderSubscribeDefaultTypeInternal() {}
  union {
    MarketByOrderSubscribe _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketByOrderSubscribeDefaultTypeInternal _MarketByOrderSubscribe_default_instance_;

inline constexpr MarketSettlement::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        exchange_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        market_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        settlement_held_price_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        settlement_price_{nullptr},
        settlement_time_{nullptr},
        settlement_trade_date_{nullptr},
        settlement_held_time_{nullptr},
        settlement_held_trade_date_{nullptr},
        implied_price_{nullptr},
        implied_held_price_{nullptr},
        implied_time_{nullptr},
        open_interest_time_{nullptr},
        open_interest_trade_date_{nullptr},
        cleared_volume_time_{nullptr},
        cleared_volume_trade_date_{nullptr},
        vwap_price_{nullptr},
        vwap_time_{nullptr},
        vwap_trade_date_{nullptr},
        delayed_{false},
        open_interest_{0},
        cleared_volume_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MarketSettlement::MarketSettlement(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketSettlementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketSettlementDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketSettlementDefaultTypeInternal() {}
  union {
    MarketSettlement _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketSettlementDefaultTypeInternal _MarketSettlement_default_instance_;

inline constexpr MarketPriceLimits::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        market_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        high_price_{nullptr},
        low_price_{nullptr},
        time_{nullptr},
        delayed_{false} {}

template <typename>
PROTOBUF_CONSTEXPR MarketPriceLimits::MarketPriceLimits(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketPriceLimitsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketPriceLimitsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketPriceLimitsDefaultTypeInternal() {}
  union {
    MarketPriceLimits _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketPriceLimitsDefaultTypeInternal _MarketPriceLimits_default_instance_;

inline constexpr MarketHighLow::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        market_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        open_price_{nullptr},
        high_price_{nullptr},
        low_price_{nullptr},
        time_{nullptr},
        trade_date_{::int64_t{0}},
        delayed_{false} {}

template <typename>
PROTOBUF_CONSTEXPR MarketHighLow::MarketHighLow(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketHighLowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketHighLowDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketHighLowDefaultTypeInternal() {}
  union {
    MarketHighLow _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketHighLowDefaultTypeInternal _MarketHighLow_default_instance_;

inline constexpr MarketDetails_LegItem::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        market_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        delta_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        price_{nullptr},
        group_{0},
        volume_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MarketDetails_LegItem::MarketDetails_LegItem(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketDetails_LegItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDetails_LegItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDetails_LegItemDefaultTypeInternal() {}
  union {
    MarketDetails_LegItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDetails_LegItemDefaultTypeInternal _MarketDetails_LegItem_default_instance_;

inline constexpr MarketDepthTrade::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        order_volumes_{},
        _order_volumes_cached_byte_size_{0},
        market_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_{nullptr},
        last_trade_price_{nullptr},
        total_traded_volume_{0},
        last_trade_volume_{0},
        at_bid_or_offer_{static_cast< ::t4proto::v1::common::BidOffer >(0)},
        due_to_spread_{false},
        delayed_{false},
        total_trade_count_{0},
        mode_{static_cast< ::t4proto::v1::common::MarketMode >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR MarketDepthTrade::MarketDepthTrade(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketDepthTradeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDepthTradeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDepthTradeDefaultTypeInternal() {}
  union {
    MarketDepthTrade _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDepthTradeDefaultTypeInternal _MarketDepthTrade_default_instance_;

inline constexpr MarketDepthSubscribeReject::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        market_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_{nullptr},
        mode_{static_cast< ::t4proto::v1::common::MarketMode >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR MarketDepthSubscribeReject::MarketDepthSubscribeReject(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketDepthSubscribeRejectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDepthSubscribeRejectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDepthSubscribeRejectDefaultTypeInternal() {}
  union {
    MarketDepthSubscribeReject _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDepthSubscribeRejectDefaultTypeInternal _MarketDepthSubscribeReject_default_instance_;

inline constexpr MarketDepth_TradeData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        last_trade_price_{nullptr},
        last_trade_spd_price_{nullptr},
        time_{nullptr},
        total_traded_volume_{0},
        total_trade_count_{0},
        last_trade_volume_{0},
        last_trade_total_volume_{0},
        last_trade_spd_volume_{0},
        last_trade_spd_total_volume_{0},
        due_to_spread_{false},
        at_bid_or_offer_{static_cast< ::t4proto::v1::common::BidOffer >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR MarketDepth_TradeData::MarketDepth_TradeData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketDepth_TradeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDepth_TradeDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDepth_TradeDataDefaultTypeInternal() {}
  union {
    MarketDepth_TradeData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDepth_TradeDataDefaultTypeInternal _MarketDepth_TradeData_default_instance_;

inline constexpr MarketDepth_DepthLine::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        price_{nullptr},
        volume_{0},
        num_orders_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MarketDepth_DepthLine::MarketDepth_DepthLine(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketDepth_DepthLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDepth_DepthLineDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDepth_DepthLineDefaultTypeInternal() {}
  union {
    MarketDepth_DepthLine _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDepth_DepthLineDefaultTypeInternal _MarketDepth_DepthLine_default_instance_;

inline constexpr MarketByOrderUpdate_Update::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        price_{nullptr},
        order_id_{::uint64_t{0u}},
        update_type_{static_cast< ::t4proto::v1::market::MarketByOrderUpdate_UpdateType >(0)},
        bid_offer_{static_cast< ::t4proto::v1::common::BidOffer >(0)},
        priority_{::uint64_t{0u}},
        volume_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MarketByOrderUpdate_Update::MarketByOrderUpdate_Update(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketByOrderUpdate_UpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketByOrderUpdate_UpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketByOrderUpdate_UpdateDefaultTypeInternal() {}
  union {
    MarketByOrderUpdate_Update _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketByOrderUpdate_UpdateDefaultTypeInternal _MarketByOrderUpdate_Update_default_instance_;

inline constexpr MarketByOrderSubscribeReject::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        market_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_{nullptr},
        mode_{static_cast< ::t4proto::v1::common::MarketMode >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR MarketByOrderSubscribeReject::MarketByOrderSubscribeReject(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketByOrderSubscribeRejectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketByOrderSubscribeRejectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketByOrderSubscribeRejectDefaultTypeInternal() {}
  union {
    MarketByOrderSubscribeReject _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketByOrderSubscribeRejectDefaultTypeInternal _MarketByOrderSubscribeReject_default_instance_;

inline constexpr MarketByOrderSnapshot_Order::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        price_{nullptr},
        order_id_{::uint64_t{0u}},
        bid_offer_{static_cast< ::t4proto::v1::common::BidOffer >(0)},
        volume_{0},
        priority_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR MarketByOrderSnapshot_Order::MarketByOrderSnapshot_Order(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketByOrderSnapshot_OrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketByOrderSnapshot_OrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketByOrderSnapshot_OrderDefaultTypeInternal() {}
  union {
    MarketByOrderSnapshot_Order _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketByOrderSnapshot_OrderDefaultTypeInternal _MarketByOrderSnapshot_Order_default_instance_;

inline constexpr MarketDetails::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        legs_{},
        market_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        contract_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        market_ref_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        group_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        details_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        price_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        underlying_market_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        vtt_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        point_value_{nullptr},
        min_price_increment_{nullptr},
        activation_date_{nullptr},
        last_trading_date_{nullptr},
        last_client_update_time_{nullptr},
        min_cab_price_{nullptr},
        strike_price_{nullptr},
        expiry_date_{0},
        contract_type_{static_cast< ::t4proto::v1::common::ContractType >(0)},
        decimals_{0},
        order_types_{0},
        delist_date_{::int64_t{0}},
        exchange_delist_date_{::int64_t{0}},
        strategy_type_{static_cast< ::t4proto::v1::common::StrategyType >(0)},
        real_decimals_{0},
        display_decimals_{0},
        clearing_decimals_{0},
        strategy_ratio_{0},
        volume_increment_{0},
        disabled_{false},
        maint_intra_margin_{0},
        maint_margin_{0},
        maint_vol_scan_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MarketDetails::MarketDetails(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDetailsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDetailsDefaultTypeInternal() {}
  union {
    MarketDetails _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDetailsDefaultTypeInternal _MarketDetails_default_instance_;

inline constexpr MarketDepth::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        bids_{},
        offers_{},
        implied_bids_{},
        implied_offers_{},
        market_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_{nullptr},
        trade_data_{nullptr},
        depth_levels_{static_cast< ::t4proto::v1::common::DepthLevels >(0)},
        depth_buffer_{static_cast< ::t4proto::v1::common::DepthBuffer >(0)},
        delayed_{false},
        mode_{static_cast< ::t4proto::v1::common::MarketMode >(0)},
        flags_{static_cast< ::t4proto::v1::common::MarketFlags2 >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR MarketDepth::MarketDepth(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketDepthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDepthDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDepthDefaultTypeInternal() {}
  union {
    MarketDepth _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDepthDefaultTypeInternal _MarketDepth_default_instance_;

inline constexpr MarketByOrderUpdate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        updates_{},
        market_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_{nullptr},
        sequence_{::uint64_t{0u}},
        mode_{static_cast< ::t4proto::v1::common::MarketMode >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR MarketByOrderUpdate::MarketByOrderUpdate(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketByOrderUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketByOrderUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketByOrderUpdateDefaultTypeInternal() {}
  union {
    MarketByOrderUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketByOrderUpdateDefaultTypeInternal _MarketByOrderUpdate_default_instance_;

inline constexpr MarketByOrderSnapshot::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        orders_{},
        market_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        time_{nullptr},
        last_sequence_{::uint64_t{0u}},
        mode_{static_cast< ::t4proto::v1::common::MarketMode >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR MarketByOrderSnapshot::MarketByOrderSnapshot(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketByOrderSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketByOrderSnapshotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketByOrderSnapshotDefaultTypeInternal() {}
  union {
    MarketByOrderSnapshot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketByOrderSnapshotDefaultTypeInternal _MarketByOrderSnapshot_default_instance_;

inline constexpr MarketSnapshotMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR MarketSnapshotMessage::MarketSnapshotMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketSnapshotMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketSnapshotMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketSnapshotMessageDefaultTypeInternal() {}
  union {
    MarketSnapshotMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketSnapshotMessageDefaultTypeInternal _MarketSnapshotMessage_default_instance_;

inline constexpr MarketSnapshot::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : messages_{},
        market_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mode_{static_cast< ::t4proto::v1::common::MarketMode >(0)},
        due_to_connection_{false},
        delayed_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MarketSnapshot::MarketSnapshot(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MarketSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketSnapshotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketSnapshotDefaultTypeInternal() {}
  union {
    MarketSnapshot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketSnapshotDefaultTypeInternal _MarketSnapshot_default_instance_;
}  // namespace market
}  // namespace v1
}  // namespace t4proto
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_t4_2fv1_2fmarket_2fmarket_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_t4_2fv1_2fmarket_2fmarket_2eproto = nullptr;
const ::uint32_t
    TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthSubscribe, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthSubscribe, _impl_.exchange_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthSubscribe, _impl_.contract_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthSubscribe, _impl_.market_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthSubscribe, _impl_.buffer_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthSubscribe, _impl_.depth_levels_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthSubscribeReject, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthSubscribeReject, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthSubscribeReject, _impl_.market_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthSubscribeReject, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthSubscribeReject, _impl_.mode_),
        ~0u,
        0,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSubscribe, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSubscribe, _impl_.exchange_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSubscribe, _impl_.contract_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSubscribe, _impl_.market_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSubscribe, _impl_.subscribe_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSubscribeReject, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSubscribeReject, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSubscribeReject, _impl_.market_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSubscribeReject, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSubscribeReject, _impl_.mode_),
        ~0u,
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails_LegItem, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails_LegItem, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails_LegItem, _impl_.market_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails_LegItem, _impl_.group_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails_LegItem, _impl_.volume_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails_LegItem, _impl_.delta_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails_LegItem, _impl_.price_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.market_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.exchange_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.contract_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.expiry_date_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.contract_type_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.decimals_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.point_value_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.min_price_increment_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.order_types_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.activation_date_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.last_trading_date_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.last_client_update_time_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.delist_date_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.exchange_delist_date_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.market_ref_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.group_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.legs_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.details_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.strategy_type_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.price_code_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.real_decimals_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.display_decimals_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.clearing_decimals_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.min_cab_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.strike_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.volume_increment_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.strategy_ratio_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.disabled_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.underlying_market_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.vtt_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.maint_intra_margin_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.maint_margin_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.maint_vol_scan_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        ~0u,
        2,
        3,
        4,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        5,
        6,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_DepthLine, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_DepthLine, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_DepthLine, _impl_.price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_DepthLine, _impl_.volume_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_DepthLine, _impl_.num_orders_),
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.total_traded_volume_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.total_trade_count_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.last_trade_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.last_trade_volume_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.last_trade_total_volume_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.last_trade_spd_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.last_trade_spd_volume_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.last_trade_spd_total_volume_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.due_to_spread_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.at_bid_or_offer_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.time_),
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        2,
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.market_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.depth_levels_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.depth_buffer_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.delayed_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.bids_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.offers_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.implied_bids_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.implied_offers_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.mode_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.flags_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.trade_data_),
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        1,
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.market_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.total_traded_volume_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.last_trade_volume_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.due_to_spread_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.at_bid_or_offer_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.delayed_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.order_volumes_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.total_trade_count_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.last_trade_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.mode_),
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        1,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketHighLow, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketHighLow, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketHighLow, _impl_.market_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketHighLow, _impl_.open_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketHighLow, _impl_.high_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketHighLow, _impl_.low_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketHighLow, _impl_.trade_date_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketHighLow, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketHighLow, _impl_.delayed_),
        ~0u,
        0,
        1,
        2,
        ~0u,
        3,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketPriceLimits, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketPriceLimits, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketPriceLimits, _impl_.market_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketPriceLimits, _impl_.high_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketPriceLimits, _impl_.low_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketPriceLimits, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketPriceLimits, _impl_.delayed_),
        ~0u,
        0,
        1,
        2,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.exchange_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.market_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.delayed_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.settlement_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.settlement_time_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.settlement_trade_date_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.settlement_held_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.settlement_held_time_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.settlement_held_trade_date_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.implied_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.implied_held_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.implied_time_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.open_interest_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.open_interest_time_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.open_interest_trade_date_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.cleared_volume_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.cleared_volume_time_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.cleared_volume_trade_date_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.vwap_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.vwap_time_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.vwap_trade_date_),
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        2,
        ~0u,
        3,
        4,
        5,
        6,
        7,
        ~0u,
        8,
        9,
        ~0u,
        10,
        11,
        12,
        13,
        14,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSnapshotMessage, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSnapshotMessage, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSnapshotMessage, _impl_.payload_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSnapshot, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSnapshot, _impl_.market_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSnapshot, _impl_.mode_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSnapshot, _impl_.due_to_connection_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSnapshot, _impl_.delayed_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSnapshot, _impl_.messages_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot_Order, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot_Order, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot_Order, _impl_.order_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot_Order, _impl_.bid_offer_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot_Order, _impl_.price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot_Order, _impl_.volume_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot_Order, _impl_.priority_),
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot, _impl_.market_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot, _impl_.mode_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot, _impl_.last_sequence_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot, _impl_.orders_),
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate_Update, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate_Update, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate_Update, _impl_.update_type_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate_Update, _impl_.order_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate_Update, _impl_.bid_offer_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate_Update, _impl_.price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate_Update, _impl_.volume_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate_Update, _impl_.priority_),
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate, _impl_.market_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate, _impl_.mode_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate, _impl_.sequence_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate, _impl_.updates_),
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::t4proto::v1::market::MarketDepthSubscribe)},
        {13, 24, -1, sizeof(::t4proto::v1::market::MarketDepthSubscribeReject)},
        {27, -1, -1, sizeof(::t4proto::v1::market::MarketByOrderSubscribe)},
        {39, 50, -1, sizeof(::t4proto::v1::market::MarketByOrderSubscribeReject)},
        {53, 66, -1, sizeof(::t4proto::v1::market::MarketDetails_LegItem)},
        {71, 112, -1, sizeof(::t4proto::v1::market::MarketDetails)},
        {145, 156, -1, sizeof(::t4proto::v1::market::MarketDepth_DepthLine)},
        {159, 178, -1, sizeof(::t4proto::v1::market::MarketDepth_TradeData)},
        {189, 209, -1, sizeof(::t4proto::v1::market::MarketDepth)},
        {221, 240, -1, sizeof(::t4proto::v1::market::MarketDepthTrade)},
        {251, 266, -1, sizeof(::t4proto::v1::market::MarketHighLow)},
        {273, 286, -1, sizeof(::t4proto::v1::market::MarketPriceLimits)},
        {291, 320, -1, sizeof(::t4proto::v1::market::MarketSettlement)},
        {341, -1, -1, sizeof(::t4proto::v1::market::MarketSnapshotMessage)},
        {355, -1, -1, sizeof(::t4proto::v1::market::MarketSnapshot)},
        {368, 381, -1, sizeof(::t4proto::v1::market::MarketByOrderSnapshot_Order)},
        {386, 399, -1, sizeof(::t4proto::v1::market::MarketByOrderSnapshot)},
        {404, 418, -1, sizeof(::t4proto::v1::market::MarketByOrderUpdate_Update)},
        {424, 437, -1, sizeof(::t4proto::v1::market::MarketByOrderUpdate)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::t4proto::v1::market::_MarketDepthSubscribe_default_instance_._instance,
    &::t4proto::v1::market::_MarketDepthSubscribeReject_default_instance_._instance,
    &::t4proto::v1::market::_MarketByOrderSubscribe_default_instance_._instance,
    &::t4proto::v1::market::_MarketByOrderSubscribeReject_default_instance_._instance,
    &::t4proto::v1::market::_MarketDetails_LegItem_default_instance_._instance,
    &::t4proto::v1::market::_MarketDetails_default_instance_._instance,
    &::t4proto::v1::market::_MarketDepth_DepthLine_default_instance_._instance,
    &::t4proto::v1::market::_MarketDepth_TradeData_default_instance_._instance,
    &::t4proto::v1::market::_MarketDepth_default_instance_._instance,
    &::t4proto::v1::market::_MarketDepthTrade_default_instance_._instance,
    &::t4proto::v1::market::_MarketHighLow_default_instance_._instance,
    &::t4proto::v1::market::_MarketPriceLimits_default_instance_._instance,
    &::t4proto::v1::market::_MarketSettlement_default_instance_._instance,
    &::t4proto::v1::market::_MarketSnapshotMessage_default_instance_._instance,
    &::t4proto::v1::market::_MarketSnapshot_default_instance_._instance,
    &::t4proto::v1::market::_MarketByOrderSnapshot_Order_default_instance_._instance,
    &::t4proto::v1::market::_MarketByOrderSnapshot_default_instance_._instance,
    &::t4proto::v1::market::_MarketByOrderUpdate_Update_default_instance_._instance,
    &::t4proto::v1::market::_MarketByOrderUpdate_default_instance_._instance,
};
const char descriptor_table_protodef_t4_2fv1_2fmarket_2fmarket_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\031t4/v1/market/market.proto\022\021t4proto.v1."
    "market\032\037google/protobuf/timestamp.proto\032"
    "\030t4/v1/common/enums.proto\032\030t4/v1/common/"
    "price.proto\"\271\001\n\024MarketDepthSubscribe\022\023\n\013"
    "exchange_id\030\001 \001(\t\022\023\n\013contract_id\030\002 \001(\t\022\021"
    "\n\tmarket_id\030\003 \001(\t\022.\n\006buffer\030\004 \001(\0162\036.t4pr"
    "oto.v1.common.DepthBuffer\0224\n\014depth_level"
    "s\030\005 \001(\0162\036.t4proto.v1.common.DepthLevels\""
    "\206\001\n\032MarketDepthSubscribeReject\022\021\n\tmarket"
    "_id\030\001 \001(\t\022(\n\004time\030\002 \001(\0132\032.google.protobu"
    "f.Timestamp\022+\n\004mode\030\003 \001(\0162\035.t4proto.v1.c"
    "ommon.MarketMode\"h\n\026MarketByOrderSubscri"
    "be\022\023\n\013exchange_id\030\001 \001(\t\022\023\n\013contract_id\030\002"
    " \001(\t\022\021\n\tmarket_id\030\003 \001(\t\022\021\n\tsubscribe\030\004 \001"
    "(\010\"\210\001\n\034MarketByOrderSubscribeReject\022\021\n\tm"
    "arket_id\030\001 \001(\t\022(\n\004time\030\002 \001(\0132\032.google.pr"
    "otobuf.Timestamp\022+\n\004mode\030\003 \001(\0162\035.t4proto"
    ".v1.common.MarketMode\"\304\t\n\rMarketDetails\022"
    "\021\n\tmarket_id\030\001 \001(\t\022\023\n\013exchange_id\030\002 \001(\t\022"
    "\023\n\013contract_id\030\003 \001(\t\022\023\n\013expiry_date\030\004 \001("
    "\005\0226\n\rcontract_type\030\005 \001(\0162\037.t4proto.v1.co"
    "mmon.ContractType\022\020\n\010decimals\030\006 \001(\005\022/\n\013p"
    "oint_value\030\007 \001(\0132\032.t4proto.v1.common.Dec"
    "imal\0225\n\023min_price_increment\030\010 \001(\0132\030.t4pr"
    "oto.v1.common.Price\022\023\n\013order_types\030\t \001(\005"
    "\0223\n\017activation_date\030\n \001(\0132\032.google.proto"
    "buf.Timestamp\0225\n\021last_trading_date\030\013 \001(\013"
    "2\032.google.protobuf.Timestamp\022;\n\027last_cli"
    "ent_update_time\030\014 \001(\0132\032.google.protobuf."
    "Timestamp\022\023\n\013delist_date\030\r \001(\003\022\034\n\024exchan"
    "ge_delist_date\030\016 \001(\003\022\022\n\nmarket_ref\030\017 \001(\t"
    "\022\r\n\005group\030\020 \001(\t\0226\n\004legs\030\021 \003(\0132(.t4proto."
    "v1.market.MarketDetails.LegItem\022\017\n\007detai"
    "ls\030\022 \001(\t\0226\n\rstrategy_type\030\023 \001(\0162\037.t4prot"
    "o.v1.common.StrategyType\022\022\n\nprice_code\030\024"
    " \001(\t\022\025\n\rreal_decimals\030\025 \001(\005\022\030\n\020display_d"
    "ecimals\030\026 \001(\005\022\031\n\021clearing_decimals\030\027 \001(\005"
    "\0224\n\rmin_cab_price\030\030 \001(\0132\030.t4proto.v1.com"
    "mon.PriceH\000\210\001\001\0223\n\014strike_price\030\031 \001(\0132\030.t"
    "4proto.v1.common.PriceH\001\210\001\001\022\030\n\020volume_in"
    "crement\030\032 \001(\005\022\026\n\016strategy_ratio\030\033 \001(\001\022\020\n"
    "\010disabled\030\034 \001(\010\022\034\n\024underlying_market_id\030"
    "\035 \001(\t\022\013\n\003vtt\030\036 \001(\t\022\032\n\022maint_intra_margin"
    "\030\037 \001(\001\022\024\n\014maint_margin\030  \001(\001\022\026\n\016maint_vo"
    "l_scan\030! \001(\001\032s\n\007LegItem\022\021\n\tmarket_id\030\001 \001"
    "(\t\022\r\n\005group\030\002 \001(\005\022\016\n\006volume\030\003 \001(\005\022\r\n\005del"
    "ta\030\004 \001(\t\022\'\n\005price\030\005 \001(\0132\030.t4proto.v1.com"
    "mon.PriceB\020\n\016_min_cab_priceB\017\n\r_strike_p"
    "rice\"\331\010\n\013MarketDepth\022\021\n\tmarket_id\030\001 \001(\t\022"
    "4\n\014depth_levels\030\002 \001(\0162\036.t4proto.v1.commo"
    "n.DepthLevels\0224\n\014depth_buffer\030\003 \001(\0162\036.t4"
    "proto.v1.common.DepthBuffer\022(\n\004time\030\004 \001("
    "\0132\032.google.protobuf.Timestamp\022\017\n\007delayed"
    "\030\005 \001(\010\0226\n\004bids\030\006 \003(\0132(.t4proto.v1.market"
    ".MarketDepth.DepthLine\0228\n\006offers\030\007 \003(\0132("
    ".t4proto.v1.market.MarketDepth.DepthLine"
    "\022>\n\014implied_bids\030\010 \003(\0132(.t4proto.v1.mark"
    "et.MarketDepth.DepthLine\022@\n\016implied_offe"
    "rs\030\t \003(\0132(.t4proto.v1.market.MarketDepth"
    ".DepthLine\022+\n\004mode\030\n \001(\0162\035.t4proto.v1.co"
    "mmon.MarketMode\022.\n\005flags\030\013 \001(\0162\037.t4proto"
    ".v1.common.MarketFlags2\022<\n\ntrade_data\030\014 "
    "\001(\0132(.t4proto.v1.market.MarketDepth.Trad"
    "eData\032X\n\tDepthLine\022\'\n\005price\030\001 \001(\0132\030.t4pr"
    "oto.v1.common.Price\022\016\n\006volume\030\002 \001(\005\022\022\n\nn"
    "um_orders\030\003 \001(\005\032\246\003\n\tTradeData\022\033\n\023total_t"
    "raded_volume\030\001 \001(\005\022\031\n\021total_trade_count\030"
    "\002 \001(\005\0222\n\020last_trade_price\030\003 \001(\0132\030.t4prot"
    "o.v1.common.Price\022\031\n\021last_trade_volume\030\004"
    " \001(\005\022\037\n\027last_trade_total_volume\030\005 \001(\005\0226\n"
    "\024last_trade_spd_price\030\006 \001(\0132\030.t4proto.v1"
    ".common.Price\022\035\n\025last_trade_spd_volume\030\007"
    " \001(\005\022#\n\033last_trade_spd_total_volume\030\010 \001("
    "\005\022\025\n\rdue_to_spread\030\t \001(\010\0224\n\017at_bid_or_of"
    "fer\030\n \001(\0162\033.t4proto.v1.common.BidOffer\022("
    "\n\004time\030\013 \001(\0132\032.google.protobuf.Timestamp"
    "\"\370\002\n\020MarketDepthTrade\022\021\n\tmarket_id\030\001 \001(\t"
    "\022(\n\004time\030\002 \001(\0132\032.google.protobuf.Timesta"
    "mp\022\033\n\023total_traded_volume\030\003 \001(\005\022\031\n\021last_"
    "trade_volume\030\004 \001(\005\022\025\n\rdue_to_spread\030\005 \001("
    "\010\0224\n\017at_bid_or_offer\030\006 \001(\0162\033.t4proto.v1."
    "common.BidOffer\022\017\n\007delayed\030\007 \001(\010\022\025\n\rorde"
    "r_volumes\030\010 \003(\005\022\031\n\021total_trade_count\030\t \001"
    "(\005\0222\n\020last_trade_price\030\n \001(\0132\030.t4proto.v"
    "1.common.Price\022+\n\004mode\030\013 \001(\0162\035.t4proto.v"
    "1.common.MarketMode\"\372\001\n\rMarketHighLow\022\021\n"
    "\tmarket_id\030\001 \001(\t\022,\n\nopen_price\030\002 \001(\0132\030.t"
    "4proto.v1.common.Price\022,\n\nhigh_price\030\003 \001"
    "(\0132\030.t4proto.v1.common.Price\022+\n\tlow_pric"
    "e\030\004 \001(\0132\030.t4proto.v1.common.Price\022\022\n\ntra"
    "de_date\030\005 \001(\003\022(\n\004time\030\006 \001(\0132\032.google.pro"
    "tobuf.Timestamp\022\017\n\007delayed\030\007 \001(\010\"\274\001\n\021Mar"
    "ketPriceLimits\022\021\n\tmarket_id\030\001 \001(\t\022,\n\nhig"
    "h_price\030\002 \001(\0132\030.t4proto.v1.common.Price\022"
    "+\n\tlow_price\030\003 \001(\0132\030.t4proto.v1.common.P"
    "rice\022(\n\004time\030\004 \001(\0132\032.google.protobuf.Tim"
    "estamp\022\017\n\007delayed\030\005 \001(\010\"\320\007\n\020MarketSettle"
    "ment\022\023\n\013exchange_id\030\001 \001(\t\022\021\n\tmarket_id\030\002"
    " \001(\t\022\017\n\007delayed\030\003 \001(\010\0222\n\020settlement_pric"
    "e\030\004 \001(\0132\030.t4proto.v1.common.Price\0223\n\017set"
    "tlement_time\030\005 \001(\0132\032.google.protobuf.Tim"
    "estamp\0229\n\025settlement_trade_date\030\006 \001(\0132\032."
    "google.protobuf.Timestamp\022\035\n\025settlement_"
    "held_price\030\007 \001(\t\0228\n\024settlement_held_time"
    "\030\010 \001(\0132\032.google.protobuf.Timestamp\022>\n\032se"
    "ttlement_held_trade_date\030\t \001(\0132\032.google."
    "protobuf.Timestamp\022/\n\rimplied_price\030\n \001("
    "\0132\030.t4proto.v1.common.Price\0224\n\022implied_h"
    "eld_price\030\013 \001(\0132\030.t4proto.v1.common.Pric"
    "e\0220\n\014implied_time\030\014 \001(\0132\032.google.protobu"
    "f.Timestamp\022\025\n\ropen_interest\030\r \001(\005\0226\n\022op"
    "en_interest_time\030\016 \001(\0132\032.google.protobuf"
    ".Timestamp\022<\n\030open_interest_trade_date\030\017"
    " \001(\0132\032.google.protobuf.Timestamp\022\026\n\016clea"
    "red_volume\030\020 \001(\005\0227\n\023cleared_volume_time\030"
    "\021 \001(\0132\032.google.protobuf.Timestamp\022=\n\031cle"
    "ared_volume_trade_date\030\022 \001(\0132\032.google.pr"
    "otobuf.Timestamp\022,\n\nvwap_price\030\023 \001(\0132\030.t"
    "4proto.v1.common.Price\022-\n\tvwap_time\030\024 \001("
    "\0132\032.google.protobuf.Timestamp\0223\n\017vwap_tr"
    "ade_date\030\025 \001(\0132\032.google.protobuf.Timesta"
    "mp\"\341\002\n\025MarketSnapshotMessage\0226\n\014market_d"
    "epth\030\003 \001(\0132\036.t4proto.v1.market.MarketDep"
    "thH\000\022A\n\022market_depth_trade\030\004 \001(\0132#.t4pro"
    "to.v1.market.MarketDepthTradeH\000\022;\n\017marke"
    "t_high_low\030\005 \001(\0132 .t4proto.v1.market.Mar"
    "ketHighLowH\000\022C\n\023market_price_limits\030\006 \001("
    "\0132$.t4proto.v1.market.MarketPriceLimitsH"
    "\000\022@\n\021market_settlement\030\007 \001(\0132#.t4proto.v"
    "1.market.MarketSettlementH\000B\t\n\007payload\"\270"
    "\001\n\016MarketSnapshot\022\021\n\tmarket_id\030\001 \001(\t\022+\n\004"
    "mode\030\002 \001(\0162\035.t4proto.v1.common.MarketMod"
    "e\022\031\n\021due_to_connection\030\003 \001(\010\022\017\n\007delayed\030"
    "\004 \001(\010\022:\n\010messages\030\005 \003(\0132(.t4proto.v1.mar"
    "ket.MarketSnapshotMessage\"\357\002\n\025MarketByOr"
    "derSnapshot\022\021\n\tmarket_id\030\001 \001(\t\022(\n\004time\030\002"
    " \001(\0132\032.google.protobuf.Timestamp\022+\n\004mode"
    "\030\003 \001(\0162\035.t4proto.v1.common.MarketMode\022\025\n"
    "\rlast_sequence\030\004 \001(\004\022>\n\006orders\030\005 \003(\0132..t"
    "4proto.v1.market.MarketByOrderSnapshot.O"
    "rder\032\224\001\n\005Order\022\020\n\010order_id\030\001 \001(\004\022.\n\tbid_"
    "offer\030\002 \001(\0162\033.t4proto.v1.common.BidOffer"
    "\022\'\n\005price\030\003 \001(\0132\030.t4proto.v1.common.Pric"
    "e\022\016\n\006volume\030\004 \001(\005\022\020\n\010priority\030\005 \001(\004\"\215\004\n\023"
    "MarketByOrderUpdate\022\021\n\tmarket_id\030\001 \001(\t\022("
    "\n\004time\030\002 \001(\0132\032.google.protobuf.Timestamp"
    "\022+\n\004mode\030\003 \001(\0162\035.t4proto.v1.common.Marke"
    "tMode\022\020\n\010sequence\030\004 \001(\004\022>\n\007updates\030\005 \003(\013"
    "2-.t4proto.v1.market.MarketByOrderUpdate"
    ".Update\032\335\001\n\006Update\022F\n\013update_type\030\001 \001(\0162"
    "1.t4proto.v1.market.MarketByOrderUpdate."
    "UpdateType\022\020\n\010order_id\030\002 \001(\004\022.\n\tbid_offe"
    "r\030\003 \001(\0162\033.t4proto.v1.common.BidOffer\022\'\n\005"
    "price\030\004 \001(\0132\030.t4proto.v1.common.Price\022\016\n"
    "\006volume\030\005 \001(\005\022\020\n\010priority\030\006 \001(\004\"Z\n\nUpdat"
    "eType\022\035\n\031UPDATE_TYPE_ADD_OR_UPDATE\020\000\022\026\n\022"
    "UPDATE_TYPE_DELETE\020\001\022\025\n\021UPDATE_TYPE_CLEA"
    "R\020\002b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_deps[3] =
    {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_t4_2fv1_2fcommon_2fenums_2eproto,
        &::descriptor_table_t4_2fv1_2fcommon_2fprice_2eproto,
};
static ::absl::once_flag descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto = {
    false,
    false,
    6291,
    descriptor_table_protodef_t4_2fv1_2fmarket_2fmarket_2eproto,
    "t4/v1/market/market.proto",
    &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once,
    descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_deps,
    3,
    19,
    schemas,
    file_default_instances,
    TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto::offsets,
    file_level_enum_descriptors_t4_2fv1_2fmarket_2fmarket_2eproto,
    file_level_service_descriptors_t4_2fv1_2fmarket_2fmarket_2eproto,
};
namespace t4proto {
namespace v1 {
namespace market {
const ::google::protobuf::EnumDescriptor* MarketByOrderUpdate_UpdateType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto);
  return file_level_enum_descriptors_t4_2fv1_2fmarket_2fmarket_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t MarketByOrderUpdate_UpdateType_internal_data_[] = {
    196608u, 0u, };
bool MarketByOrderUpdate_UpdateType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr MarketByOrderUpdate_UpdateType MarketByOrderUpdate::UPDATE_TYPE_ADD_OR_UPDATE;
constexpr MarketByOrderUpdate_UpdateType MarketByOrderUpdate::UPDATE_TYPE_DELETE;
constexpr MarketByOrderUpdate_UpdateType MarketByOrderUpdate::UPDATE_TYPE_CLEAR;
constexpr MarketByOrderUpdate_UpdateType MarketByOrderUpdate::UpdateType_MIN;
constexpr MarketByOrderUpdate_UpdateType MarketByOrderUpdate::UpdateType_MAX;
constexpr int MarketByOrderUpdate::UpdateType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class MarketDepthSubscribe::_Internal {
 public:
};

MarketDepthSubscribe::MarketDepthSubscribe(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketDepthSubscribe)
}
inline PROTOBUF_NDEBUG_INLINE MarketDepthSubscribe::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::t4proto::v1::market::MarketDepthSubscribe& from_msg)
      : exchange_id_(arena, from.exchange_id_),
        contract_id_(arena, from.contract_id_),
        market_id_(arena, from.market_id_),
        _cached_size_{0} {}

MarketDepthSubscribe::MarketDepthSubscribe(
    ::google::protobuf::Arena* arena,
    const MarketDepthSubscribe& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketDepthSubscribe* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, buffer_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, buffer_),
           offsetof(Impl_, depth_levels_) -
               offsetof(Impl_, buffer_) +
               sizeof(Impl_::depth_levels_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketDepthSubscribe)
}
inline PROTOBUF_NDEBUG_INLINE MarketDepthSubscribe::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : exchange_id_(arena),
        contract_id_(arena),
        market_id_(arena),
        _cached_size_{0} {}

inline void MarketDepthSubscribe::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, buffer_),
           0,
           offsetof(Impl_, depth_levels_) -
               offsetof(Impl_, buffer_) +
               sizeof(Impl_::depth_levels_));
}
MarketDepthSubscribe::~MarketDepthSubscribe() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketDepthSubscribe)
  SharedDtor(*this);
}
inline void MarketDepthSubscribe::SharedDtor(MessageLite& self) {
  MarketDepthSubscribe& this_ = static_cast<MarketDepthSubscribe&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.exchange_id_.Destroy();
  this_._impl_.contract_id_.Destroy();
  this_._impl_.market_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* MarketDepthSubscribe::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarketDepthSubscribe(arena);
}
constexpr auto MarketDepthSubscribe::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MarketDepthSubscribe),
                                            alignof(MarketDepthSubscribe));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarketDepthSubscribe::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarketDepthSubscribe_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarketDepthSubscribe::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarketDepthSubscribe>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarketDepthSubscribe::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarketDepthSubscribe>(), &MarketDepthSubscribe::ByteSizeLong,
            &MarketDepthSubscribe::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarketDepthSubscribe, _impl_._cached_size_),
        false,
    },
    &MarketDepthSubscribe::kDescriptorMethods,
    &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarketDepthSubscribe::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 78, 2> MarketDepthSubscribe::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketDepthSubscribe>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string exchange_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepthSubscribe, _impl_.exchange_id_)}},
    // string contract_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepthSubscribe, _impl_.contract_id_)}},
    // string market_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepthSubscribe, _impl_.market_id_)}},
    // .t4proto.v1.common.DepthBuffer buffer = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDepthSubscribe, _impl_.buffer_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepthSubscribe, _impl_.buffer_)}},
    // .t4proto.v1.common.DepthLevels depth_levels = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDepthSubscribe, _impl_.depth_levels_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepthSubscribe, _impl_.depth_levels_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string exchange_id = 1;
    {PROTOBUF_FIELD_OFFSET(MarketDepthSubscribe, _impl_.exchange_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string contract_id = 2;
    {PROTOBUF_FIELD_OFFSET(MarketDepthSubscribe, _impl_.contract_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string market_id = 3;
    {PROTOBUF_FIELD_OFFSET(MarketDepthSubscribe, _impl_.market_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .t4proto.v1.common.DepthBuffer buffer = 4;
    {PROTOBUF_FIELD_OFFSET(MarketDepthSubscribe, _impl_.buffer_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .t4proto.v1.common.DepthLevels depth_levels = 5;
    {PROTOBUF_FIELD_OFFSET(MarketDepthSubscribe, _impl_.depth_levels_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\46\13\13\11\0\0\0\0"
    "t4proto.v1.market.MarketDepthSubscribe"
    "exchange_id"
    "contract_id"
    "market_id"
  }},
};

PROTOBUF_NOINLINE void MarketDepthSubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketDepthSubscribe)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exchange_id_.ClearToEmpty();
  _impl_.contract_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  ::memset(&_impl_.buffer_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.depth_levels_) -
      reinterpret_cast<char*>(&_impl_.buffer_)) + sizeof(_impl_.depth_levels_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarketDepthSubscribe::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarketDepthSubscribe& this_ = static_cast<const MarketDepthSubscribe&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarketDepthSubscribe::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarketDepthSubscribe& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketDepthSubscribe)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string exchange_id = 1;
          if (!this_._internal_exchange_id().empty()) {
            const std::string& _s = this_._internal_exchange_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDepthSubscribe.exchange_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string contract_id = 2;
          if (!this_._internal_contract_id().empty()) {
            const std::string& _s = this_._internal_contract_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDepthSubscribe.contract_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string market_id = 3;
          if (!this_._internal_market_id().empty()) {
            const std::string& _s = this_._internal_market_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDepthSubscribe.market_id");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // .t4proto.v1.common.DepthBuffer buffer = 4;
          if (this_._internal_buffer() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_buffer(), target);
          }

          // .t4proto.v1.common.DepthLevels depth_levels = 5;
          if (this_._internal_depth_levels() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                5, this_._internal_depth_levels(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketDepthSubscribe)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarketDepthSubscribe::ByteSizeLong(const MessageLite& base) {
          const MarketDepthSubscribe& this_ = static_cast<const MarketDepthSubscribe&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarketDepthSubscribe::ByteSizeLong() const {
          const MarketDepthSubscribe& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketDepthSubscribe)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string exchange_id = 1;
            if (!this_._internal_exchange_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_exchange_id());
            }
            // string contract_id = 2;
            if (!this_._internal_contract_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_contract_id());
            }
            // string market_id = 3;
            if (!this_._internal_market_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_market_id());
            }
            // .t4proto.v1.common.DepthBuffer buffer = 4;
            if (this_._internal_buffer() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_buffer());
            }
            // .t4proto.v1.common.DepthLevels depth_levels = 5;
            if (this_._internal_depth_levels() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_depth_levels());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarketDepthSubscribe::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketDepthSubscribe*>(&to_msg);
  auto& from = static_cast<const MarketDepthSubscribe&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketDepthSubscribe)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_exchange_id().empty()) {
    _this->_internal_set_exchange_id(from._internal_exchange_id());
  }
  if (!from._internal_contract_id().empty()) {
    _this->_internal_set_contract_id(from._internal_contract_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_buffer() != 0) {
    _this->_impl_.buffer_ = from._impl_.buffer_;
  }
  if (from._internal_depth_levels() != 0) {
    _this->_impl_.depth_levels_ = from._impl_.depth_levels_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDepthSubscribe::CopyFrom(const MarketDepthSubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketDepthSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketDepthSubscribe::InternalSwap(MarketDepthSubscribe* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_id_, &other->_impl_.exchange_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_id_, &other->_impl_.contract_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, &other->_impl_.market_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDepthSubscribe, _impl_.depth_levels_)
      + sizeof(MarketDepthSubscribe::_impl_.depth_levels_)
      - PROTOBUF_FIELD_OFFSET(MarketDepthSubscribe, _impl_.buffer_)>(
          reinterpret_cast<char*>(&_impl_.buffer_),
          reinterpret_cast<char*>(&other->_impl_.buffer_));
}

::google::protobuf::Metadata MarketDepthSubscribe::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketDepthSubscribeReject::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MarketDepthSubscribeReject>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MarketDepthSubscribeReject, _impl_._has_bits_);
};

void MarketDepthSubscribeReject::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MarketDepthSubscribeReject::MarketDepthSubscribeReject(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketDepthSubscribeReject)
}
inline PROTOBUF_NDEBUG_INLINE MarketDepthSubscribeReject::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::t4proto::v1::market::MarketDepthSubscribeReject& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        market_id_(arena, from.market_id_) {}

MarketDepthSubscribeReject::MarketDepthSubscribeReject(
    ::google::protobuf::Arena* arena,
    const MarketDepthSubscribeReject& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketDepthSubscribeReject* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.time_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.time_)
                        : nullptr;
  _impl_.mode_ = from._impl_.mode_;

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketDepthSubscribeReject)
}
inline PROTOBUF_NDEBUG_INLINE MarketDepthSubscribeReject::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        market_id_(arena) {}

inline void MarketDepthSubscribeReject::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_),
           0,
           offsetof(Impl_, mode_) -
               offsetof(Impl_, time_) +
               sizeof(Impl_::mode_));
}
MarketDepthSubscribeReject::~MarketDepthSubscribeReject() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketDepthSubscribeReject)
  SharedDtor(*this);
}
inline void MarketDepthSubscribeReject::SharedDtor(MessageLite& self) {
  MarketDepthSubscribeReject& this_ = static_cast<MarketDepthSubscribeReject&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.market_id_.Destroy();
  delete this_._impl_.time_;
  this_._impl_.~Impl_();
}

inline void* MarketDepthSubscribeReject::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarketDepthSubscribeReject(arena);
}
constexpr auto MarketDepthSubscribeReject::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MarketDepthSubscribeReject),
                                            alignof(MarketDepthSubscribeReject));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarketDepthSubscribeReject::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarketDepthSubscribeReject_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarketDepthSubscribeReject::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarketDepthSubscribeReject>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarketDepthSubscribeReject::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarketDepthSubscribeReject>(), &MarketDepthSubscribeReject::ByteSizeLong,
            &MarketDepthSubscribeReject::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarketDepthSubscribeReject, _impl_._cached_size_),
        false,
    },
    &MarketDepthSubscribeReject::kDescriptorMethods,
    &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarketDepthSubscribeReject::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 62, 2> MarketDepthSubscribeReject::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarketDepthSubscribeReject, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketDepthSubscribeReject>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string market_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepthSubscribeReject, _impl_.market_id_)}},
    // .google.protobuf.Timestamp time = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MarketDepthSubscribeReject, _impl_.time_)}},
    // .t4proto.v1.common.MarketMode mode = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDepthSubscribeReject, _impl_.mode_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepthSubscribeReject, _impl_.mode_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string market_id = 1;
    {PROTOBUF_FIELD_OFFSET(MarketDepthSubscribeReject, _impl_.market_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp time = 2;
    {PROTOBUF_FIELD_OFFSET(MarketDepthSubscribeReject, _impl_.time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.common.MarketMode mode = 3;
    {PROTOBUF_FIELD_OFFSET(MarketDepthSubscribeReject, _impl_.mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\54\11\0\0\0\0\0\0"
    "t4proto.v1.market.MarketDepthSubscribeReject"
    "market_id"
  }},
};

PROTOBUF_NOINLINE void MarketDepthSubscribeReject::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketDepthSubscribeReject)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.time_ != nullptr);
    _impl_.time_->Clear();
  }
  _impl_.mode_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarketDepthSubscribeReject::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarketDepthSubscribeReject& this_ = static_cast<const MarketDepthSubscribeReject&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarketDepthSubscribeReject::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarketDepthSubscribeReject& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketDepthSubscribeReject)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string market_id = 1;
          if (!this_._internal_market_id().empty()) {
            const std::string& _s = this_._internal_market_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDepthSubscribeReject.market_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp time = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.time_, this_._impl_.time_->GetCachedSize(), target,
                stream);
          }

          // .t4proto.v1.common.MarketMode mode = 3;
          if (this_._internal_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_mode(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketDepthSubscribeReject)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarketDepthSubscribeReject::ByteSizeLong(const MessageLite& base) {
          const MarketDepthSubscribeReject& this_ = static_cast<const MarketDepthSubscribeReject&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarketDepthSubscribeReject::ByteSizeLong() const {
          const MarketDepthSubscribeReject& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketDepthSubscribeReject)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string market_id = 1;
            if (!this_._internal_market_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_market_id());
            }
          }
           {
            // .google.protobuf.Timestamp time = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.time_);
            }
          }
           {
            // .t4proto.v1.common.MarketMode mode = 3;
            if (this_._internal_mode() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_mode());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarketDepthSubscribeReject::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketDepthSubscribeReject*>(&to_msg);
  auto& from = static_cast<const MarketDepthSubscribeReject&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketDepthSubscribeReject)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.time_ != nullptr);
    if (_this->_impl_.time_ == nullptr) {
      _this->_impl_.time_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.time_);
    } else {
      _this->_impl_.time_->MergeFrom(*from._impl_.time_);
    }
  }
  if (from._internal_mode() != 0) {
    _this->_impl_.mode_ = from._impl_.mode_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDepthSubscribeReject::CopyFrom(const MarketDepthSubscribeReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketDepthSubscribeReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketDepthSubscribeReject::InternalSwap(MarketDepthSubscribeReject* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, &other->_impl_.market_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDepthSubscribeReject, _impl_.mode_)
      + sizeof(MarketDepthSubscribeReject::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(MarketDepthSubscribeReject, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::google::protobuf::Metadata MarketDepthSubscribeReject::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketByOrderSubscribe::_Internal {
 public:
};

MarketByOrderSubscribe::MarketByOrderSubscribe(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketByOrderSubscribe)
}
inline PROTOBUF_NDEBUG_INLINE MarketByOrderSubscribe::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::t4proto::v1::market::MarketByOrderSubscribe& from_msg)
      : exchange_id_(arena, from.exchange_id_),
        contract_id_(arena, from.contract_id_),
        market_id_(arena, from.market_id_),
        _cached_size_{0} {}

MarketByOrderSubscribe::MarketByOrderSubscribe(
    ::google::protobuf::Arena* arena,
    const MarketByOrderSubscribe& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketByOrderSubscribe* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.subscribe_ = from._impl_.subscribe_;

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketByOrderSubscribe)
}
inline PROTOBUF_NDEBUG_INLINE MarketByOrderSubscribe::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : exchange_id_(arena),
        contract_id_(arena),
        market_id_(arena),
        _cached_size_{0} {}

inline void MarketByOrderSubscribe::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.subscribe_ = {};
}
MarketByOrderSubscribe::~MarketByOrderSubscribe() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketByOrderSubscribe)
  SharedDtor(*this);
}
inline void MarketByOrderSubscribe::SharedDtor(MessageLite& self) {
  MarketByOrderSubscribe& this_ = static_cast<MarketByOrderSubscribe&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.exchange_id_.Destroy();
  this_._impl_.contract_id_.Destroy();
  this_._impl_.market_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* MarketByOrderSubscribe::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarketByOrderSubscribe(arena);
}
constexpr auto MarketByOrderSubscribe::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MarketByOrderSubscribe),
                                            alignof(MarketByOrderSubscribe));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarketByOrderSubscribe::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarketByOrderSubscribe_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarketByOrderSubscribe::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarketByOrderSubscribe>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarketByOrderSubscribe::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarketByOrderSubscribe>(), &MarketByOrderSubscribe::ByteSizeLong,
            &MarketByOrderSubscribe::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribe, _impl_._cached_size_),
        false,
    },
    &MarketByOrderSubscribe::kDescriptorMethods,
    &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarketByOrderSubscribe::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 80, 2> MarketByOrderSubscribe::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketByOrderSubscribe>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool subscribe = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MarketByOrderSubscribe, _impl_.subscribe_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribe, _impl_.subscribe_)}},
    // string exchange_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribe, _impl_.exchange_id_)}},
    // string contract_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribe, _impl_.contract_id_)}},
    // string market_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribe, _impl_.market_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string exchange_id = 1;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribe, _impl_.exchange_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string contract_id = 2;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribe, _impl_.contract_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string market_id = 3;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribe, _impl_.market_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool subscribe = 4;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribe, _impl_.subscribe_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\50\13\13\11\0\0\0\0"
    "t4proto.v1.market.MarketByOrderSubscribe"
    "exchange_id"
    "contract_id"
    "market_id"
  }},
};

PROTOBUF_NOINLINE void MarketByOrderSubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketByOrderSubscribe)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exchange_id_.ClearToEmpty();
  _impl_.contract_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.subscribe_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarketByOrderSubscribe::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarketByOrderSubscribe& this_ = static_cast<const MarketByOrderSubscribe&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarketByOrderSubscribe::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarketByOrderSubscribe& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketByOrderSubscribe)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string exchange_id = 1;
          if (!this_._internal_exchange_id().empty()) {
            const std::string& _s = this_._internal_exchange_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketByOrderSubscribe.exchange_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string contract_id = 2;
          if (!this_._internal_contract_id().empty()) {
            const std::string& _s = this_._internal_contract_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketByOrderSubscribe.contract_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string market_id = 3;
          if (!this_._internal_market_id().empty()) {
            const std::string& _s = this_._internal_market_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketByOrderSubscribe.market_id");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // bool subscribe = 4;
          if (this_._internal_subscribe() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_subscribe(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketByOrderSubscribe)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarketByOrderSubscribe::ByteSizeLong(const MessageLite& base) {
          const MarketByOrderSubscribe& this_ = static_cast<const MarketByOrderSubscribe&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarketByOrderSubscribe::ByteSizeLong() const {
          const MarketByOrderSubscribe& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketByOrderSubscribe)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string exchange_id = 1;
            if (!this_._internal_exchange_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_exchange_id());
            }
            // string contract_id = 2;
            if (!this_._internal_contract_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_contract_id());
            }
            // string market_id = 3;
            if (!this_._internal_market_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_market_id());
            }
            // bool subscribe = 4;
            if (this_._internal_subscribe() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarketByOrderSubscribe::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketByOrderSubscribe*>(&to_msg);
  auto& from = static_cast<const MarketByOrderSubscribe&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketByOrderSubscribe)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_exchange_id().empty()) {
    _this->_internal_set_exchange_id(from._internal_exchange_id());
  }
  if (!from._internal_contract_id().empty()) {
    _this->_internal_set_contract_id(from._internal_contract_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_subscribe() != 0) {
    _this->_impl_.subscribe_ = from._impl_.subscribe_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketByOrderSubscribe::CopyFrom(const MarketByOrderSubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketByOrderSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketByOrderSubscribe::InternalSwap(MarketByOrderSubscribe* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_id_, &other->_impl_.exchange_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_id_, &other->_impl_.contract_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, &other->_impl_.market_id_, arena);
        swap(_impl_.subscribe_, other->_impl_.subscribe_);
}

::google::protobuf::Metadata MarketByOrderSubscribe::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketByOrderSubscribeReject::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MarketByOrderSubscribeReject>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribeReject, _impl_._has_bits_);
};

void MarketByOrderSubscribeReject::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MarketByOrderSubscribeReject::MarketByOrderSubscribeReject(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketByOrderSubscribeReject)
}
inline PROTOBUF_NDEBUG_INLINE MarketByOrderSubscribeReject::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::t4proto::v1::market::MarketByOrderSubscribeReject& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        market_id_(arena, from.market_id_) {}

MarketByOrderSubscribeReject::MarketByOrderSubscribeReject(
    ::google::protobuf::Arena* arena,
    const MarketByOrderSubscribeReject& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketByOrderSubscribeReject* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.time_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.time_)
                        : nullptr;
  _impl_.mode_ = from._impl_.mode_;

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketByOrderSubscribeReject)
}
inline PROTOBUF_NDEBUG_INLINE MarketByOrderSubscribeReject::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        market_id_(arena) {}

inline void MarketByOrderSubscribeReject::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_),
           0,
           offsetof(Impl_, mode_) -
               offsetof(Impl_, time_) +
               sizeof(Impl_::mode_));
}
MarketByOrderSubscribeReject::~MarketByOrderSubscribeReject() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketByOrderSubscribeReject)
  SharedDtor(*this);
}
inline void MarketByOrderSubscribeReject::SharedDtor(MessageLite& self) {
  MarketByOrderSubscribeReject& this_ = static_cast<MarketByOrderSubscribeReject&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.market_id_.Destroy();
  delete this_._impl_.time_;
  this_._impl_.~Impl_();
}

inline void* MarketByOrderSubscribeReject::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarketByOrderSubscribeReject(arena);
}
constexpr auto MarketByOrderSubscribeReject::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MarketByOrderSubscribeReject),
                                            alignof(MarketByOrderSubscribeReject));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarketByOrderSubscribeReject::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarketByOrderSubscribeReject_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarketByOrderSubscribeReject::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarketByOrderSubscribeReject>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarketByOrderSubscribeReject::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarketByOrderSubscribeReject>(), &MarketByOrderSubscribeReject::ByteSizeLong,
            &MarketByOrderSubscribeReject::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribeReject, _impl_._cached_size_),
        false,
    },
    &MarketByOrderSubscribeReject::kDescriptorMethods,
    &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarketByOrderSubscribeReject::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 64, 2> MarketByOrderSubscribeReject::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribeReject, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketByOrderSubscribeReject>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string market_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribeReject, _impl_.market_id_)}},
    // .google.protobuf.Timestamp time = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribeReject, _impl_.time_)}},
    // .t4proto.v1.common.MarketMode mode = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketByOrderSubscribeReject, _impl_.mode_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribeReject, _impl_.mode_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string market_id = 1;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribeReject, _impl_.market_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp time = 2;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribeReject, _impl_.time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.common.MarketMode mode = 3;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribeReject, _impl_.mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\56\11\0\0\0\0\0\0"
    "t4proto.v1.market.MarketByOrderSubscribeReject"
    "market_id"
  }},
};

PROTOBUF_NOINLINE void MarketByOrderSubscribeReject::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketByOrderSubscribeReject)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.time_ != nullptr);
    _impl_.time_->Clear();
  }
  _impl_.mode_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarketByOrderSubscribeReject::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarketByOrderSubscribeReject& this_ = static_cast<const MarketByOrderSubscribeReject&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarketByOrderSubscribeReject::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarketByOrderSubscribeReject& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketByOrderSubscribeReject)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string market_id = 1;
          if (!this_._internal_market_id().empty()) {
            const std::string& _s = this_._internal_market_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketByOrderSubscribeReject.market_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp time = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.time_, this_._impl_.time_->GetCachedSize(), target,
                stream);
          }

          // .t4proto.v1.common.MarketMode mode = 3;
          if (this_._internal_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_mode(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketByOrderSubscribeReject)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarketByOrderSubscribeReject::ByteSizeLong(const MessageLite& base) {
          const MarketByOrderSubscribeReject& this_ = static_cast<const MarketByOrderSubscribeReject&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarketByOrderSubscribeReject::ByteSizeLong() const {
          const MarketByOrderSubscribeReject& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketByOrderSubscribeReject)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string market_id = 1;
            if (!this_._internal_market_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_market_id());
            }
          }
           {
            // .google.protobuf.Timestamp time = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.time_);
            }
          }
           {
            // .t4proto.v1.common.MarketMode mode = 3;
            if (this_._internal_mode() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_mode());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarketByOrderSubscribeReject::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketByOrderSubscribeReject*>(&to_msg);
  auto& from = static_cast<const MarketByOrderSubscribeReject&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketByOrderSubscribeReject)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.time_ != nullptr);
    if (_this->_impl_.time_ == nullptr) {
      _this->_impl_.time_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.time_);
    } else {
      _this->_impl_.time_->MergeFrom(*from._impl_.time_);
    }
  }
  if (from._internal_mode() != 0) {
    _this->_impl_.mode_ = from._impl_.mode_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketByOrderSubscribeReject::CopyFrom(const MarketByOrderSubscribeReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketByOrderSubscribeReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketByOrderSubscribeReject::InternalSwap(MarketByOrderSubscribeReject* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, &other->_impl_.market_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribeReject, _impl_.mode_)
      + sizeof(MarketByOrderSubscribeReject::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribeReject, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::google::protobuf::Metadata MarketByOrderSubscribeReject::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketDetails_LegItem::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MarketDetails_LegItem>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MarketDetails_LegItem, _impl_._has_bits_);
};

void MarketDetails_LegItem::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.price_ != nullptr) _impl_.price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MarketDetails_LegItem::MarketDetails_LegItem(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketDetails.LegItem)
}
inline PROTOBUF_NDEBUG_INLINE MarketDetails_LegItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::t4proto::v1::market::MarketDetails_LegItem& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        market_id_(arena, from.market_id_),
        delta_(arena, from.delta_) {}

MarketDetails_LegItem::MarketDetails_LegItem(
    ::google::protobuf::Arena* arena,
    const MarketDetails_LegItem& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketDetails_LegItem* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.price_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(
                              arena, *from._impl_.price_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, group_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, group_),
           offsetof(Impl_, volume_) -
               offsetof(Impl_, group_) +
               sizeof(Impl_::volume_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketDetails.LegItem)
}
inline PROTOBUF_NDEBUG_INLINE MarketDetails_LegItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        market_id_(arena),
        delta_(arena) {}

inline void MarketDetails_LegItem::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, price_),
           0,
           offsetof(Impl_, volume_) -
               offsetof(Impl_, price_) +
               sizeof(Impl_::volume_));
}
MarketDetails_LegItem::~MarketDetails_LegItem() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketDetails.LegItem)
  SharedDtor(*this);
}
inline void MarketDetails_LegItem::SharedDtor(MessageLite& self) {
  MarketDetails_LegItem& this_ = static_cast<MarketDetails_LegItem&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.market_id_.Destroy();
  this_._impl_.delta_.Destroy();
  delete this_._impl_.price_;
  this_._impl_.~Impl_();
}

inline void* MarketDetails_LegItem::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarketDetails_LegItem(arena);
}
constexpr auto MarketDetails_LegItem::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MarketDetails_LegItem),
                                            alignof(MarketDetails_LegItem));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarketDetails_LegItem::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarketDetails_LegItem_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarketDetails_LegItem::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarketDetails_LegItem>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarketDetails_LegItem::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarketDetails_LegItem>(), &MarketDetails_LegItem::ByteSizeLong,
            &MarketDetails_LegItem::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarketDetails_LegItem, _impl_._cached_size_),
        false,
    },
    &MarketDetails_LegItem::kDescriptorMethods,
    &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarketDetails_LegItem::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 62, 2> MarketDetails_LegItem::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarketDetails_LegItem, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketDetails_LegItem>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string market_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails_LegItem, _impl_.market_id_)}},
    // int32 group = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDetails_LegItem, _impl_.group_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails_LegItem, _impl_.group_)}},
    // int32 volume = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDetails_LegItem, _impl_.volume_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails_LegItem, _impl_.volume_)}},
    // string delta = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails_LegItem, _impl_.delta_)}},
    // .t4proto.v1.common.Price price = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(MarketDetails_LegItem, _impl_.price_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string market_id = 1;
    {PROTOBUF_FIELD_OFFSET(MarketDetails_LegItem, _impl_.market_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 group = 2;
    {PROTOBUF_FIELD_OFFSET(MarketDetails_LegItem, _impl_.group_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 volume = 3;
    {PROTOBUF_FIELD_OFFSET(MarketDetails_LegItem, _impl_.volume_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string delta = 4;
    {PROTOBUF_FIELD_OFFSET(MarketDetails_LegItem, _impl_.delta_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .t4proto.v1.common.Price price = 5;
    {PROTOBUF_FIELD_OFFSET(MarketDetails_LegItem, _impl_.price_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
  }}, {{
    "\47\11\0\0\5\0\0\0"
    "t4proto.v1.market.MarketDetails.LegItem"
    "market_id"
    "delta"
  }},
};

PROTOBUF_NOINLINE void MarketDetails_LegItem::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketDetails.LegItem)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _impl_.delta_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.price_ != nullptr);
    _impl_.price_->Clear();
  }
  ::memset(&_impl_.group_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.volume_) -
      reinterpret_cast<char*>(&_impl_.group_)) + sizeof(_impl_.volume_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarketDetails_LegItem::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarketDetails_LegItem& this_ = static_cast<const MarketDetails_LegItem&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarketDetails_LegItem::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarketDetails_LegItem& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketDetails.LegItem)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string market_id = 1;
          if (!this_._internal_market_id().empty()) {
            const std::string& _s = this_._internal_market_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.LegItem.market_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // int32 group = 2;
          if (this_._internal_group() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_group(), target);
          }

          // int32 volume = 3;
          if (this_._internal_volume() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_volume(), target);
          }

          // string delta = 4;
          if (!this_._internal_delta().empty()) {
            const std::string& _s = this_._internal_delta();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.LegItem.delta");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .t4proto.v1.common.Price price = 5;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.price_, this_._impl_.price_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketDetails.LegItem)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarketDetails_LegItem::ByteSizeLong(const MessageLite& base) {
          const MarketDetails_LegItem& this_ = static_cast<const MarketDetails_LegItem&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarketDetails_LegItem::ByteSizeLong() const {
          const MarketDetails_LegItem& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketDetails.LegItem)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string market_id = 1;
            if (!this_._internal_market_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_market_id());
            }
            // string delta = 4;
            if (!this_._internal_delta().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_delta());
            }
          }
           {
            // .t4proto.v1.common.Price price = 5;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.price_);
            }
          }
           {
            // int32 group = 2;
            if (this_._internal_group() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_group());
            }
            // int32 volume = 3;
            if (this_._internal_volume() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_volume());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarketDetails_LegItem::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketDetails_LegItem*>(&to_msg);
  auto& from = static_cast<const MarketDetails_LegItem&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketDetails.LegItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_delta().empty()) {
    _this->_internal_set_delta(from._internal_delta());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.price_ != nullptr);
    if (_this->_impl_.price_ == nullptr) {
      _this->_impl_.price_ =
          ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(arena, *from._impl_.price_);
    } else {
      _this->_impl_.price_->MergeFrom(*from._impl_.price_);
    }
  }
  if (from._internal_group() != 0) {
    _this->_impl_.group_ = from._impl_.group_;
  }
  if (from._internal_volume() != 0) {
    _this->_impl_.volume_ = from._impl_.volume_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDetails_LegItem::CopyFrom(const MarketDetails_LegItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketDetails.LegItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketDetails_LegItem::InternalSwap(MarketDetails_LegItem* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, &other->_impl_.market_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.delta_, &other->_impl_.delta_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDetails_LegItem, _impl_.volume_)
      + sizeof(MarketDetails_LegItem::_impl_.volume_)
      - PROTOBUF_FIELD_OFFSET(MarketDetails_LegItem, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::google::protobuf::Metadata MarketDetails_LegItem::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketDetails::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MarketDetails>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_._has_bits_);
};

void MarketDetails::clear_point_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.point_value_ != nullptr) _impl_.point_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MarketDetails::clear_min_price_increment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.min_price_increment_ != nullptr) _impl_.min_price_increment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void MarketDetails::clear_activation_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.activation_date_ != nullptr) _impl_.activation_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void MarketDetails::clear_last_trading_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_trading_date_ != nullptr) _impl_.last_trading_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void MarketDetails::clear_last_client_update_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_client_update_time_ != nullptr) _impl_.last_client_update_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void MarketDetails::clear_min_cab_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.min_cab_price_ != nullptr) _impl_.min_cab_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void MarketDetails::clear_strike_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.strike_price_ != nullptr) _impl_.strike_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
MarketDetails::MarketDetails(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketDetails)
}
inline PROTOBUF_NDEBUG_INLINE MarketDetails::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::t4proto::v1::market::MarketDetails& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        legs_{visibility, arena, from.legs_},
        market_id_(arena, from.market_id_),
        exchange_id_(arena, from.exchange_id_),
        contract_id_(arena, from.contract_id_),
        market_ref_(arena, from.market_ref_),
        group_(arena, from.group_),
        details_(arena, from.details_),
        price_code_(arena, from.price_code_),
        underlying_market_id_(arena, from.underlying_market_id_),
        vtt_(arena, from.vtt_) {}

MarketDetails::MarketDetails(
    ::google::protobuf::Arena* arena,
    const MarketDetails& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketDetails* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.point_value_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Decimal>(
                              arena, *from._impl_.point_value_)
                        : nullptr;
  _impl_.min_price_increment_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(
                              arena, *from._impl_.min_price_increment_)
                        : nullptr;
  _impl_.activation_date_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.activation_date_)
                        : nullptr;
  _impl_.last_trading_date_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.last_trading_date_)
                        : nullptr;
  _impl_.last_client_update_time_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.last_client_update_time_)
                        : nullptr;
  _impl_.min_cab_price_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(
                              arena, *from._impl_.min_cab_price_)
                        : nullptr;
  _impl_.strike_price_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(
                              arena, *from._impl_.strike_price_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, expiry_date_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, expiry_date_),
           offsetof(Impl_, maint_vol_scan_) -
               offsetof(Impl_, expiry_date_) +
               sizeof(Impl_::maint_vol_scan_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketDetails)
}
inline PROTOBUF_NDEBUG_INLINE MarketDetails::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        legs_{visibility, arena},
        market_id_(arena),
        exchange_id_(arena),
        contract_id_(arena),
        market_ref_(arena),
        group_(arena),
        details_(arena),
        price_code_(arena),
        underlying_market_id_(arena),
        vtt_(arena) {}

inline void MarketDetails::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, point_value_),
           0,
           offsetof(Impl_, maint_vol_scan_) -
               offsetof(Impl_, point_value_) +
               sizeof(Impl_::maint_vol_scan_));
}
MarketDetails::~MarketDetails() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketDetails)
  SharedDtor(*this);
}
inline void MarketDetails::SharedDtor(MessageLite& self) {
  MarketDetails& this_ = static_cast<MarketDetails&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.market_id_.Destroy();
  this_._impl_.exchange_id_.Destroy();
  this_._impl_.contract_id_.Destroy();
  this_._impl_.market_ref_.Destroy();
  this_._impl_.group_.Destroy();
  this_._impl_.details_.Destroy();
  this_._impl_.price_code_.Destroy();
  this_._impl_.underlying_market_id_.Destroy();
  this_._impl_.vtt_.Destroy();
  delete this_._impl_.point_value_;
  delete this_._impl_.min_price_increment_;
  delete this_._impl_.activation_date_;
  delete this_._impl_.last_trading_date_;
  delete this_._impl_.last_client_update_time_;
  delete this_._impl_.min_cab_price_;
  delete this_._impl_.strike_price_;
  this_._impl_.~Impl_();
}

inline void* MarketDetails::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarketDetails(arena);
}
constexpr auto MarketDetails::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.legs_) +
          decltype(MarketDetails::_impl_.legs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(MarketDetails), alignof(MarketDetails), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MarketDetails::PlacementNew_,
                                 sizeof(MarketDetails),
                                 alignof(MarketDetails));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarketDetails::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarketDetails_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarketDetails::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarketDetails>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarketDetails::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarketDetails>(), &MarketDetails::ByteSizeLong,
            &MarketDetails::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_._cached_size_),
        false,
    },
    &MarketDetails::kDescriptorMethods,
    &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarketDetails::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 33, 8, 158, 7> MarketDetails::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_._has_bits_),
    0, // no _extensions_
    33, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    33,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketDetails>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string market_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.market_id_)}},
    // string exchange_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.exchange_id_)}},
    // string contract_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.contract_id_)}},
    // int32 expiry_date = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDetails, _impl_.expiry_date_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.expiry_date_)}},
    // .t4proto.v1.common.ContractType contract_type = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDetails, _impl_.contract_type_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.contract_type_)}},
    // int32 decimals = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDetails, _impl_.decimals_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.decimals_)}},
    // .t4proto.v1.common.Decimal point_value = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.point_value_)}},
    // .t4proto.v1.common.Price min_price_increment = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 1, 1, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.min_price_increment_)}},
    // int32 order_types = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDetails, _impl_.order_types_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.order_types_)}},
    // .google.protobuf.Timestamp activation_date = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 2, 2, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.activation_date_)}},
    // .google.protobuf.Timestamp last_trading_date = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 3, 3, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.last_trading_date_)}},
    // .google.protobuf.Timestamp last_client_update_time = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 4, 4, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.last_client_update_time_)}},
    // int64 delist_date = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MarketDetails, _impl_.delist_date_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.delist_date_)}},
    // int64 exchange_delist_date = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MarketDetails, _impl_.exchange_delist_date_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.exchange_delist_date_)}},
    // string market_ref = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.market_ref_)}},
    // string group = 16;
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.group_)}},
    // repeated .t4proto.v1.market.MarketDetails.LegItem legs = 17;
    {::_pbi::TcParser::FastMtR2,
     {394, 63, 5, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.legs_)}},
    // string details = 18;
    {::_pbi::TcParser::FastUS2,
     {402, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.details_)}},
    // .t4proto.v1.common.StrategyType strategy_type = 19;
    {::_pbi::TcParser::FastV32S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.strategy_type_)}},
    // string price_code = 20;
    {::_pbi::TcParser::FastUS2,
     {418, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.price_code_)}},
    // int32 real_decimals = 21;
    {::_pbi::TcParser::FastV32S2,
     {424, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.real_decimals_)}},
    // int32 display_decimals = 22;
    {::_pbi::TcParser::FastV32S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.display_decimals_)}},
    // int32 clearing_decimals = 23;
    {::_pbi::TcParser::FastV32S2,
     {440, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.clearing_decimals_)}},
    // optional .t4proto.v1.common.Price min_cab_price = 24;
    {::_pbi::TcParser::FastMtS2,
     {450, 5, 6, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.min_cab_price_)}},
    // optional .t4proto.v1.common.Price strike_price = 25;
    {::_pbi::TcParser::FastMtS2,
     {458, 6, 7, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.strike_price_)}},
    // int32 volume_increment = 26;
    {::_pbi::TcParser::FastV32S2,
     {464, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.volume_increment_)}},
    // double strategy_ratio = 27;
    {::_pbi::TcParser::FastF64S2,
     {473, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.strategy_ratio_)}},
    // bool disabled = 28;
    {::_pbi::TcParser::FastV8S2,
     {480, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.disabled_)}},
    // string underlying_market_id = 29;
    {::_pbi::TcParser::FastUS2,
     {490, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.underlying_market_id_)}},
    // string vtt = 30;
    {::_pbi::TcParser::FastUS2,
     {498, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.vtt_)}},
    // double maint_intra_margin = 31;
    {::_pbi::TcParser::FastF64S2,
     {505, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.maint_intra_margin_)}},
  }}, {{
    33, 0, 1,
    65534, 32,
    65535, 65535
  }}, {{
    // string market_id = 1;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.market_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange_id = 2;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.exchange_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string contract_id = 3;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.contract_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 expiry_date = 4;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.expiry_date_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .t4proto.v1.common.ContractType contract_type = 5;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.contract_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // int32 decimals = 6;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.decimals_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .t4proto.v1.common.Decimal point_value = 7;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.point_value_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.common.Price min_price_increment = 8;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.min_price_increment_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 order_types = 9;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.order_types_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .google.protobuf.Timestamp activation_date = 10;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.activation_date_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp last_trading_date = 11;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.last_trading_date_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp last_client_update_time = 12;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.last_client_update_time_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 delist_date = 13;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.delist_date_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 exchange_delist_date = 14;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.exchange_delist_date_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string market_ref = 15;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.market_ref_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string group = 16;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.group_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .t4proto.v1.market.MarketDetails.LegItem legs = 17;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.legs_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string details = 18;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.details_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .t4proto.v1.common.StrategyType strategy_type = 19;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.strategy_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string price_code = 20;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.price_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 real_decimals = 21;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.real_decimals_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 display_decimals = 22;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.display_decimals_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 clearing_decimals = 23;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.clearing_decimals_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // optional .t4proto.v1.common.Price min_cab_price = 24;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.min_cab_price_), _Internal::kHasBitsOffset + 5, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .t4proto.v1.common.Price strike_price = 25;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.strike_price_), _Internal::kHasBitsOffset + 6, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 volume_increment = 26;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.volume_increment_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // double strategy_ratio = 27;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.strategy_ratio_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // bool disabled = 28;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.disabled_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string underlying_market_id = 29;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.underlying_market_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string vtt = 30;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.vtt_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double maint_intra_margin = 31;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.maint_intra_margin_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double maint_margin = 32;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.maint_margin_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double maint_vol_scan = 33;
    {PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.maint_vol_scan_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::t4proto::v1::common::Decimal>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketDetails_LegItem>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
  }}, {{
    "\37\11\13\13\0\0\0\0\0\0\0\0\0\0\0\12\5\0\7\0\12\0\0\0\0\0\0\0\0\24\3\0\0\0\0\0\0\0\0\0"
    "t4proto.v1.market.MarketDetails"
    "market_id"
    "exchange_id"
    "contract_id"
    "market_ref"
    "group"
    "details"
    "price_code"
    "underlying_market_id"
    "vtt"
  }},
};

PROTOBUF_NOINLINE void MarketDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketDetails)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.legs_.Clear();
  _impl_.market_id_.ClearToEmpty();
  _impl_.exchange_id_.ClearToEmpty();
  _impl_.contract_id_.ClearToEmpty();
  _impl_.market_ref_.ClearToEmpty();
  _impl_.group_.ClearToEmpty();
  _impl_.details_.ClearToEmpty();
  _impl_.price_code_.ClearToEmpty();
  _impl_.underlying_market_id_.ClearToEmpty();
  _impl_.vtt_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.point_value_ != nullptr);
      _impl_.point_value_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.min_price_increment_ != nullptr);
      _impl_.min_price_increment_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.activation_date_ != nullptr);
      _impl_.activation_date_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.last_trading_date_ != nullptr);
      _impl_.last_trading_date_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.last_client_update_time_ != nullptr);
      _impl_.last_client_update_time_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.min_cab_price_ != nullptr);
      _impl_.min_cab_price_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.strike_price_ != nullptr);
      _impl_.strike_price_->Clear();
    }
  }
  ::memset(&_impl_.expiry_date_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.maint_vol_scan_) -
      reinterpret_cast<char*>(&_impl_.expiry_date_)) + sizeof(_impl_.maint_vol_scan_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarketDetails::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarketDetails& this_ = static_cast<const MarketDetails&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarketDetails::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarketDetails& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketDetails)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string market_id = 1;
          if (!this_._internal_market_id().empty()) {
            const std::string& _s = this_._internal_market_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.market_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string exchange_id = 2;
          if (!this_._internal_exchange_id().empty()) {
            const std::string& _s = this_._internal_exchange_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.exchange_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string contract_id = 3;
          if (!this_._internal_contract_id().empty()) {
            const std::string& _s = this_._internal_contract_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.contract_id");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // int32 expiry_date = 4;
          if (this_._internal_expiry_date() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_expiry_date(), target);
          }

          // .t4proto.v1.common.ContractType contract_type = 5;
          if (this_._internal_contract_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                5, this_._internal_contract_type(), target);
          }

          // int32 decimals = 6;
          if (this_._internal_decimals() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_decimals(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .t4proto.v1.common.Decimal point_value = 7;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.point_value_, this_._impl_.point_value_->GetCachedSize(), target,
                stream);
          }

          // .t4proto.v1.common.Price min_price_increment = 8;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.min_price_increment_, this_._impl_.min_price_increment_->GetCachedSize(), target,
                stream);
          }

          // int32 order_types = 9;
          if (this_._internal_order_types() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<9>(
                    stream, this_._internal_order_types(), target);
          }

          // .google.protobuf.Timestamp activation_date = 10;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10, *this_._impl_.activation_date_, this_._impl_.activation_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp last_trading_date = 11;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                11, *this_._impl_.last_trading_date_, this_._impl_.last_trading_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp last_client_update_time = 12;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                12, *this_._impl_.last_client_update_time_, this_._impl_.last_client_update_time_->GetCachedSize(), target,
                stream);
          }

          // int64 delist_date = 13;
          if (this_._internal_delist_date() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<13>(
                    stream, this_._internal_delist_date(), target);
          }

          // int64 exchange_delist_date = 14;
          if (this_._internal_exchange_delist_date() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<14>(
                    stream, this_._internal_exchange_delist_date(), target);
          }

          // string market_ref = 15;
          if (!this_._internal_market_ref().empty()) {
            const std::string& _s = this_._internal_market_ref();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.market_ref");
            target = stream->WriteStringMaybeAliased(15, _s, target);
          }

          // string group = 16;
          if (!this_._internal_group().empty()) {
            const std::string& _s = this_._internal_group();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.group");
            target = stream->WriteStringMaybeAliased(16, _s, target);
          }

          // repeated .t4proto.v1.market.MarketDetails.LegItem legs = 17;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_legs_size());
               i < n; i++) {
            const auto& repfield = this_._internal_legs().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    17, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // string details = 18;
          if (!this_._internal_details().empty()) {
            const std::string& _s = this_._internal_details();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.details");
            target = stream->WriteStringMaybeAliased(18, _s, target);
          }

          // .t4proto.v1.common.StrategyType strategy_type = 19;
          if (this_._internal_strategy_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                19, this_._internal_strategy_type(), target);
          }

          // string price_code = 20;
          if (!this_._internal_price_code().empty()) {
            const std::string& _s = this_._internal_price_code();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.price_code");
            target = stream->WriteStringMaybeAliased(20, _s, target);
          }

          // int32 real_decimals = 21;
          if (this_._internal_real_decimals() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                21, this_._internal_real_decimals(), target);
          }

          // int32 display_decimals = 22;
          if (this_._internal_display_decimals() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                22, this_._internal_display_decimals(), target);
          }

          // int32 clearing_decimals = 23;
          if (this_._internal_clearing_decimals() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                23, this_._internal_clearing_decimals(), target);
          }

          // optional .t4proto.v1.common.Price min_cab_price = 24;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                24, *this_._impl_.min_cab_price_, this_._impl_.min_cab_price_->GetCachedSize(), target,
                stream);
          }

          // optional .t4proto.v1.common.Price strike_price = 25;
          if (cached_has_bits & 0x00000040u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                25, *this_._impl_.strike_price_, this_._impl_.strike_price_->GetCachedSize(), target,
                stream);
          }

          // int32 volume_increment = 26;
          if (this_._internal_volume_increment() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                26, this_._internal_volume_increment(), target);
          }

          // double strategy_ratio = 27;
          if (::absl::bit_cast<::uint64_t>(this_._internal_strategy_ratio()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                27, this_._internal_strategy_ratio(), target);
          }

          // bool disabled = 28;
          if (this_._internal_disabled() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                28, this_._internal_disabled(), target);
          }

          // string underlying_market_id = 29;
          if (!this_._internal_underlying_market_id().empty()) {
            const std::string& _s = this_._internal_underlying_market_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.underlying_market_id");
            target = stream->WriteStringMaybeAliased(29, _s, target);
          }

          // string vtt = 30;
          if (!this_._internal_vtt().empty()) {
            const std::string& _s = this_._internal_vtt();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.vtt");
            target = stream->WriteStringMaybeAliased(30, _s, target);
          }

          // double maint_intra_margin = 31;
          if (::absl::bit_cast<::uint64_t>(this_._internal_maint_intra_margin()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                31, this_._internal_maint_intra_margin(), target);
          }

          // double maint_margin = 32;
          if (::absl::bit_cast<::uint64_t>(this_._internal_maint_margin()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                32, this_._internal_maint_margin(), target);
          }

          // double maint_vol_scan = 33;
          if (::absl::bit_cast<::uint64_t>(this_._internal_maint_vol_scan()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                33, this_._internal_maint_vol_scan(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketDetails)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarketDetails::ByteSizeLong(const MessageLite& base) {
          const MarketDetails& this_ = static_cast<const MarketDetails&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarketDetails::ByteSizeLong() const {
          const MarketDetails& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketDetails)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .t4proto.v1.market.MarketDetails.LegItem legs = 17;
            {
              total_size += 2UL * this_._internal_legs_size();
              for (const auto& msg : this_._internal_legs()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string market_id = 1;
            if (!this_._internal_market_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_market_id());
            }
            // string exchange_id = 2;
            if (!this_._internal_exchange_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_exchange_id());
            }
            // string contract_id = 3;
            if (!this_._internal_contract_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_contract_id());
            }
            // string market_ref = 15;
            if (!this_._internal_market_ref().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_market_ref());
            }
            // string group = 16;
            if (!this_._internal_group().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_group());
            }
            // string details = 18;
            if (!this_._internal_details().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_details());
            }
            // string price_code = 20;
            if (!this_._internal_price_code().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_price_code());
            }
            // string underlying_market_id = 29;
            if (!this_._internal_underlying_market_id().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_underlying_market_id());
            }
            // string vtt = 30;
            if (!this_._internal_vtt().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_vtt());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000007fu) {
            // .t4proto.v1.common.Decimal point_value = 7;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.point_value_);
            }
            // .t4proto.v1.common.Price min_price_increment = 8;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.min_price_increment_);
            }
            // .google.protobuf.Timestamp activation_date = 10;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.activation_date_);
            }
            // .google.protobuf.Timestamp last_trading_date = 11;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_trading_date_);
            }
            // .google.protobuf.Timestamp last_client_update_time = 12;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_client_update_time_);
            }
            // optional .t4proto.v1.common.Price min_cab_price = 24;
            if (cached_has_bits & 0x00000020u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.min_cab_price_);
            }
            // optional .t4proto.v1.common.Price strike_price = 25;
            if (cached_has_bits & 0x00000040u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.strike_price_);
            }
          }
           {
            // int32 expiry_date = 4;
            if (this_._internal_expiry_date() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_expiry_date());
            }
            // .t4proto.v1.common.ContractType contract_type = 5;
            if (this_._internal_contract_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_contract_type());
            }
            // int32 decimals = 6;
            if (this_._internal_decimals() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_decimals());
            }
            // int32 order_types = 9;
            if (this_._internal_order_types() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_order_types());
            }
            // int64 delist_date = 13;
            if (this_._internal_delist_date() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_delist_date());
            }
            // int64 exchange_delist_date = 14;
            if (this_._internal_exchange_delist_date() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_exchange_delist_date());
            }
            // .t4proto.v1.common.StrategyType strategy_type = 19;
            if (this_._internal_strategy_type() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_strategy_type());
            }
            // int32 real_decimals = 21;
            if (this_._internal_real_decimals() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_real_decimals());
            }
            // int32 display_decimals = 22;
            if (this_._internal_display_decimals() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_display_decimals());
            }
            // int32 clearing_decimals = 23;
            if (this_._internal_clearing_decimals() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_clearing_decimals());
            }
            // double strategy_ratio = 27;
            if (::absl::bit_cast<::uint64_t>(this_._internal_strategy_ratio()) != 0) {
              total_size += 10;
            }
            // int32 volume_increment = 26;
            if (this_._internal_volume_increment() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_volume_increment());
            }
            // bool disabled = 28;
            if (this_._internal_disabled() != 0) {
              total_size += 3;
            }
            // double maint_intra_margin = 31;
            if (::absl::bit_cast<::uint64_t>(this_._internal_maint_intra_margin()) != 0) {
              total_size += 10;
            }
            // double maint_margin = 32;
            if (::absl::bit_cast<::uint64_t>(this_._internal_maint_margin()) != 0) {
              total_size += 10;
            }
            // double maint_vol_scan = 33;
            if (::absl::bit_cast<::uint64_t>(this_._internal_maint_vol_scan()) != 0) {
              total_size += 10;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarketDetails::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketDetails*>(&to_msg);
  auto& from = static_cast<const MarketDetails&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketDetails)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_legs()->MergeFrom(
      from._internal_legs());
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_exchange_id().empty()) {
    _this->_internal_set_exchange_id(from._internal_exchange_id());
  }
  if (!from._internal_contract_id().empty()) {
    _this->_internal_set_contract_id(from._internal_contract_id());
  }
  if (!from._internal_market_ref().empty()) {
    _this->_internal_set_market_ref(from._internal_market_ref());
  }
  if (!from._internal_group().empty()) {
    _this->_internal_set_group(from._internal_group());
  }
  if (!from._internal_details().empty()) {
    _this->_internal_set_details(from._internal_details());
  }
  if (!from._internal_price_code().empty()) {
    _this->_internal_set_price_code(from._internal_price_code());
  }
  if (!from._internal_underlying_market_id().empty()) {
    _this->_internal_set_underlying_market_id(from._internal_underlying_market_id());
  }
  if (!from._internal_vtt().empty()) {
    _this->_internal_set_vtt(from._internal_vtt());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.point_value_ != nullptr);
      if (_this->_impl_.point_value_ == nullptr) {
        _this->_impl_.point_value_ =
            ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Decimal>(arena, *from._impl_.point_value_);
      } else {
        _this->_impl_.point_value_->MergeFrom(*from._impl_.point_value_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.min_price_increment_ != nullptr);
      if (_this->_impl_.min_price_increment_ == nullptr) {
        _this->_impl_.min_price_increment_ =
            ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(arena, *from._impl_.min_price_increment_);
      } else {
        _this->_impl_.min_price_increment_->MergeFrom(*from._impl_.min_price_increment_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.activation_date_ != nullptr);
      if (_this->_impl_.activation_date_ == nullptr) {
        _this->_impl_.activation_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.activation_date_);
      } else {
        _this->_impl_.activation_date_->MergeFrom(*from._impl_.activation_date_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.last_trading_date_ != nullptr);
      if (_this->_impl_.last_trading_date_ == nullptr) {
        _this->_impl_.last_trading_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.last_trading_date_);
      } else {
        _this->_impl_.last_trading_date_->MergeFrom(*from._impl_.last_trading_date_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.last_client_update_time_ != nullptr);
      if (_this->_impl_.last_client_update_time_ == nullptr) {
        _this->_impl_.last_client_update_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.last_client_update_time_);
      } else {
        _this->_impl_.last_client_update_time_->MergeFrom(*from._impl_.last_client_update_time_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.min_cab_price_ != nullptr);
      if (_this->_impl_.min_cab_price_ == nullptr) {
        _this->_impl_.min_cab_price_ =
            ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(arena, *from._impl_.min_cab_price_);
      } else {
        _this->_impl_.min_cab_price_->MergeFrom(*from._impl_.min_cab_price_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.strike_price_ != nullptr);
      if (_this->_impl_.strike_price_ == nullptr) {
        _this->_impl_.strike_price_ =
            ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(arena, *from._impl_.strike_price_);
      } else {
        _this->_impl_.strike_price_->MergeFrom(*from._impl_.strike_price_);
      }
    }
  }
  if (from._internal_expiry_date() != 0) {
    _this->_impl_.expiry_date_ = from._impl_.expiry_date_;
  }
  if (from._internal_contract_type() != 0) {
    _this->_impl_.contract_type_ = from._impl_.contract_type_;
  }
  if (from._internal_decimals() != 0) {
    _this->_impl_.decimals_ = from._impl_.decimals_;
  }
  if (from._internal_order_types() != 0) {
    _this->_impl_.order_types_ = from._impl_.order_types_;
  }
  if (from._internal_delist_date() != 0) {
    _this->_impl_.delist_date_ = from._impl_.delist_date_;
  }
  if (from._internal_exchange_delist_date() != 0) {
    _this->_impl_.exchange_delist_date_ = from._impl_.exchange_delist_date_;
  }
  if (from._internal_strategy_type() != 0) {
    _this->_impl_.strategy_type_ = from._impl_.strategy_type_;
  }
  if (from._internal_real_decimals() != 0) {
    _this->_impl_.real_decimals_ = from._impl_.real_decimals_;
  }
  if (from._internal_display_decimals() != 0) {
    _this->_impl_.display_decimals_ = from._impl_.display_decimals_;
  }
  if (from._internal_clearing_decimals() != 0) {
    _this->_impl_.clearing_decimals_ = from._impl_.clearing_decimals_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_strategy_ratio()) != 0) {
    _this->_impl_.strategy_ratio_ = from._impl_.strategy_ratio_;
  }
  if (from._internal_volume_increment() != 0) {
    _this->_impl_.volume_increment_ = from._impl_.volume_increment_;
  }
  if (from._internal_disabled() != 0) {
    _this->_impl_.disabled_ = from._impl_.disabled_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_maint_intra_margin()) != 0) {
    _this->_impl_.maint_intra_margin_ = from._impl_.maint_intra_margin_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_maint_margin()) != 0) {
    _this->_impl_.maint_margin_ = from._impl_.maint_margin_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_maint_vol_scan()) != 0) {
    _this->_impl_.maint_vol_scan_ = from._impl_.maint_vol_scan_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDetails::CopyFrom(const MarketDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketDetails::InternalSwap(MarketDetails* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.legs_.InternalSwap(&other->_impl_.legs_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, &other->_impl_.market_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_id_, &other->_impl_.exchange_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_id_, &other->_impl_.contract_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_ref_, &other->_impl_.market_ref_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.group_, &other->_impl_.group_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.details_, &other->_impl_.details_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.price_code_, &other->_impl_.price_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.underlying_market_id_, &other->_impl_.underlying_market_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.vtt_, &other->_impl_.vtt_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.maint_vol_scan_)
      + sizeof(MarketDetails::_impl_.maint_vol_scan_)
      - PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.point_value_)>(
          reinterpret_cast<char*>(&_impl_.point_value_),
          reinterpret_cast<char*>(&other->_impl_.point_value_));
}

::google::protobuf::Metadata MarketDetails::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketDepth_DepthLine::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MarketDepth_DepthLine>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MarketDepth_DepthLine, _impl_._has_bits_);
};

void MarketDepth_DepthLine::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.price_ != nullptr) _impl_.price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MarketDepth_DepthLine::MarketDepth_DepthLine(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketDepth.DepthLine)
}
inline PROTOBUF_NDEBUG_INLINE MarketDepth_DepthLine::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::t4proto::v1::market::MarketDepth_DepthLine& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MarketDepth_DepthLine::MarketDepth_DepthLine(
    ::google::protobuf::Arena* arena,
    const MarketDepth_DepthLine& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketDepth_DepthLine* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.price_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(
                              arena, *from._impl_.price_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, volume_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, volume_),
           offsetof(Impl_, num_orders_) -
               offsetof(Impl_, volume_) +
               sizeof(Impl_::num_orders_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketDepth.DepthLine)
}
inline PROTOBUF_NDEBUG_INLINE MarketDepth_DepthLine::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MarketDepth_DepthLine::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, price_),
           0,
           offsetof(Impl_, num_orders_) -
               offsetof(Impl_, price_) +
               sizeof(Impl_::num_orders_));
}
MarketDepth_DepthLine::~MarketDepth_DepthLine() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketDepth.DepthLine)
  SharedDtor(*this);
}
inline void MarketDepth_DepthLine::SharedDtor(MessageLite& self) {
  MarketDepth_DepthLine& this_ = static_cast<MarketDepth_DepthLine&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.price_;
  this_._impl_.~Impl_();
}

inline void* MarketDepth_DepthLine::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarketDepth_DepthLine(arena);
}
constexpr auto MarketDepth_DepthLine::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MarketDepth_DepthLine),
                                            alignof(MarketDepth_DepthLine));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarketDepth_DepthLine::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarketDepth_DepthLine_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarketDepth_DepthLine::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarketDepth_DepthLine>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarketDepth_DepthLine::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarketDepth_DepthLine>(), &MarketDepth_DepthLine::ByteSizeLong,
            &MarketDepth_DepthLine::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarketDepth_DepthLine, _impl_._cached_size_),
        false,
    },
    &MarketDepth_DepthLine::kDescriptorMethods,
    &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarketDepth_DepthLine::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2> MarketDepth_DepthLine::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarketDepth_DepthLine, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketDepth_DepthLine>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .t4proto.v1.common.Price price = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MarketDepth_DepthLine, _impl_.price_)}},
    // int32 volume = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDepth_DepthLine, _impl_.volume_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepth_DepthLine, _impl_.volume_)}},
    // int32 num_orders = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDepth_DepthLine, _impl_.num_orders_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepth_DepthLine, _impl_.num_orders_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .t4proto.v1.common.Price price = 1;
    {PROTOBUF_FIELD_OFFSET(MarketDepth_DepthLine, _impl_.price_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 volume = 2;
    {PROTOBUF_FIELD_OFFSET(MarketDepth_DepthLine, _impl_.volume_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 num_orders = 3;
    {PROTOBUF_FIELD_OFFSET(MarketDepth_DepthLine, _impl_.num_orders_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MarketDepth_DepthLine::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketDepth.DepthLine)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.price_ != nullptr);
    _impl_.price_->Clear();
  }
  ::memset(&_impl_.volume_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.num_orders_) -
      reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.num_orders_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarketDepth_DepthLine::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarketDepth_DepthLine& this_ = static_cast<const MarketDepth_DepthLine&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarketDepth_DepthLine::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarketDepth_DepthLine& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketDepth.DepthLine)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .t4proto.v1.common.Price price = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.price_, this_._impl_.price_->GetCachedSize(), target,
                stream);
          }

          // int32 volume = 2;
          if (this_._internal_volume() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_volume(), target);
          }

          // int32 num_orders = 3;
          if (this_._internal_num_orders() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_num_orders(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketDepth.DepthLine)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarketDepth_DepthLine::ByteSizeLong(const MessageLite& base) {
          const MarketDepth_DepthLine& this_ = static_cast<const MarketDepth_DepthLine&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarketDepth_DepthLine::ByteSizeLong() const {
          const MarketDepth_DepthLine& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketDepth.DepthLine)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .t4proto.v1.common.Price price = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.price_);
            }
          }
           {
            // int32 volume = 2;
            if (this_._internal_volume() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_volume());
            }
            // int32 num_orders = 3;
            if (this_._internal_num_orders() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_num_orders());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarketDepth_DepthLine::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketDepth_DepthLine*>(&to_msg);
  auto& from = static_cast<const MarketDepth_DepthLine&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketDepth.DepthLine)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.price_ != nullptr);
    if (_this->_impl_.price_ == nullptr) {
      _this->_impl_.price_ =
          ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(arena, *from._impl_.price_);
    } else {
      _this->_impl_.price_->MergeFrom(*from._impl_.price_);
    }
  }
  if (from._internal_volume() != 0) {
    _this->_impl_.volume_ = from._impl_.volume_;
  }
  if (from._internal_num_orders() != 0) {
    _this->_impl_.num_orders_ = from._impl_.num_orders_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDepth_DepthLine::CopyFrom(const MarketDepth_DepthLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketDepth.DepthLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketDepth_DepthLine::InternalSwap(MarketDepth_DepthLine* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDepth_DepthLine, _impl_.num_orders_)
      + sizeof(MarketDepth_DepthLine::_impl_.num_orders_)
      - PROTOBUF_FIELD_OFFSET(MarketDepth_DepthLine, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::google::protobuf::Metadata MarketDepth_DepthLine::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketDepth_TradeData::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MarketDepth_TradeData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_._has_bits_);
};

void MarketDepth_TradeData::clear_last_trade_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_trade_price_ != nullptr) _impl_.last_trade_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MarketDepth_TradeData::clear_last_trade_spd_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_trade_spd_price_ != nullptr) _impl_.last_trade_spd_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void MarketDepth_TradeData::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
MarketDepth_TradeData::MarketDepth_TradeData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketDepth.TradeData)
}
inline PROTOBUF_NDEBUG_INLINE MarketDepth_TradeData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::t4proto::v1::market::MarketDepth_TradeData& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MarketDepth_TradeData::MarketDepth_TradeData(
    ::google::protobuf::Arena* arena,
    const MarketDepth_TradeData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketDepth_TradeData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.last_trade_price_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(
                              arena, *from._impl_.last_trade_price_)
                        : nullptr;
  _impl_.last_trade_spd_price_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(
                              arena, *from._impl_.last_trade_spd_price_)
                        : nullptr;
  _impl_.time_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.time_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_traded_volume_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, total_traded_volume_),
           offsetof(Impl_, at_bid_or_offer_) -
               offsetof(Impl_, total_traded_volume_) +
               sizeof(Impl_::at_bid_or_offer_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketDepth.TradeData)
}
inline PROTOBUF_NDEBUG_INLINE MarketDepth_TradeData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MarketDepth_TradeData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, last_trade_price_),
           0,
           offsetof(Impl_, at_bid_or_offer_) -
               offsetof(Impl_, last_trade_price_) +
               sizeof(Impl_::at_bid_or_offer_));
}
MarketDepth_TradeData::~MarketDepth_TradeData() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketDepth.TradeData)
  SharedDtor(*this);
}
inline void MarketDepth_TradeData::SharedDtor(MessageLite& self) {
  MarketDepth_TradeData& this_ = static_cast<MarketDepth_TradeData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.last_trade_price_;
  delete this_._impl_.last_trade_spd_price_;
  delete this_._impl_.time_;
  this_._impl_.~Impl_();
}

inline void* MarketDepth_TradeData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarketDepth_TradeData(arena);
}
constexpr auto MarketDepth_TradeData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MarketDepth_TradeData),
                                            alignof(MarketDepth_TradeData));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarketDepth_TradeData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarketDepth_TradeData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarketDepth_TradeData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarketDepth_TradeData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarketDepth_TradeData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarketDepth_TradeData>(), &MarketDepth_TradeData::ByteSizeLong,
            &MarketDepth_TradeData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_._cached_size_),
        false,
    },
    &MarketDepth_TradeData::kDescriptorMethods,
    &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarketDepth_TradeData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 3, 0, 2> MarketDepth_TradeData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketDepth_TradeData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 total_traded_volume = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDepth_TradeData, _impl_.total_traded_volume_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.total_traded_volume_)}},
    // int32 total_trade_count = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDepth_TradeData, _impl_.total_trade_count_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.total_trade_count_)}},
    // .t4proto.v1.common.Price last_trade_price = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.last_trade_price_)}},
    // int32 last_trade_volume = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDepth_TradeData, _impl_.last_trade_volume_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.last_trade_volume_)}},
    // int32 last_trade_total_volume = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDepth_TradeData, _impl_.last_trade_total_volume_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.last_trade_total_volume_)}},
    // .t4proto.v1.common.Price last_trade_spd_price = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 1, PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.last_trade_spd_price_)}},
    // int32 last_trade_spd_volume = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDepth_TradeData, _impl_.last_trade_spd_volume_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.last_trade_spd_volume_)}},
    // int32 last_trade_spd_total_volume = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDepth_TradeData, _impl_.last_trade_spd_total_volume_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.last_trade_spd_total_volume_)}},
    // bool due_to_spread = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MarketDepth_TradeData, _impl_.due_to_spread_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.due_to_spread_)}},
    // .t4proto.v1.common.BidOffer at_bid_or_offer = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDepth_TradeData, _impl_.at_bid_or_offer_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.at_bid_or_offer_)}},
    // .google.protobuf.Timestamp time = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 2, 2, PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.time_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 total_traded_volume = 1;
    {PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.total_traded_volume_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 total_trade_count = 2;
    {PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.total_trade_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .t4proto.v1.common.Price last_trade_price = 3;
    {PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.last_trade_price_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 last_trade_volume = 4;
    {PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.last_trade_volume_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 last_trade_total_volume = 5;
    {PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.last_trade_total_volume_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .t4proto.v1.common.Price last_trade_spd_price = 6;
    {PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.last_trade_spd_price_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 last_trade_spd_volume = 7;
    {PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.last_trade_spd_volume_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 last_trade_spd_total_volume = 8;
    {PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.last_trade_spd_total_volume_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool due_to_spread = 9;
    {PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.due_to_spread_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .t4proto.v1.common.BidOffer at_bid_or_offer = 10;
    {PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.at_bid_or_offer_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .google.protobuf.Timestamp time = 11;
    {PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.time_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MarketDepth_TradeData::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketDepth.TradeData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.last_trade_price_ != nullptr);
      _impl_.last_trade_price_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.last_trade_spd_price_ != nullptr);
      _impl_.last_trade_spd_price_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
  }
  ::memset(&_impl_.total_traded_volume_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.at_bid_or_offer_) -
      reinterpret_cast<char*>(&_impl_.total_traded_volume_)) + sizeof(_impl_.at_bid_or_offer_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarketDepth_TradeData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarketDepth_TradeData& this_ = static_cast<const MarketDepth_TradeData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarketDepth_TradeData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarketDepth_TradeData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketDepth.TradeData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 total_traded_volume = 1;
          if (this_._internal_total_traded_volume() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_total_traded_volume(), target);
          }

          // int32 total_trade_count = 2;
          if (this_._internal_total_trade_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_total_trade_count(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .t4proto.v1.common.Price last_trade_price = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.last_trade_price_, this_._impl_.last_trade_price_->GetCachedSize(), target,
                stream);
          }

          // int32 last_trade_volume = 4;
          if (this_._internal_last_trade_volume() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_last_trade_volume(), target);
          }

          // int32 last_trade_total_volume = 5;
          if (this_._internal_last_trade_total_volume() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_last_trade_total_volume(), target);
          }

          // .t4proto.v1.common.Price last_trade_spd_price = 6;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.last_trade_spd_price_, this_._impl_.last_trade_spd_price_->GetCachedSize(), target,
                stream);
          }

          // int32 last_trade_spd_volume = 7;
          if (this_._internal_last_trade_spd_volume() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_last_trade_spd_volume(), target);
          }

          // int32 last_trade_spd_total_volume = 8;
          if (this_._internal_last_trade_spd_total_volume() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_last_trade_spd_total_volume(), target);
          }

          // bool due_to_spread = 9;
          if (this_._internal_due_to_spread() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                9, this_._internal_due_to_spread(), target);
          }

          // .t4proto.v1.common.BidOffer at_bid_or_offer = 10;
          if (this_._internal_at_bid_or_offer() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                10, this_._internal_at_bid_or_offer(), target);
          }

          // .google.protobuf.Timestamp time = 11;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                11, *this_._impl_.time_, this_._impl_.time_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketDepth.TradeData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarketDepth_TradeData::ByteSizeLong(const MessageLite& base) {
          const MarketDepth_TradeData& this_ = static_cast<const MarketDepth_TradeData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarketDepth_TradeData::ByteSizeLong() const {
          const MarketDepth_TradeData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketDepth.TradeData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .t4proto.v1.common.Price last_trade_price = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_trade_price_);
            }
            // .t4proto.v1.common.Price last_trade_spd_price = 6;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_trade_spd_price_);
            }
            // .google.protobuf.Timestamp time = 11;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.time_);
            }
          }
           {
            // int32 total_traded_volume = 1;
            if (this_._internal_total_traded_volume() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_total_traded_volume());
            }
            // int32 total_trade_count = 2;
            if (this_._internal_total_trade_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_total_trade_count());
            }
            // int32 last_trade_volume = 4;
            if (this_._internal_last_trade_volume() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_last_trade_volume());
            }
            // int32 last_trade_total_volume = 5;
            if (this_._internal_last_trade_total_volume() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_last_trade_total_volume());
            }
            // int32 last_trade_spd_volume = 7;
            if (this_._internal_last_trade_spd_volume() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_last_trade_spd_volume());
            }
            // int32 last_trade_spd_total_volume = 8;
            if (this_._internal_last_trade_spd_total_volume() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_last_trade_spd_total_volume());
            }
            // bool due_to_spread = 9;
            if (this_._internal_due_to_spread() != 0) {
              total_size += 2;
            }
            // .t4proto.v1.common.BidOffer at_bid_or_offer = 10;
            if (this_._internal_at_bid_or_offer() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_at_bid_or_offer());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarketDepth_TradeData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketDepth_TradeData*>(&to_msg);
  auto& from = static_cast<const MarketDepth_TradeData&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketDepth.TradeData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.last_trade_price_ != nullptr);
      if (_this->_impl_.last_trade_price_ == nullptr) {
        _this->_impl_.last_trade_price_ =
            ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(arena, *from._impl_.last_trade_price_);
      } else {
        _this->_impl_.last_trade_price_->MergeFrom(*from._impl_.last_trade_price_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.last_trade_spd_price_ != nullptr);
      if (_this->_impl_.last_trade_spd_price_ == nullptr) {
        _this->_impl_.last_trade_spd_price_ =
            ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(arena, *from._impl_.last_trade_spd_price_);
      } else {
        _this->_impl_.last_trade_spd_price_->MergeFrom(*from._impl_.last_trade_spd_price_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.time_ != nullptr);
      if (_this->_impl_.time_ == nullptr) {
        _this->_impl_.time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.time_);
      } else {
        _this->_impl_.time_->MergeFrom(*from._impl_.time_);
      }
    }
  }
  if (from._internal_total_traded_volume() != 0) {
    _this->_impl_.total_traded_volume_ = from._impl_.total_traded_volume_;
  }
  if (from._internal_total_trade_count() != 0) {
    _this->_impl_.total_trade_count_ = from._impl_.total_trade_count_;
  }
  if (from._internal_last_trade_volume() != 0) {
    _this->_impl_.last_trade_volume_ = from._impl_.last_trade_volume_;
  }
  if (from._internal_last_trade_total_volume() != 0) {
    _this->_impl_.last_trade_total_volume_ = from._impl_.last_trade_total_volume_;
  }
  if (from._internal_last_trade_spd_volume() != 0) {
    _this->_impl_.last_trade_spd_volume_ = from._impl_.last_trade_spd_volume_;
  }
  if (from._internal_last_trade_spd_total_volume() != 0) {
    _this->_impl_.last_trade_spd_total_volume_ = from._impl_.last_trade_spd_total_volume_;
  }
  if (from._internal_due_to_spread() != 0) {
    _this->_impl_.due_to_spread_ = from._impl_.due_to_spread_;
  }
  if (from._internal_at_bid_or_offer() != 0) {
    _this->_impl_.at_bid_or_offer_ = from._impl_.at_bid_or_offer_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDepth_TradeData::CopyFrom(const MarketDepth_TradeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketDepth.TradeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketDepth_TradeData::InternalSwap(MarketDepth_TradeData* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.at_bid_or_offer_)
      + sizeof(MarketDepth_TradeData::_impl_.at_bid_or_offer_)
      - PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.last_trade_price_)>(
          reinterpret_cast<char*>(&_impl_.last_trade_price_),
          reinterpret_cast<char*>(&other->_impl_.last_trade_price_));
}

::google::protobuf::Metadata MarketDepth_TradeData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketDepth::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MarketDepth>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_._has_bits_);
};

void MarketDepth::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MarketDepth::MarketDepth(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketDepth)
}
inline PROTOBUF_NDEBUG_INLINE MarketDepth::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::t4proto::v1::market::MarketDepth& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        bids_{visibility, arena, from.bids_},
        offers_{visibility, arena, from.offers_},
        implied_bids_{visibility, arena, from.implied_bids_},
        implied_offers_{visibility, arena, from.implied_offers_},
        market_id_(arena, from.market_id_) {}

MarketDepth::MarketDepth(
    ::google::protobuf::Arena* arena,
    const MarketDepth& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketDepth* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.time_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.time_)
                        : nullptr;
  _impl_.trade_data_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::t4proto::v1::market::MarketDepth_TradeData>(
                              arena, *from._impl_.trade_data_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, depth_levels_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, depth_levels_),
           offsetof(Impl_, flags_) -
               offsetof(Impl_, depth_levels_) +
               sizeof(Impl_::flags_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketDepth)
}
inline PROTOBUF_NDEBUG_INLINE MarketDepth::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        bids_{visibility, arena},
        offers_{visibility, arena},
        implied_bids_{visibility, arena},
        implied_offers_{visibility, arena},
        market_id_(arena) {}

inline void MarketDepth::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_),
           0,
           offsetof(Impl_, flags_) -
               offsetof(Impl_, time_) +
               sizeof(Impl_::flags_));
}
MarketDepth::~MarketDepth() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketDepth)
  SharedDtor(*this);
}
inline void MarketDepth::SharedDtor(MessageLite& self) {
  MarketDepth& this_ = static_cast<MarketDepth&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.market_id_.Destroy();
  delete this_._impl_.time_;
  delete this_._impl_.trade_data_;
  this_._impl_.~Impl_();
}

inline void* MarketDepth::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarketDepth(arena);
}
constexpr auto MarketDepth::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.bids_) +
          decltype(MarketDepth::_impl_.bids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.offers_) +
          decltype(MarketDepth::_impl_.offers_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.implied_bids_) +
          decltype(MarketDepth::_impl_.implied_bids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.implied_offers_) +
          decltype(MarketDepth::_impl_.implied_offers_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(MarketDepth), alignof(MarketDepth), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MarketDepth::PlacementNew_,
                                 sizeof(MarketDepth),
                                 alignof(MarketDepth));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarketDepth::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarketDepth_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarketDepth::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarketDepth>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarketDepth::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarketDepth>(), &MarketDepth::ByteSizeLong,
            &MarketDepth::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_._cached_size_),
        false,
    },
    &MarketDepth::kDescriptorMethods,
    &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarketDepth::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 6, 55, 2> MarketDepth::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketDepth>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string market_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.market_id_)}},
    // .t4proto.v1.common.DepthLevels depth_levels = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDepth, _impl_.depth_levels_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.depth_levels_)}},
    // .t4proto.v1.common.DepthBuffer depth_buffer = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDepth, _impl_.depth_buffer_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.depth_buffer_)}},
    // .google.protobuf.Timestamp time = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.time_)}},
    // bool delayed = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MarketDepth, _impl_.delayed_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.delayed_)}},
    // repeated .t4proto.v1.market.MarketDepth.DepthLine bids = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 1, PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.bids_)}},
    // repeated .t4proto.v1.market.MarketDepth.DepthLine offers = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 2, PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.offers_)}},
    // repeated .t4proto.v1.market.MarketDepth.DepthLine implied_bids = 8;
    {::_pbi::TcParser::FastMtR1,
     {66, 63, 3, PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.implied_bids_)}},
    // repeated .t4proto.v1.market.MarketDepth.DepthLine implied_offers = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 4, PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.implied_offers_)}},
    // .t4proto.v1.common.MarketMode mode = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDepth, _impl_.mode_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.mode_)}},
    // .t4proto.v1.common.MarketFlags2 flags = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDepth, _impl_.flags_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.flags_)}},
    // .t4proto.v1.market.MarketDepth.TradeData trade_data = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 1, 5, PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.trade_data_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string market_id = 1;
    {PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.market_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .t4proto.v1.common.DepthLevels depth_levels = 2;
    {PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.depth_levels_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .t4proto.v1.common.DepthBuffer depth_buffer = 3;
    {PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.depth_buffer_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .google.protobuf.Timestamp time = 4;
    {PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool delayed = 5;
    {PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.delayed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated .t4proto.v1.market.MarketDepth.DepthLine bids = 6;
    {PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.bids_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .t4proto.v1.market.MarketDepth.DepthLine offers = 7;
    {PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.offers_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .t4proto.v1.market.MarketDepth.DepthLine implied_bids = 8;
    {PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.implied_bids_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .t4proto.v1.market.MarketDepth.DepthLine implied_offers = 9;
    {PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.implied_offers_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.common.MarketMode mode = 10;
    {PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .t4proto.v1.common.MarketFlags2 flags = 11;
    {PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.flags_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .t4proto.v1.market.MarketDepth.TradeData trade_data = 12;
    {PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.trade_data_), _Internal::kHasBitsOffset + 1, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketDepth_DepthLine>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketDepth_DepthLine>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketDepth_DepthLine>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketDepth_DepthLine>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketDepth_TradeData>()},
  }}, {{
    "\35\11\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "t4proto.v1.market.MarketDepth"
    "market_id"
  }},
};

PROTOBUF_NOINLINE void MarketDepth::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketDepth)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bids_.Clear();
  _impl_.offers_.Clear();
  _impl_.implied_bids_.Clear();
  _impl_.implied_offers_.Clear();
  _impl_.market_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.trade_data_ != nullptr);
      _impl_.trade_data_->Clear();
    }
  }
  ::memset(&_impl_.depth_levels_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.depth_levels_)) + sizeof(_impl_.flags_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarketDepth::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarketDepth& this_ = static_cast<const MarketDepth&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarketDepth::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarketDepth& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketDepth)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string market_id = 1;
          if (!this_._internal_market_id().empty()) {
            const std::string& _s = this_._internal_market_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDepth.market_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // .t4proto.v1.common.DepthLevels depth_levels = 2;
          if (this_._internal_depth_levels() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_depth_levels(), target);
          }

          // .t4proto.v1.common.DepthBuffer depth_buffer = 3;
          if (this_._internal_depth_buffer() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_depth_buffer(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp time = 4;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.time_, this_._impl_.time_->GetCachedSize(), target,
                stream);
          }

          // bool delayed = 5;
          if (this_._internal_delayed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_delayed(), target);
          }

          // repeated .t4proto.v1.market.MarketDepth.DepthLine bids = 6;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_bids_size());
               i < n; i++) {
            const auto& repfield = this_._internal_bids().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    6, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .t4proto.v1.market.MarketDepth.DepthLine offers = 7;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_offers_size());
               i < n; i++) {
            const auto& repfield = this_._internal_offers().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    7, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .t4proto.v1.market.MarketDepth.DepthLine implied_bids = 8;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_implied_bids_size());
               i < n; i++) {
            const auto& repfield = this_._internal_implied_bids().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    8, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // repeated .t4proto.v1.market.MarketDepth.DepthLine implied_offers = 9;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_implied_offers_size());
               i < n; i++) {
            const auto& repfield = this_._internal_implied_offers().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    9, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // .t4proto.v1.common.MarketMode mode = 10;
          if (this_._internal_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                10, this_._internal_mode(), target);
          }

          // .t4proto.v1.common.MarketFlags2 flags = 11;
          if (this_._internal_flags() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                11, this_._internal_flags(), target);
          }

          // .t4proto.v1.market.MarketDepth.TradeData trade_data = 12;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                12, *this_._impl_.trade_data_, this_._impl_.trade_data_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketDepth)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarketDepth::ByteSizeLong(const MessageLite& base) {
          const MarketDepth& this_ = static_cast<const MarketDepth&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarketDepth::ByteSizeLong() const {
          const MarketDepth& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketDepth)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .t4proto.v1.market.MarketDepth.DepthLine bids = 6;
            {
              total_size += 1UL * this_._internal_bids_size();
              for (const auto& msg : this_._internal_bids()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .t4proto.v1.market.MarketDepth.DepthLine offers = 7;
            {
              total_size += 1UL * this_._internal_offers_size();
              for (const auto& msg : this_._internal_offers()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .t4proto.v1.market.MarketDepth.DepthLine implied_bids = 8;
            {
              total_size += 1UL * this_._internal_implied_bids_size();
              for (const auto& msg : this_._internal_implied_bids()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
            // repeated .t4proto.v1.market.MarketDepth.DepthLine implied_offers = 9;
            {
              total_size += 1UL * this_._internal_implied_offers_size();
              for (const auto& msg : this_._internal_implied_offers()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string market_id = 1;
            if (!this_._internal_market_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_market_id());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .google.protobuf.Timestamp time = 4;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.time_);
            }
            // .t4proto.v1.market.MarketDepth.TradeData trade_data = 12;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.trade_data_);
            }
          }
           {
            // .t4proto.v1.common.DepthLevels depth_levels = 2;
            if (this_._internal_depth_levels() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_depth_levels());
            }
            // .t4proto.v1.common.DepthBuffer depth_buffer = 3;
            if (this_._internal_depth_buffer() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_depth_buffer());
            }
            // bool delayed = 5;
            if (this_._internal_delayed() != 0) {
              total_size += 2;
            }
            // .t4proto.v1.common.MarketMode mode = 10;
            if (this_._internal_mode() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_mode());
            }
            // .t4proto.v1.common.MarketFlags2 flags = 11;
            if (this_._internal_flags() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_flags());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarketDepth::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketDepth*>(&to_msg);
  auto& from = static_cast<const MarketDepth&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketDepth)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_bids()->MergeFrom(
      from._internal_bids());
  _this->_internal_mutable_offers()->MergeFrom(
      from._internal_offers());
  _this->_internal_mutable_implied_bids()->MergeFrom(
      from._internal_implied_bids());
  _this->_internal_mutable_implied_offers()->MergeFrom(
      from._internal_implied_offers());
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.time_ != nullptr);
      if (_this->_impl_.time_ == nullptr) {
        _this->_impl_.time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.time_);
      } else {
        _this->_impl_.time_->MergeFrom(*from._impl_.time_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.trade_data_ != nullptr);
      if (_this->_impl_.trade_data_ == nullptr) {
        _this->_impl_.trade_data_ =
            ::google::protobuf::Message::CopyConstruct<::t4proto::v1::market::MarketDepth_TradeData>(arena, *from._impl_.trade_data_);
      } else {
        _this->_impl_.trade_data_->MergeFrom(*from._impl_.trade_data_);
      }
    }
  }
  if (from._internal_depth_levels() != 0) {
    _this->_impl_.depth_levels_ = from._impl_.depth_levels_;
  }
  if (from._internal_depth_buffer() != 0) {
    _this->_impl_.depth_buffer_ = from._impl_.depth_buffer_;
  }
  if (from._internal_delayed() != 0) {
    _this->_impl_.delayed_ = from._impl_.delayed_;
  }
  if (from._internal_mode() != 0) {
    _this->_impl_.mode_ = from._impl_.mode_;
  }
  if (from._internal_flags() != 0) {
    _this->_impl_.flags_ = from._impl_.flags_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDepth::CopyFrom(const MarketDepth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketDepth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketDepth::InternalSwap(MarketDepth* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.bids_.InternalSwap(&other->_impl_.bids_);
  _impl_.offers_.InternalSwap(&other->_impl_.offers_);
  _impl_.implied_bids_.InternalSwap(&other->_impl_.implied_bids_);
  _impl_.implied_offers_.InternalSwap(&other->_impl_.implied_offers_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, &other->_impl_.market_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.flags_)
      + sizeof(MarketDepth::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::google::protobuf::Metadata MarketDepth::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketDepthTrade::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MarketDepthTrade>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_._has_bits_);
};

void MarketDepthTrade::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MarketDepthTrade::clear_last_trade_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_trade_price_ != nullptr) _impl_.last_trade_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MarketDepthTrade::MarketDepthTrade(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketDepthTrade)
}
inline PROTOBUF_NDEBUG_INLINE MarketDepthTrade::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::t4proto::v1::market::MarketDepthTrade& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        order_volumes_{visibility, arena, from.order_volumes_},
        _order_volumes_cached_byte_size_{0},
        market_id_(arena, from.market_id_) {}

MarketDepthTrade::MarketDepthTrade(
    ::google::protobuf::Arena* arena,
    const MarketDepthTrade& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketDepthTrade* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.time_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.time_)
                        : nullptr;
  _impl_.last_trade_price_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(
                              arena, *from._impl_.last_trade_price_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_traded_volume_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, total_traded_volume_),
           offsetof(Impl_, mode_) -
               offsetof(Impl_, total_traded_volume_) +
               sizeof(Impl_::mode_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketDepthTrade)
}
inline PROTOBUF_NDEBUG_INLINE MarketDepthTrade::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        order_volumes_{visibility, arena},
        _order_volumes_cached_byte_size_{0},
        market_id_(arena) {}

inline void MarketDepthTrade::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_),
           0,
           offsetof(Impl_, mode_) -
               offsetof(Impl_, time_) +
               sizeof(Impl_::mode_));
}
MarketDepthTrade::~MarketDepthTrade() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketDepthTrade)
  SharedDtor(*this);
}
inline void MarketDepthTrade::SharedDtor(MessageLite& self) {
  MarketDepthTrade& this_ = static_cast<MarketDepthTrade&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.market_id_.Destroy();
  delete this_._impl_.time_;
  delete this_._impl_.last_trade_price_;
  this_._impl_.~Impl_();
}

inline void* MarketDepthTrade::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarketDepthTrade(arena);
}
constexpr auto MarketDepthTrade::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.order_volumes_) +
          decltype(MarketDepthTrade::_impl_.order_volumes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(MarketDepthTrade), alignof(MarketDepthTrade), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MarketDepthTrade::PlacementNew_,
                                 sizeof(MarketDepthTrade),
                                 alignof(MarketDepthTrade));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarketDepthTrade::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarketDepthTrade_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarketDepthTrade::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarketDepthTrade>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarketDepthTrade::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarketDepthTrade>(), &MarketDepthTrade::ByteSizeLong,
            &MarketDepthTrade::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_._cached_size_),
        false,
    },
    &MarketDepthTrade::kDescriptorMethods,
    &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarketDepthTrade::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 2, 60, 2> MarketDepthTrade::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketDepthTrade>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string market_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.market_id_)}},
    // .google.protobuf.Timestamp time = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.time_)}},
    // int32 total_traded_volume = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDepthTrade, _impl_.total_traded_volume_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.total_traded_volume_)}},
    // int32 last_trade_volume = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDepthTrade, _impl_.last_trade_volume_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.last_trade_volume_)}},
    // bool due_to_spread = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MarketDepthTrade, _impl_.due_to_spread_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.due_to_spread_)}},
    // .t4proto.v1.common.BidOffer at_bid_or_offer = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDepthTrade, _impl_.at_bid_or_offer_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.at_bid_or_offer_)}},
    // bool delayed = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MarketDepthTrade, _impl_.delayed_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.delayed_)}},
    // repeated int32 order_volumes = 8;
    {::_pbi::TcParser::FastV32P1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.order_volumes_)}},
    // int32 total_trade_count = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDepthTrade, _impl_.total_trade_count_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.total_trade_count_)}},
    // .t4proto.v1.common.Price last_trade_price = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 1, 1, PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.last_trade_price_)}},
    // .t4proto.v1.common.MarketMode mode = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketDepthTrade, _impl_.mode_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.mode_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string market_id = 1;
    {PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.market_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp time = 2;
    {PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 total_traded_volume = 3;
    {PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.total_traded_volume_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 last_trade_volume = 4;
    {PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.last_trade_volume_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool due_to_spread = 5;
    {PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.due_to_spread_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .t4proto.v1.common.BidOffer at_bid_or_offer = 6;
    {PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.at_bid_or_offer_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool delayed = 7;
    {PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.delayed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated int32 order_volumes = 8;
    {PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.order_volumes_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedInt32)},
    // int32 total_trade_count = 9;
    {PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.total_trade_count_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .t4proto.v1.common.Price last_trade_price = 10;
    {PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.last_trade_price_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.common.MarketMode mode = 11;
    {PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
  }}, {{
    "\42\11\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "t4proto.v1.market.MarketDepthTrade"
    "market_id"
  }},
};

PROTOBUF_NOINLINE void MarketDepthTrade::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketDepthTrade)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_volumes_.Clear();
  _impl_.market_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.last_trade_price_ != nullptr);
      _impl_.last_trade_price_->Clear();
    }
  }
  ::memset(&_impl_.total_traded_volume_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.mode_) -
      reinterpret_cast<char*>(&_impl_.total_traded_volume_)) + sizeof(_impl_.mode_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarketDepthTrade::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarketDepthTrade& this_ = static_cast<const MarketDepthTrade&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarketDepthTrade::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarketDepthTrade& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketDepthTrade)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string market_id = 1;
          if (!this_._internal_market_id().empty()) {
            const std::string& _s = this_._internal_market_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDepthTrade.market_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp time = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.time_, this_._impl_.time_->GetCachedSize(), target,
                stream);
          }

          // int32 total_traded_volume = 3;
          if (this_._internal_total_traded_volume() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_total_traded_volume(), target);
          }

          // int32 last_trade_volume = 4;
          if (this_._internal_last_trade_volume() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_last_trade_volume(), target);
          }

          // bool due_to_spread = 5;
          if (this_._internal_due_to_spread() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_due_to_spread(), target);
          }

          // .t4proto.v1.common.BidOffer at_bid_or_offer = 6;
          if (this_._internal_at_bid_or_offer() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this_._internal_at_bid_or_offer(), target);
          }

          // bool delayed = 7;
          if (this_._internal_delayed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                7, this_._internal_delayed(), target);
          }

          // repeated int32 order_volumes = 8;
          {
            int byte_size = this_._impl_._order_volumes_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteInt32Packed(
                  8, this_._internal_order_volumes(), byte_size, target);
            }
          }

          // int32 total_trade_count = 9;
          if (this_._internal_total_trade_count() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<9>(
                    stream, this_._internal_total_trade_count(), target);
          }

          // .t4proto.v1.common.Price last_trade_price = 10;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10, *this_._impl_.last_trade_price_, this_._impl_.last_trade_price_->GetCachedSize(), target,
                stream);
          }

          // .t4proto.v1.common.MarketMode mode = 11;
          if (this_._internal_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                11, this_._internal_mode(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketDepthTrade)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarketDepthTrade::ByteSizeLong(const MessageLite& base) {
          const MarketDepthTrade& this_ = static_cast<const MarketDepthTrade&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarketDepthTrade::ByteSizeLong() const {
          const MarketDepthTrade& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketDepthTrade)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated int32 order_volumes = 8;
            {
              total_size +=
                  ::_pbi::WireFormatLite::Int32SizeWithPackedTagSize(
                      this_._internal_order_volumes(), 1,
                      this_._impl_._order_volumes_cached_byte_size_);
            }
          }
           {
            // string market_id = 1;
            if (!this_._internal_market_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_market_id());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .google.protobuf.Timestamp time = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.time_);
            }
            // .t4proto.v1.common.Price last_trade_price = 10;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_trade_price_);
            }
          }
           {
            // int32 total_traded_volume = 3;
            if (this_._internal_total_traded_volume() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_total_traded_volume());
            }
            // int32 last_trade_volume = 4;
            if (this_._internal_last_trade_volume() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_last_trade_volume());
            }
            // .t4proto.v1.common.BidOffer at_bid_or_offer = 6;
            if (this_._internal_at_bid_or_offer() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_at_bid_or_offer());
            }
            // bool due_to_spread = 5;
            if (this_._internal_due_to_spread() != 0) {
              total_size += 2;
            }
            // bool delayed = 7;
            if (this_._internal_delayed() != 0) {
              total_size += 2;
            }
            // int32 total_trade_count = 9;
            if (this_._internal_total_trade_count() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_total_trade_count());
            }
            // .t4proto.v1.common.MarketMode mode = 11;
            if (this_._internal_mode() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_mode());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarketDepthTrade::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketDepthTrade*>(&to_msg);
  auto& from = static_cast<const MarketDepthTrade&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketDepthTrade)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_order_volumes()->MergeFrom(from._internal_order_volumes());
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.time_ != nullptr);
      if (_this->_impl_.time_ == nullptr) {
        _this->_impl_.time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.time_);
      } else {
        _this->_impl_.time_->MergeFrom(*from._impl_.time_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.last_trade_price_ != nullptr);
      if (_this->_impl_.last_trade_price_ == nullptr) {
        _this->_impl_.last_trade_price_ =
            ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(arena, *from._impl_.last_trade_price_);
      } else {
        _this->_impl_.last_trade_price_->MergeFrom(*from._impl_.last_trade_price_);
      }
    }
  }
  if (from._internal_total_traded_volume() != 0) {
    _this->_impl_.total_traded_volume_ = from._impl_.total_traded_volume_;
  }
  if (from._internal_last_trade_volume() != 0) {
    _this->_impl_.last_trade_volume_ = from._impl_.last_trade_volume_;
  }
  if (from._internal_at_bid_or_offer() != 0) {
    _this->_impl_.at_bid_or_offer_ = from._impl_.at_bid_or_offer_;
  }
  if (from._internal_due_to_spread() != 0) {
    _this->_impl_.due_to_spread_ = from._impl_.due_to_spread_;
  }
  if (from._internal_delayed() != 0) {
    _this->_impl_.delayed_ = from._impl_.delayed_;
  }
  if (from._internal_total_trade_count() != 0) {
    _this->_impl_.total_trade_count_ = from._impl_.total_trade_count_;
  }
  if (from._internal_mode() != 0) {
    _this->_impl_.mode_ = from._impl_.mode_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDepthTrade::CopyFrom(const MarketDepthTrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketDepthTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketDepthTrade::InternalSwap(MarketDepthTrade* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.order_volumes_.InternalSwap(&other->_impl_.order_volumes_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, &other->_impl_.market_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.mode_)
      + sizeof(MarketDepthTrade::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::google::protobuf::Metadata MarketDepthTrade::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketHighLow::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MarketHighLow>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MarketHighLow, _impl_._has_bits_);
};

void MarketHighLow::clear_open_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.open_price_ != nullptr) _impl_.open_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MarketHighLow::clear_high_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.high_price_ != nullptr) _impl_.high_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void MarketHighLow::clear_low_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.low_price_ != nullptr) _impl_.low_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void MarketHighLow::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
MarketHighLow::MarketHighLow(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketHighLow)
}
inline PROTOBUF_NDEBUG_INLINE MarketHighLow::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::t4proto::v1::market::MarketHighLow& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        market_id_(arena, from.market_id_) {}

MarketHighLow::MarketHighLow(
    ::google::protobuf::Arena* arena,
    const MarketHighLow& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketHighLow* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.open_price_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(
                              arena, *from._impl_.open_price_)
                        : nullptr;
  _impl_.high_price_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(
                              arena, *from._impl_.high_price_)
                        : nullptr;
  _impl_.low_price_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(
                              arena, *from._impl_.low_price_)
                        : nullptr;
  _impl_.time_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.time_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, trade_date_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, trade_date_),
           offsetof(Impl_, delayed_) -
               offsetof(Impl_, trade_date_) +
               sizeof(Impl_::delayed_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketHighLow)
}
inline PROTOBUF_NDEBUG_INLINE MarketHighLow::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        market_id_(arena) {}

inline void MarketHighLow::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, open_price_),
           0,
           offsetof(Impl_, delayed_) -
               offsetof(Impl_, open_price_) +
               sizeof(Impl_::delayed_));
}
MarketHighLow::~MarketHighLow() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketHighLow)
  SharedDtor(*this);
}
inline void MarketHighLow::SharedDtor(MessageLite& self) {
  MarketHighLow& this_ = static_cast<MarketHighLow&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.market_id_.Destroy();
  delete this_._impl_.open_price_;
  delete this_._impl_.high_price_;
  delete this_._impl_.low_price_;
  delete this_._impl_.time_;
  this_._impl_.~Impl_();
}

inline void* MarketHighLow::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarketHighLow(arena);
}
constexpr auto MarketHighLow::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MarketHighLow),
                                            alignof(MarketHighLow));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarketHighLow::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarketHighLow_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarketHighLow::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarketHighLow>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarketHighLow::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarketHighLow>(), &MarketHighLow::ByteSizeLong,
            &MarketHighLow::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarketHighLow, _impl_._cached_size_),
        false,
    },
    &MarketHighLow::kDescriptorMethods,
    &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarketHighLow::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 4, 49, 2> MarketHighLow::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarketHighLow, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketHighLow>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string market_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MarketHighLow, _impl_.market_id_)}},
    // .t4proto.v1.common.Price open_price = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MarketHighLow, _impl_.open_price_)}},
    // .t4proto.v1.common.Price high_price = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(MarketHighLow, _impl_.high_price_)}},
    // .t4proto.v1.common.Price low_price = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(MarketHighLow, _impl_.low_price_)}},
    // int64 trade_date = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MarketHighLow, _impl_.trade_date_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MarketHighLow, _impl_.trade_date_)}},
    // .google.protobuf.Timestamp time = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 3, 3, PROTOBUF_FIELD_OFFSET(MarketHighLow, _impl_.time_)}},
    // bool delayed = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MarketHighLow, _impl_.delayed_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(MarketHighLow, _impl_.delayed_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string market_id = 1;
    {PROTOBUF_FIELD_OFFSET(MarketHighLow, _impl_.market_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .t4proto.v1.common.Price open_price = 2;
    {PROTOBUF_FIELD_OFFSET(MarketHighLow, _impl_.open_price_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.common.Price high_price = 3;
    {PROTOBUF_FIELD_OFFSET(MarketHighLow, _impl_.high_price_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.common.Price low_price = 4;
    {PROTOBUF_FIELD_OFFSET(MarketHighLow, _impl_.low_price_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 trade_date = 5;
    {PROTOBUF_FIELD_OFFSET(MarketHighLow, _impl_.trade_date_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .google.protobuf.Timestamp time = 6;
    {PROTOBUF_FIELD_OFFSET(MarketHighLow, _impl_.time_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool delayed = 7;
    {PROTOBUF_FIELD_OFFSET(MarketHighLow, _impl_.delayed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\37\11\0\0\0\0\0\0"
    "t4proto.v1.market.MarketHighLow"
    "market_id"
  }},
};

PROTOBUF_NOINLINE void MarketHighLow::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketHighLow)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.open_price_ != nullptr);
      _impl_.open_price_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.high_price_ != nullptr);
      _impl_.high_price_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.low_price_ != nullptr);
      _impl_.low_price_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
  }
  ::memset(&_impl_.trade_date_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.delayed_) -
      reinterpret_cast<char*>(&_impl_.trade_date_)) + sizeof(_impl_.delayed_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarketHighLow::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarketHighLow& this_ = static_cast<const MarketHighLow&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarketHighLow::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarketHighLow& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketHighLow)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string market_id = 1;
          if (!this_._internal_market_id().empty()) {
            const std::string& _s = this_._internal_market_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketHighLow.market_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .t4proto.v1.common.Price open_price = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.open_price_, this_._impl_.open_price_->GetCachedSize(), target,
                stream);
          }

          // .t4proto.v1.common.Price high_price = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.high_price_, this_._impl_.high_price_->GetCachedSize(), target,
                stream);
          }

          // .t4proto.v1.common.Price low_price = 4;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.low_price_, this_._impl_.low_price_->GetCachedSize(), target,
                stream);
          }

          // int64 trade_date = 5;
          if (this_._internal_trade_date() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<5>(
                    stream, this_._internal_trade_date(), target);
          }

          // .google.protobuf.Timestamp time = 6;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.time_, this_._impl_.time_->GetCachedSize(), target,
                stream);
          }

          // bool delayed = 7;
          if (this_._internal_delayed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                7, this_._internal_delayed(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketHighLow)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarketHighLow::ByteSizeLong(const MessageLite& base) {
          const MarketHighLow& this_ = static_cast<const MarketHighLow&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarketHighLow::ByteSizeLong() const {
          const MarketHighLow& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketHighLow)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string market_id = 1;
            if (!this_._internal_market_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_market_id());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000000fu) {
            // .t4proto.v1.common.Price open_price = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.open_price_);
            }
            // .t4proto.v1.common.Price high_price = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.high_price_);
            }
            // .t4proto.v1.common.Price low_price = 4;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.low_price_);
            }
            // .google.protobuf.Timestamp time = 6;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.time_);
            }
          }
           {
            // int64 trade_date = 5;
            if (this_._internal_trade_date() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_trade_date());
            }
            // bool delayed = 7;
            if (this_._internal_delayed() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarketHighLow::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketHighLow*>(&to_msg);
  auto& from = static_cast<const MarketHighLow&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketHighLow)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.open_price_ != nullptr);
      if (_this->_impl_.open_price_ == nullptr) {
        _this->_impl_.open_price_ =
            ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(arena, *from._impl_.open_price_);
      } else {
        _this->_impl_.open_price_->MergeFrom(*from._impl_.open_price_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.high_price_ != nullptr);
      if (_this->_impl_.high_price_ == nullptr) {
        _this->_impl_.high_price_ =
            ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(arena, *from._impl_.high_price_);
      } else {
        _this->_impl_.high_price_->MergeFrom(*from._impl_.high_price_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.low_price_ != nullptr);
      if (_this->_impl_.low_price_ == nullptr) {
        _this->_impl_.low_price_ =
            ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(arena, *from._impl_.low_price_);
      } else {
        _this->_impl_.low_price_->MergeFrom(*from._impl_.low_price_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.time_ != nullptr);
      if (_this->_impl_.time_ == nullptr) {
        _this->_impl_.time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.time_);
      } else {
        _this->_impl_.time_->MergeFrom(*from._impl_.time_);
      }
    }
  }
  if (from._internal_trade_date() != 0) {
    _this->_impl_.trade_date_ = from._impl_.trade_date_;
  }
  if (from._internal_delayed() != 0) {
    _this->_impl_.delayed_ = from._impl_.delayed_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketHighLow::CopyFrom(const MarketHighLow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketHighLow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketHighLow::InternalSwap(MarketHighLow* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, &other->_impl_.market_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketHighLow, _impl_.delayed_)
      + sizeof(MarketHighLow::_impl_.delayed_)
      - PROTOBUF_FIELD_OFFSET(MarketHighLow, _impl_.open_price_)>(
          reinterpret_cast<char*>(&_impl_.open_price_),
          reinterpret_cast<char*>(&other->_impl_.open_price_));
}

::google::protobuf::Metadata MarketHighLow::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketPriceLimits::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MarketPriceLimits>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MarketPriceLimits, _impl_._has_bits_);
};

void MarketPriceLimits::clear_high_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.high_price_ != nullptr) _impl_.high_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MarketPriceLimits::clear_low_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.low_price_ != nullptr) _impl_.low_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void MarketPriceLimits::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
MarketPriceLimits::MarketPriceLimits(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketPriceLimits)
}
inline PROTOBUF_NDEBUG_INLINE MarketPriceLimits::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::t4proto::v1::market::MarketPriceLimits& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        market_id_(arena, from.market_id_) {}

MarketPriceLimits::MarketPriceLimits(
    ::google::protobuf::Arena* arena,
    const MarketPriceLimits& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketPriceLimits* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.high_price_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(
                              arena, *from._impl_.high_price_)
                        : nullptr;
  _impl_.low_price_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(
                              arena, *from._impl_.low_price_)
                        : nullptr;
  _impl_.time_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.time_)
                        : nullptr;
  _impl_.delayed_ = from._impl_.delayed_;

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketPriceLimits)
}
inline PROTOBUF_NDEBUG_INLINE MarketPriceLimits::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        market_id_(arena) {}

inline void MarketPriceLimits::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, high_price_),
           0,
           offsetof(Impl_, delayed_) -
               offsetof(Impl_, high_price_) +
               sizeof(Impl_::delayed_));
}
MarketPriceLimits::~MarketPriceLimits() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketPriceLimits)
  SharedDtor(*this);
}
inline void MarketPriceLimits::SharedDtor(MessageLite& self) {
  MarketPriceLimits& this_ = static_cast<MarketPriceLimits&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.market_id_.Destroy();
  delete this_._impl_.high_price_;
  delete this_._impl_.low_price_;
  delete this_._impl_.time_;
  this_._impl_.~Impl_();
}

inline void* MarketPriceLimits::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarketPriceLimits(arena);
}
constexpr auto MarketPriceLimits::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MarketPriceLimits),
                                            alignof(MarketPriceLimits));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarketPriceLimits::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarketPriceLimits_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarketPriceLimits::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarketPriceLimits>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarketPriceLimits::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarketPriceLimits>(), &MarketPriceLimits::ByteSizeLong,
            &MarketPriceLimits::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarketPriceLimits, _impl_._cached_size_),
        false,
    },
    &MarketPriceLimits::kDescriptorMethods,
    &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarketPriceLimits::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 53, 2> MarketPriceLimits::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarketPriceLimits, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketPriceLimits>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string market_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MarketPriceLimits, _impl_.market_id_)}},
    // .t4proto.v1.common.Price high_price = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MarketPriceLimits, _impl_.high_price_)}},
    // .t4proto.v1.common.Price low_price = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(MarketPriceLimits, _impl_.low_price_)}},
    // .google.protobuf.Timestamp time = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(MarketPriceLimits, _impl_.time_)}},
    // bool delayed = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MarketPriceLimits, _impl_.delayed_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MarketPriceLimits, _impl_.delayed_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string market_id = 1;
    {PROTOBUF_FIELD_OFFSET(MarketPriceLimits, _impl_.market_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .t4proto.v1.common.Price high_price = 2;
    {PROTOBUF_FIELD_OFFSET(MarketPriceLimits, _impl_.high_price_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.common.Price low_price = 3;
    {PROTOBUF_FIELD_OFFSET(MarketPriceLimits, _impl_.low_price_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp time = 4;
    {PROTOBUF_FIELD_OFFSET(MarketPriceLimits, _impl_.time_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool delayed = 5;
    {PROTOBUF_FIELD_OFFSET(MarketPriceLimits, _impl_.delayed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\43\11\0\0\0\0\0\0"
    "t4proto.v1.market.MarketPriceLimits"
    "market_id"
  }},
};

PROTOBUF_NOINLINE void MarketPriceLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketPriceLimits)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.high_price_ != nullptr);
      _impl_.high_price_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.low_price_ != nullptr);
      _impl_.low_price_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.time_ != nullptr);
      _impl_.time_->Clear();
    }
  }
  _impl_.delayed_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarketPriceLimits::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarketPriceLimits& this_ = static_cast<const MarketPriceLimits&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarketPriceLimits::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarketPriceLimits& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketPriceLimits)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string market_id = 1;
          if (!this_._internal_market_id().empty()) {
            const std::string& _s = this_._internal_market_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketPriceLimits.market_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .t4proto.v1.common.Price high_price = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.high_price_, this_._impl_.high_price_->GetCachedSize(), target,
                stream);
          }

          // .t4proto.v1.common.Price low_price = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.low_price_, this_._impl_.low_price_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp time = 4;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.time_, this_._impl_.time_->GetCachedSize(), target,
                stream);
          }

          // bool delayed = 5;
          if (this_._internal_delayed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                5, this_._internal_delayed(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketPriceLimits)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarketPriceLimits::ByteSizeLong(const MessageLite& base) {
          const MarketPriceLimits& this_ = static_cast<const MarketPriceLimits&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarketPriceLimits::ByteSizeLong() const {
          const MarketPriceLimits& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketPriceLimits)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string market_id = 1;
            if (!this_._internal_market_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_market_id());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .t4proto.v1.common.Price high_price = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.high_price_);
            }
            // .t4proto.v1.common.Price low_price = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.low_price_);
            }
            // .google.protobuf.Timestamp time = 4;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.time_);
            }
          }
           {
            // bool delayed = 5;
            if (this_._internal_delayed() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarketPriceLimits::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketPriceLimits*>(&to_msg);
  auto& from = static_cast<const MarketPriceLimits&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketPriceLimits)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.high_price_ != nullptr);
      if (_this->_impl_.high_price_ == nullptr) {
        _this->_impl_.high_price_ =
            ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(arena, *from._impl_.high_price_);
      } else {
        _this->_impl_.high_price_->MergeFrom(*from._impl_.high_price_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.low_price_ != nullptr);
      if (_this->_impl_.low_price_ == nullptr) {
        _this->_impl_.low_price_ =
            ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(arena, *from._impl_.low_price_);
      } else {
        _this->_impl_.low_price_->MergeFrom(*from._impl_.low_price_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.time_ != nullptr);
      if (_this->_impl_.time_ == nullptr) {
        _this->_impl_.time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.time_);
      } else {
        _this->_impl_.time_->MergeFrom(*from._impl_.time_);
      }
    }
  }
  if (from._internal_delayed() != 0) {
    _this->_impl_.delayed_ = from._impl_.delayed_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketPriceLimits::CopyFrom(const MarketPriceLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketPriceLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketPriceLimits::InternalSwap(MarketPriceLimits* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, &other->_impl_.market_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketPriceLimits, _impl_.delayed_)
      + sizeof(MarketPriceLimits::_impl_.delayed_)
      - PROTOBUF_FIELD_OFFSET(MarketPriceLimits, _impl_.high_price_)>(
          reinterpret_cast<char*>(&_impl_.high_price_),
          reinterpret_cast<char*>(&other->_impl_.high_price_));
}

::google::protobuf::Metadata MarketPriceLimits::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketSettlement::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MarketSettlement>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_._has_bits_);
};

void MarketSettlement::clear_settlement_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.settlement_price_ != nullptr) _impl_.settlement_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MarketSettlement::clear_settlement_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.settlement_time_ != nullptr) _impl_.settlement_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void MarketSettlement::clear_settlement_trade_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.settlement_trade_date_ != nullptr) _impl_.settlement_trade_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void MarketSettlement::clear_settlement_held_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.settlement_held_time_ != nullptr) _impl_.settlement_held_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void MarketSettlement::clear_settlement_held_trade_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.settlement_held_trade_date_ != nullptr) _impl_.settlement_held_trade_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void MarketSettlement::clear_implied_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.implied_price_ != nullptr) _impl_.implied_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void MarketSettlement::clear_implied_held_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.implied_held_price_ != nullptr) _impl_.implied_held_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void MarketSettlement::clear_implied_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.implied_time_ != nullptr) _impl_.implied_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void MarketSettlement::clear_open_interest_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.open_interest_time_ != nullptr) _impl_.open_interest_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void MarketSettlement::clear_open_interest_trade_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.open_interest_trade_date_ != nullptr) _impl_.open_interest_trade_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void MarketSettlement::clear_cleared_volume_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cleared_volume_time_ != nullptr) _impl_.cleared_volume_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void MarketSettlement::clear_cleared_volume_trade_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cleared_volume_trade_date_ != nullptr) _impl_.cleared_volume_trade_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void MarketSettlement::clear_vwap_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vwap_price_ != nullptr) _impl_.vwap_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void MarketSettlement::clear_vwap_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vwap_time_ != nullptr) _impl_.vwap_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void MarketSettlement::clear_vwap_trade_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.vwap_trade_date_ != nullptr) _impl_.vwap_trade_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
MarketSettlement::MarketSettlement(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketSettlement)
}
inline PROTOBUF_NDEBUG_INLINE MarketSettlement::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::t4proto::v1::market::MarketSettlement& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        exchange_id_(arena, from.exchange_id_),
        market_id_(arena, from.market_id_),
        settlement_held_price_(arena, from.settlement_held_price_) {}

MarketSettlement::MarketSettlement(
    ::google::protobuf::Arena* arena,
    const MarketSettlement& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketSettlement* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.settlement_price_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(
                              arena, *from._impl_.settlement_price_)
                        : nullptr;
  _impl_.settlement_time_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.settlement_time_)
                        : nullptr;
  _impl_.settlement_trade_date_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.settlement_trade_date_)
                        : nullptr;
  _impl_.settlement_held_time_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.settlement_held_time_)
                        : nullptr;
  _impl_.settlement_held_trade_date_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.settlement_held_trade_date_)
                        : nullptr;
  _impl_.implied_price_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(
                              arena, *from._impl_.implied_price_)
                        : nullptr;
  _impl_.implied_held_price_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(
                              arena, *from._impl_.implied_held_price_)
                        : nullptr;
  _impl_.implied_time_ = (cached_has_bits & 0x00000080u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.implied_time_)
                        : nullptr;
  _impl_.open_interest_time_ = (cached_has_bits & 0x00000100u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.open_interest_time_)
                        : nullptr;
  _impl_.open_interest_trade_date_ = (cached_has_bits & 0x00000200u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.open_interest_trade_date_)
                        : nullptr;
  _impl_.cleared_volume_time_ = (cached_has_bits & 0x00000400u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.cleared_volume_time_)
                        : nullptr;
  _impl_.cleared_volume_trade_date_ = (cached_has_bits & 0x00000800u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.cleared_volume_trade_date_)
                        : nullptr;
  _impl_.vwap_price_ = (cached_has_bits & 0x00001000u) ? ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(
                              arena, *from._impl_.vwap_price_)
                        : nullptr;
  _impl_.vwap_time_ = (cached_has_bits & 0x00002000u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.vwap_time_)
                        : nullptr;
  _impl_.vwap_trade_date_ = (cached_has_bits & 0x00004000u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.vwap_trade_date_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, delayed_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, delayed_),
           offsetof(Impl_, cleared_volume_) -
               offsetof(Impl_, delayed_) +
               sizeof(Impl_::cleared_volume_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketSettlement)
}
inline PROTOBUF_NDEBUG_INLINE MarketSettlement::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        exchange_id_(arena),
        market_id_(arena),
        settlement_held_price_(arena) {}

inline void MarketSettlement::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, settlement_price_),
           0,
           offsetof(Impl_, cleared_volume_) -
               offsetof(Impl_, settlement_price_) +
               sizeof(Impl_::cleared_volume_));
}
MarketSettlement::~MarketSettlement() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketSettlement)
  SharedDtor(*this);
}
inline void MarketSettlement::SharedDtor(MessageLite& self) {
  MarketSettlement& this_ = static_cast<MarketSettlement&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.exchange_id_.Destroy();
  this_._impl_.market_id_.Destroy();
  this_._impl_.settlement_held_price_.Destroy();
  delete this_._impl_.settlement_price_;
  delete this_._impl_.settlement_time_;
  delete this_._impl_.settlement_trade_date_;
  delete this_._impl_.settlement_held_time_;
  delete this_._impl_.settlement_held_trade_date_;
  delete this_._impl_.implied_price_;
  delete this_._impl_.implied_held_price_;
  delete this_._impl_.implied_time_;
  delete this_._impl_.open_interest_time_;
  delete this_._impl_.open_interest_trade_date_;
  delete this_._impl_.cleared_volume_time_;
  delete this_._impl_.cleared_volume_trade_date_;
  delete this_._impl_.vwap_price_;
  delete this_._impl_.vwap_time_;
  delete this_._impl_.vwap_trade_date_;
  this_._impl_.~Impl_();
}

inline void* MarketSettlement::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarketSettlement(arena);
}
constexpr auto MarketSettlement::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MarketSettlement),
                                            alignof(MarketSettlement));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarketSettlement::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarketSettlement_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarketSettlement::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarketSettlement>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarketSettlement::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarketSettlement>(), &MarketSettlement::ByteSizeLong,
            &MarketSettlement::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_._cached_size_),
        false,
    },
    &MarketSettlement::kDescriptorMethods,
    &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarketSettlement::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 21, 15, 100, 2> MarketSettlement::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_._has_bits_),
    0, // no _extensions_
    21, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4292870144,  // skipmap
    offsetof(decltype(_table_), field_entries),
    21,  // num_field_entries
    15,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketSettlement>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string exchange_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.exchange_id_)}},
    // string market_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.market_id_)}},
    // bool delayed = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MarketSettlement, _impl_.delayed_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.delayed_)}},
    // .t4proto.v1.common.Price settlement_price = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.settlement_price_)}},
    // .google.protobuf.Timestamp settlement_time = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 1, 1, PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.settlement_time_)}},
    // .google.protobuf.Timestamp settlement_trade_date = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 2, 2, PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.settlement_trade_date_)}},
    // string settlement_held_price = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.settlement_held_price_)}},
    // .google.protobuf.Timestamp settlement_held_time = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 3, 3, PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.settlement_held_time_)}},
    // .google.protobuf.Timestamp settlement_held_trade_date = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 4, 4, PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.settlement_held_trade_date_)}},
    // .t4proto.v1.common.Price implied_price = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 5, 5, PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.implied_price_)}},
    // .t4proto.v1.common.Price implied_held_price = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 6, 6, PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.implied_held_price_)}},
    // .google.protobuf.Timestamp implied_time = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 7, 7, PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.implied_time_)}},
    // int32 open_interest = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketSettlement, _impl_.open_interest_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.open_interest_)}},
    // .google.protobuf.Timestamp open_interest_time = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 8, 8, PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.open_interest_time_)}},
    // .google.protobuf.Timestamp open_interest_trade_date = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 9, 9, PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.open_interest_trade_date_)}},
    // int32 cleared_volume = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.cleared_volume_)}},
    // .google.protobuf.Timestamp cleared_volume_time = 17;
    {::_pbi::TcParser::FastMtS2,
     {394, 10, 10, PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.cleared_volume_time_)}},
    // .google.protobuf.Timestamp cleared_volume_trade_date = 18;
    {::_pbi::TcParser::FastMtS2,
     {402, 11, 11, PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.cleared_volume_trade_date_)}},
    // .t4proto.v1.common.Price vwap_price = 19;
    {::_pbi::TcParser::FastMtS2,
     {410, 12, 12, PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.vwap_price_)}},
    // .google.protobuf.Timestamp vwap_time = 20;
    {::_pbi::TcParser::FastMtS2,
     {418, 13, 13, PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.vwap_time_)}},
    // .google.protobuf.Timestamp vwap_trade_date = 21;
    {::_pbi::TcParser::FastMtS2,
     {426, 14, 14, PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.vwap_trade_date_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string exchange_id = 1;
    {PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.exchange_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string market_id = 2;
    {PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.market_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool delayed = 3;
    {PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.delayed_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .t4proto.v1.common.Price settlement_price = 4;
    {PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.settlement_price_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp settlement_time = 5;
    {PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.settlement_time_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp settlement_trade_date = 6;
    {PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.settlement_trade_date_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string settlement_held_price = 7;
    {PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.settlement_held_price_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp settlement_held_time = 8;
    {PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.settlement_held_time_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp settlement_held_trade_date = 9;
    {PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.settlement_held_trade_date_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.common.Price implied_price = 10;
    {PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.implied_price_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.common.Price implied_held_price = 11;
    {PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.implied_held_price_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp implied_time = 12;
    {PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.implied_time_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 open_interest = 13;
    {PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.open_interest_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .google.protobuf.Timestamp open_interest_time = 14;
    {PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.open_interest_time_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp open_interest_trade_date = 15;
    {PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.open_interest_trade_date_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 cleared_volume = 16;
    {PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.cleared_volume_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .google.protobuf.Timestamp cleared_volume_time = 17;
    {PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.cleared_volume_time_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp cleared_volume_trade_date = 18;
    {PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.cleared_volume_trade_date_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.common.Price vwap_price = 19;
    {PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.vwap_price_), _Internal::kHasBitsOffset + 12, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp vwap_time = 20;
    {PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.vwap_time_), _Internal::kHasBitsOffset + 13, 13,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp vwap_trade_date = 21;
    {PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.vwap_trade_date_), _Internal::kHasBitsOffset + 14, 14,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\42\13\11\0\0\0\0\25\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "t4proto.v1.market.MarketSettlement"
    "exchange_id"
    "market_id"
    "settlement_held_price"
  }},
};

PROTOBUF_NOINLINE void MarketSettlement::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketSettlement)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exchange_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.settlement_held_price_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.settlement_price_ != nullptr);
      _impl_.settlement_price_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.settlement_time_ != nullptr);
      _impl_.settlement_time_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.settlement_trade_date_ != nullptr);
      _impl_.settlement_trade_date_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.settlement_held_time_ != nullptr);
      _impl_.settlement_held_time_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.settlement_held_trade_date_ != nullptr);
      _impl_.settlement_held_trade_date_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.implied_price_ != nullptr);
      _impl_.implied_price_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.implied_held_price_ != nullptr);
      _impl_.implied_held_price_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.implied_time_ != nullptr);
      _impl_.implied_time_->Clear();
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.open_interest_time_ != nullptr);
      _impl_.open_interest_time_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.open_interest_trade_date_ != nullptr);
      _impl_.open_interest_trade_date_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.cleared_volume_time_ != nullptr);
      _impl_.cleared_volume_time_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.cleared_volume_trade_date_ != nullptr);
      _impl_.cleared_volume_trade_date_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.vwap_price_ != nullptr);
      _impl_.vwap_price_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(_impl_.vwap_time_ != nullptr);
      _impl_.vwap_time_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      ABSL_DCHECK(_impl_.vwap_trade_date_ != nullptr);
      _impl_.vwap_trade_date_->Clear();
    }
  }
  ::memset(&_impl_.delayed_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cleared_volume_) -
      reinterpret_cast<char*>(&_impl_.delayed_)) + sizeof(_impl_.cleared_volume_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarketSettlement::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarketSettlement& this_ = static_cast<const MarketSettlement&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarketSettlement::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarketSettlement& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketSettlement)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string exchange_id = 1;
          if (!this_._internal_exchange_id().empty()) {
            const std::string& _s = this_._internal_exchange_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketSettlement.exchange_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string market_id = 2;
          if (!this_._internal_market_id().empty()) {
            const std::string& _s = this_._internal_market_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketSettlement.market_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // bool delayed = 3;
          if (this_._internal_delayed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_delayed(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .t4proto.v1.common.Price settlement_price = 4;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.settlement_price_, this_._impl_.settlement_price_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp settlement_time = 5;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.settlement_time_, this_._impl_.settlement_time_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp settlement_trade_date = 6;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.settlement_trade_date_, this_._impl_.settlement_trade_date_->GetCachedSize(), target,
                stream);
          }

          // string settlement_held_price = 7;
          if (!this_._internal_settlement_held_price().empty()) {
            const std::string& _s = this_._internal_settlement_held_price();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketSettlement.settlement_held_price");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // .google.protobuf.Timestamp settlement_held_time = 8;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.settlement_held_time_, this_._impl_.settlement_held_time_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp settlement_held_trade_date = 9;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.settlement_held_trade_date_, this_._impl_.settlement_held_trade_date_->GetCachedSize(), target,
                stream);
          }

          // .t4proto.v1.common.Price implied_price = 10;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10, *this_._impl_.implied_price_, this_._impl_.implied_price_->GetCachedSize(), target,
                stream);
          }

          // .t4proto.v1.common.Price implied_held_price = 11;
          if (cached_has_bits & 0x00000040u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                11, *this_._impl_.implied_held_price_, this_._impl_.implied_held_price_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp implied_time = 12;
          if (cached_has_bits & 0x00000080u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                12, *this_._impl_.implied_time_, this_._impl_.implied_time_->GetCachedSize(), target,
                stream);
          }

          // int32 open_interest = 13;
          if (this_._internal_open_interest() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<13>(
                    stream, this_._internal_open_interest(), target);
          }

          // .google.protobuf.Timestamp open_interest_time = 14;
          if (cached_has_bits & 0x00000100u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                14, *this_._impl_.open_interest_time_, this_._impl_.open_interest_time_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp open_interest_trade_date = 15;
          if (cached_has_bits & 0x00000200u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                15, *this_._impl_.open_interest_trade_date_, this_._impl_.open_interest_trade_date_->GetCachedSize(), target,
                stream);
          }

          // int32 cleared_volume = 16;
          if (this_._internal_cleared_volume() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                16, this_._internal_cleared_volume(), target);
          }

          // .google.protobuf.Timestamp cleared_volume_time = 17;
          if (cached_has_bits & 0x00000400u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                17, *this_._impl_.cleared_volume_time_, this_._impl_.cleared_volume_time_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp cleared_volume_trade_date = 18;
          if (cached_has_bits & 0x00000800u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                18, *this_._impl_.cleared_volume_trade_date_, this_._impl_.cleared_volume_trade_date_->GetCachedSize(), target,
                stream);
          }

          // .t4proto.v1.common.Price vwap_price = 19;
          if (cached_has_bits & 0x00001000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                19, *this_._impl_.vwap_price_, this_._impl_.vwap_price_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp vwap_time = 20;
          if (cached_has_bits & 0x00002000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                20, *this_._impl_.vwap_time_, this_._impl_.vwap_time_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp vwap_trade_date = 21;
          if (cached_has_bits & 0x00004000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                21, *this_._impl_.vwap_trade_date_, this_._impl_.vwap_trade_date_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketSettlement)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarketSettlement::ByteSizeLong(const MessageLite& base) {
          const MarketSettlement& this_ = static_cast<const MarketSettlement&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarketSettlement::ByteSizeLong() const {
          const MarketSettlement& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketSettlement)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string exchange_id = 1;
            if (!this_._internal_exchange_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_exchange_id());
            }
            // string market_id = 2;
            if (!this_._internal_market_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_market_id());
            }
            // string settlement_held_price = 7;
            if (!this_._internal_settlement_held_price().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_settlement_held_price());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // .t4proto.v1.common.Price settlement_price = 4;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.settlement_price_);
            }
            // .google.protobuf.Timestamp settlement_time = 5;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.settlement_time_);
            }
            // .google.protobuf.Timestamp settlement_trade_date = 6;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.settlement_trade_date_);
            }
            // .google.protobuf.Timestamp settlement_held_time = 8;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.settlement_held_time_);
            }
            // .google.protobuf.Timestamp settlement_held_trade_date = 9;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.settlement_held_trade_date_);
            }
            // .t4proto.v1.common.Price implied_price = 10;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.implied_price_);
            }
            // .t4proto.v1.common.Price implied_held_price = 11;
            if (cached_has_bits & 0x00000040u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.implied_held_price_);
            }
            // .google.protobuf.Timestamp implied_time = 12;
            if (cached_has_bits & 0x00000080u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.implied_time_);
            }
          }
          if (cached_has_bits & 0x00007f00u) {
            // .google.protobuf.Timestamp open_interest_time = 14;
            if (cached_has_bits & 0x00000100u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.open_interest_time_);
            }
            // .google.protobuf.Timestamp open_interest_trade_date = 15;
            if (cached_has_bits & 0x00000200u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.open_interest_trade_date_);
            }
            // .google.protobuf.Timestamp cleared_volume_time = 17;
            if (cached_has_bits & 0x00000400u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.cleared_volume_time_);
            }
            // .google.protobuf.Timestamp cleared_volume_trade_date = 18;
            if (cached_has_bits & 0x00000800u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.cleared_volume_trade_date_);
            }
            // .t4proto.v1.common.Price vwap_price = 19;
            if (cached_has_bits & 0x00001000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.vwap_price_);
            }
            // .google.protobuf.Timestamp vwap_time = 20;
            if (cached_has_bits & 0x00002000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.vwap_time_);
            }
            // .google.protobuf.Timestamp vwap_trade_date = 21;
            if (cached_has_bits & 0x00004000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.vwap_trade_date_);
            }
          }
           {
            // bool delayed = 3;
            if (this_._internal_delayed() != 0) {
              total_size += 2;
            }
            // int32 open_interest = 13;
            if (this_._internal_open_interest() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_open_interest());
            }
            // int32 cleared_volume = 16;
            if (this_._internal_cleared_volume() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_cleared_volume());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarketSettlement::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketSettlement*>(&to_msg);
  auto& from = static_cast<const MarketSettlement&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketSettlement)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_exchange_id().empty()) {
    _this->_internal_set_exchange_id(from._internal_exchange_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_settlement_held_price().empty()) {
    _this->_internal_set_settlement_held_price(from._internal_settlement_held_price());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.settlement_price_ != nullptr);
      if (_this->_impl_.settlement_price_ == nullptr) {
        _this->_impl_.settlement_price_ =
            ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(arena, *from._impl_.settlement_price_);
      } else {
        _this->_impl_.settlement_price_->MergeFrom(*from._impl_.settlement_price_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.settlement_time_ != nullptr);
      if (_this->_impl_.settlement_time_ == nullptr) {
        _this->_impl_.settlement_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.settlement_time_);
      } else {
        _this->_impl_.settlement_time_->MergeFrom(*from._impl_.settlement_time_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.settlement_trade_date_ != nullptr);
      if (_this->_impl_.settlement_trade_date_ == nullptr) {
        _this->_impl_.settlement_trade_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.settlement_trade_date_);
      } else {
        _this->_impl_.settlement_trade_date_->MergeFrom(*from._impl_.settlement_trade_date_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.settlement_held_time_ != nullptr);
      if (_this->_impl_.settlement_held_time_ == nullptr) {
        _this->_impl_.settlement_held_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.settlement_held_time_);
      } else {
        _this->_impl_.settlement_held_time_->MergeFrom(*from._impl_.settlement_held_time_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.settlement_held_trade_date_ != nullptr);
      if (_this->_impl_.settlement_held_trade_date_ == nullptr) {
        _this->_impl_.settlement_held_trade_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.settlement_held_trade_date_);
      } else {
        _this->_impl_.settlement_held_trade_date_->MergeFrom(*from._impl_.settlement_held_trade_date_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.implied_price_ != nullptr);
      if (_this->_impl_.implied_price_ == nullptr) {
        _this->_impl_.implied_price_ =
            ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(arena, *from._impl_.implied_price_);
      } else {
        _this->_impl_.implied_price_->MergeFrom(*from._impl_.implied_price_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.implied_held_price_ != nullptr);
      if (_this->_impl_.implied_held_price_ == nullptr) {
        _this->_impl_.implied_held_price_ =
            ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(arena, *from._impl_.implied_held_price_);
      } else {
        _this->_impl_.implied_held_price_->MergeFrom(*from._impl_.implied_held_price_);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(from._impl_.implied_time_ != nullptr);
      if (_this->_impl_.implied_time_ == nullptr) {
        _this->_impl_.implied_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.implied_time_);
      } else {
        _this->_impl_.implied_time_->MergeFrom(*from._impl_.implied_time_);
      }
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(from._impl_.open_interest_time_ != nullptr);
      if (_this->_impl_.open_interest_time_ == nullptr) {
        _this->_impl_.open_interest_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.open_interest_time_);
      } else {
        _this->_impl_.open_interest_time_->MergeFrom(*from._impl_.open_interest_time_);
      }
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(from._impl_.open_interest_trade_date_ != nullptr);
      if (_this->_impl_.open_interest_trade_date_ == nullptr) {
        _this->_impl_.open_interest_trade_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.open_interest_trade_date_);
      } else {
        _this->_impl_.open_interest_trade_date_->MergeFrom(*from._impl_.open_interest_trade_date_);
      }
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(from._impl_.cleared_volume_time_ != nullptr);
      if (_this->_impl_.cleared_volume_time_ == nullptr) {
        _this->_impl_.cleared_volume_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.cleared_volume_time_);
      } else {
        _this->_impl_.cleared_volume_time_->MergeFrom(*from._impl_.cleared_volume_time_);
      }
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(from._impl_.cleared_volume_trade_date_ != nullptr);
      if (_this->_impl_.cleared_volume_trade_date_ == nullptr) {
        _this->_impl_.cleared_volume_trade_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.cleared_volume_trade_date_);
      } else {
        _this->_impl_.cleared_volume_trade_date_->MergeFrom(*from._impl_.cleared_volume_trade_date_);
      }
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(from._impl_.vwap_price_ != nullptr);
      if (_this->_impl_.vwap_price_ == nullptr) {
        _this->_impl_.vwap_price_ =
            ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(arena, *from._impl_.vwap_price_);
      } else {
        _this->_impl_.vwap_price_->MergeFrom(*from._impl_.vwap_price_);
      }
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(from._impl_.vwap_time_ != nullptr);
      if (_this->_impl_.vwap_time_ == nullptr) {
        _this->_impl_.vwap_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.vwap_time_);
      } else {
        _this->_impl_.vwap_time_->MergeFrom(*from._impl_.vwap_time_);
      }
    }
    if (cached_has_bits & 0x00004000u) {
      ABSL_DCHECK(from._impl_.vwap_trade_date_ != nullptr);
      if (_this->_impl_.vwap_trade_date_ == nullptr) {
        _this->_impl_.vwap_trade_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.vwap_trade_date_);
      } else {
        _this->_impl_.vwap_trade_date_->MergeFrom(*from._impl_.vwap_trade_date_);
      }
    }
  }
  if (from._internal_delayed() != 0) {
    _this->_impl_.delayed_ = from._impl_.delayed_;
  }
  if (from._internal_open_interest() != 0) {
    _this->_impl_.open_interest_ = from._impl_.open_interest_;
  }
  if (from._internal_cleared_volume() != 0) {
    _this->_impl_.cleared_volume_ = from._impl_.cleared_volume_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketSettlement::CopyFrom(const MarketSettlement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketSettlement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketSettlement::InternalSwap(MarketSettlement* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_id_, &other->_impl_.exchange_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, &other->_impl_.market_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.settlement_held_price_, &other->_impl_.settlement_held_price_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.cleared_volume_)
      + sizeof(MarketSettlement::_impl_.cleared_volume_)
      - PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.settlement_price_)>(
          reinterpret_cast<char*>(&_impl_.settlement_price_),
          reinterpret_cast<char*>(&other->_impl_.settlement_price_));
}

::google::protobuf::Metadata MarketSettlement::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketSnapshotMessage::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSnapshotMessage, _impl_._oneof_case_);
};

void MarketSnapshotMessage::set_allocated_market_depth(::t4proto::v1::market::MarketDepth* market_depth) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (market_depth) {
    ::google::protobuf::Arena* submessage_arena = market_depth->GetArena();
    if (message_arena != submessage_arena) {
      market_depth = ::google::protobuf::internal::GetOwnedMessage(message_arena, market_depth, submessage_arena);
    }
    set_has_market_depth();
    _impl_.payload_.market_depth_ = market_depth;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSnapshotMessage.market_depth)
}
void MarketSnapshotMessage::set_allocated_market_depth_trade(::t4proto::v1::market::MarketDepthTrade* market_depth_trade) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (market_depth_trade) {
    ::google::protobuf::Arena* submessage_arena = market_depth_trade->GetArena();
    if (message_arena != submessage_arena) {
      market_depth_trade = ::google::protobuf::internal::GetOwnedMessage(message_arena, market_depth_trade, submessage_arena);
    }
    set_has_market_depth_trade();
    _impl_.payload_.market_depth_trade_ = market_depth_trade;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSnapshotMessage.market_depth_trade)
}
void MarketSnapshotMessage::set_allocated_market_high_low(::t4proto::v1::market::MarketHighLow* market_high_low) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (market_high_low) {
    ::google::protobuf::Arena* submessage_arena = market_high_low->GetArena();
    if (message_arena != submessage_arena) {
      market_high_low = ::google::protobuf::internal::GetOwnedMessage(message_arena, market_high_low, submessage_arena);
    }
    set_has_market_high_low();
    _impl_.payload_.market_high_low_ = market_high_low;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSnapshotMessage.market_high_low)
}
void MarketSnapshotMessage::set_allocated_market_price_limits(::t4proto::v1::market::MarketPriceLimits* market_price_limits) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (market_price_limits) {
    ::google::protobuf::Arena* submessage_arena = market_price_limits->GetArena();
    if (message_arena != submessage_arena) {
      market_price_limits = ::google::protobuf::internal::GetOwnedMessage(message_arena, market_price_limits, submessage_arena);
    }
    set_has_market_price_limits();
    _impl_.payload_.market_price_limits_ = market_price_limits;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSnapshotMessage.market_price_limits)
}
void MarketSnapshotMessage::set_allocated_market_settlement(::t4proto::v1::market::MarketSettlement* market_settlement) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (market_settlement) {
    ::google::protobuf::Arena* submessage_arena = market_settlement->GetArena();
    if (message_arena != submessage_arena) {
      market_settlement = ::google::protobuf::internal::GetOwnedMessage(message_arena, market_settlement, submessage_arena);
    }
    set_has_market_settlement();
    _impl_.payload_.market_settlement_ = market_settlement;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSnapshotMessage.market_settlement)
}
MarketSnapshotMessage::MarketSnapshotMessage(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketSnapshotMessage)
}
inline PROTOBUF_NDEBUG_INLINE MarketSnapshotMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::t4proto::v1::market::MarketSnapshotMessage& from_msg)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

MarketSnapshotMessage::MarketSnapshotMessage(
    ::google::protobuf::Arena* arena,
    const MarketSnapshotMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketSnapshotMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (payload_case()) {
    case PAYLOAD_NOT_SET:
      break;
      case kMarketDepth:
        _impl_.payload_.market_depth_ = ::google::protobuf::Message::CopyConstruct<::t4proto::v1::market::MarketDepth>(arena, *from._impl_.payload_.market_depth_);
        break;
      case kMarketDepthTrade:
        _impl_.payload_.market_depth_trade_ = ::google::protobuf::Message::CopyConstruct<::t4proto::v1::market::MarketDepthTrade>(arena, *from._impl_.payload_.market_depth_trade_);
        break;
      case kMarketHighLow:
        _impl_.payload_.market_high_low_ = ::google::protobuf::Message::CopyConstruct<::t4proto::v1::market::MarketHighLow>(arena, *from._impl_.payload_.market_high_low_);
        break;
      case kMarketPriceLimits:
        _impl_.payload_.market_price_limits_ = ::google::protobuf::Message::CopyConstruct<::t4proto::v1::market::MarketPriceLimits>(arena, *from._impl_.payload_.market_price_limits_);
        break;
      case kMarketSettlement:
        _impl_.payload_.market_settlement_ = ::google::protobuf::Message::CopyConstruct<::t4proto::v1::market::MarketSettlement>(arena, *from._impl_.payload_.market_settlement_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketSnapshotMessage)
}
inline PROTOBUF_NDEBUG_INLINE MarketSnapshotMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void MarketSnapshotMessage::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MarketSnapshotMessage::~MarketSnapshotMessage() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketSnapshotMessage)
  SharedDtor(*this);
}
inline void MarketSnapshotMessage::SharedDtor(MessageLite& self) {
  MarketSnapshotMessage& this_ = static_cast<MarketSnapshotMessage&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_payload()) {
    this_.clear_payload();
  }
  this_._impl_.~Impl_();
}

void MarketSnapshotMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:t4proto.v1.market.MarketSnapshotMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (payload_case()) {
    case kMarketDepth: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.market_depth_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.market_depth_);
      }
      break;
    }
    case kMarketDepthTrade: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.market_depth_trade_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.market_depth_trade_);
      }
      break;
    }
    case kMarketHighLow: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.market_high_low_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.market_high_low_);
      }
      break;
    }
    case kMarketPriceLimits: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.market_price_limits_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.market_price_limits_);
      }
      break;
    }
    case kMarketSettlement: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.market_settlement_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.market_settlement_);
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


inline void* MarketSnapshotMessage::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarketSnapshotMessage(arena);
}
constexpr auto MarketSnapshotMessage::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MarketSnapshotMessage),
                                            alignof(MarketSnapshotMessage));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarketSnapshotMessage::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarketSnapshotMessage_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarketSnapshotMessage::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarketSnapshotMessage>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarketSnapshotMessage::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarketSnapshotMessage>(), &MarketSnapshotMessage::ByteSizeLong,
            &MarketSnapshotMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarketSnapshotMessage, _impl_._cached_size_),
        false,
    },
    &MarketSnapshotMessage::kDescriptorMethods,
    &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarketSnapshotMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 5, 5, 0, 2> MarketSnapshotMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    7, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967171,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketSnapshotMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .t4proto.v1.market.MarketDepth market_depth = 3;
    {PROTOBUF_FIELD_OFFSET(MarketSnapshotMessage, _impl_.payload_.market_depth_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.market.MarketDepthTrade market_depth_trade = 4;
    {PROTOBUF_FIELD_OFFSET(MarketSnapshotMessage, _impl_.payload_.market_depth_trade_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.market.MarketHighLow market_high_low = 5;
    {PROTOBUF_FIELD_OFFSET(MarketSnapshotMessage, _impl_.payload_.market_high_low_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.market.MarketPriceLimits market_price_limits = 6;
    {PROTOBUF_FIELD_OFFSET(MarketSnapshotMessage, _impl_.payload_.market_price_limits_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.market.MarketSettlement market_settlement = 7;
    {PROTOBUF_FIELD_OFFSET(MarketSnapshotMessage, _impl_.payload_.market_settlement_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketDepth>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketDepthTrade>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketHighLow>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketPriceLimits>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketSettlement>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MarketSnapshotMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketSnapshotMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarketSnapshotMessage::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarketSnapshotMessage& this_ = static_cast<const MarketSnapshotMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarketSnapshotMessage::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarketSnapshotMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketSnapshotMessage)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          switch (this_.payload_case()) {
            case kMarketDepth: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.payload_.market_depth_, this_._impl_.payload_.market_depth_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMarketDepthTrade: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  4, *this_._impl_.payload_.market_depth_trade_, this_._impl_.payload_.market_depth_trade_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMarketHighLow: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  5, *this_._impl_.payload_.market_high_low_, this_._impl_.payload_.market_high_low_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMarketPriceLimits: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  6, *this_._impl_.payload_.market_price_limits_, this_._impl_.payload_.market_price_limits_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kMarketSettlement: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  7, *this_._impl_.payload_.market_settlement_, this_._impl_.payload_.market_settlement_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketSnapshotMessage)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarketSnapshotMessage::ByteSizeLong(const MessageLite& base) {
          const MarketSnapshotMessage& this_ = static_cast<const MarketSnapshotMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarketSnapshotMessage::ByteSizeLong() const {
          const MarketSnapshotMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketSnapshotMessage)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          switch (this_.payload_case()) {
            // .t4proto.v1.market.MarketDepth market_depth = 3;
            case kMarketDepth: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.market_depth_);
              break;
            }
            // .t4proto.v1.market.MarketDepthTrade market_depth_trade = 4;
            case kMarketDepthTrade: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.market_depth_trade_);
              break;
            }
            // .t4proto.v1.market.MarketHighLow market_high_low = 5;
            case kMarketHighLow: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.market_high_low_);
              break;
            }
            // .t4proto.v1.market.MarketPriceLimits market_price_limits = 6;
            case kMarketPriceLimits: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.market_price_limits_);
              break;
            }
            // .t4proto.v1.market.MarketSettlement market_settlement = 7;
            case kMarketSettlement: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.market_settlement_);
              break;
            }
            case PAYLOAD_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarketSnapshotMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketSnapshotMessage*>(&to_msg);
  auto& from = static_cast<const MarketSnapshotMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketSnapshotMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_payload();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kMarketDepth: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.market_depth_ =
              ::google::protobuf::Message::CopyConstruct<::t4proto::v1::market::MarketDepth>(arena, *from._impl_.payload_.market_depth_);
        } else {
          _this->_impl_.payload_.market_depth_->MergeFrom(from._internal_market_depth());
        }
        break;
      }
      case kMarketDepthTrade: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.market_depth_trade_ =
              ::google::protobuf::Message::CopyConstruct<::t4proto::v1::market::MarketDepthTrade>(arena, *from._impl_.payload_.market_depth_trade_);
        } else {
          _this->_impl_.payload_.market_depth_trade_->MergeFrom(from._internal_market_depth_trade());
        }
        break;
      }
      case kMarketHighLow: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.market_high_low_ =
              ::google::protobuf::Message::CopyConstruct<::t4proto::v1::market::MarketHighLow>(arena, *from._impl_.payload_.market_high_low_);
        } else {
          _this->_impl_.payload_.market_high_low_->MergeFrom(from._internal_market_high_low());
        }
        break;
      }
      case kMarketPriceLimits: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.market_price_limits_ =
              ::google::protobuf::Message::CopyConstruct<::t4proto::v1::market::MarketPriceLimits>(arena, *from._impl_.payload_.market_price_limits_);
        } else {
          _this->_impl_.payload_.market_price_limits_->MergeFrom(from._internal_market_price_limits());
        }
        break;
      }
      case kMarketSettlement: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.market_settlement_ =
              ::google::protobuf::Message::CopyConstruct<::t4proto::v1::market::MarketSettlement>(arena, *from._impl_.payload_.market_settlement_);
        } else {
          _this->_impl_.payload_.market_settlement_->MergeFrom(from._internal_market_settlement());
        }
        break;
      }
      case PAYLOAD_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketSnapshotMessage::CopyFrom(const MarketSnapshotMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketSnapshotMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketSnapshotMessage::InternalSwap(MarketSnapshotMessage* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata MarketSnapshotMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketSnapshot::_Internal {
 public:
};

MarketSnapshot::MarketSnapshot(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketSnapshot)
}
inline PROTOBUF_NDEBUG_INLINE MarketSnapshot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::t4proto::v1::market::MarketSnapshot& from_msg)
      : messages_{visibility, arena, from.messages_},
        market_id_(arena, from.market_id_),
        _cached_size_{0} {}

MarketSnapshot::MarketSnapshot(
    ::google::protobuf::Arena* arena,
    const MarketSnapshot& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketSnapshot* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, mode_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, mode_),
           offsetof(Impl_, delayed_) -
               offsetof(Impl_, mode_) +
               sizeof(Impl_::delayed_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketSnapshot)
}
inline PROTOBUF_NDEBUG_INLINE MarketSnapshot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : messages_{visibility, arena},
        market_id_(arena),
        _cached_size_{0} {}

inline void MarketSnapshot::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, mode_),
           0,
           offsetof(Impl_, delayed_) -
               offsetof(Impl_, mode_) +
               sizeof(Impl_::delayed_));
}
MarketSnapshot::~MarketSnapshot() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketSnapshot)
  SharedDtor(*this);
}
inline void MarketSnapshot::SharedDtor(MessageLite& self) {
  MarketSnapshot& this_ = static_cast<MarketSnapshot&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.market_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* MarketSnapshot::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarketSnapshot(arena);
}
constexpr auto MarketSnapshot::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MarketSnapshot, _impl_.messages_) +
          decltype(MarketSnapshot::_impl_.messages_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(MarketSnapshot), alignof(MarketSnapshot), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MarketSnapshot::PlacementNew_,
                                 sizeof(MarketSnapshot),
                                 alignof(MarketSnapshot));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarketSnapshot::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarketSnapshot_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarketSnapshot::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarketSnapshot>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarketSnapshot::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarketSnapshot>(), &MarketSnapshot::ByteSizeLong,
            &MarketSnapshot::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarketSnapshot, _impl_._cached_size_),
        false,
    },
    &MarketSnapshot::kDescriptorMethods,
    &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarketSnapshot::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 50, 2> MarketSnapshot::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketSnapshot>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string market_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MarketSnapshot, _impl_.market_id_)}},
    // .t4proto.v1.common.MarketMode mode = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketSnapshot, _impl_.mode_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MarketSnapshot, _impl_.mode_)}},
    // bool due_to_connection = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MarketSnapshot, _impl_.due_to_connection_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MarketSnapshot, _impl_.due_to_connection_)}},
    // bool delayed = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(MarketSnapshot, _impl_.delayed_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MarketSnapshot, _impl_.delayed_)}},
    // repeated .t4proto.v1.market.MarketSnapshotMessage messages = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(MarketSnapshot, _impl_.messages_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string market_id = 1;
    {PROTOBUF_FIELD_OFFSET(MarketSnapshot, _impl_.market_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .t4proto.v1.common.MarketMode mode = 2;
    {PROTOBUF_FIELD_OFFSET(MarketSnapshot, _impl_.mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool due_to_connection = 3;
    {PROTOBUF_FIELD_OFFSET(MarketSnapshot, _impl_.due_to_connection_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool delayed = 4;
    {PROTOBUF_FIELD_OFFSET(MarketSnapshot, _impl_.delayed_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // repeated .t4proto.v1.market.MarketSnapshotMessage messages = 5;
    {PROTOBUF_FIELD_OFFSET(MarketSnapshot, _impl_.messages_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketSnapshotMessage>()},
  }}, {{
    "\40\11\0\0\0\0\0\0"
    "t4proto.v1.market.MarketSnapshot"
    "market_id"
  }},
};

PROTOBUF_NOINLINE void MarketSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketSnapshot)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  _impl_.market_id_.ClearToEmpty();
  ::memset(&_impl_.mode_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.delayed_) -
      reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.delayed_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarketSnapshot::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarketSnapshot& this_ = static_cast<const MarketSnapshot&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarketSnapshot::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarketSnapshot& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketSnapshot)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string market_id = 1;
          if (!this_._internal_market_id().empty()) {
            const std::string& _s = this_._internal_market_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketSnapshot.market_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // .t4proto.v1.common.MarketMode mode = 2;
          if (this_._internal_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_mode(), target);
          }

          // bool due_to_connection = 3;
          if (this_._internal_due_to_connection() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_due_to_connection(), target);
          }

          // bool delayed = 4;
          if (this_._internal_delayed() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                4, this_._internal_delayed(), target);
          }

          // repeated .t4proto.v1.market.MarketSnapshotMessage messages = 5;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_messages_size());
               i < n; i++) {
            const auto& repfield = this_._internal_messages().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    5, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketSnapshot)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarketSnapshot::ByteSizeLong(const MessageLite& base) {
          const MarketSnapshot& this_ = static_cast<const MarketSnapshot&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarketSnapshot::ByteSizeLong() const {
          const MarketSnapshot& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketSnapshot)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .t4proto.v1.market.MarketSnapshotMessage messages = 5;
            {
              total_size += 1UL * this_._internal_messages_size();
              for (const auto& msg : this_._internal_messages()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string market_id = 1;
            if (!this_._internal_market_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_market_id());
            }
            // .t4proto.v1.common.MarketMode mode = 2;
            if (this_._internal_mode() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_mode());
            }
            // bool due_to_connection = 3;
            if (this_._internal_due_to_connection() != 0) {
              total_size += 2;
            }
            // bool delayed = 4;
            if (this_._internal_delayed() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarketSnapshot::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketSnapshot*>(&to_msg);
  auto& from = static_cast<const MarketSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketSnapshot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_messages()->MergeFrom(
      from._internal_messages());
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_mode() != 0) {
    _this->_impl_.mode_ = from._impl_.mode_;
  }
  if (from._internal_due_to_connection() != 0) {
    _this->_impl_.due_to_connection_ = from._impl_.due_to_connection_;
  }
  if (from._internal_delayed() != 0) {
    _this->_impl_.delayed_ = from._impl_.delayed_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketSnapshot::CopyFrom(const MarketSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketSnapshot::InternalSwap(MarketSnapshot* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, &other->_impl_.market_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketSnapshot, _impl_.delayed_)
      + sizeof(MarketSnapshot::_impl_.delayed_)
      - PROTOBUF_FIELD_OFFSET(MarketSnapshot, _impl_.mode_)>(
          reinterpret_cast<char*>(&_impl_.mode_),
          reinterpret_cast<char*>(&other->_impl_.mode_));
}

::google::protobuf::Metadata MarketSnapshot::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketByOrderSnapshot_Order::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MarketByOrderSnapshot_Order>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot_Order, _impl_._has_bits_);
};

void MarketByOrderSnapshot_Order::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.price_ != nullptr) _impl_.price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MarketByOrderSnapshot_Order::MarketByOrderSnapshot_Order(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketByOrderSnapshot.Order)
}
inline PROTOBUF_NDEBUG_INLINE MarketByOrderSnapshot_Order::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::t4proto::v1::market::MarketByOrderSnapshot_Order& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MarketByOrderSnapshot_Order::MarketByOrderSnapshot_Order(
    ::google::protobuf::Arena* arena,
    const MarketByOrderSnapshot_Order& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketByOrderSnapshot_Order* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.price_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(
                              arena, *from._impl_.price_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, order_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, order_id_),
           offsetof(Impl_, priority_) -
               offsetof(Impl_, order_id_) +
               sizeof(Impl_::priority_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketByOrderSnapshot.Order)
}
inline PROTOBUF_NDEBUG_INLINE MarketByOrderSnapshot_Order::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MarketByOrderSnapshot_Order::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, price_),
           0,
           offsetof(Impl_, priority_) -
               offsetof(Impl_, price_) +
               sizeof(Impl_::priority_));
}
MarketByOrderSnapshot_Order::~MarketByOrderSnapshot_Order() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketByOrderSnapshot.Order)
  SharedDtor(*this);
}
inline void MarketByOrderSnapshot_Order::SharedDtor(MessageLite& self) {
  MarketByOrderSnapshot_Order& this_ = static_cast<MarketByOrderSnapshot_Order&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.price_;
  this_._impl_.~Impl_();
}

inline void* MarketByOrderSnapshot_Order::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarketByOrderSnapshot_Order(arena);
}
constexpr auto MarketByOrderSnapshot_Order::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MarketByOrderSnapshot_Order),
                                            alignof(MarketByOrderSnapshot_Order));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarketByOrderSnapshot_Order::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarketByOrderSnapshot_Order_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarketByOrderSnapshot_Order::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarketByOrderSnapshot_Order>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarketByOrderSnapshot_Order::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarketByOrderSnapshot_Order>(), &MarketByOrderSnapshot_Order::ByteSizeLong,
            &MarketByOrderSnapshot_Order::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot_Order, _impl_._cached_size_),
        false,
    },
    &MarketByOrderSnapshot_Order::kDescriptorMethods,
    &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarketByOrderSnapshot_Order::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 0, 2> MarketByOrderSnapshot_Order::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot_Order, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketByOrderSnapshot_Order>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint64 order_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MarketByOrderSnapshot_Order, _impl_.order_id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot_Order, _impl_.order_id_)}},
    // .t4proto.v1.common.BidOffer bid_offer = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketByOrderSnapshot_Order, _impl_.bid_offer_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot_Order, _impl_.bid_offer_)}},
    // .t4proto.v1.common.Price price = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot_Order, _impl_.price_)}},
    // int32 volume = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketByOrderSnapshot_Order, _impl_.volume_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot_Order, _impl_.volume_)}},
    // uint64 priority = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MarketByOrderSnapshot_Order, _impl_.priority_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot_Order, _impl_.priority_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 order_id = 1;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot_Order, _impl_.order_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // .t4proto.v1.common.BidOffer bid_offer = 2;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot_Order, _impl_.bid_offer_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .t4proto.v1.common.Price price = 3;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot_Order, _impl_.price_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 volume = 4;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot_Order, _impl_.volume_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // uint64 priority = 5;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot_Order, _impl_.priority_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MarketByOrderSnapshot_Order::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketByOrderSnapshot.Order)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.price_ != nullptr);
    _impl_.price_->Clear();
  }
  ::memset(&_impl_.order_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.priority_) -
      reinterpret_cast<char*>(&_impl_.order_id_)) + sizeof(_impl_.priority_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarketByOrderSnapshot_Order::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarketByOrderSnapshot_Order& this_ = static_cast<const MarketByOrderSnapshot_Order&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarketByOrderSnapshot_Order::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarketByOrderSnapshot_Order& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketByOrderSnapshot.Order)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint64 order_id = 1;
          if (this_._internal_order_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                1, this_._internal_order_id(), target);
          }

          // .t4proto.v1.common.BidOffer bid_offer = 2;
          if (this_._internal_bid_offer() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_bid_offer(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .t4proto.v1.common.Price price = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.price_, this_._impl_.price_->GetCachedSize(), target,
                stream);
          }

          // int32 volume = 4;
          if (this_._internal_volume() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_volume(), target);
          }

          // uint64 priority = 5;
          if (this_._internal_priority() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                5, this_._internal_priority(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketByOrderSnapshot.Order)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarketByOrderSnapshot_Order::ByteSizeLong(const MessageLite& base) {
          const MarketByOrderSnapshot_Order& this_ = static_cast<const MarketByOrderSnapshot_Order&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarketByOrderSnapshot_Order::ByteSizeLong() const {
          const MarketByOrderSnapshot_Order& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketByOrderSnapshot.Order)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .t4proto.v1.common.Price price = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.price_);
            }
          }
           {
            // uint64 order_id = 1;
            if (this_._internal_order_id() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_order_id());
            }
            // .t4proto.v1.common.BidOffer bid_offer = 2;
            if (this_._internal_bid_offer() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_bid_offer());
            }
            // int32 volume = 4;
            if (this_._internal_volume() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_volume());
            }
            // uint64 priority = 5;
            if (this_._internal_priority() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_priority());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarketByOrderSnapshot_Order::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketByOrderSnapshot_Order*>(&to_msg);
  auto& from = static_cast<const MarketByOrderSnapshot_Order&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketByOrderSnapshot.Order)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.price_ != nullptr);
    if (_this->_impl_.price_ == nullptr) {
      _this->_impl_.price_ =
          ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(arena, *from._impl_.price_);
    } else {
      _this->_impl_.price_->MergeFrom(*from._impl_.price_);
    }
  }
  if (from._internal_order_id() != 0) {
    _this->_impl_.order_id_ = from._impl_.order_id_;
  }
  if (from._internal_bid_offer() != 0) {
    _this->_impl_.bid_offer_ = from._impl_.bid_offer_;
  }
  if (from._internal_volume() != 0) {
    _this->_impl_.volume_ = from._impl_.volume_;
  }
  if (from._internal_priority() != 0) {
    _this->_impl_.priority_ = from._impl_.priority_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketByOrderSnapshot_Order::CopyFrom(const MarketByOrderSnapshot_Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketByOrderSnapshot.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketByOrderSnapshot_Order::InternalSwap(MarketByOrderSnapshot_Order* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot_Order, _impl_.priority_)
      + sizeof(MarketByOrderSnapshot_Order::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot_Order, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::google::protobuf::Metadata MarketByOrderSnapshot_Order::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketByOrderSnapshot::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MarketByOrderSnapshot>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot, _impl_._has_bits_);
};

void MarketByOrderSnapshot::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MarketByOrderSnapshot::MarketByOrderSnapshot(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketByOrderSnapshot)
}
inline PROTOBUF_NDEBUG_INLINE MarketByOrderSnapshot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::t4proto::v1::market::MarketByOrderSnapshot& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        orders_{visibility, arena, from.orders_},
        market_id_(arena, from.market_id_) {}

MarketByOrderSnapshot::MarketByOrderSnapshot(
    ::google::protobuf::Arena* arena,
    const MarketByOrderSnapshot& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketByOrderSnapshot* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.time_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.time_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, last_sequence_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, last_sequence_),
           offsetof(Impl_, mode_) -
               offsetof(Impl_, last_sequence_) +
               sizeof(Impl_::mode_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketByOrderSnapshot)
}
inline PROTOBUF_NDEBUG_INLINE MarketByOrderSnapshot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        orders_{visibility, arena},
        market_id_(arena) {}

inline void MarketByOrderSnapshot::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_),
           0,
           offsetof(Impl_, mode_) -
               offsetof(Impl_, time_) +
               sizeof(Impl_::mode_));
}
MarketByOrderSnapshot::~MarketByOrderSnapshot() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketByOrderSnapshot)
  SharedDtor(*this);
}
inline void MarketByOrderSnapshot::SharedDtor(MessageLite& self) {
  MarketByOrderSnapshot& this_ = static_cast<MarketByOrderSnapshot&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.market_id_.Destroy();
  delete this_._impl_.time_;
  this_._impl_.~Impl_();
}

inline void* MarketByOrderSnapshot::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarketByOrderSnapshot(arena);
}
constexpr auto MarketByOrderSnapshot::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot, _impl_.orders_) +
          decltype(MarketByOrderSnapshot::_impl_.orders_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(MarketByOrderSnapshot), alignof(MarketByOrderSnapshot), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MarketByOrderSnapshot::PlacementNew_,
                                 sizeof(MarketByOrderSnapshot),
                                 alignof(MarketByOrderSnapshot));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarketByOrderSnapshot::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarketByOrderSnapshot_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarketByOrderSnapshot::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarketByOrderSnapshot>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarketByOrderSnapshot::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarketByOrderSnapshot>(), &MarketByOrderSnapshot::ByteSizeLong,
            &MarketByOrderSnapshot::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot, _impl_._cached_size_),
        false,
    },
    &MarketByOrderSnapshot::kDescriptorMethods,
    &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarketByOrderSnapshot::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 57, 2> MarketByOrderSnapshot::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketByOrderSnapshot>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string market_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot, _impl_.market_id_)}},
    // .google.protobuf.Timestamp time = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot, _impl_.time_)}},
    // .t4proto.v1.common.MarketMode mode = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketByOrderSnapshot, _impl_.mode_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot, _impl_.mode_)}},
    // uint64 last_sequence = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MarketByOrderSnapshot, _impl_.last_sequence_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot, _impl_.last_sequence_)}},
    // repeated .t4proto.v1.market.MarketByOrderSnapshot.Order orders = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 1, PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot, _impl_.orders_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string market_id = 1;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot, _impl_.market_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp time = 2;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot, _impl_.time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.common.MarketMode mode = 3;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot, _impl_.mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // uint64 last_sequence = 4;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot, _impl_.last_sequence_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // repeated .t4proto.v1.market.MarketByOrderSnapshot.Order orders = 5;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot, _impl_.orders_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketByOrderSnapshot_Order>()},
  }}, {{
    "\47\11\0\0\0\0\0\0"
    "t4proto.v1.market.MarketByOrderSnapshot"
    "market_id"
  }},
};

PROTOBUF_NOINLINE void MarketByOrderSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketByOrderSnapshot)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.orders_.Clear();
  _impl_.market_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.time_ != nullptr);
    _impl_.time_->Clear();
  }
  ::memset(&_impl_.last_sequence_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.mode_) -
      reinterpret_cast<char*>(&_impl_.last_sequence_)) + sizeof(_impl_.mode_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarketByOrderSnapshot::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarketByOrderSnapshot& this_ = static_cast<const MarketByOrderSnapshot&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarketByOrderSnapshot::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarketByOrderSnapshot& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketByOrderSnapshot)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string market_id = 1;
          if (!this_._internal_market_id().empty()) {
            const std::string& _s = this_._internal_market_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketByOrderSnapshot.market_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp time = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.time_, this_._impl_.time_->GetCachedSize(), target,
                stream);
          }

          // .t4proto.v1.common.MarketMode mode = 3;
          if (this_._internal_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_mode(), target);
          }

          // uint64 last_sequence = 4;
          if (this_._internal_last_sequence() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                4, this_._internal_last_sequence(), target);
          }

          // repeated .t4proto.v1.market.MarketByOrderSnapshot.Order orders = 5;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_orders_size());
               i < n; i++) {
            const auto& repfield = this_._internal_orders().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    5, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketByOrderSnapshot)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarketByOrderSnapshot::ByteSizeLong(const MessageLite& base) {
          const MarketByOrderSnapshot& this_ = static_cast<const MarketByOrderSnapshot&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarketByOrderSnapshot::ByteSizeLong() const {
          const MarketByOrderSnapshot& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketByOrderSnapshot)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .t4proto.v1.market.MarketByOrderSnapshot.Order orders = 5;
            {
              total_size += 1UL * this_._internal_orders_size();
              for (const auto& msg : this_._internal_orders()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string market_id = 1;
            if (!this_._internal_market_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_market_id());
            }
          }
           {
            // .google.protobuf.Timestamp time = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.time_);
            }
          }
           {
            // uint64 last_sequence = 4;
            if (this_._internal_last_sequence() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_last_sequence());
            }
            // .t4proto.v1.common.MarketMode mode = 3;
            if (this_._internal_mode() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_mode());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarketByOrderSnapshot::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketByOrderSnapshot*>(&to_msg);
  auto& from = static_cast<const MarketByOrderSnapshot&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketByOrderSnapshot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_orders()->MergeFrom(
      from._internal_orders());
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.time_ != nullptr);
    if (_this->_impl_.time_ == nullptr) {
      _this->_impl_.time_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.time_);
    } else {
      _this->_impl_.time_->MergeFrom(*from._impl_.time_);
    }
  }
  if (from._internal_last_sequence() != 0) {
    _this->_impl_.last_sequence_ = from._impl_.last_sequence_;
  }
  if (from._internal_mode() != 0) {
    _this->_impl_.mode_ = from._impl_.mode_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketByOrderSnapshot::CopyFrom(const MarketByOrderSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketByOrderSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketByOrderSnapshot::InternalSwap(MarketByOrderSnapshot* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.orders_.InternalSwap(&other->_impl_.orders_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, &other->_impl_.market_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot, _impl_.mode_)
      + sizeof(MarketByOrderSnapshot::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::google::protobuf::Metadata MarketByOrderSnapshot::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketByOrderUpdate_Update::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MarketByOrderUpdate_Update>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate_Update, _impl_._has_bits_);
};

void MarketByOrderUpdate_Update::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.price_ != nullptr) _impl_.price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MarketByOrderUpdate_Update::MarketByOrderUpdate_Update(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketByOrderUpdate.Update)
}
inline PROTOBUF_NDEBUG_INLINE MarketByOrderUpdate_Update::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::t4proto::v1::market::MarketByOrderUpdate_Update& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

MarketByOrderUpdate_Update::MarketByOrderUpdate_Update(
    ::google::protobuf::Arena* arena,
    const MarketByOrderUpdate_Update& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketByOrderUpdate_Update* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.price_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(
                              arena, *from._impl_.price_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, order_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, order_id_),
           offsetof(Impl_, volume_) -
               offsetof(Impl_, order_id_) +
               sizeof(Impl_::volume_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketByOrderUpdate.Update)
}
inline PROTOBUF_NDEBUG_INLINE MarketByOrderUpdate_Update::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MarketByOrderUpdate_Update::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, price_),
           0,
           offsetof(Impl_, volume_) -
               offsetof(Impl_, price_) +
               sizeof(Impl_::volume_));
}
MarketByOrderUpdate_Update::~MarketByOrderUpdate_Update() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketByOrderUpdate.Update)
  SharedDtor(*this);
}
inline void MarketByOrderUpdate_Update::SharedDtor(MessageLite& self) {
  MarketByOrderUpdate_Update& this_ = static_cast<MarketByOrderUpdate_Update&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.price_;
  this_._impl_.~Impl_();
}

inline void* MarketByOrderUpdate_Update::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarketByOrderUpdate_Update(arena);
}
constexpr auto MarketByOrderUpdate_Update::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MarketByOrderUpdate_Update),
                                            alignof(MarketByOrderUpdate_Update));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarketByOrderUpdate_Update::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarketByOrderUpdate_Update_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarketByOrderUpdate_Update::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarketByOrderUpdate_Update>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarketByOrderUpdate_Update::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarketByOrderUpdate_Update>(), &MarketByOrderUpdate_Update::ByteSizeLong,
            &MarketByOrderUpdate_Update::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate_Update, _impl_._cached_size_),
        false,
    },
    &MarketByOrderUpdate_Update::kDescriptorMethods,
    &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarketByOrderUpdate_Update::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 0, 2> MarketByOrderUpdate_Update::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate_Update, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketByOrderUpdate_Update>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .t4proto.v1.market.MarketByOrderUpdate.UpdateType update_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketByOrderUpdate_Update, _impl_.update_type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate_Update, _impl_.update_type_)}},
    // uint64 order_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MarketByOrderUpdate_Update, _impl_.order_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate_Update, _impl_.order_id_)}},
    // .t4proto.v1.common.BidOffer bid_offer = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketByOrderUpdate_Update, _impl_.bid_offer_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate_Update, _impl_.bid_offer_)}},
    // .t4proto.v1.common.Price price = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate_Update, _impl_.price_)}},
    // int32 volume = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketByOrderUpdate_Update, _impl_.volume_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate_Update, _impl_.volume_)}},
    // uint64 priority = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MarketByOrderUpdate_Update, _impl_.priority_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate_Update, _impl_.priority_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .t4proto.v1.market.MarketByOrderUpdate.UpdateType update_type = 1;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate_Update, _impl_.update_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // uint64 order_id = 2;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate_Update, _impl_.order_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // .t4proto.v1.common.BidOffer bid_offer = 3;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate_Update, _impl_.bid_offer_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .t4proto.v1.common.Price price = 4;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate_Update, _impl_.price_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 volume = 5;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate_Update, _impl_.volume_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // uint64 priority = 6;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate_Update, _impl_.priority_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }}, {{
    {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void MarketByOrderUpdate_Update::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketByOrderUpdate.Update)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.price_ != nullptr);
    _impl_.price_->Clear();
  }
  ::memset(&_impl_.order_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.volume_) -
      reinterpret_cast<char*>(&_impl_.order_id_)) + sizeof(_impl_.volume_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarketByOrderUpdate_Update::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarketByOrderUpdate_Update& this_ = static_cast<const MarketByOrderUpdate_Update&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarketByOrderUpdate_Update::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarketByOrderUpdate_Update& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketByOrderUpdate.Update)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .t4proto.v1.market.MarketByOrderUpdate.UpdateType update_type = 1;
          if (this_._internal_update_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_update_type(), target);
          }

          // uint64 order_id = 2;
          if (this_._internal_order_id() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                2, this_._internal_order_id(), target);
          }

          // .t4proto.v1.common.BidOffer bid_offer = 3;
          if (this_._internal_bid_offer() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_bid_offer(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .t4proto.v1.common.Price price = 4;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.price_, this_._impl_.price_->GetCachedSize(), target,
                stream);
          }

          // int32 volume = 5;
          if (this_._internal_volume() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_volume(), target);
          }

          // uint64 priority = 6;
          if (this_._internal_priority() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                6, this_._internal_priority(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketByOrderUpdate.Update)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarketByOrderUpdate_Update::ByteSizeLong(const MessageLite& base) {
          const MarketByOrderUpdate_Update& this_ = static_cast<const MarketByOrderUpdate_Update&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarketByOrderUpdate_Update::ByteSizeLong() const {
          const MarketByOrderUpdate_Update& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketByOrderUpdate.Update)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .t4proto.v1.common.Price price = 4;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.price_);
            }
          }
           {
            // uint64 order_id = 2;
            if (this_._internal_order_id() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_order_id());
            }
            // .t4proto.v1.market.MarketByOrderUpdate.UpdateType update_type = 1;
            if (this_._internal_update_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_update_type());
            }
            // .t4proto.v1.common.BidOffer bid_offer = 3;
            if (this_._internal_bid_offer() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_bid_offer());
            }
            // uint64 priority = 6;
            if (this_._internal_priority() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_priority());
            }
            // int32 volume = 5;
            if (this_._internal_volume() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_volume());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarketByOrderUpdate_Update::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketByOrderUpdate_Update*>(&to_msg);
  auto& from = static_cast<const MarketByOrderUpdate_Update&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketByOrderUpdate.Update)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.price_ != nullptr);
    if (_this->_impl_.price_ == nullptr) {
      _this->_impl_.price_ =
          ::google::protobuf::Message::CopyConstruct<::t4proto::v1::common::Price>(arena, *from._impl_.price_);
    } else {
      _this->_impl_.price_->MergeFrom(*from._impl_.price_);
    }
  }
  if (from._internal_order_id() != 0) {
    _this->_impl_.order_id_ = from._impl_.order_id_;
  }
  if (from._internal_update_type() != 0) {
    _this->_impl_.update_type_ = from._impl_.update_type_;
  }
  if (from._internal_bid_offer() != 0) {
    _this->_impl_.bid_offer_ = from._impl_.bid_offer_;
  }
  if (from._internal_priority() != 0) {
    _this->_impl_.priority_ = from._impl_.priority_;
  }
  if (from._internal_volume() != 0) {
    _this->_impl_.volume_ = from._impl_.volume_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketByOrderUpdate_Update::CopyFrom(const MarketByOrderUpdate_Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketByOrderUpdate.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketByOrderUpdate_Update::InternalSwap(MarketByOrderUpdate_Update* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate_Update, _impl_.volume_)
      + sizeof(MarketByOrderUpdate_Update::_impl_.volume_)
      - PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate_Update, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::google::protobuf::Metadata MarketByOrderUpdate_Update::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MarketByOrderUpdate::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MarketByOrderUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate, _impl_._has_bits_);
};

void MarketByOrderUpdate::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ != nullptr) _impl_.time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
MarketByOrderUpdate::MarketByOrderUpdate(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketByOrderUpdate)
}
inline PROTOBUF_NDEBUG_INLINE MarketByOrderUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::t4proto::v1::market::MarketByOrderUpdate& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        updates_{visibility, arena, from.updates_},
        market_id_(arena, from.market_id_) {}

MarketByOrderUpdate::MarketByOrderUpdate(
    ::google::protobuf::Arena* arena,
    const MarketByOrderUpdate& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MarketByOrderUpdate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.time_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.time_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, sequence_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, sequence_),
           offsetof(Impl_, mode_) -
               offsetof(Impl_, sequence_) +
               sizeof(Impl_::mode_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketByOrderUpdate)
}
inline PROTOBUF_NDEBUG_INLINE MarketByOrderUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        updates_{visibility, arena},
        market_id_(arena) {}

inline void MarketByOrderUpdate::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, time_),
           0,
           offsetof(Impl_, mode_) -
               offsetof(Impl_, time_) +
               sizeof(Impl_::mode_));
}
MarketByOrderUpdate::~MarketByOrderUpdate() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketByOrderUpdate)
  SharedDtor(*this);
}
inline void MarketByOrderUpdate::SharedDtor(MessageLite& self) {
  MarketByOrderUpdate& this_ = static_cast<MarketByOrderUpdate&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.market_id_.Destroy();
  delete this_._impl_.time_;
  this_._impl_.~Impl_();
}

inline void* MarketByOrderUpdate::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MarketByOrderUpdate(arena);
}
constexpr auto MarketByOrderUpdate::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate, _impl_.updates_) +
          decltype(MarketByOrderUpdate::_impl_.updates_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(MarketByOrderUpdate), alignof(MarketByOrderUpdate), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MarketByOrderUpdate::PlacementNew_,
                                 sizeof(MarketByOrderUpdate),
                                 alignof(MarketByOrderUpdate));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MarketByOrderUpdate::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MarketByOrderUpdate_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MarketByOrderUpdate::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MarketByOrderUpdate>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MarketByOrderUpdate::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MarketByOrderUpdate>(), &MarketByOrderUpdate::ByteSizeLong,
            &MarketByOrderUpdate::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate, _impl_._cached_size_),
        false,
    },
    &MarketByOrderUpdate::kDescriptorMethods,
    &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MarketByOrderUpdate::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 2, 55, 2> MarketByOrderUpdate::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketByOrderUpdate>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string market_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate, _impl_.market_id_)}},
    // .google.protobuf.Timestamp time = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate, _impl_.time_)}},
    // .t4proto.v1.common.MarketMode mode = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MarketByOrderUpdate, _impl_.mode_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate, _impl_.mode_)}},
    // uint64 sequence = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MarketByOrderUpdate, _impl_.sequence_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate, _impl_.sequence_)}},
    // repeated .t4proto.v1.market.MarketByOrderUpdate.Update updates = 5;
    {::_pbi::TcParser::FastMtR1,
     {42, 63, 1, PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate, _impl_.updates_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string market_id = 1;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate, _impl_.market_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp time = 2;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate, _impl_.time_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.common.MarketMode mode = 3;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate, _impl_.mode_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // uint64 sequence = 4;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate, _impl_.sequence_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // repeated .t4proto.v1.market.MarketByOrderUpdate.Update updates = 5;
    {PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate, _impl_.updates_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketByOrderUpdate_Update>()},
  }}, {{
    "\45\11\0\0\0\0\0\0"
    "t4proto.v1.market.MarketByOrderUpdate"
    "market_id"
  }},
};

PROTOBUF_NOINLINE void MarketByOrderUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketByOrderUpdate)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.updates_.Clear();
  _impl_.market_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.time_ != nullptr);
    _impl_.time_->Clear();
  }
  ::memset(&_impl_.sequence_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.mode_) -
      reinterpret_cast<char*>(&_impl_.sequence_)) + sizeof(_impl_.mode_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MarketByOrderUpdate::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MarketByOrderUpdate& this_ = static_cast<const MarketByOrderUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MarketByOrderUpdate::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MarketByOrderUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketByOrderUpdate)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string market_id = 1;
          if (!this_._internal_market_id().empty()) {
            const std::string& _s = this_._internal_market_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketByOrderUpdate.market_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp time = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.time_, this_._impl_.time_->GetCachedSize(), target,
                stream);
          }

          // .t4proto.v1.common.MarketMode mode = 3;
          if (this_._internal_mode() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_mode(), target);
          }

          // uint64 sequence = 4;
          if (this_._internal_sequence() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                4, this_._internal_sequence(), target);
          }

          // repeated .t4proto.v1.market.MarketByOrderUpdate.Update updates = 5;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_updates_size());
               i < n; i++) {
            const auto& repfield = this_._internal_updates().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    5, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketByOrderUpdate)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MarketByOrderUpdate::ByteSizeLong(const MessageLite& base) {
          const MarketByOrderUpdate& this_ = static_cast<const MarketByOrderUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MarketByOrderUpdate::ByteSizeLong() const {
          const MarketByOrderUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketByOrderUpdate)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .t4proto.v1.market.MarketByOrderUpdate.Update updates = 5;
            {
              total_size += 1UL * this_._internal_updates_size();
              for (const auto& msg : this_._internal_updates()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string market_id = 1;
            if (!this_._internal_market_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_market_id());
            }
          }
           {
            // .google.protobuf.Timestamp time = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.time_);
            }
          }
           {
            // uint64 sequence = 4;
            if (this_._internal_sequence() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_sequence());
            }
            // .t4proto.v1.common.MarketMode mode = 3;
            if (this_._internal_mode() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_mode());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MarketByOrderUpdate::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MarketByOrderUpdate*>(&to_msg);
  auto& from = static_cast<const MarketByOrderUpdate&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketByOrderUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_updates()->MergeFrom(
      from._internal_updates());
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.time_ != nullptr);
    if (_this->_impl_.time_ == nullptr) {
      _this->_impl_.time_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.time_);
    } else {
      _this->_impl_.time_->MergeFrom(*from._impl_.time_);
    }
  }
  if (from._internal_sequence() != 0) {
    _this->_impl_.sequence_ = from._impl_.sequence_;
  }
  if (from._internal_mode() != 0) {
    _this->_impl_.mode_ = from._impl_.mode_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MarketByOrderUpdate::CopyFrom(const MarketByOrderUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketByOrderUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MarketByOrderUpdate::InternalSwap(MarketByOrderUpdate* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.updates_.InternalSwap(&other->_impl_.updates_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, &other->_impl_.market_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate, _impl_.mode_)
      + sizeof(MarketByOrderUpdate::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::google::protobuf::Metadata MarketByOrderUpdate::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace market
}  // namespace v1
}  // namespace t4proto
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
