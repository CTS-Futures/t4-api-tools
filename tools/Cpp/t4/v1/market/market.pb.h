// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: t4/v1/market/market.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_t4_2fv1_2fmarket_2fmarket_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_t4_2fv1_2fmarket_2fmarket_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "t4/v1/common/enums.pb.h"
#include "t4/v1/common/price.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_t4_2fv1_2fmarket_2fmarket_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto;
namespace t4proto {
namespace v1 {
namespace market {
class MarketByOrderSnapshot;
struct MarketByOrderSnapshotDefaultTypeInternal;
extern MarketByOrderSnapshotDefaultTypeInternal _MarketByOrderSnapshot_default_instance_;
class MarketByOrderSnapshot_Order;
struct MarketByOrderSnapshot_OrderDefaultTypeInternal;
extern MarketByOrderSnapshot_OrderDefaultTypeInternal _MarketByOrderSnapshot_Order_default_instance_;
class MarketByOrderSubscribe;
struct MarketByOrderSubscribeDefaultTypeInternal;
extern MarketByOrderSubscribeDefaultTypeInternal _MarketByOrderSubscribe_default_instance_;
class MarketByOrderSubscribeReject;
struct MarketByOrderSubscribeRejectDefaultTypeInternal;
extern MarketByOrderSubscribeRejectDefaultTypeInternal _MarketByOrderSubscribeReject_default_instance_;
class MarketByOrderUpdate;
struct MarketByOrderUpdateDefaultTypeInternal;
extern MarketByOrderUpdateDefaultTypeInternal _MarketByOrderUpdate_default_instance_;
class MarketByOrderUpdate_Update;
struct MarketByOrderUpdate_UpdateDefaultTypeInternal;
extern MarketByOrderUpdate_UpdateDefaultTypeInternal _MarketByOrderUpdate_Update_default_instance_;
class MarketDepth;
struct MarketDepthDefaultTypeInternal;
extern MarketDepthDefaultTypeInternal _MarketDepth_default_instance_;
class MarketDepthSubscribe;
struct MarketDepthSubscribeDefaultTypeInternal;
extern MarketDepthSubscribeDefaultTypeInternal _MarketDepthSubscribe_default_instance_;
class MarketDepthSubscribeReject;
struct MarketDepthSubscribeRejectDefaultTypeInternal;
extern MarketDepthSubscribeRejectDefaultTypeInternal _MarketDepthSubscribeReject_default_instance_;
class MarketDepthTrade;
struct MarketDepthTradeDefaultTypeInternal;
extern MarketDepthTradeDefaultTypeInternal _MarketDepthTrade_default_instance_;
class MarketDepth_DepthLine;
struct MarketDepth_DepthLineDefaultTypeInternal;
extern MarketDepth_DepthLineDefaultTypeInternal _MarketDepth_DepthLine_default_instance_;
class MarketDepth_TradeData;
struct MarketDepth_TradeDataDefaultTypeInternal;
extern MarketDepth_TradeDataDefaultTypeInternal _MarketDepth_TradeData_default_instance_;
class MarketDetails;
struct MarketDetailsDefaultTypeInternal;
extern MarketDetailsDefaultTypeInternal _MarketDetails_default_instance_;
class MarketDetails_LegItem;
struct MarketDetails_LegItemDefaultTypeInternal;
extern MarketDetails_LegItemDefaultTypeInternal _MarketDetails_LegItem_default_instance_;
class MarketHighLow;
struct MarketHighLowDefaultTypeInternal;
extern MarketHighLowDefaultTypeInternal _MarketHighLow_default_instance_;
class MarketPriceLimits;
struct MarketPriceLimitsDefaultTypeInternal;
extern MarketPriceLimitsDefaultTypeInternal _MarketPriceLimits_default_instance_;
class MarketSettlement;
struct MarketSettlementDefaultTypeInternal;
extern MarketSettlementDefaultTypeInternal _MarketSettlement_default_instance_;
class MarketSnapshot;
struct MarketSnapshotDefaultTypeInternal;
extern MarketSnapshotDefaultTypeInternal _MarketSnapshot_default_instance_;
class MarketSnapshotMessage;
struct MarketSnapshotMessageDefaultTypeInternal;
extern MarketSnapshotMessageDefaultTypeInternal _MarketSnapshotMessage_default_instance_;
}  // namespace market
}  // namespace v1
}  // namespace t4proto
PROTOBUF_NAMESPACE_OPEN
template <>
::t4proto::v1::market::MarketByOrderSnapshot* Arena::CreateMaybeMessage<::t4proto::v1::market::MarketByOrderSnapshot>(Arena*);
template <>
::t4proto::v1::market::MarketByOrderSnapshot_Order* Arena::CreateMaybeMessage<::t4proto::v1::market::MarketByOrderSnapshot_Order>(Arena*);
template <>
::t4proto::v1::market::MarketByOrderSubscribe* Arena::CreateMaybeMessage<::t4proto::v1::market::MarketByOrderSubscribe>(Arena*);
template <>
::t4proto::v1::market::MarketByOrderSubscribeReject* Arena::CreateMaybeMessage<::t4proto::v1::market::MarketByOrderSubscribeReject>(Arena*);
template <>
::t4proto::v1::market::MarketByOrderUpdate* Arena::CreateMaybeMessage<::t4proto::v1::market::MarketByOrderUpdate>(Arena*);
template <>
::t4proto::v1::market::MarketByOrderUpdate_Update* Arena::CreateMaybeMessage<::t4proto::v1::market::MarketByOrderUpdate_Update>(Arena*);
template <>
::t4proto::v1::market::MarketDepth* Arena::CreateMaybeMessage<::t4proto::v1::market::MarketDepth>(Arena*);
template <>
::t4proto::v1::market::MarketDepthSubscribe* Arena::CreateMaybeMessage<::t4proto::v1::market::MarketDepthSubscribe>(Arena*);
template <>
::t4proto::v1::market::MarketDepthSubscribeReject* Arena::CreateMaybeMessage<::t4proto::v1::market::MarketDepthSubscribeReject>(Arena*);
template <>
::t4proto::v1::market::MarketDepthTrade* Arena::CreateMaybeMessage<::t4proto::v1::market::MarketDepthTrade>(Arena*);
template <>
::t4proto::v1::market::MarketDepth_DepthLine* Arena::CreateMaybeMessage<::t4proto::v1::market::MarketDepth_DepthLine>(Arena*);
template <>
::t4proto::v1::market::MarketDepth_TradeData* Arena::CreateMaybeMessage<::t4proto::v1::market::MarketDepth_TradeData>(Arena*);
template <>
::t4proto::v1::market::MarketDetails* Arena::CreateMaybeMessage<::t4proto::v1::market::MarketDetails>(Arena*);
template <>
::t4proto::v1::market::MarketDetails_LegItem* Arena::CreateMaybeMessage<::t4proto::v1::market::MarketDetails_LegItem>(Arena*);
template <>
::t4proto::v1::market::MarketHighLow* Arena::CreateMaybeMessage<::t4proto::v1::market::MarketHighLow>(Arena*);
template <>
::t4proto::v1::market::MarketPriceLimits* Arena::CreateMaybeMessage<::t4proto::v1::market::MarketPriceLimits>(Arena*);
template <>
::t4proto::v1::market::MarketSettlement* Arena::CreateMaybeMessage<::t4proto::v1::market::MarketSettlement>(Arena*);
template <>
::t4proto::v1::market::MarketSnapshot* Arena::CreateMaybeMessage<::t4proto::v1::market::MarketSnapshot>(Arena*);
template <>
::t4proto::v1::market::MarketSnapshotMessage* Arena::CreateMaybeMessage<::t4proto::v1::market::MarketSnapshotMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace t4proto {
namespace v1 {
namespace market {
enum MarketByOrderUpdate_UpdateType : int {
  MarketByOrderUpdate_UpdateType_UPDATE_TYPE_ADD_OR_UPDATE = 0,
  MarketByOrderUpdate_UpdateType_UPDATE_TYPE_DELETE = 1,
  MarketByOrderUpdate_UpdateType_UPDATE_TYPE_CLEAR = 2,
  MarketByOrderUpdate_UpdateType_MarketByOrderUpdate_UpdateType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MarketByOrderUpdate_UpdateType_MarketByOrderUpdate_UpdateType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MarketByOrderUpdate_UpdateType_IsValid(int value);
constexpr MarketByOrderUpdate_UpdateType MarketByOrderUpdate_UpdateType_UpdateType_MIN = static_cast<MarketByOrderUpdate_UpdateType>(0);
constexpr MarketByOrderUpdate_UpdateType MarketByOrderUpdate_UpdateType_UpdateType_MAX = static_cast<MarketByOrderUpdate_UpdateType>(2);
constexpr int MarketByOrderUpdate_UpdateType_UpdateType_ARRAYSIZE = 2 + 1;
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
MarketByOrderUpdate_UpdateType_descriptor();
template <typename T>
const std::string& MarketByOrderUpdate_UpdateType_Name(T value) {
  static_assert(std::is_same<T, MarketByOrderUpdate_UpdateType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to UpdateType_Name().");
  return MarketByOrderUpdate_UpdateType_Name(static_cast<MarketByOrderUpdate_UpdateType>(value));
}
template <>
inline const std::string& MarketByOrderUpdate_UpdateType_Name(MarketByOrderUpdate_UpdateType value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<MarketByOrderUpdate_UpdateType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool MarketByOrderUpdate_UpdateType_Parse(absl::string_view name, MarketByOrderUpdate_UpdateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MarketByOrderUpdate_UpdateType>(
      MarketByOrderUpdate_UpdateType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class MarketDepthSubscribe final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.market.MarketDepthSubscribe) */ {
 public:
  inline MarketDepthSubscribe() : MarketDepthSubscribe(nullptr) {}
  ~MarketDepthSubscribe() override;
  explicit PROTOBUF_CONSTEXPR MarketDepthSubscribe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketDepthSubscribe(const MarketDepthSubscribe& from);
  MarketDepthSubscribe(MarketDepthSubscribe&& from) noexcept
    : MarketDepthSubscribe() {
    *this = ::std::move(from);
  }

  inline MarketDepthSubscribe& operator=(const MarketDepthSubscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDepthSubscribe& operator=(MarketDepthSubscribe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketDepthSubscribe& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketDepthSubscribe* internal_default_instance() {
    return reinterpret_cast<const MarketDepthSubscribe*>(
               &_MarketDepthSubscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MarketDepthSubscribe& a, MarketDepthSubscribe& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDepthSubscribe* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDepthSubscribe* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketDepthSubscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketDepthSubscribe>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketDepthSubscribe& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketDepthSubscribe& from) {
    MarketDepthSubscribe::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepthSubscribe* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.market.MarketDepthSubscribe";
  }
  protected:
  explicit MarketDepthSubscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeIdFieldNumber = 1,
    kContractIdFieldNumber = 2,
    kMarketIdFieldNumber = 3,
    kBufferFieldNumber = 4,
    kDepthLevelsFieldNumber = 5,
  };
  // string exchange_id = 1;
  void clear_exchange_id() ;
  const std::string& exchange_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* ptr);

  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_id();

  public:
  // string contract_id = 2;
  void clear_contract_id() ;
  const std::string& contract_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contract_id(Arg_&& arg, Args_... args);
  std::string* mutable_contract_id();
  PROTOBUF_NODISCARD std::string* release_contract_id();
  void set_allocated_contract_id(std::string* ptr);

  private:
  const std::string& _internal_contract_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_id(
      const std::string& value);
  std::string* _internal_mutable_contract_id();

  public:
  // string market_id = 3;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // .t4proto.v1.common.DepthBuffer buffer = 4;
  void clear_buffer() ;
  ::t4proto::v1::common::DepthBuffer buffer() const;
  void set_buffer(::t4proto::v1::common::DepthBuffer value);

  private:
  ::t4proto::v1::common::DepthBuffer _internal_buffer() const;
  void _internal_set_buffer(::t4proto::v1::common::DepthBuffer value);

  public:
  // .t4proto.v1.common.DepthLevels depth_levels = 5;
  void clear_depth_levels() ;
  ::t4proto::v1::common::DepthLevels depth_levels() const;
  void set_depth_levels(::t4proto::v1::common::DepthLevels value);

  private:
  ::t4proto::v1::common::DepthLevels _internal_depth_levels() const;
  void _internal_set_depth_levels(::t4proto::v1::common::DepthLevels value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.market.MarketDepthSubscribe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    int buffer_;
    int depth_levels_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto;
};// -------------------------------------------------------------------

class MarketDepthSubscribeReject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.market.MarketDepthSubscribeReject) */ {
 public:
  inline MarketDepthSubscribeReject() : MarketDepthSubscribeReject(nullptr) {}
  ~MarketDepthSubscribeReject() override;
  explicit PROTOBUF_CONSTEXPR MarketDepthSubscribeReject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketDepthSubscribeReject(const MarketDepthSubscribeReject& from);
  MarketDepthSubscribeReject(MarketDepthSubscribeReject&& from) noexcept
    : MarketDepthSubscribeReject() {
    *this = ::std::move(from);
  }

  inline MarketDepthSubscribeReject& operator=(const MarketDepthSubscribeReject& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDepthSubscribeReject& operator=(MarketDepthSubscribeReject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketDepthSubscribeReject& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketDepthSubscribeReject* internal_default_instance() {
    return reinterpret_cast<const MarketDepthSubscribeReject*>(
               &_MarketDepthSubscribeReject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MarketDepthSubscribeReject& a, MarketDepthSubscribeReject& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDepthSubscribeReject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDepthSubscribeReject* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketDepthSubscribeReject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketDepthSubscribeReject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketDepthSubscribeReject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketDepthSubscribeReject& from) {
    MarketDepthSubscribeReject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepthSubscribeReject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.market.MarketDepthSubscribeReject";
  }
  protected:
  explicit MarketDepthSubscribeReject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kTimeFieldNumber = 2,
    kModeFieldNumber = 3,
  };
  // string market_id = 1;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // .google.protobuf.Timestamp time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;

  public:
  void clear_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();
  // .t4proto.v1.common.MarketMode mode = 3;
  void clear_mode() ;
  ::t4proto::v1::common::MarketMode mode() const;
  void set_mode(::t4proto::v1::common::MarketMode value);

  private:
  ::t4proto::v1::common::MarketMode _internal_mode() const;
  void _internal_set_mode(::t4proto::v1::common::MarketMode value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.market.MarketDepthSubscribeReject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    int mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto;
};// -------------------------------------------------------------------

class MarketByOrderSubscribe final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.market.MarketByOrderSubscribe) */ {
 public:
  inline MarketByOrderSubscribe() : MarketByOrderSubscribe(nullptr) {}
  ~MarketByOrderSubscribe() override;
  explicit PROTOBUF_CONSTEXPR MarketByOrderSubscribe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByOrderSubscribe(const MarketByOrderSubscribe& from);
  MarketByOrderSubscribe(MarketByOrderSubscribe&& from) noexcept
    : MarketByOrderSubscribe() {
    *this = ::std::move(from);
  }

  inline MarketByOrderSubscribe& operator=(const MarketByOrderSubscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByOrderSubscribe& operator=(MarketByOrderSubscribe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketByOrderSubscribe& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByOrderSubscribe* internal_default_instance() {
    return reinterpret_cast<const MarketByOrderSubscribe*>(
               &_MarketByOrderSubscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MarketByOrderSubscribe& a, MarketByOrderSubscribe& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByOrderSubscribe* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByOrderSubscribe* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketByOrderSubscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketByOrderSubscribe>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketByOrderSubscribe& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketByOrderSubscribe& from) {
    MarketByOrderSubscribe::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByOrderSubscribe* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.market.MarketByOrderSubscribe";
  }
  protected:
  explicit MarketByOrderSubscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeIdFieldNumber = 1,
    kContractIdFieldNumber = 2,
    kMarketIdFieldNumber = 3,
    kSubscribeFieldNumber = 4,
  };
  // string exchange_id = 1;
  void clear_exchange_id() ;
  const std::string& exchange_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* ptr);

  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_id();

  public:
  // string contract_id = 2;
  void clear_contract_id() ;
  const std::string& contract_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contract_id(Arg_&& arg, Args_... args);
  std::string* mutable_contract_id();
  PROTOBUF_NODISCARD std::string* release_contract_id();
  void set_allocated_contract_id(std::string* ptr);

  private:
  const std::string& _internal_contract_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_id(
      const std::string& value);
  std::string* _internal_mutable_contract_id();

  public:
  // string market_id = 3;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // bool subscribe = 4;
  void clear_subscribe() ;
  bool subscribe() const;
  void set_subscribe(bool value);

  private:
  bool _internal_subscribe() const;
  void _internal_set_subscribe(bool value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.market.MarketByOrderSubscribe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    bool subscribe_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto;
};// -------------------------------------------------------------------

class MarketByOrderSubscribeReject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.market.MarketByOrderSubscribeReject) */ {
 public:
  inline MarketByOrderSubscribeReject() : MarketByOrderSubscribeReject(nullptr) {}
  ~MarketByOrderSubscribeReject() override;
  explicit PROTOBUF_CONSTEXPR MarketByOrderSubscribeReject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByOrderSubscribeReject(const MarketByOrderSubscribeReject& from);
  MarketByOrderSubscribeReject(MarketByOrderSubscribeReject&& from) noexcept
    : MarketByOrderSubscribeReject() {
    *this = ::std::move(from);
  }

  inline MarketByOrderSubscribeReject& operator=(const MarketByOrderSubscribeReject& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByOrderSubscribeReject& operator=(MarketByOrderSubscribeReject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketByOrderSubscribeReject& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByOrderSubscribeReject* internal_default_instance() {
    return reinterpret_cast<const MarketByOrderSubscribeReject*>(
               &_MarketByOrderSubscribeReject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MarketByOrderSubscribeReject& a, MarketByOrderSubscribeReject& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByOrderSubscribeReject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByOrderSubscribeReject* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketByOrderSubscribeReject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketByOrderSubscribeReject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketByOrderSubscribeReject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketByOrderSubscribeReject& from) {
    MarketByOrderSubscribeReject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByOrderSubscribeReject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.market.MarketByOrderSubscribeReject";
  }
  protected:
  explicit MarketByOrderSubscribeReject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kTimeFieldNumber = 2,
    kModeFieldNumber = 3,
  };
  // string market_id = 1;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // .google.protobuf.Timestamp time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;

  public:
  void clear_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();
  // .t4proto.v1.common.MarketMode mode = 3;
  void clear_mode() ;
  ::t4proto::v1::common::MarketMode mode() const;
  void set_mode(::t4proto::v1::common::MarketMode value);

  private:
  ::t4proto::v1::common::MarketMode _internal_mode() const;
  void _internal_set_mode(::t4proto::v1::common::MarketMode value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.market.MarketByOrderSubscribeReject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    int mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto;
};// -------------------------------------------------------------------

class MarketDetails_LegItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.market.MarketDetails.LegItem) */ {
 public:
  inline MarketDetails_LegItem() : MarketDetails_LegItem(nullptr) {}
  ~MarketDetails_LegItem() override;
  explicit PROTOBUF_CONSTEXPR MarketDetails_LegItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketDetails_LegItem(const MarketDetails_LegItem& from);
  MarketDetails_LegItem(MarketDetails_LegItem&& from) noexcept
    : MarketDetails_LegItem() {
    *this = ::std::move(from);
  }

  inline MarketDetails_LegItem& operator=(const MarketDetails_LegItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDetails_LegItem& operator=(MarketDetails_LegItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketDetails_LegItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketDetails_LegItem* internal_default_instance() {
    return reinterpret_cast<const MarketDetails_LegItem*>(
               &_MarketDetails_LegItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(MarketDetails_LegItem& a, MarketDetails_LegItem& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDetails_LegItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDetails_LegItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketDetails_LegItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketDetails_LegItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketDetails_LegItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketDetails_LegItem& from) {
    MarketDetails_LegItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDetails_LegItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.market.MarketDetails.LegItem";
  }
  protected:
  explicit MarketDetails_LegItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kDeltaFieldNumber = 4,
    kPriceFieldNumber = 5,
    kGroupFieldNumber = 2,
    kVolumeFieldNumber = 3,
  };
  // string market_id = 1;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // string delta = 4;
  void clear_delta() ;
  const std::string& delta() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_delta(Arg_&& arg, Args_... args);
  std::string* mutable_delta();
  PROTOBUF_NODISCARD std::string* release_delta();
  void set_allocated_delta(std::string* ptr);

  private:
  const std::string& _internal_delta() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_delta(
      const std::string& value);
  std::string* _internal_mutable_delta();

  public:
  // .t4proto.v1.common.Price price = 5;
  bool has_price() const;
  private:
  bool _internal_has_price() const;

  public:
  void clear_price() ;
  const ::t4proto::v1::common::Price& price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_price();
  ::t4proto::v1::common::Price* mutable_price();
  void set_allocated_price(::t4proto::v1::common::Price* price);
  private:
  const ::t4proto::v1::common::Price& _internal_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::t4proto::v1::common::Price* price);
  ::t4proto::v1::common::Price* unsafe_arena_release_price();
  // int32 group = 2;
  void clear_group() ;
  ::int32_t group() const;
  void set_group(::int32_t value);

  private:
  ::int32_t _internal_group() const;
  void _internal_set_group(::int32_t value);

  public:
  // int32 volume = 3;
  void clear_volume() ;
  ::int32_t volume() const;
  void set_volume(::int32_t value);

  private:
  ::int32_t _internal_volume() const;
  void _internal_set_volume(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.market.MarketDetails.LegItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr delta_;
    ::t4proto::v1::common::Price* price_;
    ::int32_t group_;
    ::int32_t volume_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto;
};// -------------------------------------------------------------------

class MarketDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.market.MarketDetails) */ {
 public:
  inline MarketDetails() : MarketDetails(nullptr) {}
  ~MarketDetails() override;
  explicit PROTOBUF_CONSTEXPR MarketDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketDetails(const MarketDetails& from);
  MarketDetails(MarketDetails&& from) noexcept
    : MarketDetails() {
    *this = ::std::move(from);
  }

  inline MarketDetails& operator=(const MarketDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDetails& operator=(MarketDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketDetails* internal_default_instance() {
    return reinterpret_cast<const MarketDetails*>(
               &_MarketDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MarketDetails& a, MarketDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDetails* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketDetails& from) {
    MarketDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.market.MarketDetails";
  }
  protected:
  explicit MarketDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MarketDetails_LegItem LegItem;

  // accessors -------------------------------------------------------

  enum : int {
    kLegsFieldNumber = 17,
    kMarketIdFieldNumber = 1,
    kExchangeIdFieldNumber = 2,
    kContractIdFieldNumber = 3,
    kMarketRefFieldNumber = 15,
    kGroupFieldNumber = 16,
    kDetailsFieldNumber = 18,
    kPriceCodeFieldNumber = 20,
    kUnderlyingMarketIdFieldNumber = 29,
    kVttFieldNumber = 30,
    kPointValueFieldNumber = 7,
    kMinPriceIncrementFieldNumber = 8,
    kActivationDateFieldNumber = 10,
    kLastTradingDateFieldNumber = 11,
    kLastClientUpdateTimeFieldNumber = 12,
    kMinCabPriceFieldNumber = 24,
    kStrikePriceFieldNumber = 25,
    kExpiryDateFieldNumber = 4,
    kContractTypeFieldNumber = 5,
    kDecimalsFieldNumber = 6,
    kOrderTypesFieldNumber = 9,
    kDelistDateFieldNumber = 13,
    kExchangeDelistDateFieldNumber = 14,
    kStrategyTypeFieldNumber = 19,
    kRealDecimalsFieldNumber = 21,
    kDisplayDecimalsFieldNumber = 22,
    kClearingDecimalsFieldNumber = 23,
    kStrategyRatioFieldNumber = 27,
    kVolumeIncrementFieldNumber = 26,
    kDisabledFieldNumber = 28,
    kMaintIntraMarginFieldNumber = 31,
    kMaintMarginFieldNumber = 32,
    kMaintVolScanFieldNumber = 33,
  };
  // repeated .t4proto.v1.market.MarketDetails.LegItem legs = 17;
  int legs_size() const;
  private:
  int _internal_legs_size() const;

  public:
  void clear_legs() ;
  ::t4proto::v1::market::MarketDetails_LegItem* mutable_legs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDetails_LegItem >*
      mutable_legs();
  private:
  const ::t4proto::v1::market::MarketDetails_LegItem& _internal_legs(int index) const;
  ::t4proto::v1::market::MarketDetails_LegItem* _internal_add_legs();
  public:
  const ::t4proto::v1::market::MarketDetails_LegItem& legs(int index) const;
  ::t4proto::v1::market::MarketDetails_LegItem* add_legs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDetails_LegItem >&
      legs() const;
  // string market_id = 1;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // string exchange_id = 2;
  void clear_exchange_id() ;
  const std::string& exchange_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* ptr);

  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_id();

  public:
  // string contract_id = 3;
  void clear_contract_id() ;
  const std::string& contract_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contract_id(Arg_&& arg, Args_... args);
  std::string* mutable_contract_id();
  PROTOBUF_NODISCARD std::string* release_contract_id();
  void set_allocated_contract_id(std::string* ptr);

  private:
  const std::string& _internal_contract_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_id(
      const std::string& value);
  std::string* _internal_mutable_contract_id();

  public:
  // string market_ref = 15;
  void clear_market_ref() ;
  const std::string& market_ref() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_ref(Arg_&& arg, Args_... args);
  std::string* mutable_market_ref();
  PROTOBUF_NODISCARD std::string* release_market_ref();
  void set_allocated_market_ref(std::string* ptr);

  private:
  const std::string& _internal_market_ref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_ref(
      const std::string& value);
  std::string* _internal_mutable_market_ref();

  public:
  // string group = 16;
  void clear_group() ;
  const std::string& group() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_group(Arg_&& arg, Args_... args);
  std::string* mutable_group();
  PROTOBUF_NODISCARD std::string* release_group();
  void set_allocated_group(std::string* ptr);

  private:
  const std::string& _internal_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group(
      const std::string& value);
  std::string* _internal_mutable_group();

  public:
  // string details = 18;
  void clear_details() ;
  const std::string& details() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_details(Arg_&& arg, Args_... args);
  std::string* mutable_details();
  PROTOBUF_NODISCARD std::string* release_details();
  void set_allocated_details(std::string* ptr);

  private:
  const std::string& _internal_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_details(
      const std::string& value);
  std::string* _internal_mutable_details();

  public:
  // string price_code = 20;
  void clear_price_code() ;
  const std::string& price_code() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_price_code(Arg_&& arg, Args_... args);
  std::string* mutable_price_code();
  PROTOBUF_NODISCARD std::string* release_price_code();
  void set_allocated_price_code(std::string* ptr);

  private:
  const std::string& _internal_price_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_price_code(
      const std::string& value);
  std::string* _internal_mutable_price_code();

  public:
  // string underlying_market_id = 29;
  void clear_underlying_market_id() ;
  const std::string& underlying_market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_underlying_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_underlying_market_id();
  PROTOBUF_NODISCARD std::string* release_underlying_market_id();
  void set_allocated_underlying_market_id(std::string* ptr);

  private:
  const std::string& _internal_underlying_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_underlying_market_id(
      const std::string& value);
  std::string* _internal_mutable_underlying_market_id();

  public:
  // string vtt = 30;
  void clear_vtt() ;
  const std::string& vtt() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vtt(Arg_&& arg, Args_... args);
  std::string* mutable_vtt();
  PROTOBUF_NODISCARD std::string* release_vtt();
  void set_allocated_vtt(std::string* ptr);

  private:
  const std::string& _internal_vtt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vtt(
      const std::string& value);
  std::string* _internal_mutable_vtt();

  public:
  // .t4proto.v1.common.Decimal point_value = 7;
  bool has_point_value() const;
  private:
  bool _internal_has_point_value() const;

  public:
  void clear_point_value() ;
  const ::t4proto::v1::common::Decimal& point_value() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Decimal* release_point_value();
  ::t4proto::v1::common::Decimal* mutable_point_value();
  void set_allocated_point_value(::t4proto::v1::common::Decimal* point_value);
  private:
  const ::t4proto::v1::common::Decimal& _internal_point_value() const;
  ::t4proto::v1::common::Decimal* _internal_mutable_point_value();
  public:
  void unsafe_arena_set_allocated_point_value(
      ::t4proto::v1::common::Decimal* point_value);
  ::t4proto::v1::common::Decimal* unsafe_arena_release_point_value();
  // .t4proto.v1.common.Price min_price_increment = 8;
  bool has_min_price_increment() const;
  private:
  bool _internal_has_min_price_increment() const;

  public:
  void clear_min_price_increment() ;
  const ::t4proto::v1::common::Price& min_price_increment() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_min_price_increment();
  ::t4proto::v1::common::Price* mutable_min_price_increment();
  void set_allocated_min_price_increment(::t4proto::v1::common::Price* min_price_increment);
  private:
  const ::t4proto::v1::common::Price& _internal_min_price_increment() const;
  ::t4proto::v1::common::Price* _internal_mutable_min_price_increment();
  public:
  void unsafe_arena_set_allocated_min_price_increment(
      ::t4proto::v1::common::Price* min_price_increment);
  ::t4proto::v1::common::Price* unsafe_arena_release_min_price_increment();
  // .google.protobuf.Timestamp activation_date = 10;
  bool has_activation_date() const;
  private:
  bool _internal_has_activation_date() const;

  public:
  void clear_activation_date() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& activation_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_activation_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_activation_date();
  void set_allocated_activation_date(::PROTOBUF_NAMESPACE_ID::Timestamp* activation_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_activation_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_activation_date();
  public:
  void unsafe_arena_set_allocated_activation_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* activation_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_activation_date();
  // .google.protobuf.Timestamp last_trading_date = 11;
  bool has_last_trading_date() const;
  private:
  bool _internal_has_last_trading_date() const;

  public:
  void clear_last_trading_date() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_trading_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_trading_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_trading_date();
  void set_allocated_last_trading_date(::PROTOBUF_NAMESPACE_ID::Timestamp* last_trading_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_trading_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_trading_date();
  public:
  void unsafe_arena_set_allocated_last_trading_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_trading_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_trading_date();
  // .google.protobuf.Timestamp last_client_update_time = 12;
  bool has_last_client_update_time() const;
  private:
  bool _internal_has_last_client_update_time() const;

  public:
  void clear_last_client_update_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_client_update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_last_client_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_last_client_update_time();
  void set_allocated_last_client_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* last_client_update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_last_client_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_last_client_update_time();
  public:
  void unsafe_arena_set_allocated_last_client_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* last_client_update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_last_client_update_time();
  // optional .t4proto.v1.common.Price min_cab_price = 24;
  bool has_min_cab_price() const;
  void clear_min_cab_price() ;
  const ::t4proto::v1::common::Price& min_cab_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_min_cab_price();
  ::t4proto::v1::common::Price* mutable_min_cab_price();
  void set_allocated_min_cab_price(::t4proto::v1::common::Price* min_cab_price);
  private:
  const ::t4proto::v1::common::Price& _internal_min_cab_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_min_cab_price();
  public:
  void unsafe_arena_set_allocated_min_cab_price(
      ::t4proto::v1::common::Price* min_cab_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_min_cab_price();
  // optional .t4proto.v1.common.Price strike_price = 25;
  bool has_strike_price() const;
  void clear_strike_price() ;
  const ::t4proto::v1::common::Price& strike_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_strike_price();
  ::t4proto::v1::common::Price* mutable_strike_price();
  void set_allocated_strike_price(::t4proto::v1::common::Price* strike_price);
  private:
  const ::t4proto::v1::common::Price& _internal_strike_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_strike_price();
  public:
  void unsafe_arena_set_allocated_strike_price(
      ::t4proto::v1::common::Price* strike_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_strike_price();
  // int32 expiry_date = 4;
  void clear_expiry_date() ;
  ::int32_t expiry_date() const;
  void set_expiry_date(::int32_t value);

  private:
  ::int32_t _internal_expiry_date() const;
  void _internal_set_expiry_date(::int32_t value);

  public:
  // .t4proto.v1.common.ContractType contract_type = 5;
  void clear_contract_type() ;
  ::t4proto::v1::common::ContractType contract_type() const;
  void set_contract_type(::t4proto::v1::common::ContractType value);

  private:
  ::t4proto::v1::common::ContractType _internal_contract_type() const;
  void _internal_set_contract_type(::t4proto::v1::common::ContractType value);

  public:
  // int32 decimals = 6;
  void clear_decimals() ;
  ::int32_t decimals() const;
  void set_decimals(::int32_t value);

  private:
  ::int32_t _internal_decimals() const;
  void _internal_set_decimals(::int32_t value);

  public:
  // int32 order_types = 9;
  void clear_order_types() ;
  ::int32_t order_types() const;
  void set_order_types(::int32_t value);

  private:
  ::int32_t _internal_order_types() const;
  void _internal_set_order_types(::int32_t value);

  public:
  // int64 delist_date = 13;
  void clear_delist_date() ;
  ::int64_t delist_date() const;
  void set_delist_date(::int64_t value);

  private:
  ::int64_t _internal_delist_date() const;
  void _internal_set_delist_date(::int64_t value);

  public:
  // int64 exchange_delist_date = 14;
  void clear_exchange_delist_date() ;
  ::int64_t exchange_delist_date() const;
  void set_exchange_delist_date(::int64_t value);

  private:
  ::int64_t _internal_exchange_delist_date() const;
  void _internal_set_exchange_delist_date(::int64_t value);

  public:
  // .t4proto.v1.common.StrategyType strategy_type = 19;
  void clear_strategy_type() ;
  ::t4proto::v1::common::StrategyType strategy_type() const;
  void set_strategy_type(::t4proto::v1::common::StrategyType value);

  private:
  ::t4proto::v1::common::StrategyType _internal_strategy_type() const;
  void _internal_set_strategy_type(::t4proto::v1::common::StrategyType value);

  public:
  // int32 real_decimals = 21;
  void clear_real_decimals() ;
  ::int32_t real_decimals() const;
  void set_real_decimals(::int32_t value);

  private:
  ::int32_t _internal_real_decimals() const;
  void _internal_set_real_decimals(::int32_t value);

  public:
  // int32 display_decimals = 22;
  void clear_display_decimals() ;
  ::int32_t display_decimals() const;
  void set_display_decimals(::int32_t value);

  private:
  ::int32_t _internal_display_decimals() const;
  void _internal_set_display_decimals(::int32_t value);

  public:
  // int32 clearing_decimals = 23;
  void clear_clearing_decimals() ;
  ::int32_t clearing_decimals() const;
  void set_clearing_decimals(::int32_t value);

  private:
  ::int32_t _internal_clearing_decimals() const;
  void _internal_set_clearing_decimals(::int32_t value);

  public:
  // double strategy_ratio = 27;
  void clear_strategy_ratio() ;
  double strategy_ratio() const;
  void set_strategy_ratio(double value);

  private:
  double _internal_strategy_ratio() const;
  void _internal_set_strategy_ratio(double value);

  public:
  // int32 volume_increment = 26;
  void clear_volume_increment() ;
  ::int32_t volume_increment() const;
  void set_volume_increment(::int32_t value);

  private:
  ::int32_t _internal_volume_increment() const;
  void _internal_set_volume_increment(::int32_t value);

  public:
  // bool disabled = 28;
  void clear_disabled() ;
  bool disabled() const;
  void set_disabled(bool value);

  private:
  bool _internal_disabled() const;
  void _internal_set_disabled(bool value);

  public:
  // double maint_intra_margin = 31;
  void clear_maint_intra_margin() ;
  double maint_intra_margin() const;
  void set_maint_intra_margin(double value);

  private:
  double _internal_maint_intra_margin() const;
  void _internal_set_maint_intra_margin(double value);

  public:
  // double maint_margin = 32;
  void clear_maint_margin() ;
  double maint_margin() const;
  void set_maint_margin(double value);

  private:
  double _internal_maint_margin() const;
  void _internal_set_maint_margin(double value);

  public:
  // double maint_vol_scan = 33;
  void clear_maint_vol_scan() ;
  double maint_vol_scan() const;
  void set_maint_vol_scan(double value);

  private:
  double _internal_maint_vol_scan() const;
  void _internal_set_maint_vol_scan(double value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.market.MarketDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDetails_LegItem > legs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_ref_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr details_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr price_code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr underlying_market_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vtt_;
    ::t4proto::v1::common::Decimal* point_value_;
    ::t4proto::v1::common::Price* min_price_increment_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* activation_date_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_trading_date_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_client_update_time_;
    ::t4proto::v1::common::Price* min_cab_price_;
    ::t4proto::v1::common::Price* strike_price_;
    ::int32_t expiry_date_;
    int contract_type_;
    ::int32_t decimals_;
    ::int32_t order_types_;
    ::int64_t delist_date_;
    ::int64_t exchange_delist_date_;
    int strategy_type_;
    ::int32_t real_decimals_;
    ::int32_t display_decimals_;
    ::int32_t clearing_decimals_;
    double strategy_ratio_;
    ::int32_t volume_increment_;
    bool disabled_;
    double maint_intra_margin_;
    double maint_margin_;
    double maint_vol_scan_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto;
};// -------------------------------------------------------------------

class MarketDepth_DepthLine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.market.MarketDepth.DepthLine) */ {
 public:
  inline MarketDepth_DepthLine() : MarketDepth_DepthLine(nullptr) {}
  ~MarketDepth_DepthLine() override;
  explicit PROTOBUF_CONSTEXPR MarketDepth_DepthLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketDepth_DepthLine(const MarketDepth_DepthLine& from);
  MarketDepth_DepthLine(MarketDepth_DepthLine&& from) noexcept
    : MarketDepth_DepthLine() {
    *this = ::std::move(from);
  }

  inline MarketDepth_DepthLine& operator=(const MarketDepth_DepthLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDepth_DepthLine& operator=(MarketDepth_DepthLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketDepth_DepthLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketDepth_DepthLine* internal_default_instance() {
    return reinterpret_cast<const MarketDepth_DepthLine*>(
               &_MarketDepth_DepthLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MarketDepth_DepthLine& a, MarketDepth_DepthLine& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDepth_DepthLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDepth_DepthLine* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketDepth_DepthLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketDepth_DepthLine>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketDepth_DepthLine& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketDepth_DepthLine& from) {
    MarketDepth_DepthLine::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepth_DepthLine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.market.MarketDepth.DepthLine";
  }
  protected:
  explicit MarketDepth_DepthLine(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 1,
    kVolumeFieldNumber = 2,
    kNumOrdersFieldNumber = 3,
  };
  // .t4proto.v1.common.Price price = 1;
  bool has_price() const;
  private:
  bool _internal_has_price() const;

  public:
  void clear_price() ;
  const ::t4proto::v1::common::Price& price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_price();
  ::t4proto::v1::common::Price* mutable_price();
  void set_allocated_price(::t4proto::v1::common::Price* price);
  private:
  const ::t4proto::v1::common::Price& _internal_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::t4proto::v1::common::Price* price);
  ::t4proto::v1::common::Price* unsafe_arena_release_price();
  // int32 volume = 2;
  void clear_volume() ;
  ::int32_t volume() const;
  void set_volume(::int32_t value);

  private:
  ::int32_t _internal_volume() const;
  void _internal_set_volume(::int32_t value);

  public:
  // int32 num_orders = 3;
  void clear_num_orders() ;
  ::int32_t num_orders() const;
  void set_num_orders(::int32_t value);

  private:
  ::int32_t _internal_num_orders() const;
  void _internal_set_num_orders(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.market.MarketDepth.DepthLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::t4proto::v1::common::Price* price_;
    ::int32_t volume_;
    ::int32_t num_orders_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto;
};// -------------------------------------------------------------------

class MarketDepth_TradeData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.market.MarketDepth.TradeData) */ {
 public:
  inline MarketDepth_TradeData() : MarketDepth_TradeData(nullptr) {}
  ~MarketDepth_TradeData() override;
  explicit PROTOBUF_CONSTEXPR MarketDepth_TradeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketDepth_TradeData(const MarketDepth_TradeData& from);
  MarketDepth_TradeData(MarketDepth_TradeData&& from) noexcept
    : MarketDepth_TradeData() {
    *this = ::std::move(from);
  }

  inline MarketDepth_TradeData& operator=(const MarketDepth_TradeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDepth_TradeData& operator=(MarketDepth_TradeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketDepth_TradeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketDepth_TradeData* internal_default_instance() {
    return reinterpret_cast<const MarketDepth_TradeData*>(
               &_MarketDepth_TradeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MarketDepth_TradeData& a, MarketDepth_TradeData& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDepth_TradeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDepth_TradeData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketDepth_TradeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketDepth_TradeData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketDepth_TradeData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketDepth_TradeData& from) {
    MarketDepth_TradeData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepth_TradeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.market.MarketDepth.TradeData";
  }
  protected:
  explicit MarketDepth_TradeData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastTradePriceFieldNumber = 3,
    kLastTradeSpdPriceFieldNumber = 6,
    kTimeFieldNumber = 11,
    kTotalTradedVolumeFieldNumber = 1,
    kTotalTradeCountFieldNumber = 2,
    kLastTradeVolumeFieldNumber = 4,
    kLastTradeTotalVolumeFieldNumber = 5,
    kLastTradeSpdVolumeFieldNumber = 7,
    kLastTradeSpdTotalVolumeFieldNumber = 8,
    kDueToSpreadFieldNumber = 9,
    kAtBidOrOfferFieldNumber = 10,
  };
  // .t4proto.v1.common.Price last_trade_price = 3;
  bool has_last_trade_price() const;
  private:
  bool _internal_has_last_trade_price() const;

  public:
  void clear_last_trade_price() ;
  const ::t4proto::v1::common::Price& last_trade_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_last_trade_price();
  ::t4proto::v1::common::Price* mutable_last_trade_price();
  void set_allocated_last_trade_price(::t4proto::v1::common::Price* last_trade_price);
  private:
  const ::t4proto::v1::common::Price& _internal_last_trade_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_last_trade_price();
  public:
  void unsafe_arena_set_allocated_last_trade_price(
      ::t4proto::v1::common::Price* last_trade_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_last_trade_price();
  // .t4proto.v1.common.Price last_trade_spd_price = 6;
  bool has_last_trade_spd_price() const;
  private:
  bool _internal_has_last_trade_spd_price() const;

  public:
  void clear_last_trade_spd_price() ;
  const ::t4proto::v1::common::Price& last_trade_spd_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_last_trade_spd_price();
  ::t4proto::v1::common::Price* mutable_last_trade_spd_price();
  void set_allocated_last_trade_spd_price(::t4proto::v1::common::Price* last_trade_spd_price);
  private:
  const ::t4proto::v1::common::Price& _internal_last_trade_spd_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_last_trade_spd_price();
  public:
  void unsafe_arena_set_allocated_last_trade_spd_price(
      ::t4proto::v1::common::Price* last_trade_spd_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_last_trade_spd_price();
  // .google.protobuf.Timestamp time = 11;
  bool has_time() const;
  private:
  bool _internal_has_time() const;

  public:
  void clear_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();
  // int32 total_traded_volume = 1;
  void clear_total_traded_volume() ;
  ::int32_t total_traded_volume() const;
  void set_total_traded_volume(::int32_t value);

  private:
  ::int32_t _internal_total_traded_volume() const;
  void _internal_set_total_traded_volume(::int32_t value);

  public:
  // int32 total_trade_count = 2;
  void clear_total_trade_count() ;
  ::int32_t total_trade_count() const;
  void set_total_trade_count(::int32_t value);

  private:
  ::int32_t _internal_total_trade_count() const;
  void _internal_set_total_trade_count(::int32_t value);

  public:
  // int32 last_trade_volume = 4;
  void clear_last_trade_volume() ;
  ::int32_t last_trade_volume() const;
  void set_last_trade_volume(::int32_t value);

  private:
  ::int32_t _internal_last_trade_volume() const;
  void _internal_set_last_trade_volume(::int32_t value);

  public:
  // int32 last_trade_total_volume = 5;
  void clear_last_trade_total_volume() ;
  ::int32_t last_trade_total_volume() const;
  void set_last_trade_total_volume(::int32_t value);

  private:
  ::int32_t _internal_last_trade_total_volume() const;
  void _internal_set_last_trade_total_volume(::int32_t value);

  public:
  // int32 last_trade_spd_volume = 7;
  void clear_last_trade_spd_volume() ;
  ::int32_t last_trade_spd_volume() const;
  void set_last_trade_spd_volume(::int32_t value);

  private:
  ::int32_t _internal_last_trade_spd_volume() const;
  void _internal_set_last_trade_spd_volume(::int32_t value);

  public:
  // int32 last_trade_spd_total_volume = 8;
  void clear_last_trade_spd_total_volume() ;
  ::int32_t last_trade_spd_total_volume() const;
  void set_last_trade_spd_total_volume(::int32_t value);

  private:
  ::int32_t _internal_last_trade_spd_total_volume() const;
  void _internal_set_last_trade_spd_total_volume(::int32_t value);

  public:
  // bool due_to_spread = 9;
  void clear_due_to_spread() ;
  bool due_to_spread() const;
  void set_due_to_spread(bool value);

  private:
  bool _internal_due_to_spread() const;
  void _internal_set_due_to_spread(bool value);

  public:
  // .t4proto.v1.common.BidOffer at_bid_or_offer = 10;
  void clear_at_bid_or_offer() ;
  ::t4proto::v1::common::BidOffer at_bid_or_offer() const;
  void set_at_bid_or_offer(::t4proto::v1::common::BidOffer value);

  private:
  ::t4proto::v1::common::BidOffer _internal_at_bid_or_offer() const;
  void _internal_set_at_bid_or_offer(::t4proto::v1::common::BidOffer value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.market.MarketDepth.TradeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::t4proto::v1::common::Price* last_trade_price_;
    ::t4proto::v1::common::Price* last_trade_spd_price_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    ::int32_t total_traded_volume_;
    ::int32_t total_trade_count_;
    ::int32_t last_trade_volume_;
    ::int32_t last_trade_total_volume_;
    ::int32_t last_trade_spd_volume_;
    ::int32_t last_trade_spd_total_volume_;
    bool due_to_spread_;
    int at_bid_or_offer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto;
};// -------------------------------------------------------------------

class MarketDepth final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.market.MarketDepth) */ {
 public:
  inline MarketDepth() : MarketDepth(nullptr) {}
  ~MarketDepth() override;
  explicit PROTOBUF_CONSTEXPR MarketDepth(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketDepth(const MarketDepth& from);
  MarketDepth(MarketDepth&& from) noexcept
    : MarketDepth() {
    *this = ::std::move(from);
  }

  inline MarketDepth& operator=(const MarketDepth& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDepth& operator=(MarketDepth&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketDepth& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketDepth* internal_default_instance() {
    return reinterpret_cast<const MarketDepth*>(
               &_MarketDepth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MarketDepth& a, MarketDepth& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDepth* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDepth* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketDepth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketDepth>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketDepth& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketDepth& from) {
    MarketDepth::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepth* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.market.MarketDepth";
  }
  protected:
  explicit MarketDepth(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MarketDepth_DepthLine DepthLine;
  typedef MarketDepth_TradeData TradeData;

  // accessors -------------------------------------------------------

  enum : int {
    kBidsFieldNumber = 6,
    kOffersFieldNumber = 7,
    kImpliedBidsFieldNumber = 8,
    kImpliedOffersFieldNumber = 9,
    kMarketIdFieldNumber = 1,
    kTimeFieldNumber = 4,
    kTradeDataFieldNumber = 12,
    kDepthLevelsFieldNumber = 2,
    kDepthBufferFieldNumber = 3,
    kDelayedFieldNumber = 5,
    kModeFieldNumber = 10,
    kFlagsFieldNumber = 11,
  };
  // repeated .t4proto.v1.market.MarketDepth.DepthLine bids = 6;
  int bids_size() const;
  private:
  int _internal_bids_size() const;

  public:
  void clear_bids() ;
  ::t4proto::v1::market::MarketDepth_DepthLine* mutable_bids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDepth_DepthLine >*
      mutable_bids();
  private:
  const ::t4proto::v1::market::MarketDepth_DepthLine& _internal_bids(int index) const;
  ::t4proto::v1::market::MarketDepth_DepthLine* _internal_add_bids();
  public:
  const ::t4proto::v1::market::MarketDepth_DepthLine& bids(int index) const;
  ::t4proto::v1::market::MarketDepth_DepthLine* add_bids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDepth_DepthLine >&
      bids() const;
  // repeated .t4proto.v1.market.MarketDepth.DepthLine offers = 7;
  int offers_size() const;
  private:
  int _internal_offers_size() const;

  public:
  void clear_offers() ;
  ::t4proto::v1::market::MarketDepth_DepthLine* mutable_offers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDepth_DepthLine >*
      mutable_offers();
  private:
  const ::t4proto::v1::market::MarketDepth_DepthLine& _internal_offers(int index) const;
  ::t4proto::v1::market::MarketDepth_DepthLine* _internal_add_offers();
  public:
  const ::t4proto::v1::market::MarketDepth_DepthLine& offers(int index) const;
  ::t4proto::v1::market::MarketDepth_DepthLine* add_offers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDepth_DepthLine >&
      offers() const;
  // repeated .t4proto.v1.market.MarketDepth.DepthLine implied_bids = 8;
  int implied_bids_size() const;
  private:
  int _internal_implied_bids_size() const;

  public:
  void clear_implied_bids() ;
  ::t4proto::v1::market::MarketDepth_DepthLine* mutable_implied_bids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDepth_DepthLine >*
      mutable_implied_bids();
  private:
  const ::t4proto::v1::market::MarketDepth_DepthLine& _internal_implied_bids(int index) const;
  ::t4proto::v1::market::MarketDepth_DepthLine* _internal_add_implied_bids();
  public:
  const ::t4proto::v1::market::MarketDepth_DepthLine& implied_bids(int index) const;
  ::t4proto::v1::market::MarketDepth_DepthLine* add_implied_bids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDepth_DepthLine >&
      implied_bids() const;
  // repeated .t4proto.v1.market.MarketDepth.DepthLine implied_offers = 9;
  int implied_offers_size() const;
  private:
  int _internal_implied_offers_size() const;

  public:
  void clear_implied_offers() ;
  ::t4proto::v1::market::MarketDepth_DepthLine* mutable_implied_offers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDepth_DepthLine >*
      mutable_implied_offers();
  private:
  const ::t4proto::v1::market::MarketDepth_DepthLine& _internal_implied_offers(int index) const;
  ::t4proto::v1::market::MarketDepth_DepthLine* _internal_add_implied_offers();
  public:
  const ::t4proto::v1::market::MarketDepth_DepthLine& implied_offers(int index) const;
  ::t4proto::v1::market::MarketDepth_DepthLine* add_implied_offers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDepth_DepthLine >&
      implied_offers() const;
  // string market_id = 1;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // .google.protobuf.Timestamp time = 4;
  bool has_time() const;
  private:
  bool _internal_has_time() const;

  public:
  void clear_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();
  // .t4proto.v1.market.MarketDepth.TradeData trade_data = 12;
  bool has_trade_data() const;
  private:
  bool _internal_has_trade_data() const;

  public:
  void clear_trade_data() ;
  const ::t4proto::v1::market::MarketDepth_TradeData& trade_data() const;
  PROTOBUF_NODISCARD ::t4proto::v1::market::MarketDepth_TradeData* release_trade_data();
  ::t4proto::v1::market::MarketDepth_TradeData* mutable_trade_data();
  void set_allocated_trade_data(::t4proto::v1::market::MarketDepth_TradeData* trade_data);
  private:
  const ::t4proto::v1::market::MarketDepth_TradeData& _internal_trade_data() const;
  ::t4proto::v1::market::MarketDepth_TradeData* _internal_mutable_trade_data();
  public:
  void unsafe_arena_set_allocated_trade_data(
      ::t4proto::v1::market::MarketDepth_TradeData* trade_data);
  ::t4proto::v1::market::MarketDepth_TradeData* unsafe_arena_release_trade_data();
  // .t4proto.v1.common.DepthLevels depth_levels = 2;
  void clear_depth_levels() ;
  ::t4proto::v1::common::DepthLevels depth_levels() const;
  void set_depth_levels(::t4proto::v1::common::DepthLevels value);

  private:
  ::t4proto::v1::common::DepthLevels _internal_depth_levels() const;
  void _internal_set_depth_levels(::t4proto::v1::common::DepthLevels value);

  public:
  // .t4proto.v1.common.DepthBuffer depth_buffer = 3;
  void clear_depth_buffer() ;
  ::t4proto::v1::common::DepthBuffer depth_buffer() const;
  void set_depth_buffer(::t4proto::v1::common::DepthBuffer value);

  private:
  ::t4proto::v1::common::DepthBuffer _internal_depth_buffer() const;
  void _internal_set_depth_buffer(::t4proto::v1::common::DepthBuffer value);

  public:
  // bool delayed = 5;
  void clear_delayed() ;
  bool delayed() const;
  void set_delayed(bool value);

  private:
  bool _internal_delayed() const;
  void _internal_set_delayed(bool value);

  public:
  // .t4proto.v1.common.MarketMode mode = 10;
  void clear_mode() ;
  ::t4proto::v1::common::MarketMode mode() const;
  void set_mode(::t4proto::v1::common::MarketMode value);

  private:
  ::t4proto::v1::common::MarketMode _internal_mode() const;
  void _internal_set_mode(::t4proto::v1::common::MarketMode value);

  public:
  // .t4proto.v1.common.MarketFlags2 flags = 11;
  void clear_flags() ;
  ::t4proto::v1::common::MarketFlags2 flags() const;
  void set_flags(::t4proto::v1::common::MarketFlags2 value);

  private:
  ::t4proto::v1::common::MarketFlags2 _internal_flags() const;
  void _internal_set_flags(::t4proto::v1::common::MarketFlags2 value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.market.MarketDepth)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDepth_DepthLine > bids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDepth_DepthLine > offers_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDepth_DepthLine > implied_bids_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDepth_DepthLine > implied_offers_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    ::t4proto::v1::market::MarketDepth_TradeData* trade_data_;
    int depth_levels_;
    int depth_buffer_;
    bool delayed_;
    int mode_;
    int flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto;
};// -------------------------------------------------------------------

class MarketDepthTrade final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.market.MarketDepthTrade) */ {
 public:
  inline MarketDepthTrade() : MarketDepthTrade(nullptr) {}
  ~MarketDepthTrade() override;
  explicit PROTOBUF_CONSTEXPR MarketDepthTrade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketDepthTrade(const MarketDepthTrade& from);
  MarketDepthTrade(MarketDepthTrade&& from) noexcept
    : MarketDepthTrade() {
    *this = ::std::move(from);
  }

  inline MarketDepthTrade& operator=(const MarketDepthTrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDepthTrade& operator=(MarketDepthTrade&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketDepthTrade& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketDepthTrade* internal_default_instance() {
    return reinterpret_cast<const MarketDepthTrade*>(
               &_MarketDepthTrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MarketDepthTrade& a, MarketDepthTrade& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketDepthTrade* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDepthTrade* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketDepthTrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketDepthTrade>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketDepthTrade& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketDepthTrade& from) {
    MarketDepthTrade::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketDepthTrade* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.market.MarketDepthTrade";
  }
  protected:
  explicit MarketDepthTrade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderVolumesFieldNumber = 8,
    kMarketIdFieldNumber = 1,
    kTimeFieldNumber = 2,
    kLastTradePriceFieldNumber = 10,
    kTotalTradedVolumeFieldNumber = 3,
    kLastTradeVolumeFieldNumber = 4,
    kAtBidOrOfferFieldNumber = 6,
    kDueToSpreadFieldNumber = 5,
    kDelayedFieldNumber = 7,
    kTotalTradeCountFieldNumber = 9,
    kModeFieldNumber = 11,
  };
  // repeated int32 order_volumes = 8;
  int order_volumes_size() const;
  private:
  int _internal_order_volumes_size() const;

  public:
  void clear_order_volumes() ;
  ::int32_t order_volumes(int index) const;
  void set_order_volumes(int index, ::int32_t value);
  void add_order_volumes(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& order_volumes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* mutable_order_volumes();

  private:
  ::int32_t _internal_order_volumes(int index) const;
  void _internal_add_order_volumes(::int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& _internal_order_volumes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* _internal_mutable_order_volumes();

  public:
  // string market_id = 1;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // .google.protobuf.Timestamp time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;

  public:
  void clear_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();
  // .t4proto.v1.common.Price last_trade_price = 10;
  bool has_last_trade_price() const;
  private:
  bool _internal_has_last_trade_price() const;

  public:
  void clear_last_trade_price() ;
  const ::t4proto::v1::common::Price& last_trade_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_last_trade_price();
  ::t4proto::v1::common::Price* mutable_last_trade_price();
  void set_allocated_last_trade_price(::t4proto::v1::common::Price* last_trade_price);
  private:
  const ::t4proto::v1::common::Price& _internal_last_trade_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_last_trade_price();
  public:
  void unsafe_arena_set_allocated_last_trade_price(
      ::t4proto::v1::common::Price* last_trade_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_last_trade_price();
  // int32 total_traded_volume = 3;
  void clear_total_traded_volume() ;
  ::int32_t total_traded_volume() const;
  void set_total_traded_volume(::int32_t value);

  private:
  ::int32_t _internal_total_traded_volume() const;
  void _internal_set_total_traded_volume(::int32_t value);

  public:
  // int32 last_trade_volume = 4;
  void clear_last_trade_volume() ;
  ::int32_t last_trade_volume() const;
  void set_last_trade_volume(::int32_t value);

  private:
  ::int32_t _internal_last_trade_volume() const;
  void _internal_set_last_trade_volume(::int32_t value);

  public:
  // .t4proto.v1.common.BidOffer at_bid_or_offer = 6;
  void clear_at_bid_or_offer() ;
  ::t4proto::v1::common::BidOffer at_bid_or_offer() const;
  void set_at_bid_or_offer(::t4proto::v1::common::BidOffer value);

  private:
  ::t4proto::v1::common::BidOffer _internal_at_bid_or_offer() const;
  void _internal_set_at_bid_or_offer(::t4proto::v1::common::BidOffer value);

  public:
  // bool due_to_spread = 5;
  void clear_due_to_spread() ;
  bool due_to_spread() const;
  void set_due_to_spread(bool value);

  private:
  bool _internal_due_to_spread() const;
  void _internal_set_due_to_spread(bool value);

  public:
  // bool delayed = 7;
  void clear_delayed() ;
  bool delayed() const;
  void set_delayed(bool value);

  private:
  bool _internal_delayed() const;
  void _internal_set_delayed(bool value);

  public:
  // int32 total_trade_count = 9;
  void clear_total_trade_count() ;
  ::int32_t total_trade_count() const;
  void set_total_trade_count(::int32_t value);

  private:
  ::int32_t _internal_total_trade_count() const;
  void _internal_set_total_trade_count(::int32_t value);

  public:
  // .t4proto.v1.common.MarketMode mode = 11;
  void clear_mode() ;
  ::t4proto::v1::common::MarketMode mode() const;
  void set_mode(::t4proto::v1::common::MarketMode value);

  private:
  ::t4proto::v1::common::MarketMode _internal_mode() const;
  void _internal_set_mode(::t4proto::v1::common::MarketMode value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.market.MarketDepthTrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t> order_volumes_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _order_volumes_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    ::t4proto::v1::common::Price* last_trade_price_;
    ::int32_t total_traded_volume_;
    ::int32_t last_trade_volume_;
    int at_bid_or_offer_;
    bool due_to_spread_;
    bool delayed_;
    ::int32_t total_trade_count_;
    int mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto;
};// -------------------------------------------------------------------

class MarketHighLow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.market.MarketHighLow) */ {
 public:
  inline MarketHighLow() : MarketHighLow(nullptr) {}
  ~MarketHighLow() override;
  explicit PROTOBUF_CONSTEXPR MarketHighLow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketHighLow(const MarketHighLow& from);
  MarketHighLow(MarketHighLow&& from) noexcept
    : MarketHighLow() {
    *this = ::std::move(from);
  }

  inline MarketHighLow& operator=(const MarketHighLow& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketHighLow& operator=(MarketHighLow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketHighLow& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketHighLow* internal_default_instance() {
    return reinterpret_cast<const MarketHighLow*>(
               &_MarketHighLow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MarketHighLow& a, MarketHighLow& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketHighLow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketHighLow* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketHighLow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketHighLow>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketHighLow& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketHighLow& from) {
    MarketHighLow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketHighLow* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.market.MarketHighLow";
  }
  protected:
  explicit MarketHighLow(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kOpenPriceFieldNumber = 2,
    kHighPriceFieldNumber = 3,
    kLowPriceFieldNumber = 4,
    kTimeFieldNumber = 6,
    kTradeDateFieldNumber = 5,
    kDelayedFieldNumber = 7,
  };
  // string market_id = 1;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // .t4proto.v1.common.Price open_price = 2;
  bool has_open_price() const;
  private:
  bool _internal_has_open_price() const;

  public:
  void clear_open_price() ;
  const ::t4proto::v1::common::Price& open_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_open_price();
  ::t4proto::v1::common::Price* mutable_open_price();
  void set_allocated_open_price(::t4proto::v1::common::Price* open_price);
  private:
  const ::t4proto::v1::common::Price& _internal_open_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_open_price();
  public:
  void unsafe_arena_set_allocated_open_price(
      ::t4proto::v1::common::Price* open_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_open_price();
  // .t4proto.v1.common.Price high_price = 3;
  bool has_high_price() const;
  private:
  bool _internal_has_high_price() const;

  public:
  void clear_high_price() ;
  const ::t4proto::v1::common::Price& high_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_high_price();
  ::t4proto::v1::common::Price* mutable_high_price();
  void set_allocated_high_price(::t4proto::v1::common::Price* high_price);
  private:
  const ::t4proto::v1::common::Price& _internal_high_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_high_price();
  public:
  void unsafe_arena_set_allocated_high_price(
      ::t4proto::v1::common::Price* high_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_high_price();
  // .t4proto.v1.common.Price low_price = 4;
  bool has_low_price() const;
  private:
  bool _internal_has_low_price() const;

  public:
  void clear_low_price() ;
  const ::t4proto::v1::common::Price& low_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_low_price();
  ::t4proto::v1::common::Price* mutable_low_price();
  void set_allocated_low_price(::t4proto::v1::common::Price* low_price);
  private:
  const ::t4proto::v1::common::Price& _internal_low_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_low_price();
  public:
  void unsafe_arena_set_allocated_low_price(
      ::t4proto::v1::common::Price* low_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_low_price();
  // .google.protobuf.Timestamp time = 6;
  bool has_time() const;
  private:
  bool _internal_has_time() const;

  public:
  void clear_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();
  // int64 trade_date = 5;
  void clear_trade_date() ;
  ::int64_t trade_date() const;
  void set_trade_date(::int64_t value);

  private:
  ::int64_t _internal_trade_date() const;
  void _internal_set_trade_date(::int64_t value);

  public:
  // bool delayed = 7;
  void clear_delayed() ;
  bool delayed() const;
  void set_delayed(bool value);

  private:
  bool _internal_delayed() const;
  void _internal_set_delayed(bool value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.market.MarketHighLow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::t4proto::v1::common::Price* open_price_;
    ::t4proto::v1::common::Price* high_price_;
    ::t4proto::v1::common::Price* low_price_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    ::int64_t trade_date_;
    bool delayed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto;
};// -------------------------------------------------------------------

class MarketPriceLimits final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.market.MarketPriceLimits) */ {
 public:
  inline MarketPriceLimits() : MarketPriceLimits(nullptr) {}
  ~MarketPriceLimits() override;
  explicit PROTOBUF_CONSTEXPR MarketPriceLimits(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketPriceLimits(const MarketPriceLimits& from);
  MarketPriceLimits(MarketPriceLimits&& from) noexcept
    : MarketPriceLimits() {
    *this = ::std::move(from);
  }

  inline MarketPriceLimits& operator=(const MarketPriceLimits& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketPriceLimits& operator=(MarketPriceLimits&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketPriceLimits& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketPriceLimits* internal_default_instance() {
    return reinterpret_cast<const MarketPriceLimits*>(
               &_MarketPriceLimits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MarketPriceLimits& a, MarketPriceLimits& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketPriceLimits* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketPriceLimits* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketPriceLimits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketPriceLimits>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketPriceLimits& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketPriceLimits& from) {
    MarketPriceLimits::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketPriceLimits* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.market.MarketPriceLimits";
  }
  protected:
  explicit MarketPriceLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketIdFieldNumber = 1,
    kHighPriceFieldNumber = 2,
    kLowPriceFieldNumber = 3,
    kTimeFieldNumber = 4,
    kDelayedFieldNumber = 5,
  };
  // string market_id = 1;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // .t4proto.v1.common.Price high_price = 2;
  bool has_high_price() const;
  private:
  bool _internal_has_high_price() const;

  public:
  void clear_high_price() ;
  const ::t4proto::v1::common::Price& high_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_high_price();
  ::t4proto::v1::common::Price* mutable_high_price();
  void set_allocated_high_price(::t4proto::v1::common::Price* high_price);
  private:
  const ::t4proto::v1::common::Price& _internal_high_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_high_price();
  public:
  void unsafe_arena_set_allocated_high_price(
      ::t4proto::v1::common::Price* high_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_high_price();
  // .t4proto.v1.common.Price low_price = 3;
  bool has_low_price() const;
  private:
  bool _internal_has_low_price() const;

  public:
  void clear_low_price() ;
  const ::t4proto::v1::common::Price& low_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_low_price();
  ::t4proto::v1::common::Price* mutable_low_price();
  void set_allocated_low_price(::t4proto::v1::common::Price* low_price);
  private:
  const ::t4proto::v1::common::Price& _internal_low_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_low_price();
  public:
  void unsafe_arena_set_allocated_low_price(
      ::t4proto::v1::common::Price* low_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_low_price();
  // .google.protobuf.Timestamp time = 4;
  bool has_time() const;
  private:
  bool _internal_has_time() const;

  public:
  void clear_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();
  // bool delayed = 5;
  void clear_delayed() ;
  bool delayed() const;
  void set_delayed(bool value);

  private:
  bool _internal_delayed() const;
  void _internal_set_delayed(bool value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.market.MarketPriceLimits)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::t4proto::v1::common::Price* high_price_;
    ::t4proto::v1::common::Price* low_price_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    bool delayed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto;
};// -------------------------------------------------------------------

class MarketSettlement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.market.MarketSettlement) */ {
 public:
  inline MarketSettlement() : MarketSettlement(nullptr) {}
  ~MarketSettlement() override;
  explicit PROTOBUF_CONSTEXPR MarketSettlement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketSettlement(const MarketSettlement& from);
  MarketSettlement(MarketSettlement&& from) noexcept
    : MarketSettlement() {
    *this = ::std::move(from);
  }

  inline MarketSettlement& operator=(const MarketSettlement& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketSettlement& operator=(MarketSettlement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketSettlement& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketSettlement* internal_default_instance() {
    return reinterpret_cast<const MarketSettlement*>(
               &_MarketSettlement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MarketSettlement& a, MarketSettlement& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketSettlement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketSettlement* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketSettlement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketSettlement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketSettlement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketSettlement& from) {
    MarketSettlement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketSettlement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.market.MarketSettlement";
  }
  protected:
  explicit MarketSettlement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeIdFieldNumber = 1,
    kMarketIdFieldNumber = 2,
    kSettlementHeldPriceFieldNumber = 7,
    kSettlementPriceFieldNumber = 4,
    kSettlementTimeFieldNumber = 5,
    kSettlementTradeDateFieldNumber = 6,
    kSettlementHeldTimeFieldNumber = 8,
    kSettlementHeldTradeDateFieldNumber = 9,
    kImpliedPriceFieldNumber = 10,
    kImpliedHeldPriceFieldNumber = 11,
    kImpliedTimeFieldNumber = 12,
    kOpenInterestTimeFieldNumber = 14,
    kOpenInterestTradeDateFieldNumber = 15,
    kClearedVolumeTimeFieldNumber = 17,
    kClearedVolumeTradeDateFieldNumber = 18,
    kVwapPriceFieldNumber = 19,
    kVwapTimeFieldNumber = 20,
    kVwapTradeDateFieldNumber = 21,
    kDelayedFieldNumber = 3,
    kOpenInterestFieldNumber = 13,
    kClearedVolumeFieldNumber = 16,
  };
  // string exchange_id = 1;
  void clear_exchange_id() ;
  const std::string& exchange_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* ptr);

  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_id();

  public:
  // string market_id = 2;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // string settlement_held_price = 7;
  void clear_settlement_held_price() ;
  const std::string& settlement_held_price() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_settlement_held_price(Arg_&& arg, Args_... args);
  std::string* mutable_settlement_held_price();
  PROTOBUF_NODISCARD std::string* release_settlement_held_price();
  void set_allocated_settlement_held_price(std::string* ptr);

  private:
  const std::string& _internal_settlement_held_price() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_settlement_held_price(
      const std::string& value);
  std::string* _internal_mutable_settlement_held_price();

  public:
  // .t4proto.v1.common.Price settlement_price = 4;
  bool has_settlement_price() const;
  private:
  bool _internal_has_settlement_price() const;

  public:
  void clear_settlement_price() ;
  const ::t4proto::v1::common::Price& settlement_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_settlement_price();
  ::t4proto::v1::common::Price* mutable_settlement_price();
  void set_allocated_settlement_price(::t4proto::v1::common::Price* settlement_price);
  private:
  const ::t4proto::v1::common::Price& _internal_settlement_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_settlement_price();
  public:
  void unsafe_arena_set_allocated_settlement_price(
      ::t4proto::v1::common::Price* settlement_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_settlement_price();
  // .google.protobuf.Timestamp settlement_time = 5;
  bool has_settlement_time() const;
  private:
  bool _internal_has_settlement_time() const;

  public:
  void clear_settlement_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& settlement_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_settlement_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_settlement_time();
  void set_allocated_settlement_time(::PROTOBUF_NAMESPACE_ID::Timestamp* settlement_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_settlement_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_settlement_time();
  public:
  void unsafe_arena_set_allocated_settlement_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* settlement_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_settlement_time();
  // .google.protobuf.Timestamp settlement_trade_date = 6;
  bool has_settlement_trade_date() const;
  private:
  bool _internal_has_settlement_trade_date() const;

  public:
  void clear_settlement_trade_date() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& settlement_trade_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_settlement_trade_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_settlement_trade_date();
  void set_allocated_settlement_trade_date(::PROTOBUF_NAMESPACE_ID::Timestamp* settlement_trade_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_settlement_trade_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_settlement_trade_date();
  public:
  void unsafe_arena_set_allocated_settlement_trade_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* settlement_trade_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_settlement_trade_date();
  // .google.protobuf.Timestamp settlement_held_time = 8;
  bool has_settlement_held_time() const;
  private:
  bool _internal_has_settlement_held_time() const;

  public:
  void clear_settlement_held_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& settlement_held_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_settlement_held_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_settlement_held_time();
  void set_allocated_settlement_held_time(::PROTOBUF_NAMESPACE_ID::Timestamp* settlement_held_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_settlement_held_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_settlement_held_time();
  public:
  void unsafe_arena_set_allocated_settlement_held_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* settlement_held_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_settlement_held_time();
  // .google.protobuf.Timestamp settlement_held_trade_date = 9;
  bool has_settlement_held_trade_date() const;
  private:
  bool _internal_has_settlement_held_trade_date() const;

  public:
  void clear_settlement_held_trade_date() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& settlement_held_trade_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_settlement_held_trade_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_settlement_held_trade_date();
  void set_allocated_settlement_held_trade_date(::PROTOBUF_NAMESPACE_ID::Timestamp* settlement_held_trade_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_settlement_held_trade_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_settlement_held_trade_date();
  public:
  void unsafe_arena_set_allocated_settlement_held_trade_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* settlement_held_trade_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_settlement_held_trade_date();
  // .t4proto.v1.common.Price implied_price = 10;
  bool has_implied_price() const;
  private:
  bool _internal_has_implied_price() const;

  public:
  void clear_implied_price() ;
  const ::t4proto::v1::common::Price& implied_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_implied_price();
  ::t4proto::v1::common::Price* mutable_implied_price();
  void set_allocated_implied_price(::t4proto::v1::common::Price* implied_price);
  private:
  const ::t4proto::v1::common::Price& _internal_implied_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_implied_price();
  public:
  void unsafe_arena_set_allocated_implied_price(
      ::t4proto::v1::common::Price* implied_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_implied_price();
  // .t4proto.v1.common.Price implied_held_price = 11;
  bool has_implied_held_price() const;
  private:
  bool _internal_has_implied_held_price() const;

  public:
  void clear_implied_held_price() ;
  const ::t4proto::v1::common::Price& implied_held_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_implied_held_price();
  ::t4proto::v1::common::Price* mutable_implied_held_price();
  void set_allocated_implied_held_price(::t4proto::v1::common::Price* implied_held_price);
  private:
  const ::t4proto::v1::common::Price& _internal_implied_held_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_implied_held_price();
  public:
  void unsafe_arena_set_allocated_implied_held_price(
      ::t4proto::v1::common::Price* implied_held_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_implied_held_price();
  // .google.protobuf.Timestamp implied_time = 12;
  bool has_implied_time() const;
  private:
  bool _internal_has_implied_time() const;

  public:
  void clear_implied_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& implied_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_implied_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_implied_time();
  void set_allocated_implied_time(::PROTOBUF_NAMESPACE_ID::Timestamp* implied_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_implied_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_implied_time();
  public:
  void unsafe_arena_set_allocated_implied_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* implied_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_implied_time();
  // .google.protobuf.Timestamp open_interest_time = 14;
  bool has_open_interest_time() const;
  private:
  bool _internal_has_open_interest_time() const;

  public:
  void clear_open_interest_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& open_interest_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_open_interest_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_open_interest_time();
  void set_allocated_open_interest_time(::PROTOBUF_NAMESPACE_ID::Timestamp* open_interest_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_open_interest_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_open_interest_time();
  public:
  void unsafe_arena_set_allocated_open_interest_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* open_interest_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_open_interest_time();
  // .google.protobuf.Timestamp open_interest_trade_date = 15;
  bool has_open_interest_trade_date() const;
  private:
  bool _internal_has_open_interest_trade_date() const;

  public:
  void clear_open_interest_trade_date() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& open_interest_trade_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_open_interest_trade_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_open_interest_trade_date();
  void set_allocated_open_interest_trade_date(::PROTOBUF_NAMESPACE_ID::Timestamp* open_interest_trade_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_open_interest_trade_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_open_interest_trade_date();
  public:
  void unsafe_arena_set_allocated_open_interest_trade_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* open_interest_trade_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_open_interest_trade_date();
  // .google.protobuf.Timestamp cleared_volume_time = 17;
  bool has_cleared_volume_time() const;
  private:
  bool _internal_has_cleared_volume_time() const;

  public:
  void clear_cleared_volume_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& cleared_volume_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_cleared_volume_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_cleared_volume_time();
  void set_allocated_cleared_volume_time(::PROTOBUF_NAMESPACE_ID::Timestamp* cleared_volume_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_cleared_volume_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_cleared_volume_time();
  public:
  void unsafe_arena_set_allocated_cleared_volume_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* cleared_volume_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_cleared_volume_time();
  // .google.protobuf.Timestamp cleared_volume_trade_date = 18;
  bool has_cleared_volume_trade_date() const;
  private:
  bool _internal_has_cleared_volume_trade_date() const;

  public:
  void clear_cleared_volume_trade_date() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& cleared_volume_trade_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_cleared_volume_trade_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_cleared_volume_trade_date();
  void set_allocated_cleared_volume_trade_date(::PROTOBUF_NAMESPACE_ID::Timestamp* cleared_volume_trade_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_cleared_volume_trade_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_cleared_volume_trade_date();
  public:
  void unsafe_arena_set_allocated_cleared_volume_trade_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* cleared_volume_trade_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_cleared_volume_trade_date();
  // .t4proto.v1.common.Price vwap_price = 19;
  bool has_vwap_price() const;
  private:
  bool _internal_has_vwap_price() const;

  public:
  void clear_vwap_price() ;
  const ::t4proto::v1::common::Price& vwap_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_vwap_price();
  ::t4proto::v1::common::Price* mutable_vwap_price();
  void set_allocated_vwap_price(::t4proto::v1::common::Price* vwap_price);
  private:
  const ::t4proto::v1::common::Price& _internal_vwap_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_vwap_price();
  public:
  void unsafe_arena_set_allocated_vwap_price(
      ::t4proto::v1::common::Price* vwap_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_vwap_price();
  // .google.protobuf.Timestamp vwap_time = 20;
  bool has_vwap_time() const;
  private:
  bool _internal_has_vwap_time() const;

  public:
  void clear_vwap_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& vwap_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_vwap_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_vwap_time();
  void set_allocated_vwap_time(::PROTOBUF_NAMESPACE_ID::Timestamp* vwap_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_vwap_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_vwap_time();
  public:
  void unsafe_arena_set_allocated_vwap_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* vwap_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_vwap_time();
  // .google.protobuf.Timestamp vwap_trade_date = 21;
  bool has_vwap_trade_date() const;
  private:
  bool _internal_has_vwap_trade_date() const;

  public:
  void clear_vwap_trade_date() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& vwap_trade_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_vwap_trade_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_vwap_trade_date();
  void set_allocated_vwap_trade_date(::PROTOBUF_NAMESPACE_ID::Timestamp* vwap_trade_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_vwap_trade_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_vwap_trade_date();
  public:
  void unsafe_arena_set_allocated_vwap_trade_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* vwap_trade_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_vwap_trade_date();
  // bool delayed = 3;
  void clear_delayed() ;
  bool delayed() const;
  void set_delayed(bool value);

  private:
  bool _internal_delayed() const;
  void _internal_set_delayed(bool value);

  public:
  // int32 open_interest = 13;
  void clear_open_interest() ;
  ::int32_t open_interest() const;
  void set_open_interest(::int32_t value);

  private:
  ::int32_t _internal_open_interest() const;
  void _internal_set_open_interest(::int32_t value);

  public:
  // int32 cleared_volume = 16;
  void clear_cleared_volume() ;
  ::int32_t cleared_volume() const;
  void set_cleared_volume(::int32_t value);

  private:
  ::int32_t _internal_cleared_volume() const;
  void _internal_set_cleared_volume(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.market.MarketSettlement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr settlement_held_price_;
    ::t4proto::v1::common::Price* settlement_price_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* settlement_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* settlement_trade_date_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* settlement_held_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* settlement_held_trade_date_;
    ::t4proto::v1::common::Price* implied_price_;
    ::t4proto::v1::common::Price* implied_held_price_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* implied_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* open_interest_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* open_interest_trade_date_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* cleared_volume_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* cleared_volume_trade_date_;
    ::t4proto::v1::common::Price* vwap_price_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* vwap_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* vwap_trade_date_;
    bool delayed_;
    ::int32_t open_interest_;
    ::int32_t cleared_volume_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto;
};// -------------------------------------------------------------------

class MarketSnapshotMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.market.MarketSnapshotMessage) */ {
 public:
  inline MarketSnapshotMessage() : MarketSnapshotMessage(nullptr) {}
  ~MarketSnapshotMessage() override;
  explicit PROTOBUF_CONSTEXPR MarketSnapshotMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketSnapshotMessage(const MarketSnapshotMessage& from);
  MarketSnapshotMessage(MarketSnapshotMessage&& from) noexcept
    : MarketSnapshotMessage() {
    *this = ::std::move(from);
  }

  inline MarketSnapshotMessage& operator=(const MarketSnapshotMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketSnapshotMessage& operator=(MarketSnapshotMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketSnapshotMessage& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kMarketDepth = 3,
    kMarketDepthTrade = 4,
    kMarketHighLow = 5,
    kMarketPriceLimits = 6,
    kMarketSettlement = 7,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const MarketSnapshotMessage* internal_default_instance() {
    return reinterpret_cast<const MarketSnapshotMessage*>(
               &_MarketSnapshotMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MarketSnapshotMessage& a, MarketSnapshotMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketSnapshotMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketSnapshotMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketSnapshotMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketSnapshotMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketSnapshotMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketSnapshotMessage& from) {
    MarketSnapshotMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketSnapshotMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.market.MarketSnapshotMessage";
  }
  protected:
  explicit MarketSnapshotMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarketDepthFieldNumber = 3,
    kMarketDepthTradeFieldNumber = 4,
    kMarketHighLowFieldNumber = 5,
    kMarketPriceLimitsFieldNumber = 6,
    kMarketSettlementFieldNumber = 7,
  };
  // .t4proto.v1.market.MarketDepth market_depth = 3;
  bool has_market_depth() const;
  private:
  bool _internal_has_market_depth() const;

  public:
  void clear_market_depth() ;
  const ::t4proto::v1::market::MarketDepth& market_depth() const;
  PROTOBUF_NODISCARD ::t4proto::v1::market::MarketDepth* release_market_depth();
  ::t4proto::v1::market::MarketDepth* mutable_market_depth();
  void set_allocated_market_depth(::t4proto::v1::market::MarketDepth* market_depth);
  private:
  const ::t4proto::v1::market::MarketDepth& _internal_market_depth() const;
  ::t4proto::v1::market::MarketDepth* _internal_mutable_market_depth();
  public:
  void unsafe_arena_set_allocated_market_depth(
      ::t4proto::v1::market::MarketDepth* market_depth);
  ::t4proto::v1::market::MarketDepth* unsafe_arena_release_market_depth();
  // .t4proto.v1.market.MarketDepthTrade market_depth_trade = 4;
  bool has_market_depth_trade() const;
  private:
  bool _internal_has_market_depth_trade() const;

  public:
  void clear_market_depth_trade() ;
  const ::t4proto::v1::market::MarketDepthTrade& market_depth_trade() const;
  PROTOBUF_NODISCARD ::t4proto::v1::market::MarketDepthTrade* release_market_depth_trade();
  ::t4proto::v1::market::MarketDepthTrade* mutable_market_depth_trade();
  void set_allocated_market_depth_trade(::t4proto::v1::market::MarketDepthTrade* market_depth_trade);
  private:
  const ::t4proto::v1::market::MarketDepthTrade& _internal_market_depth_trade() const;
  ::t4proto::v1::market::MarketDepthTrade* _internal_mutable_market_depth_trade();
  public:
  void unsafe_arena_set_allocated_market_depth_trade(
      ::t4proto::v1::market::MarketDepthTrade* market_depth_trade);
  ::t4proto::v1::market::MarketDepthTrade* unsafe_arena_release_market_depth_trade();
  // .t4proto.v1.market.MarketHighLow market_high_low = 5;
  bool has_market_high_low() const;
  private:
  bool _internal_has_market_high_low() const;

  public:
  void clear_market_high_low() ;
  const ::t4proto::v1::market::MarketHighLow& market_high_low() const;
  PROTOBUF_NODISCARD ::t4proto::v1::market::MarketHighLow* release_market_high_low();
  ::t4proto::v1::market::MarketHighLow* mutable_market_high_low();
  void set_allocated_market_high_low(::t4proto::v1::market::MarketHighLow* market_high_low);
  private:
  const ::t4proto::v1::market::MarketHighLow& _internal_market_high_low() const;
  ::t4proto::v1::market::MarketHighLow* _internal_mutable_market_high_low();
  public:
  void unsafe_arena_set_allocated_market_high_low(
      ::t4proto::v1::market::MarketHighLow* market_high_low);
  ::t4proto::v1::market::MarketHighLow* unsafe_arena_release_market_high_low();
  // .t4proto.v1.market.MarketPriceLimits market_price_limits = 6;
  bool has_market_price_limits() const;
  private:
  bool _internal_has_market_price_limits() const;

  public:
  void clear_market_price_limits() ;
  const ::t4proto::v1::market::MarketPriceLimits& market_price_limits() const;
  PROTOBUF_NODISCARD ::t4proto::v1::market::MarketPriceLimits* release_market_price_limits();
  ::t4proto::v1::market::MarketPriceLimits* mutable_market_price_limits();
  void set_allocated_market_price_limits(::t4proto::v1::market::MarketPriceLimits* market_price_limits);
  private:
  const ::t4proto::v1::market::MarketPriceLimits& _internal_market_price_limits() const;
  ::t4proto::v1::market::MarketPriceLimits* _internal_mutable_market_price_limits();
  public:
  void unsafe_arena_set_allocated_market_price_limits(
      ::t4proto::v1::market::MarketPriceLimits* market_price_limits);
  ::t4proto::v1::market::MarketPriceLimits* unsafe_arena_release_market_price_limits();
  // .t4proto.v1.market.MarketSettlement market_settlement = 7;
  bool has_market_settlement() const;
  private:
  bool _internal_has_market_settlement() const;

  public:
  void clear_market_settlement() ;
  const ::t4proto::v1::market::MarketSettlement& market_settlement() const;
  PROTOBUF_NODISCARD ::t4proto::v1::market::MarketSettlement* release_market_settlement();
  ::t4proto::v1::market::MarketSettlement* mutable_market_settlement();
  void set_allocated_market_settlement(::t4proto::v1::market::MarketSettlement* market_settlement);
  private:
  const ::t4proto::v1::market::MarketSettlement& _internal_market_settlement() const;
  ::t4proto::v1::market::MarketSettlement* _internal_mutable_market_settlement();
  public:
  void unsafe_arena_set_allocated_market_settlement(
      ::t4proto::v1::market::MarketSettlement* market_settlement);
  ::t4proto::v1::market::MarketSettlement* unsafe_arena_release_market_settlement();
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:t4proto.v1.market.MarketSnapshotMessage)
 private:
  class _Internal;
  void set_has_market_depth();
  void set_has_market_depth_trade();
  void set_has_market_high_low();
  void set_has_market_price_limits();
  void set_has_market_settlement();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::t4proto::v1::market::MarketDepth* market_depth_;
      ::t4proto::v1::market::MarketDepthTrade* market_depth_trade_;
      ::t4proto::v1::market::MarketHighLow* market_high_low_;
      ::t4proto::v1::market::MarketPriceLimits* market_price_limits_;
      ::t4proto::v1::market::MarketSettlement* market_settlement_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto;
};// -------------------------------------------------------------------

class MarketSnapshot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.market.MarketSnapshot) */ {
 public:
  inline MarketSnapshot() : MarketSnapshot(nullptr) {}
  ~MarketSnapshot() override;
  explicit PROTOBUF_CONSTEXPR MarketSnapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketSnapshot(const MarketSnapshot& from);
  MarketSnapshot(MarketSnapshot&& from) noexcept
    : MarketSnapshot() {
    *this = ::std::move(from);
  }

  inline MarketSnapshot& operator=(const MarketSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketSnapshot& operator=(MarketSnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketSnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketSnapshot* internal_default_instance() {
    return reinterpret_cast<const MarketSnapshot*>(
               &_MarketSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MarketSnapshot& a, MarketSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketSnapshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketSnapshot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketSnapshot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketSnapshot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketSnapshot& from) {
    MarketSnapshot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketSnapshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.market.MarketSnapshot";
  }
  protected:
  explicit MarketSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 5,
    kMarketIdFieldNumber = 1,
    kModeFieldNumber = 2,
    kDueToConnectionFieldNumber = 3,
    kDelayedFieldNumber = 4,
  };
  // repeated .t4proto.v1.market.MarketSnapshotMessage messages = 5;
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  ::t4proto::v1::market::MarketSnapshotMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketSnapshotMessage >*
      mutable_messages();
  private:
  const ::t4proto::v1::market::MarketSnapshotMessage& _internal_messages(int index) const;
  ::t4proto::v1::market::MarketSnapshotMessage* _internal_add_messages();
  public:
  const ::t4proto::v1::market::MarketSnapshotMessage& messages(int index) const;
  ::t4proto::v1::market::MarketSnapshotMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketSnapshotMessage >&
      messages() const;
  // string market_id = 1;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // .t4proto.v1.common.MarketMode mode = 2;
  void clear_mode() ;
  ::t4proto::v1::common::MarketMode mode() const;
  void set_mode(::t4proto::v1::common::MarketMode value);

  private:
  ::t4proto::v1::common::MarketMode _internal_mode() const;
  void _internal_set_mode(::t4proto::v1::common::MarketMode value);

  public:
  // bool due_to_connection = 3;
  void clear_due_to_connection() ;
  bool due_to_connection() const;
  void set_due_to_connection(bool value);

  private:
  bool _internal_due_to_connection() const;
  void _internal_set_due_to_connection(bool value);

  public:
  // bool delayed = 4;
  void clear_delayed() ;
  bool delayed() const;
  void set_delayed(bool value);

  private:
  bool _internal_delayed() const;
  void _internal_set_delayed(bool value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.market.MarketSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketSnapshotMessage > messages_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    int mode_;
    bool due_to_connection_;
    bool delayed_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto;
};// -------------------------------------------------------------------

class MarketByOrderSnapshot_Order final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.market.MarketByOrderSnapshot.Order) */ {
 public:
  inline MarketByOrderSnapshot_Order() : MarketByOrderSnapshot_Order(nullptr) {}
  ~MarketByOrderSnapshot_Order() override;
  explicit PROTOBUF_CONSTEXPR MarketByOrderSnapshot_Order(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByOrderSnapshot_Order(const MarketByOrderSnapshot_Order& from);
  MarketByOrderSnapshot_Order(MarketByOrderSnapshot_Order&& from) noexcept
    : MarketByOrderSnapshot_Order() {
    *this = ::std::move(from);
  }

  inline MarketByOrderSnapshot_Order& operator=(const MarketByOrderSnapshot_Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByOrderSnapshot_Order& operator=(MarketByOrderSnapshot_Order&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketByOrderSnapshot_Order& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByOrderSnapshot_Order* internal_default_instance() {
    return reinterpret_cast<const MarketByOrderSnapshot_Order*>(
               &_MarketByOrderSnapshot_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MarketByOrderSnapshot_Order& a, MarketByOrderSnapshot_Order& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByOrderSnapshot_Order* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByOrderSnapshot_Order* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketByOrderSnapshot_Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketByOrderSnapshot_Order>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketByOrderSnapshot_Order& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketByOrderSnapshot_Order& from) {
    MarketByOrderSnapshot_Order::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByOrderSnapshot_Order* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.market.MarketByOrderSnapshot.Order";
  }
  protected:
  explicit MarketByOrderSnapshot_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 3,
    kOrderIdFieldNumber = 1,
    kBidOfferFieldNumber = 2,
    kVolumeFieldNumber = 4,
    kPriorityFieldNumber = 5,
  };
  // .t4proto.v1.common.Price price = 3;
  bool has_price() const;
  private:
  bool _internal_has_price() const;

  public:
  void clear_price() ;
  const ::t4proto::v1::common::Price& price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_price();
  ::t4proto::v1::common::Price* mutable_price();
  void set_allocated_price(::t4proto::v1::common::Price* price);
  private:
  const ::t4proto::v1::common::Price& _internal_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::t4proto::v1::common::Price* price);
  ::t4proto::v1::common::Price* unsafe_arena_release_price();
  // uint64 order_id = 1;
  void clear_order_id() ;
  ::uint64_t order_id() const;
  void set_order_id(::uint64_t value);

  private:
  ::uint64_t _internal_order_id() const;
  void _internal_set_order_id(::uint64_t value);

  public:
  // .t4proto.v1.common.BidOffer bid_offer = 2;
  void clear_bid_offer() ;
  ::t4proto::v1::common::BidOffer bid_offer() const;
  void set_bid_offer(::t4proto::v1::common::BidOffer value);

  private:
  ::t4proto::v1::common::BidOffer _internal_bid_offer() const;
  void _internal_set_bid_offer(::t4proto::v1::common::BidOffer value);

  public:
  // int32 volume = 4;
  void clear_volume() ;
  ::int32_t volume() const;
  void set_volume(::int32_t value);

  private:
  ::int32_t _internal_volume() const;
  void _internal_set_volume(::int32_t value);

  public:
  // uint64 priority = 5;
  void clear_priority() ;
  ::uint64_t priority() const;
  void set_priority(::uint64_t value);

  private:
  ::uint64_t _internal_priority() const;
  void _internal_set_priority(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.market.MarketByOrderSnapshot.Order)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::t4proto::v1::common::Price* price_;
    ::uint64_t order_id_;
    int bid_offer_;
    ::int32_t volume_;
    ::uint64_t priority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto;
};// -------------------------------------------------------------------

class MarketByOrderSnapshot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.market.MarketByOrderSnapshot) */ {
 public:
  inline MarketByOrderSnapshot() : MarketByOrderSnapshot(nullptr) {}
  ~MarketByOrderSnapshot() override;
  explicit PROTOBUF_CONSTEXPR MarketByOrderSnapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByOrderSnapshot(const MarketByOrderSnapshot& from);
  MarketByOrderSnapshot(MarketByOrderSnapshot&& from) noexcept
    : MarketByOrderSnapshot() {
    *this = ::std::move(from);
  }

  inline MarketByOrderSnapshot& operator=(const MarketByOrderSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByOrderSnapshot& operator=(MarketByOrderSnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketByOrderSnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByOrderSnapshot* internal_default_instance() {
    return reinterpret_cast<const MarketByOrderSnapshot*>(
               &_MarketByOrderSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(MarketByOrderSnapshot& a, MarketByOrderSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByOrderSnapshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByOrderSnapshot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketByOrderSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketByOrderSnapshot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketByOrderSnapshot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketByOrderSnapshot& from) {
    MarketByOrderSnapshot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByOrderSnapshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.market.MarketByOrderSnapshot";
  }
  protected:
  explicit MarketByOrderSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MarketByOrderSnapshot_Order Order;

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 5,
    kMarketIdFieldNumber = 1,
    kTimeFieldNumber = 2,
    kLastSequenceFieldNumber = 4,
    kModeFieldNumber = 3,
  };
  // repeated .t4proto.v1.market.MarketByOrderSnapshot.Order orders = 5;
  int orders_size() const;
  private:
  int _internal_orders_size() const;

  public:
  void clear_orders() ;
  ::t4proto::v1::market::MarketByOrderSnapshot_Order* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketByOrderSnapshot_Order >*
      mutable_orders();
  private:
  const ::t4proto::v1::market::MarketByOrderSnapshot_Order& _internal_orders(int index) const;
  ::t4proto::v1::market::MarketByOrderSnapshot_Order* _internal_add_orders();
  public:
  const ::t4proto::v1::market::MarketByOrderSnapshot_Order& orders(int index) const;
  ::t4proto::v1::market::MarketByOrderSnapshot_Order* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketByOrderSnapshot_Order >&
      orders() const;
  // string market_id = 1;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // .google.protobuf.Timestamp time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;

  public:
  void clear_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();
  // uint64 last_sequence = 4;
  void clear_last_sequence() ;
  ::uint64_t last_sequence() const;
  void set_last_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_last_sequence() const;
  void _internal_set_last_sequence(::uint64_t value);

  public:
  // .t4proto.v1.common.MarketMode mode = 3;
  void clear_mode() ;
  ::t4proto::v1::common::MarketMode mode() const;
  void set_mode(::t4proto::v1::common::MarketMode value);

  private:
  ::t4proto::v1::common::MarketMode _internal_mode() const;
  void _internal_set_mode(::t4proto::v1::common::MarketMode value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.market.MarketByOrderSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketByOrderSnapshot_Order > orders_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    ::uint64_t last_sequence_;
    int mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto;
};// -------------------------------------------------------------------

class MarketByOrderUpdate_Update final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.market.MarketByOrderUpdate.Update) */ {
 public:
  inline MarketByOrderUpdate_Update() : MarketByOrderUpdate_Update(nullptr) {}
  ~MarketByOrderUpdate_Update() override;
  explicit PROTOBUF_CONSTEXPR MarketByOrderUpdate_Update(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByOrderUpdate_Update(const MarketByOrderUpdate_Update& from);
  MarketByOrderUpdate_Update(MarketByOrderUpdate_Update&& from) noexcept
    : MarketByOrderUpdate_Update() {
    *this = ::std::move(from);
  }

  inline MarketByOrderUpdate_Update& operator=(const MarketByOrderUpdate_Update& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByOrderUpdate_Update& operator=(MarketByOrderUpdate_Update&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketByOrderUpdate_Update& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByOrderUpdate_Update* internal_default_instance() {
    return reinterpret_cast<const MarketByOrderUpdate_Update*>(
               &_MarketByOrderUpdate_Update_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MarketByOrderUpdate_Update& a, MarketByOrderUpdate_Update& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByOrderUpdate_Update* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByOrderUpdate_Update* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketByOrderUpdate_Update* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketByOrderUpdate_Update>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketByOrderUpdate_Update& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketByOrderUpdate_Update& from) {
    MarketByOrderUpdate_Update::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByOrderUpdate_Update* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.market.MarketByOrderUpdate.Update";
  }
  protected:
  explicit MarketByOrderUpdate_Update(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriceFieldNumber = 4,
    kOrderIdFieldNumber = 2,
    kUpdateTypeFieldNumber = 1,
    kBidOfferFieldNumber = 3,
    kPriorityFieldNumber = 6,
    kVolumeFieldNumber = 5,
  };
  // .t4proto.v1.common.Price price = 4;
  bool has_price() const;
  private:
  bool _internal_has_price() const;

  public:
  void clear_price() ;
  const ::t4proto::v1::common::Price& price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_price();
  ::t4proto::v1::common::Price* mutable_price();
  void set_allocated_price(::t4proto::v1::common::Price* price);
  private:
  const ::t4proto::v1::common::Price& _internal_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::t4proto::v1::common::Price* price);
  ::t4proto::v1::common::Price* unsafe_arena_release_price();
  // uint64 order_id = 2;
  void clear_order_id() ;
  ::uint64_t order_id() const;
  void set_order_id(::uint64_t value);

  private:
  ::uint64_t _internal_order_id() const;
  void _internal_set_order_id(::uint64_t value);

  public:
  // .t4proto.v1.market.MarketByOrderUpdate.UpdateType update_type = 1;
  void clear_update_type() ;
  ::t4proto::v1::market::MarketByOrderUpdate_UpdateType update_type() const;
  void set_update_type(::t4proto::v1::market::MarketByOrderUpdate_UpdateType value);

  private:
  ::t4proto::v1::market::MarketByOrderUpdate_UpdateType _internal_update_type() const;
  void _internal_set_update_type(::t4proto::v1::market::MarketByOrderUpdate_UpdateType value);

  public:
  // .t4proto.v1.common.BidOffer bid_offer = 3;
  void clear_bid_offer() ;
  ::t4proto::v1::common::BidOffer bid_offer() const;
  void set_bid_offer(::t4proto::v1::common::BidOffer value);

  private:
  ::t4proto::v1::common::BidOffer _internal_bid_offer() const;
  void _internal_set_bid_offer(::t4proto::v1::common::BidOffer value);

  public:
  // uint64 priority = 6;
  void clear_priority() ;
  ::uint64_t priority() const;
  void set_priority(::uint64_t value);

  private:
  ::uint64_t _internal_priority() const;
  void _internal_set_priority(::uint64_t value);

  public:
  // int32 volume = 5;
  void clear_volume() ;
  ::int32_t volume() const;
  void set_volume(::int32_t value);

  private:
  ::int32_t _internal_volume() const;
  void _internal_set_volume(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.market.MarketByOrderUpdate.Update)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::t4proto::v1::common::Price* price_;
    ::uint64_t order_id_;
    int update_type_;
    int bid_offer_;
    ::uint64_t priority_;
    ::int32_t volume_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto;
};// -------------------------------------------------------------------

class MarketByOrderUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.market.MarketByOrderUpdate) */ {
 public:
  inline MarketByOrderUpdate() : MarketByOrderUpdate(nullptr) {}
  ~MarketByOrderUpdate() override;
  explicit PROTOBUF_CONSTEXPR MarketByOrderUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MarketByOrderUpdate(const MarketByOrderUpdate& from);
  MarketByOrderUpdate(MarketByOrderUpdate&& from) noexcept
    : MarketByOrderUpdate() {
    *this = ::std::move(from);
  }

  inline MarketByOrderUpdate& operator=(const MarketByOrderUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketByOrderUpdate& operator=(MarketByOrderUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketByOrderUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketByOrderUpdate* internal_default_instance() {
    return reinterpret_cast<const MarketByOrderUpdate*>(
               &_MarketByOrderUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MarketByOrderUpdate& a, MarketByOrderUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(MarketByOrderUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketByOrderUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketByOrderUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MarketByOrderUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MarketByOrderUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MarketByOrderUpdate& from) {
    MarketByOrderUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketByOrderUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.market.MarketByOrderUpdate";
  }
  protected:
  explicit MarketByOrderUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MarketByOrderUpdate_Update Update;

  using UpdateType = MarketByOrderUpdate_UpdateType;
  static constexpr UpdateType UPDATE_TYPE_ADD_OR_UPDATE = MarketByOrderUpdate_UpdateType_UPDATE_TYPE_ADD_OR_UPDATE;
  static constexpr UpdateType UPDATE_TYPE_DELETE = MarketByOrderUpdate_UpdateType_UPDATE_TYPE_DELETE;
  static constexpr UpdateType UPDATE_TYPE_CLEAR = MarketByOrderUpdate_UpdateType_UPDATE_TYPE_CLEAR;
  static inline bool UpdateType_IsValid(int value) {
    return MarketByOrderUpdate_UpdateType_IsValid(value);
  }
  static constexpr UpdateType UpdateType_MIN = MarketByOrderUpdate_UpdateType_UpdateType_MIN;
  static constexpr UpdateType UpdateType_MAX = MarketByOrderUpdate_UpdateType_UpdateType_MAX;
  static constexpr int UpdateType_ARRAYSIZE = MarketByOrderUpdate_UpdateType_UpdateType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateType_descriptor() {
    return MarketByOrderUpdate_UpdateType_descriptor();
  }
  template <typename T>
  static inline const std::string& UpdateType_Name(T value) {
    return MarketByOrderUpdate_UpdateType_Name(value);
  }
  static inline bool UpdateType_Parse(absl::string_view name, UpdateType* value) {
    return MarketByOrderUpdate_UpdateType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 5,
    kMarketIdFieldNumber = 1,
    kTimeFieldNumber = 2,
    kSequenceFieldNumber = 4,
    kModeFieldNumber = 3,
  };
  // repeated .t4proto.v1.market.MarketByOrderUpdate.Update updates = 5;
  int updates_size() const;
  private:
  int _internal_updates_size() const;

  public:
  void clear_updates() ;
  ::t4proto::v1::market::MarketByOrderUpdate_Update* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketByOrderUpdate_Update >*
      mutable_updates();
  private:
  const ::t4proto::v1::market::MarketByOrderUpdate_Update& _internal_updates(int index) const;
  ::t4proto::v1::market::MarketByOrderUpdate_Update* _internal_add_updates();
  public:
  const ::t4proto::v1::market::MarketByOrderUpdate_Update& updates(int index) const;
  ::t4proto::v1::market::MarketByOrderUpdate_Update* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketByOrderUpdate_Update >&
      updates() const;
  // string market_id = 1;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // .google.protobuf.Timestamp time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;

  public:
  void clear_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();
  // uint64 sequence = 4;
  void clear_sequence() ;
  ::uint64_t sequence() const;
  void set_sequence(::uint64_t value);

  private:
  ::uint64_t _internal_sequence() const;
  void _internal_set_sequence(::uint64_t value);

  public:
  // .t4proto.v1.common.MarketMode mode = 3;
  void clear_mode() ;
  ::t4proto::v1::common::MarketMode mode() const;
  void set_mode(::t4proto::v1::common::MarketMode value);

  private:
  ::t4proto::v1::common::MarketMode _internal_mode() const;
  void _internal_set_mode(::t4proto::v1::common::MarketMode value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.market.MarketByOrderUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketByOrderUpdate_Update > updates_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    ::uint64_t sequence_;
    int mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MarketDepthSubscribe

// string exchange_id = 1;
inline void MarketDepthSubscribe::clear_exchange_id() {
  _impl_.exchange_id_.ClearToEmpty();
}
inline const std::string& MarketDepthSubscribe::exchange_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepthSubscribe.exchange_id)
  return _internal_exchange_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketDepthSubscribe::set_exchange_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.exchange_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepthSubscribe.exchange_id)
}
inline std::string* MarketDepthSubscribe::mutable_exchange_id() {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDepthSubscribe.exchange_id)
  return _s;
}
inline const std::string& MarketDepthSubscribe::_internal_exchange_id() const {
  return _impl_.exchange_id_.Get();
}
inline void MarketDepthSubscribe::_internal_set_exchange_id(const std::string& value) {
  ;


  _impl_.exchange_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketDepthSubscribe::_internal_mutable_exchange_id() {
  ;
  return _impl_.exchange_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketDepthSubscribe::release_exchange_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDepthSubscribe.exchange_id)
  return _impl_.exchange_id_.Release();
}
inline void MarketDepthSubscribe::set_allocated_exchange_id(std::string* value) {
  _impl_.exchange_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_id_.IsDefault()) {
          _impl_.exchange_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDepthSubscribe.exchange_id)
}

// string contract_id = 2;
inline void MarketDepthSubscribe::clear_contract_id() {
  _impl_.contract_id_.ClearToEmpty();
}
inline const std::string& MarketDepthSubscribe::contract_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepthSubscribe.contract_id)
  return _internal_contract_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketDepthSubscribe::set_contract_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.contract_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepthSubscribe.contract_id)
}
inline std::string* MarketDepthSubscribe::mutable_contract_id() {
  std::string* _s = _internal_mutable_contract_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDepthSubscribe.contract_id)
  return _s;
}
inline const std::string& MarketDepthSubscribe::_internal_contract_id() const {
  return _impl_.contract_id_.Get();
}
inline void MarketDepthSubscribe::_internal_set_contract_id(const std::string& value) {
  ;


  _impl_.contract_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketDepthSubscribe::_internal_mutable_contract_id() {
  ;
  return _impl_.contract_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketDepthSubscribe::release_contract_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDepthSubscribe.contract_id)
  return _impl_.contract_id_.Release();
}
inline void MarketDepthSubscribe::set_allocated_contract_id(std::string* value) {
  _impl_.contract_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contract_id_.IsDefault()) {
          _impl_.contract_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDepthSubscribe.contract_id)
}

// string market_id = 3;
inline void MarketDepthSubscribe::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& MarketDepthSubscribe::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepthSubscribe.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketDepthSubscribe::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepthSubscribe.market_id)
}
inline std::string* MarketDepthSubscribe::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDepthSubscribe.market_id)
  return _s;
}
inline const std::string& MarketDepthSubscribe::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void MarketDepthSubscribe::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketDepthSubscribe::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketDepthSubscribe::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDepthSubscribe.market_id)
  return _impl_.market_id_.Release();
}
inline void MarketDepthSubscribe::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDepthSubscribe.market_id)
}

// .t4proto.v1.common.DepthBuffer buffer = 4;
inline void MarketDepthSubscribe::clear_buffer() {
  _impl_.buffer_ = 0;
}
inline ::t4proto::v1::common::DepthBuffer MarketDepthSubscribe::buffer() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepthSubscribe.buffer)
  return _internal_buffer();
}
inline void MarketDepthSubscribe::set_buffer(::t4proto::v1::common::DepthBuffer value) {
   _internal_set_buffer(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepthSubscribe.buffer)
}
inline ::t4proto::v1::common::DepthBuffer MarketDepthSubscribe::_internal_buffer() const {
  return static_cast<::t4proto::v1::common::DepthBuffer>(_impl_.buffer_);
}
inline void MarketDepthSubscribe::_internal_set_buffer(::t4proto::v1::common::DepthBuffer value) {
  ;
  _impl_.buffer_ = value;
}

// .t4proto.v1.common.DepthLevels depth_levels = 5;
inline void MarketDepthSubscribe::clear_depth_levels() {
  _impl_.depth_levels_ = 0;
}
inline ::t4proto::v1::common::DepthLevels MarketDepthSubscribe::depth_levels() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepthSubscribe.depth_levels)
  return _internal_depth_levels();
}
inline void MarketDepthSubscribe::set_depth_levels(::t4proto::v1::common::DepthLevels value) {
   _internal_set_depth_levels(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepthSubscribe.depth_levels)
}
inline ::t4proto::v1::common::DepthLevels MarketDepthSubscribe::_internal_depth_levels() const {
  return static_cast<::t4proto::v1::common::DepthLevels>(_impl_.depth_levels_);
}
inline void MarketDepthSubscribe::_internal_set_depth_levels(::t4proto::v1::common::DepthLevels value) {
  ;
  _impl_.depth_levels_ = value;
}

// -------------------------------------------------------------------

// MarketDepthSubscribeReject

// string market_id = 1;
inline void MarketDepthSubscribeReject::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& MarketDepthSubscribeReject::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepthSubscribeReject.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketDepthSubscribeReject::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepthSubscribeReject.market_id)
}
inline std::string* MarketDepthSubscribeReject::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDepthSubscribeReject.market_id)
  return _s;
}
inline const std::string& MarketDepthSubscribeReject::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void MarketDepthSubscribeReject::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketDepthSubscribeReject::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketDepthSubscribeReject::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDepthSubscribeReject.market_id)
  return _impl_.market_id_.Release();
}
inline void MarketDepthSubscribeReject::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDepthSubscribeReject.market_id)
}

// .google.protobuf.Timestamp time = 2;
inline bool MarketDepthSubscribeReject::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool MarketDepthSubscribeReject::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketDepthSubscribeReject::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketDepthSubscribeReject::time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepthSubscribeReject.time)
  return _internal_time();
}
inline void MarketDepthSubscribeReject::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketDepthSubscribeReject.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDepthSubscribeReject::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDepthSubscribeReject::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDepthSubscribeReject.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDepthSubscribeReject::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDepthSubscribeReject::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDepthSubscribeReject.time)
  return _msg;
}
inline void MarketDepthSubscribeReject::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }

  } else {

  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDepthSubscribeReject.time)
}

// .t4proto.v1.common.MarketMode mode = 3;
inline void MarketDepthSubscribeReject::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::t4proto::v1::common::MarketMode MarketDepthSubscribeReject::mode() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepthSubscribeReject.mode)
  return _internal_mode();
}
inline void MarketDepthSubscribeReject::set_mode(::t4proto::v1::common::MarketMode value) {
   _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepthSubscribeReject.mode)
}
inline ::t4proto::v1::common::MarketMode MarketDepthSubscribeReject::_internal_mode() const {
  return static_cast<::t4proto::v1::common::MarketMode>(_impl_.mode_);
}
inline void MarketDepthSubscribeReject::_internal_set_mode(::t4proto::v1::common::MarketMode value) {
  ;
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// MarketByOrderSubscribe

// string exchange_id = 1;
inline void MarketByOrderSubscribe::clear_exchange_id() {
  _impl_.exchange_id_.ClearToEmpty();
}
inline const std::string& MarketByOrderSubscribe::exchange_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderSubscribe.exchange_id)
  return _internal_exchange_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketByOrderSubscribe::set_exchange_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.exchange_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketByOrderSubscribe.exchange_id)
}
inline std::string* MarketByOrderSubscribe::mutable_exchange_id() {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketByOrderSubscribe.exchange_id)
  return _s;
}
inline const std::string& MarketByOrderSubscribe::_internal_exchange_id() const {
  return _impl_.exchange_id_.Get();
}
inline void MarketByOrderSubscribe::_internal_set_exchange_id(const std::string& value) {
  ;


  _impl_.exchange_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketByOrderSubscribe::_internal_mutable_exchange_id() {
  ;
  return _impl_.exchange_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketByOrderSubscribe::release_exchange_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketByOrderSubscribe.exchange_id)
  return _impl_.exchange_id_.Release();
}
inline void MarketByOrderSubscribe::set_allocated_exchange_id(std::string* value) {
  _impl_.exchange_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_id_.IsDefault()) {
          _impl_.exchange_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketByOrderSubscribe.exchange_id)
}

// string contract_id = 2;
inline void MarketByOrderSubscribe::clear_contract_id() {
  _impl_.contract_id_.ClearToEmpty();
}
inline const std::string& MarketByOrderSubscribe::contract_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderSubscribe.contract_id)
  return _internal_contract_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketByOrderSubscribe::set_contract_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.contract_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketByOrderSubscribe.contract_id)
}
inline std::string* MarketByOrderSubscribe::mutable_contract_id() {
  std::string* _s = _internal_mutable_contract_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketByOrderSubscribe.contract_id)
  return _s;
}
inline const std::string& MarketByOrderSubscribe::_internal_contract_id() const {
  return _impl_.contract_id_.Get();
}
inline void MarketByOrderSubscribe::_internal_set_contract_id(const std::string& value) {
  ;


  _impl_.contract_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketByOrderSubscribe::_internal_mutable_contract_id() {
  ;
  return _impl_.contract_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketByOrderSubscribe::release_contract_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketByOrderSubscribe.contract_id)
  return _impl_.contract_id_.Release();
}
inline void MarketByOrderSubscribe::set_allocated_contract_id(std::string* value) {
  _impl_.contract_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contract_id_.IsDefault()) {
          _impl_.contract_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketByOrderSubscribe.contract_id)
}

// string market_id = 3;
inline void MarketByOrderSubscribe::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& MarketByOrderSubscribe::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderSubscribe.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketByOrderSubscribe::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketByOrderSubscribe.market_id)
}
inline std::string* MarketByOrderSubscribe::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketByOrderSubscribe.market_id)
  return _s;
}
inline const std::string& MarketByOrderSubscribe::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void MarketByOrderSubscribe::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketByOrderSubscribe::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketByOrderSubscribe::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketByOrderSubscribe.market_id)
  return _impl_.market_id_.Release();
}
inline void MarketByOrderSubscribe::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketByOrderSubscribe.market_id)
}

// bool subscribe = 4;
inline void MarketByOrderSubscribe::clear_subscribe() {
  _impl_.subscribe_ = false;
}
inline bool MarketByOrderSubscribe::subscribe() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderSubscribe.subscribe)
  return _internal_subscribe();
}
inline void MarketByOrderSubscribe::set_subscribe(bool value) {
  _internal_set_subscribe(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketByOrderSubscribe.subscribe)
}
inline bool MarketByOrderSubscribe::_internal_subscribe() const {
  return _impl_.subscribe_;
}
inline void MarketByOrderSubscribe::_internal_set_subscribe(bool value) {
  ;
  _impl_.subscribe_ = value;
}

// -------------------------------------------------------------------

// MarketByOrderSubscribeReject

// string market_id = 1;
inline void MarketByOrderSubscribeReject::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& MarketByOrderSubscribeReject::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderSubscribeReject.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketByOrderSubscribeReject::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketByOrderSubscribeReject.market_id)
}
inline std::string* MarketByOrderSubscribeReject::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketByOrderSubscribeReject.market_id)
  return _s;
}
inline const std::string& MarketByOrderSubscribeReject::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void MarketByOrderSubscribeReject::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketByOrderSubscribeReject::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketByOrderSubscribeReject::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketByOrderSubscribeReject.market_id)
  return _impl_.market_id_.Release();
}
inline void MarketByOrderSubscribeReject::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketByOrderSubscribeReject.market_id)
}

// .google.protobuf.Timestamp time = 2;
inline bool MarketByOrderSubscribeReject::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool MarketByOrderSubscribeReject::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketByOrderSubscribeReject::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketByOrderSubscribeReject::time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderSubscribeReject.time)
  return _internal_time();
}
inline void MarketByOrderSubscribeReject::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketByOrderSubscribeReject.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketByOrderSubscribeReject::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketByOrderSubscribeReject::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketByOrderSubscribeReject.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketByOrderSubscribeReject::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketByOrderSubscribeReject::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketByOrderSubscribeReject.time)
  return _msg;
}
inline void MarketByOrderSubscribeReject::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }

  } else {

  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketByOrderSubscribeReject.time)
}

// .t4proto.v1.common.MarketMode mode = 3;
inline void MarketByOrderSubscribeReject::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::t4proto::v1::common::MarketMode MarketByOrderSubscribeReject::mode() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderSubscribeReject.mode)
  return _internal_mode();
}
inline void MarketByOrderSubscribeReject::set_mode(::t4proto::v1::common::MarketMode value) {
   _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketByOrderSubscribeReject.mode)
}
inline ::t4proto::v1::common::MarketMode MarketByOrderSubscribeReject::_internal_mode() const {
  return static_cast<::t4proto::v1::common::MarketMode>(_impl_.mode_);
}
inline void MarketByOrderSubscribeReject::_internal_set_mode(::t4proto::v1::common::MarketMode value) {
  ;
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// MarketDetails_LegItem

// string market_id = 1;
inline void MarketDetails_LegItem::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& MarketDetails_LegItem::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.LegItem.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketDetails_LegItem::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.LegItem.market_id)
}
inline std::string* MarketDetails_LegItem::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDetails.LegItem.market_id)
  return _s;
}
inline const std::string& MarketDetails_LegItem::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void MarketDetails_LegItem::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketDetails_LegItem::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketDetails_LegItem::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDetails.LegItem.market_id)
  return _impl_.market_id_.Release();
}
inline void MarketDetails_LegItem::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDetails.LegItem.market_id)
}

// int32 group = 2;
inline void MarketDetails_LegItem::clear_group() {
  _impl_.group_ = 0;
}
inline ::int32_t MarketDetails_LegItem::group() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.LegItem.group)
  return _internal_group();
}
inline void MarketDetails_LegItem::set_group(::int32_t value) {
  _internal_set_group(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.LegItem.group)
}
inline ::int32_t MarketDetails_LegItem::_internal_group() const {
  return _impl_.group_;
}
inline void MarketDetails_LegItem::_internal_set_group(::int32_t value) {
  ;
  _impl_.group_ = value;
}

// int32 volume = 3;
inline void MarketDetails_LegItem::clear_volume() {
  _impl_.volume_ = 0;
}
inline ::int32_t MarketDetails_LegItem::volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.LegItem.volume)
  return _internal_volume();
}
inline void MarketDetails_LegItem::set_volume(::int32_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.LegItem.volume)
}
inline ::int32_t MarketDetails_LegItem::_internal_volume() const {
  return _impl_.volume_;
}
inline void MarketDetails_LegItem::_internal_set_volume(::int32_t value) {
  ;
  _impl_.volume_ = value;
}

// string delta = 4;
inline void MarketDetails_LegItem::clear_delta() {
  _impl_.delta_.ClearToEmpty();
}
inline const std::string& MarketDetails_LegItem::delta() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.LegItem.delta)
  return _internal_delta();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketDetails_LegItem::set_delta(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.delta_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.LegItem.delta)
}
inline std::string* MarketDetails_LegItem::mutable_delta() {
  std::string* _s = _internal_mutable_delta();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDetails.LegItem.delta)
  return _s;
}
inline const std::string& MarketDetails_LegItem::_internal_delta() const {
  return _impl_.delta_.Get();
}
inline void MarketDetails_LegItem::_internal_set_delta(const std::string& value) {
  ;


  _impl_.delta_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketDetails_LegItem::_internal_mutable_delta() {
  ;
  return _impl_.delta_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketDetails_LegItem::release_delta() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDetails.LegItem.delta)
  return _impl_.delta_.Release();
}
inline void MarketDetails_LegItem::set_allocated_delta(std::string* value) {
  _impl_.delta_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.delta_.IsDefault()) {
          _impl_.delta_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDetails.LegItem.delta)
}

// .t4proto.v1.common.Price price = 5;
inline bool MarketDetails_LegItem::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool MarketDetails_LegItem::has_price() const {
  return _internal_has_price();
}
inline const ::t4proto::v1::common::Price& MarketDetails_LegItem::_internal_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& MarketDetails_LegItem::price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.LegItem.price)
  return _internal_price();
}
inline void MarketDetails_LegItem::unsafe_arena_set_allocated_price(
    ::t4proto::v1::common::Price* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketDetails.LegItem.price)
}
inline ::t4proto::v1::common::Price* MarketDetails_LegItem::release_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* MarketDetails_LegItem::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDetails.LegItem.price)
  
  ::t4proto::v1::common::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* MarketDetails_LegItem::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::t4proto::v1::common::Price* MarketDetails_LegItem::mutable_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDetails.LegItem.price)
  return _msg;
}
inline void MarketDetails_LegItem::set_allocated_price(::t4proto::v1::common::Price* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }

  } else {

  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDetails.LegItem.price)
}

// -------------------------------------------------------------------

// MarketDetails

// string market_id = 1;
inline void MarketDetails::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& MarketDetails::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketDetails::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.market_id)
}
inline std::string* MarketDetails::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDetails.market_id)
  return _s;
}
inline const std::string& MarketDetails::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void MarketDetails::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketDetails::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketDetails::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDetails.market_id)
  return _impl_.market_id_.Release();
}
inline void MarketDetails::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDetails.market_id)
}

// string exchange_id = 2;
inline void MarketDetails::clear_exchange_id() {
  _impl_.exchange_id_.ClearToEmpty();
}
inline const std::string& MarketDetails::exchange_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.exchange_id)
  return _internal_exchange_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketDetails::set_exchange_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.exchange_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.exchange_id)
}
inline std::string* MarketDetails::mutable_exchange_id() {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDetails.exchange_id)
  return _s;
}
inline const std::string& MarketDetails::_internal_exchange_id() const {
  return _impl_.exchange_id_.Get();
}
inline void MarketDetails::_internal_set_exchange_id(const std::string& value) {
  ;


  _impl_.exchange_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketDetails::_internal_mutable_exchange_id() {
  ;
  return _impl_.exchange_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketDetails::release_exchange_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDetails.exchange_id)
  return _impl_.exchange_id_.Release();
}
inline void MarketDetails::set_allocated_exchange_id(std::string* value) {
  _impl_.exchange_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_id_.IsDefault()) {
          _impl_.exchange_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDetails.exchange_id)
}

// string contract_id = 3;
inline void MarketDetails::clear_contract_id() {
  _impl_.contract_id_.ClearToEmpty();
}
inline const std::string& MarketDetails::contract_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.contract_id)
  return _internal_contract_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketDetails::set_contract_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.contract_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.contract_id)
}
inline std::string* MarketDetails::mutable_contract_id() {
  std::string* _s = _internal_mutable_contract_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDetails.contract_id)
  return _s;
}
inline const std::string& MarketDetails::_internal_contract_id() const {
  return _impl_.contract_id_.Get();
}
inline void MarketDetails::_internal_set_contract_id(const std::string& value) {
  ;


  _impl_.contract_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketDetails::_internal_mutable_contract_id() {
  ;
  return _impl_.contract_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketDetails::release_contract_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDetails.contract_id)
  return _impl_.contract_id_.Release();
}
inline void MarketDetails::set_allocated_contract_id(std::string* value) {
  _impl_.contract_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contract_id_.IsDefault()) {
          _impl_.contract_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDetails.contract_id)
}

// int32 expiry_date = 4;
inline void MarketDetails::clear_expiry_date() {
  _impl_.expiry_date_ = 0;
}
inline ::int32_t MarketDetails::expiry_date() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.expiry_date)
  return _internal_expiry_date();
}
inline void MarketDetails::set_expiry_date(::int32_t value) {
  _internal_set_expiry_date(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.expiry_date)
}
inline ::int32_t MarketDetails::_internal_expiry_date() const {
  return _impl_.expiry_date_;
}
inline void MarketDetails::_internal_set_expiry_date(::int32_t value) {
  ;
  _impl_.expiry_date_ = value;
}

// .t4proto.v1.common.ContractType contract_type = 5;
inline void MarketDetails::clear_contract_type() {
  _impl_.contract_type_ = 0;
}
inline ::t4proto::v1::common::ContractType MarketDetails::contract_type() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.contract_type)
  return _internal_contract_type();
}
inline void MarketDetails::set_contract_type(::t4proto::v1::common::ContractType value) {
   _internal_set_contract_type(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.contract_type)
}
inline ::t4proto::v1::common::ContractType MarketDetails::_internal_contract_type() const {
  return static_cast<::t4proto::v1::common::ContractType>(_impl_.contract_type_);
}
inline void MarketDetails::_internal_set_contract_type(::t4proto::v1::common::ContractType value) {
  ;
  _impl_.contract_type_ = value;
}

// int32 decimals = 6;
inline void MarketDetails::clear_decimals() {
  _impl_.decimals_ = 0;
}
inline ::int32_t MarketDetails::decimals() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.decimals)
  return _internal_decimals();
}
inline void MarketDetails::set_decimals(::int32_t value) {
  _internal_set_decimals(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.decimals)
}
inline ::int32_t MarketDetails::_internal_decimals() const {
  return _impl_.decimals_;
}
inline void MarketDetails::_internal_set_decimals(::int32_t value) {
  ;
  _impl_.decimals_ = value;
}

// .t4proto.v1.common.Decimal point_value = 7;
inline bool MarketDetails::_internal_has_point_value() const {
  return this != internal_default_instance() && _impl_.point_value_ != nullptr;
}
inline bool MarketDetails::has_point_value() const {
  return _internal_has_point_value();
}
inline const ::t4proto::v1::common::Decimal& MarketDetails::_internal_point_value() const {
  const ::t4proto::v1::common::Decimal* p = _impl_.point_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Decimal&>(
      ::t4proto::v1::common::_Decimal_default_instance_);
}
inline const ::t4proto::v1::common::Decimal& MarketDetails::point_value() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.point_value)
  return _internal_point_value();
}
inline void MarketDetails::unsafe_arena_set_allocated_point_value(
    ::t4proto::v1::common::Decimal* point_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.point_value_);
  }
  _impl_.point_value_ = point_value;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketDetails.point_value)
}
inline ::t4proto::v1::common::Decimal* MarketDetails::release_point_value() {
  
  ::t4proto::v1::common::Decimal* temp = _impl_.point_value_;
  _impl_.point_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Decimal* MarketDetails::unsafe_arena_release_point_value() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDetails.point_value)
  
  ::t4proto::v1::common::Decimal* temp = _impl_.point_value_;
  _impl_.point_value_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Decimal* MarketDetails::_internal_mutable_point_value() {
  
  if (_impl_.point_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Decimal>(GetArenaForAllocation());
    _impl_.point_value_ = p;
  }
  return _impl_.point_value_;
}
inline ::t4proto::v1::common::Decimal* MarketDetails::mutable_point_value() {
  ::t4proto::v1::common::Decimal* _msg = _internal_mutable_point_value();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDetails.point_value)
  return _msg;
}
inline void MarketDetails::set_allocated_point_value(::t4proto::v1::common::Decimal* point_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.point_value_);
  }
  if (point_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_value));
    if (message_arena != submessage_arena) {
      point_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point_value, submessage_arena);
    }

  } else {

  }
  _impl_.point_value_ = point_value;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDetails.point_value)
}

// .t4proto.v1.common.Price min_price_increment = 8;
inline bool MarketDetails::_internal_has_min_price_increment() const {
  return this != internal_default_instance() && _impl_.min_price_increment_ != nullptr;
}
inline bool MarketDetails::has_min_price_increment() const {
  return _internal_has_min_price_increment();
}
inline const ::t4proto::v1::common::Price& MarketDetails::_internal_min_price_increment() const {
  const ::t4proto::v1::common::Price* p = _impl_.min_price_increment_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& MarketDetails::min_price_increment() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.min_price_increment)
  return _internal_min_price_increment();
}
inline void MarketDetails::unsafe_arena_set_allocated_min_price_increment(
    ::t4proto::v1::common::Price* min_price_increment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_price_increment_);
  }
  _impl_.min_price_increment_ = min_price_increment;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketDetails.min_price_increment)
}
inline ::t4proto::v1::common::Price* MarketDetails::release_min_price_increment() {
  
  ::t4proto::v1::common::Price* temp = _impl_.min_price_increment_;
  _impl_.min_price_increment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* MarketDetails::unsafe_arena_release_min_price_increment() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDetails.min_price_increment)
  
  ::t4proto::v1::common::Price* temp = _impl_.min_price_increment_;
  _impl_.min_price_increment_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* MarketDetails::_internal_mutable_min_price_increment() {
  
  if (_impl_.min_price_increment_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.min_price_increment_ = p;
  }
  return _impl_.min_price_increment_;
}
inline ::t4proto::v1::common::Price* MarketDetails::mutable_min_price_increment() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_min_price_increment();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDetails.min_price_increment)
  return _msg;
}
inline void MarketDetails::set_allocated_min_price_increment(::t4proto::v1::common::Price* min_price_increment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_price_increment_);
  }
  if (min_price_increment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_price_increment));
    if (message_arena != submessage_arena) {
      min_price_increment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_price_increment, submessage_arena);
    }

  } else {

  }
  _impl_.min_price_increment_ = min_price_increment;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDetails.min_price_increment)
}

// int32 order_types = 9;
inline void MarketDetails::clear_order_types() {
  _impl_.order_types_ = 0;
}
inline ::int32_t MarketDetails::order_types() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.order_types)
  return _internal_order_types();
}
inline void MarketDetails::set_order_types(::int32_t value) {
  _internal_set_order_types(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.order_types)
}
inline ::int32_t MarketDetails::_internal_order_types() const {
  return _impl_.order_types_;
}
inline void MarketDetails::_internal_set_order_types(::int32_t value) {
  ;
  _impl_.order_types_ = value;
}

// .google.protobuf.Timestamp activation_date = 10;
inline bool MarketDetails::_internal_has_activation_date() const {
  return this != internal_default_instance() && _impl_.activation_date_ != nullptr;
}
inline bool MarketDetails::has_activation_date() const {
  return _internal_has_activation_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketDetails::_internal_activation_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.activation_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketDetails::activation_date() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.activation_date)
  return _internal_activation_date();
}
inline void MarketDetails::unsafe_arena_set_allocated_activation_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* activation_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activation_date_);
  }
  _impl_.activation_date_ = activation_date;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketDetails.activation_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDetails::release_activation_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.activation_date_;
  _impl_.activation_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDetails::unsafe_arena_release_activation_date() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDetails.activation_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.activation_date_;
  _impl_.activation_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDetails::_internal_mutable_activation_date() {
  
  if (_impl_.activation_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.activation_date_ = p;
  }
  return _impl_.activation_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDetails::mutable_activation_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_activation_date();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDetails.activation_date)
  return _msg;
}
inline void MarketDetails::set_allocated_activation_date(::PROTOBUF_NAMESPACE_ID::Timestamp* activation_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activation_date_);
  }
  if (activation_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activation_date));
    if (message_arena != submessage_arena) {
      activation_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation_date, submessage_arena);
    }

  } else {

  }
  _impl_.activation_date_ = activation_date;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDetails.activation_date)
}

// .google.protobuf.Timestamp last_trading_date = 11;
inline bool MarketDetails::_internal_has_last_trading_date() const {
  return this != internal_default_instance() && _impl_.last_trading_date_ != nullptr;
}
inline bool MarketDetails::has_last_trading_date() const {
  return _internal_has_last_trading_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketDetails::_internal_last_trading_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.last_trading_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketDetails::last_trading_date() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.last_trading_date)
  return _internal_last_trading_date();
}
inline void MarketDetails::unsafe_arena_set_allocated_last_trading_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_trading_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_trading_date_);
  }
  _impl_.last_trading_date_ = last_trading_date;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketDetails.last_trading_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDetails::release_last_trading_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_trading_date_;
  _impl_.last_trading_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDetails::unsafe_arena_release_last_trading_date() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDetails.last_trading_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_trading_date_;
  _impl_.last_trading_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDetails::_internal_mutable_last_trading_date() {
  
  if (_impl_.last_trading_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.last_trading_date_ = p;
  }
  return _impl_.last_trading_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDetails::mutable_last_trading_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_trading_date();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDetails.last_trading_date)
  return _msg;
}
inline void MarketDetails::set_allocated_last_trading_date(::PROTOBUF_NAMESPACE_ID::Timestamp* last_trading_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_trading_date_);
  }
  if (last_trading_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_trading_date));
    if (message_arena != submessage_arena) {
      last_trading_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_trading_date, submessage_arena);
    }

  } else {

  }
  _impl_.last_trading_date_ = last_trading_date;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDetails.last_trading_date)
}

// .google.protobuf.Timestamp last_client_update_time = 12;
inline bool MarketDetails::_internal_has_last_client_update_time() const {
  return this != internal_default_instance() && _impl_.last_client_update_time_ != nullptr;
}
inline bool MarketDetails::has_last_client_update_time() const {
  return _internal_has_last_client_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketDetails::_internal_last_client_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.last_client_update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketDetails::last_client_update_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.last_client_update_time)
  return _internal_last_client_update_time();
}
inline void MarketDetails::unsafe_arena_set_allocated_last_client_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* last_client_update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_client_update_time_);
  }
  _impl_.last_client_update_time_ = last_client_update_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketDetails.last_client_update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDetails::release_last_client_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_client_update_time_;
  _impl_.last_client_update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDetails::unsafe_arena_release_last_client_update_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDetails.last_client_update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.last_client_update_time_;
  _impl_.last_client_update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDetails::_internal_mutable_last_client_update_time() {
  
  if (_impl_.last_client_update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.last_client_update_time_ = p;
  }
  return _impl_.last_client_update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDetails::mutable_last_client_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_last_client_update_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDetails.last_client_update_time)
  return _msg;
}
inline void MarketDetails::set_allocated_last_client_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* last_client_update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_client_update_time_);
  }
  if (last_client_update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_client_update_time));
    if (message_arena != submessage_arena) {
      last_client_update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_client_update_time, submessage_arena);
    }

  } else {

  }
  _impl_.last_client_update_time_ = last_client_update_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDetails.last_client_update_time)
}

// int64 delist_date = 13;
inline void MarketDetails::clear_delist_date() {
  _impl_.delist_date_ = ::int64_t{0};
}
inline ::int64_t MarketDetails::delist_date() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.delist_date)
  return _internal_delist_date();
}
inline void MarketDetails::set_delist_date(::int64_t value) {
  _internal_set_delist_date(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.delist_date)
}
inline ::int64_t MarketDetails::_internal_delist_date() const {
  return _impl_.delist_date_;
}
inline void MarketDetails::_internal_set_delist_date(::int64_t value) {
  ;
  _impl_.delist_date_ = value;
}

// int64 exchange_delist_date = 14;
inline void MarketDetails::clear_exchange_delist_date() {
  _impl_.exchange_delist_date_ = ::int64_t{0};
}
inline ::int64_t MarketDetails::exchange_delist_date() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.exchange_delist_date)
  return _internal_exchange_delist_date();
}
inline void MarketDetails::set_exchange_delist_date(::int64_t value) {
  _internal_set_exchange_delist_date(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.exchange_delist_date)
}
inline ::int64_t MarketDetails::_internal_exchange_delist_date() const {
  return _impl_.exchange_delist_date_;
}
inline void MarketDetails::_internal_set_exchange_delist_date(::int64_t value) {
  ;
  _impl_.exchange_delist_date_ = value;
}

// string market_ref = 15;
inline void MarketDetails::clear_market_ref() {
  _impl_.market_ref_.ClearToEmpty();
}
inline const std::string& MarketDetails::market_ref() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.market_ref)
  return _internal_market_ref();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketDetails::set_market_ref(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_ref_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.market_ref)
}
inline std::string* MarketDetails::mutable_market_ref() {
  std::string* _s = _internal_mutable_market_ref();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDetails.market_ref)
  return _s;
}
inline const std::string& MarketDetails::_internal_market_ref() const {
  return _impl_.market_ref_.Get();
}
inline void MarketDetails::_internal_set_market_ref(const std::string& value) {
  ;


  _impl_.market_ref_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketDetails::_internal_mutable_market_ref() {
  ;
  return _impl_.market_ref_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketDetails::release_market_ref() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDetails.market_ref)
  return _impl_.market_ref_.Release();
}
inline void MarketDetails::set_allocated_market_ref(std::string* value) {
  _impl_.market_ref_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_ref_.IsDefault()) {
          _impl_.market_ref_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDetails.market_ref)
}

// string group = 16;
inline void MarketDetails::clear_group() {
  _impl_.group_.ClearToEmpty();
}
inline const std::string& MarketDetails::group() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.group)
  return _internal_group();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketDetails::set_group(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.group_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.group)
}
inline std::string* MarketDetails::mutable_group() {
  std::string* _s = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDetails.group)
  return _s;
}
inline const std::string& MarketDetails::_internal_group() const {
  return _impl_.group_.Get();
}
inline void MarketDetails::_internal_set_group(const std::string& value) {
  ;


  _impl_.group_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketDetails::_internal_mutable_group() {
  ;
  return _impl_.group_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketDetails::release_group() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDetails.group)
  return _impl_.group_.Release();
}
inline void MarketDetails::set_allocated_group(std::string* value) {
  _impl_.group_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.group_.IsDefault()) {
          _impl_.group_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDetails.group)
}

// repeated .t4proto.v1.market.MarketDetails.LegItem legs = 17;
inline int MarketDetails::_internal_legs_size() const {
  return _impl_.legs_.size();
}
inline int MarketDetails::legs_size() const {
  return _internal_legs_size();
}
inline void MarketDetails::clear_legs() {
  _impl_.legs_.Clear();
}
inline ::t4proto::v1::market::MarketDetails_LegItem* MarketDetails::mutable_legs(int index) {
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDetails.legs)
  return _impl_.legs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDetails_LegItem >*
MarketDetails::mutable_legs() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.market.MarketDetails.legs)
  return &_impl_.legs_;
}
inline const ::t4proto::v1::market::MarketDetails_LegItem& MarketDetails::_internal_legs(int index) const {
  return _impl_.legs_.Get(index);
}
inline const ::t4proto::v1::market::MarketDetails_LegItem& MarketDetails::legs(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.legs)
  return _internal_legs(index);
}
inline ::t4proto::v1::market::MarketDetails_LegItem* MarketDetails::_internal_add_legs() {
  return _impl_.legs_.Add();
}
inline ::t4proto::v1::market::MarketDetails_LegItem* MarketDetails::add_legs() {
  ::t4proto::v1::market::MarketDetails_LegItem* _add = _internal_add_legs();
  // @@protoc_insertion_point(field_add:t4proto.v1.market.MarketDetails.legs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDetails_LegItem >&
MarketDetails::legs() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.market.MarketDetails.legs)
  return _impl_.legs_;
}

// string details = 18;
inline void MarketDetails::clear_details() {
  _impl_.details_.ClearToEmpty();
}
inline const std::string& MarketDetails::details() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.details)
  return _internal_details();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketDetails::set_details(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.details_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.details)
}
inline std::string* MarketDetails::mutable_details() {
  std::string* _s = _internal_mutable_details();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDetails.details)
  return _s;
}
inline const std::string& MarketDetails::_internal_details() const {
  return _impl_.details_.Get();
}
inline void MarketDetails::_internal_set_details(const std::string& value) {
  ;


  _impl_.details_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketDetails::_internal_mutable_details() {
  ;
  return _impl_.details_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketDetails::release_details() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDetails.details)
  return _impl_.details_.Release();
}
inline void MarketDetails::set_allocated_details(std::string* value) {
  _impl_.details_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.details_.IsDefault()) {
          _impl_.details_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDetails.details)
}

// .t4proto.v1.common.StrategyType strategy_type = 19;
inline void MarketDetails::clear_strategy_type() {
  _impl_.strategy_type_ = 0;
}
inline ::t4proto::v1::common::StrategyType MarketDetails::strategy_type() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.strategy_type)
  return _internal_strategy_type();
}
inline void MarketDetails::set_strategy_type(::t4proto::v1::common::StrategyType value) {
   _internal_set_strategy_type(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.strategy_type)
}
inline ::t4proto::v1::common::StrategyType MarketDetails::_internal_strategy_type() const {
  return static_cast<::t4proto::v1::common::StrategyType>(_impl_.strategy_type_);
}
inline void MarketDetails::_internal_set_strategy_type(::t4proto::v1::common::StrategyType value) {
  ;
  _impl_.strategy_type_ = value;
}

// string price_code = 20;
inline void MarketDetails::clear_price_code() {
  _impl_.price_code_.ClearToEmpty();
}
inline const std::string& MarketDetails::price_code() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.price_code)
  return _internal_price_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketDetails::set_price_code(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.price_code_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.price_code)
}
inline std::string* MarketDetails::mutable_price_code() {
  std::string* _s = _internal_mutable_price_code();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDetails.price_code)
  return _s;
}
inline const std::string& MarketDetails::_internal_price_code() const {
  return _impl_.price_code_.Get();
}
inline void MarketDetails::_internal_set_price_code(const std::string& value) {
  ;


  _impl_.price_code_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketDetails::_internal_mutable_price_code() {
  ;
  return _impl_.price_code_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketDetails::release_price_code() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDetails.price_code)
  return _impl_.price_code_.Release();
}
inline void MarketDetails::set_allocated_price_code(std::string* value) {
  _impl_.price_code_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.price_code_.IsDefault()) {
          _impl_.price_code_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDetails.price_code)
}

// int32 real_decimals = 21;
inline void MarketDetails::clear_real_decimals() {
  _impl_.real_decimals_ = 0;
}
inline ::int32_t MarketDetails::real_decimals() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.real_decimals)
  return _internal_real_decimals();
}
inline void MarketDetails::set_real_decimals(::int32_t value) {
  _internal_set_real_decimals(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.real_decimals)
}
inline ::int32_t MarketDetails::_internal_real_decimals() const {
  return _impl_.real_decimals_;
}
inline void MarketDetails::_internal_set_real_decimals(::int32_t value) {
  ;
  _impl_.real_decimals_ = value;
}

// int32 display_decimals = 22;
inline void MarketDetails::clear_display_decimals() {
  _impl_.display_decimals_ = 0;
}
inline ::int32_t MarketDetails::display_decimals() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.display_decimals)
  return _internal_display_decimals();
}
inline void MarketDetails::set_display_decimals(::int32_t value) {
  _internal_set_display_decimals(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.display_decimals)
}
inline ::int32_t MarketDetails::_internal_display_decimals() const {
  return _impl_.display_decimals_;
}
inline void MarketDetails::_internal_set_display_decimals(::int32_t value) {
  ;
  _impl_.display_decimals_ = value;
}

// int32 clearing_decimals = 23;
inline void MarketDetails::clear_clearing_decimals() {
  _impl_.clearing_decimals_ = 0;
}
inline ::int32_t MarketDetails::clearing_decimals() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.clearing_decimals)
  return _internal_clearing_decimals();
}
inline void MarketDetails::set_clearing_decimals(::int32_t value) {
  _internal_set_clearing_decimals(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.clearing_decimals)
}
inline ::int32_t MarketDetails::_internal_clearing_decimals() const {
  return _impl_.clearing_decimals_;
}
inline void MarketDetails::_internal_set_clearing_decimals(::int32_t value) {
  ;
  _impl_.clearing_decimals_ = value;
}

// optional .t4proto.v1.common.Price min_cab_price = 24;
inline bool MarketDetails::has_min_cab_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.min_cab_price_ != nullptr);
  return value;
}
inline const ::t4proto::v1::common::Price& MarketDetails::_internal_min_cab_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.min_cab_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& MarketDetails::min_cab_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.min_cab_price)
  return _internal_min_cab_price();
}
inline void MarketDetails::unsafe_arena_set_allocated_min_cab_price(
    ::t4proto::v1::common::Price* min_cab_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_cab_price_);
  }
  _impl_.min_cab_price_ = min_cab_price;
  if (min_cab_price) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketDetails.min_cab_price)
}
inline ::t4proto::v1::common::Price* MarketDetails::release_min_cab_price() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::t4proto::v1::common::Price* temp = _impl_.min_cab_price_;
  _impl_.min_cab_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* MarketDetails::unsafe_arena_release_min_cab_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDetails.min_cab_price)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::t4proto::v1::common::Price* temp = _impl_.min_cab_price_;
  _impl_.min_cab_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* MarketDetails::_internal_mutable_min_cab_price() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.min_cab_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.min_cab_price_ = p;
  }
  return _impl_.min_cab_price_;
}
inline ::t4proto::v1::common::Price* MarketDetails::mutable_min_cab_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_min_cab_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDetails.min_cab_price)
  return _msg;
}
inline void MarketDetails::set_allocated_min_cab_price(::t4proto::v1::common::Price* min_cab_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.min_cab_price_);
  }
  if (min_cab_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(min_cab_price));
    if (message_arena != submessage_arena) {
      min_cab_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, min_cab_price, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.min_cab_price_ = min_cab_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDetails.min_cab_price)
}

// optional .t4proto.v1.common.Price strike_price = 25;
inline bool MarketDetails::has_strike_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.strike_price_ != nullptr);
  return value;
}
inline const ::t4proto::v1::common::Price& MarketDetails::_internal_strike_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.strike_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& MarketDetails::strike_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.strike_price)
  return _internal_strike_price();
}
inline void MarketDetails::unsafe_arena_set_allocated_strike_price(
    ::t4proto::v1::common::Price* strike_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.strike_price_);
  }
  _impl_.strike_price_ = strike_price;
  if (strike_price) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketDetails.strike_price)
}
inline ::t4proto::v1::common::Price* MarketDetails::release_strike_price() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::t4proto::v1::common::Price* temp = _impl_.strike_price_;
  _impl_.strike_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* MarketDetails::unsafe_arena_release_strike_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDetails.strike_price)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::t4proto::v1::common::Price* temp = _impl_.strike_price_;
  _impl_.strike_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* MarketDetails::_internal_mutable_strike_price() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.strike_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.strike_price_ = p;
  }
  return _impl_.strike_price_;
}
inline ::t4proto::v1::common::Price* MarketDetails::mutable_strike_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_strike_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDetails.strike_price)
  return _msg;
}
inline void MarketDetails::set_allocated_strike_price(::t4proto::v1::common::Price* strike_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.strike_price_);
  }
  if (strike_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(strike_price));
    if (message_arena != submessage_arena) {
      strike_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, strike_price, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.strike_price_ = strike_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDetails.strike_price)
}

// int32 volume_increment = 26;
inline void MarketDetails::clear_volume_increment() {
  _impl_.volume_increment_ = 0;
}
inline ::int32_t MarketDetails::volume_increment() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.volume_increment)
  return _internal_volume_increment();
}
inline void MarketDetails::set_volume_increment(::int32_t value) {
  _internal_set_volume_increment(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.volume_increment)
}
inline ::int32_t MarketDetails::_internal_volume_increment() const {
  return _impl_.volume_increment_;
}
inline void MarketDetails::_internal_set_volume_increment(::int32_t value) {
  ;
  _impl_.volume_increment_ = value;
}

// double strategy_ratio = 27;
inline void MarketDetails::clear_strategy_ratio() {
  _impl_.strategy_ratio_ = 0;
}
inline double MarketDetails::strategy_ratio() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.strategy_ratio)
  return _internal_strategy_ratio();
}
inline void MarketDetails::set_strategy_ratio(double value) {
  _internal_set_strategy_ratio(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.strategy_ratio)
}
inline double MarketDetails::_internal_strategy_ratio() const {
  return _impl_.strategy_ratio_;
}
inline void MarketDetails::_internal_set_strategy_ratio(double value) {
  ;
  _impl_.strategy_ratio_ = value;
}

// bool disabled = 28;
inline void MarketDetails::clear_disabled() {
  _impl_.disabled_ = false;
}
inline bool MarketDetails::disabled() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.disabled)
  return _internal_disabled();
}
inline void MarketDetails::set_disabled(bool value) {
  _internal_set_disabled(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.disabled)
}
inline bool MarketDetails::_internal_disabled() const {
  return _impl_.disabled_;
}
inline void MarketDetails::_internal_set_disabled(bool value) {
  ;
  _impl_.disabled_ = value;
}

// string underlying_market_id = 29;
inline void MarketDetails::clear_underlying_market_id() {
  _impl_.underlying_market_id_.ClearToEmpty();
}
inline const std::string& MarketDetails::underlying_market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.underlying_market_id)
  return _internal_underlying_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketDetails::set_underlying_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.underlying_market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.underlying_market_id)
}
inline std::string* MarketDetails::mutable_underlying_market_id() {
  std::string* _s = _internal_mutable_underlying_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDetails.underlying_market_id)
  return _s;
}
inline const std::string& MarketDetails::_internal_underlying_market_id() const {
  return _impl_.underlying_market_id_.Get();
}
inline void MarketDetails::_internal_set_underlying_market_id(const std::string& value) {
  ;


  _impl_.underlying_market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketDetails::_internal_mutable_underlying_market_id() {
  ;
  return _impl_.underlying_market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketDetails::release_underlying_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDetails.underlying_market_id)
  return _impl_.underlying_market_id_.Release();
}
inline void MarketDetails::set_allocated_underlying_market_id(std::string* value) {
  _impl_.underlying_market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.underlying_market_id_.IsDefault()) {
          _impl_.underlying_market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDetails.underlying_market_id)
}

// string vtt = 30;
inline void MarketDetails::clear_vtt() {
  _impl_.vtt_.ClearToEmpty();
}
inline const std::string& MarketDetails::vtt() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.vtt)
  return _internal_vtt();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketDetails::set_vtt(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.vtt_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.vtt)
}
inline std::string* MarketDetails::mutable_vtt() {
  std::string* _s = _internal_mutable_vtt();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDetails.vtt)
  return _s;
}
inline const std::string& MarketDetails::_internal_vtt() const {
  return _impl_.vtt_.Get();
}
inline void MarketDetails::_internal_set_vtt(const std::string& value) {
  ;


  _impl_.vtt_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketDetails::_internal_mutable_vtt() {
  ;
  return _impl_.vtt_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketDetails::release_vtt() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDetails.vtt)
  return _impl_.vtt_.Release();
}
inline void MarketDetails::set_allocated_vtt(std::string* value) {
  _impl_.vtt_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.vtt_.IsDefault()) {
          _impl_.vtt_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDetails.vtt)
}

// double maint_intra_margin = 31;
inline void MarketDetails::clear_maint_intra_margin() {
  _impl_.maint_intra_margin_ = 0;
}
inline double MarketDetails::maint_intra_margin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.maint_intra_margin)
  return _internal_maint_intra_margin();
}
inline void MarketDetails::set_maint_intra_margin(double value) {
  _internal_set_maint_intra_margin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.maint_intra_margin)
}
inline double MarketDetails::_internal_maint_intra_margin() const {
  return _impl_.maint_intra_margin_;
}
inline void MarketDetails::_internal_set_maint_intra_margin(double value) {
  ;
  _impl_.maint_intra_margin_ = value;
}

// double maint_margin = 32;
inline void MarketDetails::clear_maint_margin() {
  _impl_.maint_margin_ = 0;
}
inline double MarketDetails::maint_margin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.maint_margin)
  return _internal_maint_margin();
}
inline void MarketDetails::set_maint_margin(double value) {
  _internal_set_maint_margin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.maint_margin)
}
inline double MarketDetails::_internal_maint_margin() const {
  return _impl_.maint_margin_;
}
inline void MarketDetails::_internal_set_maint_margin(double value) {
  ;
  _impl_.maint_margin_ = value;
}

// double maint_vol_scan = 33;
inline void MarketDetails::clear_maint_vol_scan() {
  _impl_.maint_vol_scan_ = 0;
}
inline double MarketDetails::maint_vol_scan() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDetails.maint_vol_scan)
  return _internal_maint_vol_scan();
}
inline void MarketDetails::set_maint_vol_scan(double value) {
  _internal_set_maint_vol_scan(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDetails.maint_vol_scan)
}
inline double MarketDetails::_internal_maint_vol_scan() const {
  return _impl_.maint_vol_scan_;
}
inline void MarketDetails::_internal_set_maint_vol_scan(double value) {
  ;
  _impl_.maint_vol_scan_ = value;
}

// -------------------------------------------------------------------

// MarketDepth_DepthLine

// .t4proto.v1.common.Price price = 1;
inline bool MarketDepth_DepthLine::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool MarketDepth_DepthLine::has_price() const {
  return _internal_has_price();
}
inline const ::t4proto::v1::common::Price& MarketDepth_DepthLine::_internal_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& MarketDepth_DepthLine::price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.DepthLine.price)
  return _internal_price();
}
inline void MarketDepth_DepthLine::unsafe_arena_set_allocated_price(
    ::t4proto::v1::common::Price* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketDepth.DepthLine.price)
}
inline ::t4proto::v1::common::Price* MarketDepth_DepthLine::release_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* MarketDepth_DepthLine::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDepth.DepthLine.price)
  
  ::t4proto::v1::common::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* MarketDepth_DepthLine::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::t4proto::v1::common::Price* MarketDepth_DepthLine::mutable_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDepth.DepthLine.price)
  return _msg;
}
inline void MarketDepth_DepthLine::set_allocated_price(::t4proto::v1::common::Price* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }

  } else {

  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDepth.DepthLine.price)
}

// int32 volume = 2;
inline void MarketDepth_DepthLine::clear_volume() {
  _impl_.volume_ = 0;
}
inline ::int32_t MarketDepth_DepthLine::volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.DepthLine.volume)
  return _internal_volume();
}
inline void MarketDepth_DepthLine::set_volume(::int32_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepth.DepthLine.volume)
}
inline ::int32_t MarketDepth_DepthLine::_internal_volume() const {
  return _impl_.volume_;
}
inline void MarketDepth_DepthLine::_internal_set_volume(::int32_t value) {
  ;
  _impl_.volume_ = value;
}

// int32 num_orders = 3;
inline void MarketDepth_DepthLine::clear_num_orders() {
  _impl_.num_orders_ = 0;
}
inline ::int32_t MarketDepth_DepthLine::num_orders() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.DepthLine.num_orders)
  return _internal_num_orders();
}
inline void MarketDepth_DepthLine::set_num_orders(::int32_t value) {
  _internal_set_num_orders(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepth.DepthLine.num_orders)
}
inline ::int32_t MarketDepth_DepthLine::_internal_num_orders() const {
  return _impl_.num_orders_;
}
inline void MarketDepth_DepthLine::_internal_set_num_orders(::int32_t value) {
  ;
  _impl_.num_orders_ = value;
}

// -------------------------------------------------------------------

// MarketDepth_TradeData

// int32 total_traded_volume = 1;
inline void MarketDepth_TradeData::clear_total_traded_volume() {
  _impl_.total_traded_volume_ = 0;
}
inline ::int32_t MarketDepth_TradeData::total_traded_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.TradeData.total_traded_volume)
  return _internal_total_traded_volume();
}
inline void MarketDepth_TradeData::set_total_traded_volume(::int32_t value) {
  _internal_set_total_traded_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepth.TradeData.total_traded_volume)
}
inline ::int32_t MarketDepth_TradeData::_internal_total_traded_volume() const {
  return _impl_.total_traded_volume_;
}
inline void MarketDepth_TradeData::_internal_set_total_traded_volume(::int32_t value) {
  ;
  _impl_.total_traded_volume_ = value;
}

// int32 total_trade_count = 2;
inline void MarketDepth_TradeData::clear_total_trade_count() {
  _impl_.total_trade_count_ = 0;
}
inline ::int32_t MarketDepth_TradeData::total_trade_count() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.TradeData.total_trade_count)
  return _internal_total_trade_count();
}
inline void MarketDepth_TradeData::set_total_trade_count(::int32_t value) {
  _internal_set_total_trade_count(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepth.TradeData.total_trade_count)
}
inline ::int32_t MarketDepth_TradeData::_internal_total_trade_count() const {
  return _impl_.total_trade_count_;
}
inline void MarketDepth_TradeData::_internal_set_total_trade_count(::int32_t value) {
  ;
  _impl_.total_trade_count_ = value;
}

// .t4proto.v1.common.Price last_trade_price = 3;
inline bool MarketDepth_TradeData::_internal_has_last_trade_price() const {
  return this != internal_default_instance() && _impl_.last_trade_price_ != nullptr;
}
inline bool MarketDepth_TradeData::has_last_trade_price() const {
  return _internal_has_last_trade_price();
}
inline const ::t4proto::v1::common::Price& MarketDepth_TradeData::_internal_last_trade_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.last_trade_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& MarketDepth_TradeData::last_trade_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.TradeData.last_trade_price)
  return _internal_last_trade_price();
}
inline void MarketDepth_TradeData::unsafe_arena_set_allocated_last_trade_price(
    ::t4proto::v1::common::Price* last_trade_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_trade_price_);
  }
  _impl_.last_trade_price_ = last_trade_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketDepth.TradeData.last_trade_price)
}
inline ::t4proto::v1::common::Price* MarketDepth_TradeData::release_last_trade_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.last_trade_price_;
  _impl_.last_trade_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* MarketDepth_TradeData::unsafe_arena_release_last_trade_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDepth.TradeData.last_trade_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.last_trade_price_;
  _impl_.last_trade_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* MarketDepth_TradeData::_internal_mutable_last_trade_price() {
  
  if (_impl_.last_trade_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.last_trade_price_ = p;
  }
  return _impl_.last_trade_price_;
}
inline ::t4proto::v1::common::Price* MarketDepth_TradeData::mutable_last_trade_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_last_trade_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDepth.TradeData.last_trade_price)
  return _msg;
}
inline void MarketDepth_TradeData::set_allocated_last_trade_price(::t4proto::v1::common::Price* last_trade_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_trade_price_);
  }
  if (last_trade_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_trade_price));
    if (message_arena != submessage_arena) {
      last_trade_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_trade_price, submessage_arena);
    }

  } else {

  }
  _impl_.last_trade_price_ = last_trade_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDepth.TradeData.last_trade_price)
}

// int32 last_trade_volume = 4;
inline void MarketDepth_TradeData::clear_last_trade_volume() {
  _impl_.last_trade_volume_ = 0;
}
inline ::int32_t MarketDepth_TradeData::last_trade_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.TradeData.last_trade_volume)
  return _internal_last_trade_volume();
}
inline void MarketDepth_TradeData::set_last_trade_volume(::int32_t value) {
  _internal_set_last_trade_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepth.TradeData.last_trade_volume)
}
inline ::int32_t MarketDepth_TradeData::_internal_last_trade_volume() const {
  return _impl_.last_trade_volume_;
}
inline void MarketDepth_TradeData::_internal_set_last_trade_volume(::int32_t value) {
  ;
  _impl_.last_trade_volume_ = value;
}

// int32 last_trade_total_volume = 5;
inline void MarketDepth_TradeData::clear_last_trade_total_volume() {
  _impl_.last_trade_total_volume_ = 0;
}
inline ::int32_t MarketDepth_TradeData::last_trade_total_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.TradeData.last_trade_total_volume)
  return _internal_last_trade_total_volume();
}
inline void MarketDepth_TradeData::set_last_trade_total_volume(::int32_t value) {
  _internal_set_last_trade_total_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepth.TradeData.last_trade_total_volume)
}
inline ::int32_t MarketDepth_TradeData::_internal_last_trade_total_volume() const {
  return _impl_.last_trade_total_volume_;
}
inline void MarketDepth_TradeData::_internal_set_last_trade_total_volume(::int32_t value) {
  ;
  _impl_.last_trade_total_volume_ = value;
}

// .t4proto.v1.common.Price last_trade_spd_price = 6;
inline bool MarketDepth_TradeData::_internal_has_last_trade_spd_price() const {
  return this != internal_default_instance() && _impl_.last_trade_spd_price_ != nullptr;
}
inline bool MarketDepth_TradeData::has_last_trade_spd_price() const {
  return _internal_has_last_trade_spd_price();
}
inline const ::t4proto::v1::common::Price& MarketDepth_TradeData::_internal_last_trade_spd_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.last_trade_spd_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& MarketDepth_TradeData::last_trade_spd_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.TradeData.last_trade_spd_price)
  return _internal_last_trade_spd_price();
}
inline void MarketDepth_TradeData::unsafe_arena_set_allocated_last_trade_spd_price(
    ::t4proto::v1::common::Price* last_trade_spd_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_trade_spd_price_);
  }
  _impl_.last_trade_spd_price_ = last_trade_spd_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketDepth.TradeData.last_trade_spd_price)
}
inline ::t4proto::v1::common::Price* MarketDepth_TradeData::release_last_trade_spd_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.last_trade_spd_price_;
  _impl_.last_trade_spd_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* MarketDepth_TradeData::unsafe_arena_release_last_trade_spd_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDepth.TradeData.last_trade_spd_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.last_trade_spd_price_;
  _impl_.last_trade_spd_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* MarketDepth_TradeData::_internal_mutable_last_trade_spd_price() {
  
  if (_impl_.last_trade_spd_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.last_trade_spd_price_ = p;
  }
  return _impl_.last_trade_spd_price_;
}
inline ::t4proto::v1::common::Price* MarketDepth_TradeData::mutable_last_trade_spd_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_last_trade_spd_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDepth.TradeData.last_trade_spd_price)
  return _msg;
}
inline void MarketDepth_TradeData::set_allocated_last_trade_spd_price(::t4proto::v1::common::Price* last_trade_spd_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_trade_spd_price_);
  }
  if (last_trade_spd_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_trade_spd_price));
    if (message_arena != submessage_arena) {
      last_trade_spd_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_trade_spd_price, submessage_arena);
    }

  } else {

  }
  _impl_.last_trade_spd_price_ = last_trade_spd_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDepth.TradeData.last_trade_spd_price)
}

// int32 last_trade_spd_volume = 7;
inline void MarketDepth_TradeData::clear_last_trade_spd_volume() {
  _impl_.last_trade_spd_volume_ = 0;
}
inline ::int32_t MarketDepth_TradeData::last_trade_spd_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.TradeData.last_trade_spd_volume)
  return _internal_last_trade_spd_volume();
}
inline void MarketDepth_TradeData::set_last_trade_spd_volume(::int32_t value) {
  _internal_set_last_trade_spd_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepth.TradeData.last_trade_spd_volume)
}
inline ::int32_t MarketDepth_TradeData::_internal_last_trade_spd_volume() const {
  return _impl_.last_trade_spd_volume_;
}
inline void MarketDepth_TradeData::_internal_set_last_trade_spd_volume(::int32_t value) {
  ;
  _impl_.last_trade_spd_volume_ = value;
}

// int32 last_trade_spd_total_volume = 8;
inline void MarketDepth_TradeData::clear_last_trade_spd_total_volume() {
  _impl_.last_trade_spd_total_volume_ = 0;
}
inline ::int32_t MarketDepth_TradeData::last_trade_spd_total_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.TradeData.last_trade_spd_total_volume)
  return _internal_last_trade_spd_total_volume();
}
inline void MarketDepth_TradeData::set_last_trade_spd_total_volume(::int32_t value) {
  _internal_set_last_trade_spd_total_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepth.TradeData.last_trade_spd_total_volume)
}
inline ::int32_t MarketDepth_TradeData::_internal_last_trade_spd_total_volume() const {
  return _impl_.last_trade_spd_total_volume_;
}
inline void MarketDepth_TradeData::_internal_set_last_trade_spd_total_volume(::int32_t value) {
  ;
  _impl_.last_trade_spd_total_volume_ = value;
}

// bool due_to_spread = 9;
inline void MarketDepth_TradeData::clear_due_to_spread() {
  _impl_.due_to_spread_ = false;
}
inline bool MarketDepth_TradeData::due_to_spread() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.TradeData.due_to_spread)
  return _internal_due_to_spread();
}
inline void MarketDepth_TradeData::set_due_to_spread(bool value) {
  _internal_set_due_to_spread(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepth.TradeData.due_to_spread)
}
inline bool MarketDepth_TradeData::_internal_due_to_spread() const {
  return _impl_.due_to_spread_;
}
inline void MarketDepth_TradeData::_internal_set_due_to_spread(bool value) {
  ;
  _impl_.due_to_spread_ = value;
}

// .t4proto.v1.common.BidOffer at_bid_or_offer = 10;
inline void MarketDepth_TradeData::clear_at_bid_or_offer() {
  _impl_.at_bid_or_offer_ = 0;
}
inline ::t4proto::v1::common::BidOffer MarketDepth_TradeData::at_bid_or_offer() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.TradeData.at_bid_or_offer)
  return _internal_at_bid_or_offer();
}
inline void MarketDepth_TradeData::set_at_bid_or_offer(::t4proto::v1::common::BidOffer value) {
   _internal_set_at_bid_or_offer(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepth.TradeData.at_bid_or_offer)
}
inline ::t4proto::v1::common::BidOffer MarketDepth_TradeData::_internal_at_bid_or_offer() const {
  return static_cast<::t4proto::v1::common::BidOffer>(_impl_.at_bid_or_offer_);
}
inline void MarketDepth_TradeData::_internal_set_at_bid_or_offer(::t4proto::v1::common::BidOffer value) {
  ;
  _impl_.at_bid_or_offer_ = value;
}

// .google.protobuf.Timestamp time = 11;
inline bool MarketDepth_TradeData::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool MarketDepth_TradeData::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketDepth_TradeData::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketDepth_TradeData::time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.TradeData.time)
  return _internal_time();
}
inline void MarketDepth_TradeData::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketDepth.TradeData.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDepth_TradeData::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDepth_TradeData::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDepth.TradeData.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDepth_TradeData::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDepth_TradeData::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDepth.TradeData.time)
  return _msg;
}
inline void MarketDepth_TradeData::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }

  } else {

  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDepth.TradeData.time)
}

// -------------------------------------------------------------------

// MarketDepth

// string market_id = 1;
inline void MarketDepth::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& MarketDepth::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketDepth::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepth.market_id)
}
inline std::string* MarketDepth::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDepth.market_id)
  return _s;
}
inline const std::string& MarketDepth::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void MarketDepth::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketDepth::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketDepth::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDepth.market_id)
  return _impl_.market_id_.Release();
}
inline void MarketDepth::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDepth.market_id)
}

// .t4proto.v1.common.DepthLevels depth_levels = 2;
inline void MarketDepth::clear_depth_levels() {
  _impl_.depth_levels_ = 0;
}
inline ::t4proto::v1::common::DepthLevels MarketDepth::depth_levels() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.depth_levels)
  return _internal_depth_levels();
}
inline void MarketDepth::set_depth_levels(::t4proto::v1::common::DepthLevels value) {
   _internal_set_depth_levels(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepth.depth_levels)
}
inline ::t4proto::v1::common::DepthLevels MarketDepth::_internal_depth_levels() const {
  return static_cast<::t4proto::v1::common::DepthLevels>(_impl_.depth_levels_);
}
inline void MarketDepth::_internal_set_depth_levels(::t4proto::v1::common::DepthLevels value) {
  ;
  _impl_.depth_levels_ = value;
}

// .t4proto.v1.common.DepthBuffer depth_buffer = 3;
inline void MarketDepth::clear_depth_buffer() {
  _impl_.depth_buffer_ = 0;
}
inline ::t4proto::v1::common::DepthBuffer MarketDepth::depth_buffer() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.depth_buffer)
  return _internal_depth_buffer();
}
inline void MarketDepth::set_depth_buffer(::t4proto::v1::common::DepthBuffer value) {
   _internal_set_depth_buffer(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepth.depth_buffer)
}
inline ::t4proto::v1::common::DepthBuffer MarketDepth::_internal_depth_buffer() const {
  return static_cast<::t4proto::v1::common::DepthBuffer>(_impl_.depth_buffer_);
}
inline void MarketDepth::_internal_set_depth_buffer(::t4proto::v1::common::DepthBuffer value) {
  ;
  _impl_.depth_buffer_ = value;
}

// .google.protobuf.Timestamp time = 4;
inline bool MarketDepth::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool MarketDepth::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketDepth::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketDepth::time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.time)
  return _internal_time();
}
inline void MarketDepth::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketDepth.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDepth::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDepth::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDepth.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDepth::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDepth::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDepth.time)
  return _msg;
}
inline void MarketDepth::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }

  } else {

  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDepth.time)
}

// bool delayed = 5;
inline void MarketDepth::clear_delayed() {
  _impl_.delayed_ = false;
}
inline bool MarketDepth::delayed() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.delayed)
  return _internal_delayed();
}
inline void MarketDepth::set_delayed(bool value) {
  _internal_set_delayed(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepth.delayed)
}
inline bool MarketDepth::_internal_delayed() const {
  return _impl_.delayed_;
}
inline void MarketDepth::_internal_set_delayed(bool value) {
  ;
  _impl_.delayed_ = value;
}

// repeated .t4proto.v1.market.MarketDepth.DepthLine bids = 6;
inline int MarketDepth::_internal_bids_size() const {
  return _impl_.bids_.size();
}
inline int MarketDepth::bids_size() const {
  return _internal_bids_size();
}
inline void MarketDepth::clear_bids() {
  _impl_.bids_.Clear();
}
inline ::t4proto::v1::market::MarketDepth_DepthLine* MarketDepth::mutable_bids(int index) {
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDepth.bids)
  return _impl_.bids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDepth_DepthLine >*
MarketDepth::mutable_bids() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.market.MarketDepth.bids)
  return &_impl_.bids_;
}
inline const ::t4proto::v1::market::MarketDepth_DepthLine& MarketDepth::_internal_bids(int index) const {
  return _impl_.bids_.Get(index);
}
inline const ::t4proto::v1::market::MarketDepth_DepthLine& MarketDepth::bids(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.bids)
  return _internal_bids(index);
}
inline ::t4proto::v1::market::MarketDepth_DepthLine* MarketDepth::_internal_add_bids() {
  return _impl_.bids_.Add();
}
inline ::t4proto::v1::market::MarketDepth_DepthLine* MarketDepth::add_bids() {
  ::t4proto::v1::market::MarketDepth_DepthLine* _add = _internal_add_bids();
  // @@protoc_insertion_point(field_add:t4proto.v1.market.MarketDepth.bids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDepth_DepthLine >&
MarketDepth::bids() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.market.MarketDepth.bids)
  return _impl_.bids_;
}

// repeated .t4proto.v1.market.MarketDepth.DepthLine offers = 7;
inline int MarketDepth::_internal_offers_size() const {
  return _impl_.offers_.size();
}
inline int MarketDepth::offers_size() const {
  return _internal_offers_size();
}
inline void MarketDepth::clear_offers() {
  _impl_.offers_.Clear();
}
inline ::t4proto::v1::market::MarketDepth_DepthLine* MarketDepth::mutable_offers(int index) {
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDepth.offers)
  return _impl_.offers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDepth_DepthLine >*
MarketDepth::mutable_offers() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.market.MarketDepth.offers)
  return &_impl_.offers_;
}
inline const ::t4proto::v1::market::MarketDepth_DepthLine& MarketDepth::_internal_offers(int index) const {
  return _impl_.offers_.Get(index);
}
inline const ::t4proto::v1::market::MarketDepth_DepthLine& MarketDepth::offers(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.offers)
  return _internal_offers(index);
}
inline ::t4proto::v1::market::MarketDepth_DepthLine* MarketDepth::_internal_add_offers() {
  return _impl_.offers_.Add();
}
inline ::t4proto::v1::market::MarketDepth_DepthLine* MarketDepth::add_offers() {
  ::t4proto::v1::market::MarketDepth_DepthLine* _add = _internal_add_offers();
  // @@protoc_insertion_point(field_add:t4proto.v1.market.MarketDepth.offers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDepth_DepthLine >&
MarketDepth::offers() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.market.MarketDepth.offers)
  return _impl_.offers_;
}

// repeated .t4proto.v1.market.MarketDepth.DepthLine implied_bids = 8;
inline int MarketDepth::_internal_implied_bids_size() const {
  return _impl_.implied_bids_.size();
}
inline int MarketDepth::implied_bids_size() const {
  return _internal_implied_bids_size();
}
inline void MarketDepth::clear_implied_bids() {
  _impl_.implied_bids_.Clear();
}
inline ::t4proto::v1::market::MarketDepth_DepthLine* MarketDepth::mutable_implied_bids(int index) {
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDepth.implied_bids)
  return _impl_.implied_bids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDepth_DepthLine >*
MarketDepth::mutable_implied_bids() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.market.MarketDepth.implied_bids)
  return &_impl_.implied_bids_;
}
inline const ::t4proto::v1::market::MarketDepth_DepthLine& MarketDepth::_internal_implied_bids(int index) const {
  return _impl_.implied_bids_.Get(index);
}
inline const ::t4proto::v1::market::MarketDepth_DepthLine& MarketDepth::implied_bids(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.implied_bids)
  return _internal_implied_bids(index);
}
inline ::t4proto::v1::market::MarketDepth_DepthLine* MarketDepth::_internal_add_implied_bids() {
  return _impl_.implied_bids_.Add();
}
inline ::t4proto::v1::market::MarketDepth_DepthLine* MarketDepth::add_implied_bids() {
  ::t4proto::v1::market::MarketDepth_DepthLine* _add = _internal_add_implied_bids();
  // @@protoc_insertion_point(field_add:t4proto.v1.market.MarketDepth.implied_bids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDepth_DepthLine >&
MarketDepth::implied_bids() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.market.MarketDepth.implied_bids)
  return _impl_.implied_bids_;
}

// repeated .t4proto.v1.market.MarketDepth.DepthLine implied_offers = 9;
inline int MarketDepth::_internal_implied_offers_size() const {
  return _impl_.implied_offers_.size();
}
inline int MarketDepth::implied_offers_size() const {
  return _internal_implied_offers_size();
}
inline void MarketDepth::clear_implied_offers() {
  _impl_.implied_offers_.Clear();
}
inline ::t4proto::v1::market::MarketDepth_DepthLine* MarketDepth::mutable_implied_offers(int index) {
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDepth.implied_offers)
  return _impl_.implied_offers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDepth_DepthLine >*
MarketDepth::mutable_implied_offers() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.market.MarketDepth.implied_offers)
  return &_impl_.implied_offers_;
}
inline const ::t4proto::v1::market::MarketDepth_DepthLine& MarketDepth::_internal_implied_offers(int index) const {
  return _impl_.implied_offers_.Get(index);
}
inline const ::t4proto::v1::market::MarketDepth_DepthLine& MarketDepth::implied_offers(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.implied_offers)
  return _internal_implied_offers(index);
}
inline ::t4proto::v1::market::MarketDepth_DepthLine* MarketDepth::_internal_add_implied_offers() {
  return _impl_.implied_offers_.Add();
}
inline ::t4proto::v1::market::MarketDepth_DepthLine* MarketDepth::add_implied_offers() {
  ::t4proto::v1::market::MarketDepth_DepthLine* _add = _internal_add_implied_offers();
  // @@protoc_insertion_point(field_add:t4proto.v1.market.MarketDepth.implied_offers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketDepth_DepthLine >&
MarketDepth::implied_offers() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.market.MarketDepth.implied_offers)
  return _impl_.implied_offers_;
}

// .t4proto.v1.common.MarketMode mode = 10;
inline void MarketDepth::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::t4proto::v1::common::MarketMode MarketDepth::mode() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.mode)
  return _internal_mode();
}
inline void MarketDepth::set_mode(::t4proto::v1::common::MarketMode value) {
   _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepth.mode)
}
inline ::t4proto::v1::common::MarketMode MarketDepth::_internal_mode() const {
  return static_cast<::t4proto::v1::common::MarketMode>(_impl_.mode_);
}
inline void MarketDepth::_internal_set_mode(::t4proto::v1::common::MarketMode value) {
  ;
  _impl_.mode_ = value;
}

// .t4proto.v1.common.MarketFlags2 flags = 11;
inline void MarketDepth::clear_flags() {
  _impl_.flags_ = 0;
}
inline ::t4proto::v1::common::MarketFlags2 MarketDepth::flags() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.flags)
  return _internal_flags();
}
inline void MarketDepth::set_flags(::t4proto::v1::common::MarketFlags2 value) {
   _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepth.flags)
}
inline ::t4proto::v1::common::MarketFlags2 MarketDepth::_internal_flags() const {
  return static_cast<::t4proto::v1::common::MarketFlags2>(_impl_.flags_);
}
inline void MarketDepth::_internal_set_flags(::t4proto::v1::common::MarketFlags2 value) {
  ;
  _impl_.flags_ = value;
}

// .t4proto.v1.market.MarketDepth.TradeData trade_data = 12;
inline bool MarketDepth::_internal_has_trade_data() const {
  return this != internal_default_instance() && _impl_.trade_data_ != nullptr;
}
inline bool MarketDepth::has_trade_data() const {
  return _internal_has_trade_data();
}
inline void MarketDepth::clear_trade_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.trade_data_ != nullptr) {
    delete _impl_.trade_data_;
  }
  _impl_.trade_data_ = nullptr;
}
inline const ::t4proto::v1::market::MarketDepth_TradeData& MarketDepth::_internal_trade_data() const {
  const ::t4proto::v1::market::MarketDepth_TradeData* p = _impl_.trade_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::market::MarketDepth_TradeData&>(
      ::t4proto::v1::market::_MarketDepth_TradeData_default_instance_);
}
inline const ::t4proto::v1::market::MarketDepth_TradeData& MarketDepth::trade_data() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepth.trade_data)
  return _internal_trade_data();
}
inline void MarketDepth::unsafe_arena_set_allocated_trade_data(
    ::t4proto::v1::market::MarketDepth_TradeData* trade_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trade_data_);
  }
  _impl_.trade_data_ = trade_data;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketDepth.trade_data)
}
inline ::t4proto::v1::market::MarketDepth_TradeData* MarketDepth::release_trade_data() {
  
  ::t4proto::v1::market::MarketDepth_TradeData* temp = _impl_.trade_data_;
  _impl_.trade_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::market::MarketDepth_TradeData* MarketDepth::unsafe_arena_release_trade_data() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDepth.trade_data)
  
  ::t4proto::v1::market::MarketDepth_TradeData* temp = _impl_.trade_data_;
  _impl_.trade_data_ = nullptr;
  return temp;
}
inline ::t4proto::v1::market::MarketDepth_TradeData* MarketDepth::_internal_mutable_trade_data() {
  
  if (_impl_.trade_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::market::MarketDepth_TradeData>(GetArenaForAllocation());
    _impl_.trade_data_ = p;
  }
  return _impl_.trade_data_;
}
inline ::t4proto::v1::market::MarketDepth_TradeData* MarketDepth::mutable_trade_data() {
  ::t4proto::v1::market::MarketDepth_TradeData* _msg = _internal_mutable_trade_data();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDepth.trade_data)
  return _msg;
}
inline void MarketDepth::set_allocated_trade_data(::t4proto::v1::market::MarketDepth_TradeData* trade_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.trade_data_;
  }
  if (trade_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(trade_data);
    if (message_arena != submessage_arena) {
      trade_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trade_data, submessage_arena);
    }

  } else {

  }
  _impl_.trade_data_ = trade_data;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDepth.trade_data)
}

// -------------------------------------------------------------------

// MarketDepthTrade

// string market_id = 1;
inline void MarketDepthTrade::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& MarketDepthTrade::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepthTrade.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketDepthTrade::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepthTrade.market_id)
}
inline std::string* MarketDepthTrade::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDepthTrade.market_id)
  return _s;
}
inline const std::string& MarketDepthTrade::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void MarketDepthTrade::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketDepthTrade::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketDepthTrade::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDepthTrade.market_id)
  return _impl_.market_id_.Release();
}
inline void MarketDepthTrade::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDepthTrade.market_id)
}

// .google.protobuf.Timestamp time = 2;
inline bool MarketDepthTrade::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool MarketDepthTrade::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketDepthTrade::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketDepthTrade::time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepthTrade.time)
  return _internal_time();
}
inline void MarketDepthTrade::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketDepthTrade.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDepthTrade::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDepthTrade::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDepthTrade.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDepthTrade::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketDepthTrade::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDepthTrade.time)
  return _msg;
}
inline void MarketDepthTrade::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }

  } else {

  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDepthTrade.time)
}

// int32 total_traded_volume = 3;
inline void MarketDepthTrade::clear_total_traded_volume() {
  _impl_.total_traded_volume_ = 0;
}
inline ::int32_t MarketDepthTrade::total_traded_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepthTrade.total_traded_volume)
  return _internal_total_traded_volume();
}
inline void MarketDepthTrade::set_total_traded_volume(::int32_t value) {
  _internal_set_total_traded_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepthTrade.total_traded_volume)
}
inline ::int32_t MarketDepthTrade::_internal_total_traded_volume() const {
  return _impl_.total_traded_volume_;
}
inline void MarketDepthTrade::_internal_set_total_traded_volume(::int32_t value) {
  ;
  _impl_.total_traded_volume_ = value;
}

// int32 last_trade_volume = 4;
inline void MarketDepthTrade::clear_last_trade_volume() {
  _impl_.last_trade_volume_ = 0;
}
inline ::int32_t MarketDepthTrade::last_trade_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepthTrade.last_trade_volume)
  return _internal_last_trade_volume();
}
inline void MarketDepthTrade::set_last_trade_volume(::int32_t value) {
  _internal_set_last_trade_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepthTrade.last_trade_volume)
}
inline ::int32_t MarketDepthTrade::_internal_last_trade_volume() const {
  return _impl_.last_trade_volume_;
}
inline void MarketDepthTrade::_internal_set_last_trade_volume(::int32_t value) {
  ;
  _impl_.last_trade_volume_ = value;
}

// bool due_to_spread = 5;
inline void MarketDepthTrade::clear_due_to_spread() {
  _impl_.due_to_spread_ = false;
}
inline bool MarketDepthTrade::due_to_spread() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepthTrade.due_to_spread)
  return _internal_due_to_spread();
}
inline void MarketDepthTrade::set_due_to_spread(bool value) {
  _internal_set_due_to_spread(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepthTrade.due_to_spread)
}
inline bool MarketDepthTrade::_internal_due_to_spread() const {
  return _impl_.due_to_spread_;
}
inline void MarketDepthTrade::_internal_set_due_to_spread(bool value) {
  ;
  _impl_.due_to_spread_ = value;
}

// .t4proto.v1.common.BidOffer at_bid_or_offer = 6;
inline void MarketDepthTrade::clear_at_bid_or_offer() {
  _impl_.at_bid_or_offer_ = 0;
}
inline ::t4proto::v1::common::BidOffer MarketDepthTrade::at_bid_or_offer() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepthTrade.at_bid_or_offer)
  return _internal_at_bid_or_offer();
}
inline void MarketDepthTrade::set_at_bid_or_offer(::t4proto::v1::common::BidOffer value) {
   _internal_set_at_bid_or_offer(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepthTrade.at_bid_or_offer)
}
inline ::t4proto::v1::common::BidOffer MarketDepthTrade::_internal_at_bid_or_offer() const {
  return static_cast<::t4proto::v1::common::BidOffer>(_impl_.at_bid_or_offer_);
}
inline void MarketDepthTrade::_internal_set_at_bid_or_offer(::t4proto::v1::common::BidOffer value) {
  ;
  _impl_.at_bid_or_offer_ = value;
}

// bool delayed = 7;
inline void MarketDepthTrade::clear_delayed() {
  _impl_.delayed_ = false;
}
inline bool MarketDepthTrade::delayed() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepthTrade.delayed)
  return _internal_delayed();
}
inline void MarketDepthTrade::set_delayed(bool value) {
  _internal_set_delayed(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepthTrade.delayed)
}
inline bool MarketDepthTrade::_internal_delayed() const {
  return _impl_.delayed_;
}
inline void MarketDepthTrade::_internal_set_delayed(bool value) {
  ;
  _impl_.delayed_ = value;
}

// repeated int32 order_volumes = 8;
inline int MarketDepthTrade::_internal_order_volumes_size() const {
  return _impl_.order_volumes_.size();
}
inline int MarketDepthTrade::order_volumes_size() const {
  return _internal_order_volumes_size();
}
inline void MarketDepthTrade::clear_order_volumes() {
  _impl_.order_volumes_.Clear();
}
inline ::int32_t MarketDepthTrade::order_volumes(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepthTrade.order_volumes)
  return _internal_order_volumes(index);
}
inline void MarketDepthTrade::set_order_volumes(int index, ::int32_t value) {
  _impl_.order_volumes_.Set(index, value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepthTrade.order_volumes)
}
inline void MarketDepthTrade::add_order_volumes(::int32_t value) {
  _internal_add_order_volumes(value);
  // @@protoc_insertion_point(field_add:t4proto.v1.market.MarketDepthTrade.order_volumes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& MarketDepthTrade::order_volumes() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.market.MarketDepthTrade.order_volumes)
  return _internal_order_volumes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* MarketDepthTrade::mutable_order_volumes() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.market.MarketDepthTrade.order_volumes)
  return _internal_mutable_order_volumes();
}

inline ::int32_t MarketDepthTrade::_internal_order_volumes(int index) const {
  return _impl_.order_volumes_.Get(index);
}
inline void MarketDepthTrade::_internal_add_order_volumes(::int32_t value) { _impl_.order_volumes_.Add(value); }
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>& MarketDepthTrade::_internal_order_volumes() const {
  return _impl_.order_volumes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int32_t>* MarketDepthTrade::_internal_mutable_order_volumes() {
  return &_impl_.order_volumes_;
}

// int32 total_trade_count = 9;
inline void MarketDepthTrade::clear_total_trade_count() {
  _impl_.total_trade_count_ = 0;
}
inline ::int32_t MarketDepthTrade::total_trade_count() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepthTrade.total_trade_count)
  return _internal_total_trade_count();
}
inline void MarketDepthTrade::set_total_trade_count(::int32_t value) {
  _internal_set_total_trade_count(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepthTrade.total_trade_count)
}
inline ::int32_t MarketDepthTrade::_internal_total_trade_count() const {
  return _impl_.total_trade_count_;
}
inline void MarketDepthTrade::_internal_set_total_trade_count(::int32_t value) {
  ;
  _impl_.total_trade_count_ = value;
}

// .t4proto.v1.common.Price last_trade_price = 10;
inline bool MarketDepthTrade::_internal_has_last_trade_price() const {
  return this != internal_default_instance() && _impl_.last_trade_price_ != nullptr;
}
inline bool MarketDepthTrade::has_last_trade_price() const {
  return _internal_has_last_trade_price();
}
inline const ::t4proto::v1::common::Price& MarketDepthTrade::_internal_last_trade_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.last_trade_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& MarketDepthTrade::last_trade_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepthTrade.last_trade_price)
  return _internal_last_trade_price();
}
inline void MarketDepthTrade::unsafe_arena_set_allocated_last_trade_price(
    ::t4proto::v1::common::Price* last_trade_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_trade_price_);
  }
  _impl_.last_trade_price_ = last_trade_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketDepthTrade.last_trade_price)
}
inline ::t4proto::v1::common::Price* MarketDepthTrade::release_last_trade_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.last_trade_price_;
  _impl_.last_trade_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* MarketDepthTrade::unsafe_arena_release_last_trade_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketDepthTrade.last_trade_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.last_trade_price_;
  _impl_.last_trade_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* MarketDepthTrade::_internal_mutable_last_trade_price() {
  
  if (_impl_.last_trade_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.last_trade_price_ = p;
  }
  return _impl_.last_trade_price_;
}
inline ::t4proto::v1::common::Price* MarketDepthTrade::mutable_last_trade_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_last_trade_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketDepthTrade.last_trade_price)
  return _msg;
}
inline void MarketDepthTrade::set_allocated_last_trade_price(::t4proto::v1::common::Price* last_trade_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.last_trade_price_);
  }
  if (last_trade_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(last_trade_price));
    if (message_arena != submessage_arena) {
      last_trade_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, last_trade_price, submessage_arena);
    }

  } else {

  }
  _impl_.last_trade_price_ = last_trade_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketDepthTrade.last_trade_price)
}

// .t4proto.v1.common.MarketMode mode = 11;
inline void MarketDepthTrade::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::t4proto::v1::common::MarketMode MarketDepthTrade::mode() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketDepthTrade.mode)
  return _internal_mode();
}
inline void MarketDepthTrade::set_mode(::t4proto::v1::common::MarketMode value) {
   _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketDepthTrade.mode)
}
inline ::t4proto::v1::common::MarketMode MarketDepthTrade::_internal_mode() const {
  return static_cast<::t4proto::v1::common::MarketMode>(_impl_.mode_);
}
inline void MarketDepthTrade::_internal_set_mode(::t4proto::v1::common::MarketMode value) {
  ;
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// MarketHighLow

// string market_id = 1;
inline void MarketHighLow::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& MarketHighLow::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketHighLow.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketHighLow::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketHighLow.market_id)
}
inline std::string* MarketHighLow::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketHighLow.market_id)
  return _s;
}
inline const std::string& MarketHighLow::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void MarketHighLow::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketHighLow::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketHighLow::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketHighLow.market_id)
  return _impl_.market_id_.Release();
}
inline void MarketHighLow::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketHighLow.market_id)
}

// .t4proto.v1.common.Price open_price = 2;
inline bool MarketHighLow::_internal_has_open_price() const {
  return this != internal_default_instance() && _impl_.open_price_ != nullptr;
}
inline bool MarketHighLow::has_open_price() const {
  return _internal_has_open_price();
}
inline const ::t4proto::v1::common::Price& MarketHighLow::_internal_open_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.open_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& MarketHighLow::open_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketHighLow.open_price)
  return _internal_open_price();
}
inline void MarketHighLow::unsafe_arena_set_allocated_open_price(
    ::t4proto::v1::common::Price* open_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.open_price_);
  }
  _impl_.open_price_ = open_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketHighLow.open_price)
}
inline ::t4proto::v1::common::Price* MarketHighLow::release_open_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.open_price_;
  _impl_.open_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* MarketHighLow::unsafe_arena_release_open_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketHighLow.open_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.open_price_;
  _impl_.open_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* MarketHighLow::_internal_mutable_open_price() {
  
  if (_impl_.open_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.open_price_ = p;
  }
  return _impl_.open_price_;
}
inline ::t4proto::v1::common::Price* MarketHighLow::mutable_open_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_open_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketHighLow.open_price)
  return _msg;
}
inline void MarketHighLow::set_allocated_open_price(::t4proto::v1::common::Price* open_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.open_price_);
  }
  if (open_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_price));
    if (message_arena != submessage_arena) {
      open_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_price, submessage_arena);
    }

  } else {

  }
  _impl_.open_price_ = open_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketHighLow.open_price)
}

// .t4proto.v1.common.Price high_price = 3;
inline bool MarketHighLow::_internal_has_high_price() const {
  return this != internal_default_instance() && _impl_.high_price_ != nullptr;
}
inline bool MarketHighLow::has_high_price() const {
  return _internal_has_high_price();
}
inline const ::t4proto::v1::common::Price& MarketHighLow::_internal_high_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.high_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& MarketHighLow::high_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketHighLow.high_price)
  return _internal_high_price();
}
inline void MarketHighLow::unsafe_arena_set_allocated_high_price(
    ::t4proto::v1::common::Price* high_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.high_price_);
  }
  _impl_.high_price_ = high_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketHighLow.high_price)
}
inline ::t4proto::v1::common::Price* MarketHighLow::release_high_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.high_price_;
  _impl_.high_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* MarketHighLow::unsafe_arena_release_high_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketHighLow.high_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.high_price_;
  _impl_.high_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* MarketHighLow::_internal_mutable_high_price() {
  
  if (_impl_.high_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.high_price_ = p;
  }
  return _impl_.high_price_;
}
inline ::t4proto::v1::common::Price* MarketHighLow::mutable_high_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_high_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketHighLow.high_price)
  return _msg;
}
inline void MarketHighLow::set_allocated_high_price(::t4proto::v1::common::Price* high_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.high_price_);
  }
  if (high_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(high_price));
    if (message_arena != submessage_arena) {
      high_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, high_price, submessage_arena);
    }

  } else {

  }
  _impl_.high_price_ = high_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketHighLow.high_price)
}

// .t4proto.v1.common.Price low_price = 4;
inline bool MarketHighLow::_internal_has_low_price() const {
  return this != internal_default_instance() && _impl_.low_price_ != nullptr;
}
inline bool MarketHighLow::has_low_price() const {
  return _internal_has_low_price();
}
inline const ::t4proto::v1::common::Price& MarketHighLow::_internal_low_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.low_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& MarketHighLow::low_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketHighLow.low_price)
  return _internal_low_price();
}
inline void MarketHighLow::unsafe_arena_set_allocated_low_price(
    ::t4proto::v1::common::Price* low_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.low_price_);
  }
  _impl_.low_price_ = low_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketHighLow.low_price)
}
inline ::t4proto::v1::common::Price* MarketHighLow::release_low_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.low_price_;
  _impl_.low_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* MarketHighLow::unsafe_arena_release_low_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketHighLow.low_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.low_price_;
  _impl_.low_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* MarketHighLow::_internal_mutable_low_price() {
  
  if (_impl_.low_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.low_price_ = p;
  }
  return _impl_.low_price_;
}
inline ::t4proto::v1::common::Price* MarketHighLow::mutable_low_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_low_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketHighLow.low_price)
  return _msg;
}
inline void MarketHighLow::set_allocated_low_price(::t4proto::v1::common::Price* low_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.low_price_);
  }
  if (low_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(low_price));
    if (message_arena != submessage_arena) {
      low_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, low_price, submessage_arena);
    }

  } else {

  }
  _impl_.low_price_ = low_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketHighLow.low_price)
}

// int64 trade_date = 5;
inline void MarketHighLow::clear_trade_date() {
  _impl_.trade_date_ = ::int64_t{0};
}
inline ::int64_t MarketHighLow::trade_date() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketHighLow.trade_date)
  return _internal_trade_date();
}
inline void MarketHighLow::set_trade_date(::int64_t value) {
  _internal_set_trade_date(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketHighLow.trade_date)
}
inline ::int64_t MarketHighLow::_internal_trade_date() const {
  return _impl_.trade_date_;
}
inline void MarketHighLow::_internal_set_trade_date(::int64_t value) {
  ;
  _impl_.trade_date_ = value;
}

// .google.protobuf.Timestamp time = 6;
inline bool MarketHighLow::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool MarketHighLow::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketHighLow::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketHighLow::time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketHighLow.time)
  return _internal_time();
}
inline void MarketHighLow::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketHighLow.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketHighLow::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketHighLow::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketHighLow.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketHighLow::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketHighLow::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketHighLow.time)
  return _msg;
}
inline void MarketHighLow::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }

  } else {

  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketHighLow.time)
}

// bool delayed = 7;
inline void MarketHighLow::clear_delayed() {
  _impl_.delayed_ = false;
}
inline bool MarketHighLow::delayed() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketHighLow.delayed)
  return _internal_delayed();
}
inline void MarketHighLow::set_delayed(bool value) {
  _internal_set_delayed(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketHighLow.delayed)
}
inline bool MarketHighLow::_internal_delayed() const {
  return _impl_.delayed_;
}
inline void MarketHighLow::_internal_set_delayed(bool value) {
  ;
  _impl_.delayed_ = value;
}

// -------------------------------------------------------------------

// MarketPriceLimits

// string market_id = 1;
inline void MarketPriceLimits::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& MarketPriceLimits::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketPriceLimits.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketPriceLimits::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketPriceLimits.market_id)
}
inline std::string* MarketPriceLimits::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketPriceLimits.market_id)
  return _s;
}
inline const std::string& MarketPriceLimits::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void MarketPriceLimits::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketPriceLimits::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketPriceLimits::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketPriceLimits.market_id)
  return _impl_.market_id_.Release();
}
inline void MarketPriceLimits::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketPriceLimits.market_id)
}

// .t4proto.v1.common.Price high_price = 2;
inline bool MarketPriceLimits::_internal_has_high_price() const {
  return this != internal_default_instance() && _impl_.high_price_ != nullptr;
}
inline bool MarketPriceLimits::has_high_price() const {
  return _internal_has_high_price();
}
inline const ::t4proto::v1::common::Price& MarketPriceLimits::_internal_high_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.high_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& MarketPriceLimits::high_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketPriceLimits.high_price)
  return _internal_high_price();
}
inline void MarketPriceLimits::unsafe_arena_set_allocated_high_price(
    ::t4proto::v1::common::Price* high_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.high_price_);
  }
  _impl_.high_price_ = high_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketPriceLimits.high_price)
}
inline ::t4proto::v1::common::Price* MarketPriceLimits::release_high_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.high_price_;
  _impl_.high_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* MarketPriceLimits::unsafe_arena_release_high_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketPriceLimits.high_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.high_price_;
  _impl_.high_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* MarketPriceLimits::_internal_mutable_high_price() {
  
  if (_impl_.high_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.high_price_ = p;
  }
  return _impl_.high_price_;
}
inline ::t4proto::v1::common::Price* MarketPriceLimits::mutable_high_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_high_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketPriceLimits.high_price)
  return _msg;
}
inline void MarketPriceLimits::set_allocated_high_price(::t4proto::v1::common::Price* high_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.high_price_);
  }
  if (high_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(high_price));
    if (message_arena != submessage_arena) {
      high_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, high_price, submessage_arena);
    }

  } else {

  }
  _impl_.high_price_ = high_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketPriceLimits.high_price)
}

// .t4proto.v1.common.Price low_price = 3;
inline bool MarketPriceLimits::_internal_has_low_price() const {
  return this != internal_default_instance() && _impl_.low_price_ != nullptr;
}
inline bool MarketPriceLimits::has_low_price() const {
  return _internal_has_low_price();
}
inline const ::t4proto::v1::common::Price& MarketPriceLimits::_internal_low_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.low_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& MarketPriceLimits::low_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketPriceLimits.low_price)
  return _internal_low_price();
}
inline void MarketPriceLimits::unsafe_arena_set_allocated_low_price(
    ::t4proto::v1::common::Price* low_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.low_price_);
  }
  _impl_.low_price_ = low_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketPriceLimits.low_price)
}
inline ::t4proto::v1::common::Price* MarketPriceLimits::release_low_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.low_price_;
  _impl_.low_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* MarketPriceLimits::unsafe_arena_release_low_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketPriceLimits.low_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.low_price_;
  _impl_.low_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* MarketPriceLimits::_internal_mutable_low_price() {
  
  if (_impl_.low_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.low_price_ = p;
  }
  return _impl_.low_price_;
}
inline ::t4proto::v1::common::Price* MarketPriceLimits::mutable_low_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_low_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketPriceLimits.low_price)
  return _msg;
}
inline void MarketPriceLimits::set_allocated_low_price(::t4proto::v1::common::Price* low_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.low_price_);
  }
  if (low_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(low_price));
    if (message_arena != submessage_arena) {
      low_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, low_price, submessage_arena);
    }

  } else {

  }
  _impl_.low_price_ = low_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketPriceLimits.low_price)
}

// .google.protobuf.Timestamp time = 4;
inline bool MarketPriceLimits::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool MarketPriceLimits::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketPriceLimits::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketPriceLimits::time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketPriceLimits.time)
  return _internal_time();
}
inline void MarketPriceLimits::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketPriceLimits.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketPriceLimits::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketPriceLimits::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketPriceLimits.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketPriceLimits::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketPriceLimits::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketPriceLimits.time)
  return _msg;
}
inline void MarketPriceLimits::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }

  } else {

  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketPriceLimits.time)
}

// bool delayed = 5;
inline void MarketPriceLimits::clear_delayed() {
  _impl_.delayed_ = false;
}
inline bool MarketPriceLimits::delayed() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketPriceLimits.delayed)
  return _internal_delayed();
}
inline void MarketPriceLimits::set_delayed(bool value) {
  _internal_set_delayed(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketPriceLimits.delayed)
}
inline bool MarketPriceLimits::_internal_delayed() const {
  return _impl_.delayed_;
}
inline void MarketPriceLimits::_internal_set_delayed(bool value) {
  ;
  _impl_.delayed_ = value;
}

// -------------------------------------------------------------------

// MarketSettlement

// string exchange_id = 1;
inline void MarketSettlement::clear_exchange_id() {
  _impl_.exchange_id_.ClearToEmpty();
}
inline const std::string& MarketSettlement::exchange_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSettlement.exchange_id)
  return _internal_exchange_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketSettlement::set_exchange_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.exchange_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketSettlement.exchange_id)
}
inline std::string* MarketSettlement::mutable_exchange_id() {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSettlement.exchange_id)
  return _s;
}
inline const std::string& MarketSettlement::_internal_exchange_id() const {
  return _impl_.exchange_id_.Get();
}
inline void MarketSettlement::_internal_set_exchange_id(const std::string& value) {
  ;


  _impl_.exchange_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketSettlement::_internal_mutable_exchange_id() {
  ;
  return _impl_.exchange_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketSettlement::release_exchange_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSettlement.exchange_id)
  return _impl_.exchange_id_.Release();
}
inline void MarketSettlement::set_allocated_exchange_id(std::string* value) {
  _impl_.exchange_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_id_.IsDefault()) {
          _impl_.exchange_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSettlement.exchange_id)
}

// string market_id = 2;
inline void MarketSettlement::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& MarketSettlement::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSettlement.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketSettlement::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketSettlement.market_id)
}
inline std::string* MarketSettlement::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSettlement.market_id)
  return _s;
}
inline const std::string& MarketSettlement::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void MarketSettlement::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketSettlement::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketSettlement::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSettlement.market_id)
  return _impl_.market_id_.Release();
}
inline void MarketSettlement::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSettlement.market_id)
}

// bool delayed = 3;
inline void MarketSettlement::clear_delayed() {
  _impl_.delayed_ = false;
}
inline bool MarketSettlement::delayed() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSettlement.delayed)
  return _internal_delayed();
}
inline void MarketSettlement::set_delayed(bool value) {
  _internal_set_delayed(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketSettlement.delayed)
}
inline bool MarketSettlement::_internal_delayed() const {
  return _impl_.delayed_;
}
inline void MarketSettlement::_internal_set_delayed(bool value) {
  ;
  _impl_.delayed_ = value;
}

// .t4proto.v1.common.Price settlement_price = 4;
inline bool MarketSettlement::_internal_has_settlement_price() const {
  return this != internal_default_instance() && _impl_.settlement_price_ != nullptr;
}
inline bool MarketSettlement::has_settlement_price() const {
  return _internal_has_settlement_price();
}
inline const ::t4proto::v1::common::Price& MarketSettlement::_internal_settlement_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.settlement_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& MarketSettlement::settlement_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSettlement.settlement_price)
  return _internal_settlement_price();
}
inline void MarketSettlement::unsafe_arena_set_allocated_settlement_price(
    ::t4proto::v1::common::Price* settlement_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settlement_price_);
  }
  _impl_.settlement_price_ = settlement_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketSettlement.settlement_price)
}
inline ::t4proto::v1::common::Price* MarketSettlement::release_settlement_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.settlement_price_;
  _impl_.settlement_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* MarketSettlement::unsafe_arena_release_settlement_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSettlement.settlement_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.settlement_price_;
  _impl_.settlement_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* MarketSettlement::_internal_mutable_settlement_price() {
  
  if (_impl_.settlement_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.settlement_price_ = p;
  }
  return _impl_.settlement_price_;
}
inline ::t4proto::v1::common::Price* MarketSettlement::mutable_settlement_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_settlement_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSettlement.settlement_price)
  return _msg;
}
inline void MarketSettlement::set_allocated_settlement_price(::t4proto::v1::common::Price* settlement_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settlement_price_);
  }
  if (settlement_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settlement_price));
    if (message_arena != submessage_arena) {
      settlement_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settlement_price, submessage_arena);
    }

  } else {

  }
  _impl_.settlement_price_ = settlement_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSettlement.settlement_price)
}

// .google.protobuf.Timestamp settlement_time = 5;
inline bool MarketSettlement::_internal_has_settlement_time() const {
  return this != internal_default_instance() && _impl_.settlement_time_ != nullptr;
}
inline bool MarketSettlement::has_settlement_time() const {
  return _internal_has_settlement_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::_internal_settlement_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.settlement_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::settlement_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSettlement.settlement_time)
  return _internal_settlement_time();
}
inline void MarketSettlement::unsafe_arena_set_allocated_settlement_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* settlement_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settlement_time_);
  }
  _impl_.settlement_time_ = settlement_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketSettlement.settlement_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::release_settlement_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.settlement_time_;
  _impl_.settlement_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::unsafe_arena_release_settlement_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSettlement.settlement_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.settlement_time_;
  _impl_.settlement_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::_internal_mutable_settlement_time() {
  
  if (_impl_.settlement_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.settlement_time_ = p;
  }
  return _impl_.settlement_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::mutable_settlement_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_settlement_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSettlement.settlement_time)
  return _msg;
}
inline void MarketSettlement::set_allocated_settlement_time(::PROTOBUF_NAMESPACE_ID::Timestamp* settlement_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settlement_time_);
  }
  if (settlement_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settlement_time));
    if (message_arena != submessage_arena) {
      settlement_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settlement_time, submessage_arena);
    }

  } else {

  }
  _impl_.settlement_time_ = settlement_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSettlement.settlement_time)
}

// .google.protobuf.Timestamp settlement_trade_date = 6;
inline bool MarketSettlement::_internal_has_settlement_trade_date() const {
  return this != internal_default_instance() && _impl_.settlement_trade_date_ != nullptr;
}
inline bool MarketSettlement::has_settlement_trade_date() const {
  return _internal_has_settlement_trade_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::_internal_settlement_trade_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.settlement_trade_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::settlement_trade_date() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSettlement.settlement_trade_date)
  return _internal_settlement_trade_date();
}
inline void MarketSettlement::unsafe_arena_set_allocated_settlement_trade_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* settlement_trade_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settlement_trade_date_);
  }
  _impl_.settlement_trade_date_ = settlement_trade_date;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketSettlement.settlement_trade_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::release_settlement_trade_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.settlement_trade_date_;
  _impl_.settlement_trade_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::unsafe_arena_release_settlement_trade_date() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSettlement.settlement_trade_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.settlement_trade_date_;
  _impl_.settlement_trade_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::_internal_mutable_settlement_trade_date() {
  
  if (_impl_.settlement_trade_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.settlement_trade_date_ = p;
  }
  return _impl_.settlement_trade_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::mutable_settlement_trade_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_settlement_trade_date();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSettlement.settlement_trade_date)
  return _msg;
}
inline void MarketSettlement::set_allocated_settlement_trade_date(::PROTOBUF_NAMESPACE_ID::Timestamp* settlement_trade_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settlement_trade_date_);
  }
  if (settlement_trade_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settlement_trade_date));
    if (message_arena != submessage_arena) {
      settlement_trade_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settlement_trade_date, submessage_arena);
    }

  } else {

  }
  _impl_.settlement_trade_date_ = settlement_trade_date;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSettlement.settlement_trade_date)
}

// string settlement_held_price = 7;
inline void MarketSettlement::clear_settlement_held_price() {
  _impl_.settlement_held_price_.ClearToEmpty();
}
inline const std::string& MarketSettlement::settlement_held_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSettlement.settlement_held_price)
  return _internal_settlement_held_price();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketSettlement::set_settlement_held_price(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.settlement_held_price_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketSettlement.settlement_held_price)
}
inline std::string* MarketSettlement::mutable_settlement_held_price() {
  std::string* _s = _internal_mutable_settlement_held_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSettlement.settlement_held_price)
  return _s;
}
inline const std::string& MarketSettlement::_internal_settlement_held_price() const {
  return _impl_.settlement_held_price_.Get();
}
inline void MarketSettlement::_internal_set_settlement_held_price(const std::string& value) {
  ;


  _impl_.settlement_held_price_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketSettlement::_internal_mutable_settlement_held_price() {
  ;
  return _impl_.settlement_held_price_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketSettlement::release_settlement_held_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSettlement.settlement_held_price)
  return _impl_.settlement_held_price_.Release();
}
inline void MarketSettlement::set_allocated_settlement_held_price(std::string* value) {
  _impl_.settlement_held_price_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.settlement_held_price_.IsDefault()) {
          _impl_.settlement_held_price_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSettlement.settlement_held_price)
}

// .google.protobuf.Timestamp settlement_held_time = 8;
inline bool MarketSettlement::_internal_has_settlement_held_time() const {
  return this != internal_default_instance() && _impl_.settlement_held_time_ != nullptr;
}
inline bool MarketSettlement::has_settlement_held_time() const {
  return _internal_has_settlement_held_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::_internal_settlement_held_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.settlement_held_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::settlement_held_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSettlement.settlement_held_time)
  return _internal_settlement_held_time();
}
inline void MarketSettlement::unsafe_arena_set_allocated_settlement_held_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* settlement_held_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settlement_held_time_);
  }
  _impl_.settlement_held_time_ = settlement_held_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketSettlement.settlement_held_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::release_settlement_held_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.settlement_held_time_;
  _impl_.settlement_held_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::unsafe_arena_release_settlement_held_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSettlement.settlement_held_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.settlement_held_time_;
  _impl_.settlement_held_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::_internal_mutable_settlement_held_time() {
  
  if (_impl_.settlement_held_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.settlement_held_time_ = p;
  }
  return _impl_.settlement_held_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::mutable_settlement_held_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_settlement_held_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSettlement.settlement_held_time)
  return _msg;
}
inline void MarketSettlement::set_allocated_settlement_held_time(::PROTOBUF_NAMESPACE_ID::Timestamp* settlement_held_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settlement_held_time_);
  }
  if (settlement_held_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settlement_held_time));
    if (message_arena != submessage_arena) {
      settlement_held_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settlement_held_time, submessage_arena);
    }

  } else {

  }
  _impl_.settlement_held_time_ = settlement_held_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSettlement.settlement_held_time)
}

// .google.protobuf.Timestamp settlement_held_trade_date = 9;
inline bool MarketSettlement::_internal_has_settlement_held_trade_date() const {
  return this != internal_default_instance() && _impl_.settlement_held_trade_date_ != nullptr;
}
inline bool MarketSettlement::has_settlement_held_trade_date() const {
  return _internal_has_settlement_held_trade_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::_internal_settlement_held_trade_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.settlement_held_trade_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::settlement_held_trade_date() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSettlement.settlement_held_trade_date)
  return _internal_settlement_held_trade_date();
}
inline void MarketSettlement::unsafe_arena_set_allocated_settlement_held_trade_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* settlement_held_trade_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settlement_held_trade_date_);
  }
  _impl_.settlement_held_trade_date_ = settlement_held_trade_date;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketSettlement.settlement_held_trade_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::release_settlement_held_trade_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.settlement_held_trade_date_;
  _impl_.settlement_held_trade_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::unsafe_arena_release_settlement_held_trade_date() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSettlement.settlement_held_trade_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.settlement_held_trade_date_;
  _impl_.settlement_held_trade_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::_internal_mutable_settlement_held_trade_date() {
  
  if (_impl_.settlement_held_trade_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.settlement_held_trade_date_ = p;
  }
  return _impl_.settlement_held_trade_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::mutable_settlement_held_trade_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_settlement_held_trade_date();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSettlement.settlement_held_trade_date)
  return _msg;
}
inline void MarketSettlement::set_allocated_settlement_held_trade_date(::PROTOBUF_NAMESPACE_ID::Timestamp* settlement_held_trade_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.settlement_held_trade_date_);
  }
  if (settlement_held_trade_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(settlement_held_trade_date));
    if (message_arena != submessage_arena) {
      settlement_held_trade_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, settlement_held_trade_date, submessage_arena);
    }

  } else {

  }
  _impl_.settlement_held_trade_date_ = settlement_held_trade_date;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSettlement.settlement_held_trade_date)
}

// .t4proto.v1.common.Price implied_price = 10;
inline bool MarketSettlement::_internal_has_implied_price() const {
  return this != internal_default_instance() && _impl_.implied_price_ != nullptr;
}
inline bool MarketSettlement::has_implied_price() const {
  return _internal_has_implied_price();
}
inline const ::t4proto::v1::common::Price& MarketSettlement::_internal_implied_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.implied_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& MarketSettlement::implied_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSettlement.implied_price)
  return _internal_implied_price();
}
inline void MarketSettlement::unsafe_arena_set_allocated_implied_price(
    ::t4proto::v1::common::Price* implied_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.implied_price_);
  }
  _impl_.implied_price_ = implied_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketSettlement.implied_price)
}
inline ::t4proto::v1::common::Price* MarketSettlement::release_implied_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.implied_price_;
  _impl_.implied_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* MarketSettlement::unsafe_arena_release_implied_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSettlement.implied_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.implied_price_;
  _impl_.implied_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* MarketSettlement::_internal_mutable_implied_price() {
  
  if (_impl_.implied_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.implied_price_ = p;
  }
  return _impl_.implied_price_;
}
inline ::t4proto::v1::common::Price* MarketSettlement::mutable_implied_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_implied_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSettlement.implied_price)
  return _msg;
}
inline void MarketSettlement::set_allocated_implied_price(::t4proto::v1::common::Price* implied_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.implied_price_);
  }
  if (implied_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(implied_price));
    if (message_arena != submessage_arena) {
      implied_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, implied_price, submessage_arena);
    }

  } else {

  }
  _impl_.implied_price_ = implied_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSettlement.implied_price)
}

// .t4proto.v1.common.Price implied_held_price = 11;
inline bool MarketSettlement::_internal_has_implied_held_price() const {
  return this != internal_default_instance() && _impl_.implied_held_price_ != nullptr;
}
inline bool MarketSettlement::has_implied_held_price() const {
  return _internal_has_implied_held_price();
}
inline const ::t4proto::v1::common::Price& MarketSettlement::_internal_implied_held_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.implied_held_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& MarketSettlement::implied_held_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSettlement.implied_held_price)
  return _internal_implied_held_price();
}
inline void MarketSettlement::unsafe_arena_set_allocated_implied_held_price(
    ::t4proto::v1::common::Price* implied_held_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.implied_held_price_);
  }
  _impl_.implied_held_price_ = implied_held_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketSettlement.implied_held_price)
}
inline ::t4proto::v1::common::Price* MarketSettlement::release_implied_held_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.implied_held_price_;
  _impl_.implied_held_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* MarketSettlement::unsafe_arena_release_implied_held_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSettlement.implied_held_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.implied_held_price_;
  _impl_.implied_held_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* MarketSettlement::_internal_mutable_implied_held_price() {
  
  if (_impl_.implied_held_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.implied_held_price_ = p;
  }
  return _impl_.implied_held_price_;
}
inline ::t4proto::v1::common::Price* MarketSettlement::mutable_implied_held_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_implied_held_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSettlement.implied_held_price)
  return _msg;
}
inline void MarketSettlement::set_allocated_implied_held_price(::t4proto::v1::common::Price* implied_held_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.implied_held_price_);
  }
  if (implied_held_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(implied_held_price));
    if (message_arena != submessage_arena) {
      implied_held_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, implied_held_price, submessage_arena);
    }

  } else {

  }
  _impl_.implied_held_price_ = implied_held_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSettlement.implied_held_price)
}

// .google.protobuf.Timestamp implied_time = 12;
inline bool MarketSettlement::_internal_has_implied_time() const {
  return this != internal_default_instance() && _impl_.implied_time_ != nullptr;
}
inline bool MarketSettlement::has_implied_time() const {
  return _internal_has_implied_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::_internal_implied_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.implied_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::implied_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSettlement.implied_time)
  return _internal_implied_time();
}
inline void MarketSettlement::unsafe_arena_set_allocated_implied_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* implied_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.implied_time_);
  }
  _impl_.implied_time_ = implied_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketSettlement.implied_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::release_implied_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.implied_time_;
  _impl_.implied_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::unsafe_arena_release_implied_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSettlement.implied_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.implied_time_;
  _impl_.implied_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::_internal_mutable_implied_time() {
  
  if (_impl_.implied_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.implied_time_ = p;
  }
  return _impl_.implied_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::mutable_implied_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_implied_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSettlement.implied_time)
  return _msg;
}
inline void MarketSettlement::set_allocated_implied_time(::PROTOBUF_NAMESPACE_ID::Timestamp* implied_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.implied_time_);
  }
  if (implied_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(implied_time));
    if (message_arena != submessage_arena) {
      implied_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, implied_time, submessage_arena);
    }

  } else {

  }
  _impl_.implied_time_ = implied_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSettlement.implied_time)
}

// int32 open_interest = 13;
inline void MarketSettlement::clear_open_interest() {
  _impl_.open_interest_ = 0;
}
inline ::int32_t MarketSettlement::open_interest() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSettlement.open_interest)
  return _internal_open_interest();
}
inline void MarketSettlement::set_open_interest(::int32_t value) {
  _internal_set_open_interest(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketSettlement.open_interest)
}
inline ::int32_t MarketSettlement::_internal_open_interest() const {
  return _impl_.open_interest_;
}
inline void MarketSettlement::_internal_set_open_interest(::int32_t value) {
  ;
  _impl_.open_interest_ = value;
}

// .google.protobuf.Timestamp open_interest_time = 14;
inline bool MarketSettlement::_internal_has_open_interest_time() const {
  return this != internal_default_instance() && _impl_.open_interest_time_ != nullptr;
}
inline bool MarketSettlement::has_open_interest_time() const {
  return _internal_has_open_interest_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::_internal_open_interest_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.open_interest_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::open_interest_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSettlement.open_interest_time)
  return _internal_open_interest_time();
}
inline void MarketSettlement::unsafe_arena_set_allocated_open_interest_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* open_interest_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.open_interest_time_);
  }
  _impl_.open_interest_time_ = open_interest_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketSettlement.open_interest_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::release_open_interest_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.open_interest_time_;
  _impl_.open_interest_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::unsafe_arena_release_open_interest_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSettlement.open_interest_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.open_interest_time_;
  _impl_.open_interest_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::_internal_mutable_open_interest_time() {
  
  if (_impl_.open_interest_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.open_interest_time_ = p;
  }
  return _impl_.open_interest_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::mutable_open_interest_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_open_interest_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSettlement.open_interest_time)
  return _msg;
}
inline void MarketSettlement::set_allocated_open_interest_time(::PROTOBUF_NAMESPACE_ID::Timestamp* open_interest_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.open_interest_time_);
  }
  if (open_interest_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_interest_time));
    if (message_arena != submessage_arena) {
      open_interest_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_interest_time, submessage_arena);
    }

  } else {

  }
  _impl_.open_interest_time_ = open_interest_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSettlement.open_interest_time)
}

// .google.protobuf.Timestamp open_interest_trade_date = 15;
inline bool MarketSettlement::_internal_has_open_interest_trade_date() const {
  return this != internal_default_instance() && _impl_.open_interest_trade_date_ != nullptr;
}
inline bool MarketSettlement::has_open_interest_trade_date() const {
  return _internal_has_open_interest_trade_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::_internal_open_interest_trade_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.open_interest_trade_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::open_interest_trade_date() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSettlement.open_interest_trade_date)
  return _internal_open_interest_trade_date();
}
inline void MarketSettlement::unsafe_arena_set_allocated_open_interest_trade_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* open_interest_trade_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.open_interest_trade_date_);
  }
  _impl_.open_interest_trade_date_ = open_interest_trade_date;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketSettlement.open_interest_trade_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::release_open_interest_trade_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.open_interest_trade_date_;
  _impl_.open_interest_trade_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::unsafe_arena_release_open_interest_trade_date() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSettlement.open_interest_trade_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.open_interest_trade_date_;
  _impl_.open_interest_trade_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::_internal_mutable_open_interest_trade_date() {
  
  if (_impl_.open_interest_trade_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.open_interest_trade_date_ = p;
  }
  return _impl_.open_interest_trade_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::mutable_open_interest_trade_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_open_interest_trade_date();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSettlement.open_interest_trade_date)
  return _msg;
}
inline void MarketSettlement::set_allocated_open_interest_trade_date(::PROTOBUF_NAMESPACE_ID::Timestamp* open_interest_trade_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.open_interest_trade_date_);
  }
  if (open_interest_trade_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(open_interest_trade_date));
    if (message_arena != submessage_arena) {
      open_interest_trade_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_interest_trade_date, submessage_arena);
    }

  } else {

  }
  _impl_.open_interest_trade_date_ = open_interest_trade_date;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSettlement.open_interest_trade_date)
}

// int32 cleared_volume = 16;
inline void MarketSettlement::clear_cleared_volume() {
  _impl_.cleared_volume_ = 0;
}
inline ::int32_t MarketSettlement::cleared_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSettlement.cleared_volume)
  return _internal_cleared_volume();
}
inline void MarketSettlement::set_cleared_volume(::int32_t value) {
  _internal_set_cleared_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketSettlement.cleared_volume)
}
inline ::int32_t MarketSettlement::_internal_cleared_volume() const {
  return _impl_.cleared_volume_;
}
inline void MarketSettlement::_internal_set_cleared_volume(::int32_t value) {
  ;
  _impl_.cleared_volume_ = value;
}

// .google.protobuf.Timestamp cleared_volume_time = 17;
inline bool MarketSettlement::_internal_has_cleared_volume_time() const {
  return this != internal_default_instance() && _impl_.cleared_volume_time_ != nullptr;
}
inline bool MarketSettlement::has_cleared_volume_time() const {
  return _internal_has_cleared_volume_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::_internal_cleared_volume_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.cleared_volume_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::cleared_volume_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSettlement.cleared_volume_time)
  return _internal_cleared_volume_time();
}
inline void MarketSettlement::unsafe_arena_set_allocated_cleared_volume_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* cleared_volume_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cleared_volume_time_);
  }
  _impl_.cleared_volume_time_ = cleared_volume_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketSettlement.cleared_volume_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::release_cleared_volume_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.cleared_volume_time_;
  _impl_.cleared_volume_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::unsafe_arena_release_cleared_volume_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSettlement.cleared_volume_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.cleared_volume_time_;
  _impl_.cleared_volume_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::_internal_mutable_cleared_volume_time() {
  
  if (_impl_.cleared_volume_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.cleared_volume_time_ = p;
  }
  return _impl_.cleared_volume_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::mutable_cleared_volume_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_cleared_volume_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSettlement.cleared_volume_time)
  return _msg;
}
inline void MarketSettlement::set_allocated_cleared_volume_time(::PROTOBUF_NAMESPACE_ID::Timestamp* cleared_volume_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cleared_volume_time_);
  }
  if (cleared_volume_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cleared_volume_time));
    if (message_arena != submessage_arena) {
      cleared_volume_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cleared_volume_time, submessage_arena);
    }

  } else {

  }
  _impl_.cleared_volume_time_ = cleared_volume_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSettlement.cleared_volume_time)
}

// .google.protobuf.Timestamp cleared_volume_trade_date = 18;
inline bool MarketSettlement::_internal_has_cleared_volume_trade_date() const {
  return this != internal_default_instance() && _impl_.cleared_volume_trade_date_ != nullptr;
}
inline bool MarketSettlement::has_cleared_volume_trade_date() const {
  return _internal_has_cleared_volume_trade_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::_internal_cleared_volume_trade_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.cleared_volume_trade_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::cleared_volume_trade_date() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSettlement.cleared_volume_trade_date)
  return _internal_cleared_volume_trade_date();
}
inline void MarketSettlement::unsafe_arena_set_allocated_cleared_volume_trade_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* cleared_volume_trade_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cleared_volume_trade_date_);
  }
  _impl_.cleared_volume_trade_date_ = cleared_volume_trade_date;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketSettlement.cleared_volume_trade_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::release_cleared_volume_trade_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.cleared_volume_trade_date_;
  _impl_.cleared_volume_trade_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::unsafe_arena_release_cleared_volume_trade_date() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSettlement.cleared_volume_trade_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.cleared_volume_trade_date_;
  _impl_.cleared_volume_trade_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::_internal_mutable_cleared_volume_trade_date() {
  
  if (_impl_.cleared_volume_trade_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.cleared_volume_trade_date_ = p;
  }
  return _impl_.cleared_volume_trade_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::mutable_cleared_volume_trade_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_cleared_volume_trade_date();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSettlement.cleared_volume_trade_date)
  return _msg;
}
inline void MarketSettlement::set_allocated_cleared_volume_trade_date(::PROTOBUF_NAMESPACE_ID::Timestamp* cleared_volume_trade_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cleared_volume_trade_date_);
  }
  if (cleared_volume_trade_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cleared_volume_trade_date));
    if (message_arena != submessage_arena) {
      cleared_volume_trade_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cleared_volume_trade_date, submessage_arena);
    }

  } else {

  }
  _impl_.cleared_volume_trade_date_ = cleared_volume_trade_date;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSettlement.cleared_volume_trade_date)
}

// .t4proto.v1.common.Price vwap_price = 19;
inline bool MarketSettlement::_internal_has_vwap_price() const {
  return this != internal_default_instance() && _impl_.vwap_price_ != nullptr;
}
inline bool MarketSettlement::has_vwap_price() const {
  return _internal_has_vwap_price();
}
inline const ::t4proto::v1::common::Price& MarketSettlement::_internal_vwap_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.vwap_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& MarketSettlement::vwap_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSettlement.vwap_price)
  return _internal_vwap_price();
}
inline void MarketSettlement::unsafe_arena_set_allocated_vwap_price(
    ::t4proto::v1::common::Price* vwap_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vwap_price_);
  }
  _impl_.vwap_price_ = vwap_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketSettlement.vwap_price)
}
inline ::t4proto::v1::common::Price* MarketSettlement::release_vwap_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.vwap_price_;
  _impl_.vwap_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* MarketSettlement::unsafe_arena_release_vwap_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSettlement.vwap_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.vwap_price_;
  _impl_.vwap_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* MarketSettlement::_internal_mutable_vwap_price() {
  
  if (_impl_.vwap_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.vwap_price_ = p;
  }
  return _impl_.vwap_price_;
}
inline ::t4proto::v1::common::Price* MarketSettlement::mutable_vwap_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_vwap_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSettlement.vwap_price)
  return _msg;
}
inline void MarketSettlement::set_allocated_vwap_price(::t4proto::v1::common::Price* vwap_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vwap_price_);
  }
  if (vwap_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vwap_price));
    if (message_arena != submessage_arena) {
      vwap_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vwap_price, submessage_arena);
    }

  } else {

  }
  _impl_.vwap_price_ = vwap_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSettlement.vwap_price)
}

// .google.protobuf.Timestamp vwap_time = 20;
inline bool MarketSettlement::_internal_has_vwap_time() const {
  return this != internal_default_instance() && _impl_.vwap_time_ != nullptr;
}
inline bool MarketSettlement::has_vwap_time() const {
  return _internal_has_vwap_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::_internal_vwap_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.vwap_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::vwap_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSettlement.vwap_time)
  return _internal_vwap_time();
}
inline void MarketSettlement::unsafe_arena_set_allocated_vwap_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* vwap_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vwap_time_);
  }
  _impl_.vwap_time_ = vwap_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketSettlement.vwap_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::release_vwap_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.vwap_time_;
  _impl_.vwap_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::unsafe_arena_release_vwap_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSettlement.vwap_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.vwap_time_;
  _impl_.vwap_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::_internal_mutable_vwap_time() {
  
  if (_impl_.vwap_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.vwap_time_ = p;
  }
  return _impl_.vwap_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::mutable_vwap_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_vwap_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSettlement.vwap_time)
  return _msg;
}
inline void MarketSettlement::set_allocated_vwap_time(::PROTOBUF_NAMESPACE_ID::Timestamp* vwap_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vwap_time_);
  }
  if (vwap_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vwap_time));
    if (message_arena != submessage_arena) {
      vwap_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vwap_time, submessage_arena);
    }

  } else {

  }
  _impl_.vwap_time_ = vwap_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSettlement.vwap_time)
}

// .google.protobuf.Timestamp vwap_trade_date = 21;
inline bool MarketSettlement::_internal_has_vwap_trade_date() const {
  return this != internal_default_instance() && _impl_.vwap_trade_date_ != nullptr;
}
inline bool MarketSettlement::has_vwap_trade_date() const {
  return _internal_has_vwap_trade_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::_internal_vwap_trade_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.vwap_trade_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketSettlement::vwap_trade_date() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSettlement.vwap_trade_date)
  return _internal_vwap_trade_date();
}
inline void MarketSettlement::unsafe_arena_set_allocated_vwap_trade_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* vwap_trade_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vwap_trade_date_);
  }
  _impl_.vwap_trade_date_ = vwap_trade_date;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketSettlement.vwap_trade_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::release_vwap_trade_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.vwap_trade_date_;
  _impl_.vwap_trade_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::unsafe_arena_release_vwap_trade_date() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSettlement.vwap_trade_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.vwap_trade_date_;
  _impl_.vwap_trade_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::_internal_mutable_vwap_trade_date() {
  
  if (_impl_.vwap_trade_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.vwap_trade_date_ = p;
  }
  return _impl_.vwap_trade_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketSettlement::mutable_vwap_trade_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_vwap_trade_date();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSettlement.vwap_trade_date)
  return _msg;
}
inline void MarketSettlement::set_allocated_vwap_trade_date(::PROTOBUF_NAMESPACE_ID::Timestamp* vwap_trade_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vwap_trade_date_);
  }
  if (vwap_trade_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vwap_trade_date));
    if (message_arena != submessage_arena) {
      vwap_trade_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vwap_trade_date, submessage_arena);
    }

  } else {

  }
  _impl_.vwap_trade_date_ = vwap_trade_date;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSettlement.vwap_trade_date)
}

// -------------------------------------------------------------------

// MarketSnapshotMessage

// .t4proto.v1.market.MarketDepth market_depth = 3;
inline bool MarketSnapshotMessage::has_market_depth() const {
  return payload_case() == kMarketDepth;
}
inline bool MarketSnapshotMessage::_internal_has_market_depth() const {
  return payload_case() == kMarketDepth;
}
inline void MarketSnapshotMessage::set_has_market_depth() {
  _impl_._oneof_case_[0] = kMarketDepth;
}
inline void MarketSnapshotMessage::clear_market_depth() {
  if (payload_case() == kMarketDepth) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.market_depth_;
    }
    clear_has_payload();
  }
}
inline ::t4proto::v1::market::MarketDepth* MarketSnapshotMessage::release_market_depth() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSnapshotMessage.market_depth)
  if (payload_case() == kMarketDepth) {
    clear_has_payload();
    ::t4proto::v1::market::MarketDepth* temp = _impl_.payload_.market_depth_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.market_depth_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::t4proto::v1::market::MarketDepth& MarketSnapshotMessage::_internal_market_depth() const {
  return payload_case() == kMarketDepth
      ? *_impl_.payload_.market_depth_
      : reinterpret_cast< ::t4proto::v1::market::MarketDepth&>(::t4proto::v1::market::_MarketDepth_default_instance_);
}
inline const ::t4proto::v1::market::MarketDepth& MarketSnapshotMessage::market_depth() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSnapshotMessage.market_depth)
  return _internal_market_depth();
}
inline ::t4proto::v1::market::MarketDepth* MarketSnapshotMessage::unsafe_arena_release_market_depth() {
  // @@protoc_insertion_point(field_unsafe_arena_release:t4proto.v1.market.MarketSnapshotMessage.market_depth)
  if (payload_case() == kMarketDepth) {
    clear_has_payload();
    ::t4proto::v1::market::MarketDepth* temp = _impl_.payload_.market_depth_;
    _impl_.payload_.market_depth_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketSnapshotMessage::unsafe_arena_set_allocated_market_depth(::t4proto::v1::market::MarketDepth* market_depth) {
  clear_payload();
  if (market_depth) {
    set_has_market_depth();
    _impl_.payload_.market_depth_ = market_depth;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketSnapshotMessage.market_depth)
}
inline ::t4proto::v1::market::MarketDepth* MarketSnapshotMessage::_internal_mutable_market_depth() {
  if (payload_case() != kMarketDepth) {
    clear_payload();
    set_has_market_depth();
    _impl_.payload_.market_depth_ = CreateMaybeMessage< ::t4proto::v1::market::MarketDepth >(GetArenaForAllocation());
  }
  return _impl_.payload_.market_depth_;
}
inline ::t4proto::v1::market::MarketDepth* MarketSnapshotMessage::mutable_market_depth() {
  ::t4proto::v1::market::MarketDepth* _msg = _internal_mutable_market_depth();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSnapshotMessage.market_depth)
  return _msg;
}

// .t4proto.v1.market.MarketDepthTrade market_depth_trade = 4;
inline bool MarketSnapshotMessage::has_market_depth_trade() const {
  return payload_case() == kMarketDepthTrade;
}
inline bool MarketSnapshotMessage::_internal_has_market_depth_trade() const {
  return payload_case() == kMarketDepthTrade;
}
inline void MarketSnapshotMessage::set_has_market_depth_trade() {
  _impl_._oneof_case_[0] = kMarketDepthTrade;
}
inline void MarketSnapshotMessage::clear_market_depth_trade() {
  if (payload_case() == kMarketDepthTrade) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.market_depth_trade_;
    }
    clear_has_payload();
  }
}
inline ::t4proto::v1::market::MarketDepthTrade* MarketSnapshotMessage::release_market_depth_trade() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSnapshotMessage.market_depth_trade)
  if (payload_case() == kMarketDepthTrade) {
    clear_has_payload();
    ::t4proto::v1::market::MarketDepthTrade* temp = _impl_.payload_.market_depth_trade_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.market_depth_trade_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::t4proto::v1::market::MarketDepthTrade& MarketSnapshotMessage::_internal_market_depth_trade() const {
  return payload_case() == kMarketDepthTrade
      ? *_impl_.payload_.market_depth_trade_
      : reinterpret_cast< ::t4proto::v1::market::MarketDepthTrade&>(::t4proto::v1::market::_MarketDepthTrade_default_instance_);
}
inline const ::t4proto::v1::market::MarketDepthTrade& MarketSnapshotMessage::market_depth_trade() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSnapshotMessage.market_depth_trade)
  return _internal_market_depth_trade();
}
inline ::t4proto::v1::market::MarketDepthTrade* MarketSnapshotMessage::unsafe_arena_release_market_depth_trade() {
  // @@protoc_insertion_point(field_unsafe_arena_release:t4proto.v1.market.MarketSnapshotMessage.market_depth_trade)
  if (payload_case() == kMarketDepthTrade) {
    clear_has_payload();
    ::t4proto::v1::market::MarketDepthTrade* temp = _impl_.payload_.market_depth_trade_;
    _impl_.payload_.market_depth_trade_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketSnapshotMessage::unsafe_arena_set_allocated_market_depth_trade(::t4proto::v1::market::MarketDepthTrade* market_depth_trade) {
  clear_payload();
  if (market_depth_trade) {
    set_has_market_depth_trade();
    _impl_.payload_.market_depth_trade_ = market_depth_trade;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketSnapshotMessage.market_depth_trade)
}
inline ::t4proto::v1::market::MarketDepthTrade* MarketSnapshotMessage::_internal_mutable_market_depth_trade() {
  if (payload_case() != kMarketDepthTrade) {
    clear_payload();
    set_has_market_depth_trade();
    _impl_.payload_.market_depth_trade_ = CreateMaybeMessage< ::t4proto::v1::market::MarketDepthTrade >(GetArenaForAllocation());
  }
  return _impl_.payload_.market_depth_trade_;
}
inline ::t4proto::v1::market::MarketDepthTrade* MarketSnapshotMessage::mutable_market_depth_trade() {
  ::t4proto::v1::market::MarketDepthTrade* _msg = _internal_mutable_market_depth_trade();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSnapshotMessage.market_depth_trade)
  return _msg;
}

// .t4proto.v1.market.MarketHighLow market_high_low = 5;
inline bool MarketSnapshotMessage::has_market_high_low() const {
  return payload_case() == kMarketHighLow;
}
inline bool MarketSnapshotMessage::_internal_has_market_high_low() const {
  return payload_case() == kMarketHighLow;
}
inline void MarketSnapshotMessage::set_has_market_high_low() {
  _impl_._oneof_case_[0] = kMarketHighLow;
}
inline void MarketSnapshotMessage::clear_market_high_low() {
  if (payload_case() == kMarketHighLow) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.market_high_low_;
    }
    clear_has_payload();
  }
}
inline ::t4proto::v1::market::MarketHighLow* MarketSnapshotMessage::release_market_high_low() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSnapshotMessage.market_high_low)
  if (payload_case() == kMarketHighLow) {
    clear_has_payload();
    ::t4proto::v1::market::MarketHighLow* temp = _impl_.payload_.market_high_low_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.market_high_low_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::t4proto::v1::market::MarketHighLow& MarketSnapshotMessage::_internal_market_high_low() const {
  return payload_case() == kMarketHighLow
      ? *_impl_.payload_.market_high_low_
      : reinterpret_cast< ::t4proto::v1::market::MarketHighLow&>(::t4proto::v1::market::_MarketHighLow_default_instance_);
}
inline const ::t4proto::v1::market::MarketHighLow& MarketSnapshotMessage::market_high_low() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSnapshotMessage.market_high_low)
  return _internal_market_high_low();
}
inline ::t4proto::v1::market::MarketHighLow* MarketSnapshotMessage::unsafe_arena_release_market_high_low() {
  // @@protoc_insertion_point(field_unsafe_arena_release:t4proto.v1.market.MarketSnapshotMessage.market_high_low)
  if (payload_case() == kMarketHighLow) {
    clear_has_payload();
    ::t4proto::v1::market::MarketHighLow* temp = _impl_.payload_.market_high_low_;
    _impl_.payload_.market_high_low_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketSnapshotMessage::unsafe_arena_set_allocated_market_high_low(::t4proto::v1::market::MarketHighLow* market_high_low) {
  clear_payload();
  if (market_high_low) {
    set_has_market_high_low();
    _impl_.payload_.market_high_low_ = market_high_low;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketSnapshotMessage.market_high_low)
}
inline ::t4proto::v1::market::MarketHighLow* MarketSnapshotMessage::_internal_mutable_market_high_low() {
  if (payload_case() != kMarketHighLow) {
    clear_payload();
    set_has_market_high_low();
    _impl_.payload_.market_high_low_ = CreateMaybeMessage< ::t4proto::v1::market::MarketHighLow >(GetArenaForAllocation());
  }
  return _impl_.payload_.market_high_low_;
}
inline ::t4proto::v1::market::MarketHighLow* MarketSnapshotMessage::mutable_market_high_low() {
  ::t4proto::v1::market::MarketHighLow* _msg = _internal_mutable_market_high_low();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSnapshotMessage.market_high_low)
  return _msg;
}

// .t4proto.v1.market.MarketPriceLimits market_price_limits = 6;
inline bool MarketSnapshotMessage::has_market_price_limits() const {
  return payload_case() == kMarketPriceLimits;
}
inline bool MarketSnapshotMessage::_internal_has_market_price_limits() const {
  return payload_case() == kMarketPriceLimits;
}
inline void MarketSnapshotMessage::set_has_market_price_limits() {
  _impl_._oneof_case_[0] = kMarketPriceLimits;
}
inline void MarketSnapshotMessage::clear_market_price_limits() {
  if (payload_case() == kMarketPriceLimits) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.market_price_limits_;
    }
    clear_has_payload();
  }
}
inline ::t4proto::v1::market::MarketPriceLimits* MarketSnapshotMessage::release_market_price_limits() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSnapshotMessage.market_price_limits)
  if (payload_case() == kMarketPriceLimits) {
    clear_has_payload();
    ::t4proto::v1::market::MarketPriceLimits* temp = _impl_.payload_.market_price_limits_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.market_price_limits_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::t4proto::v1::market::MarketPriceLimits& MarketSnapshotMessage::_internal_market_price_limits() const {
  return payload_case() == kMarketPriceLimits
      ? *_impl_.payload_.market_price_limits_
      : reinterpret_cast< ::t4proto::v1::market::MarketPriceLimits&>(::t4proto::v1::market::_MarketPriceLimits_default_instance_);
}
inline const ::t4proto::v1::market::MarketPriceLimits& MarketSnapshotMessage::market_price_limits() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSnapshotMessage.market_price_limits)
  return _internal_market_price_limits();
}
inline ::t4proto::v1::market::MarketPriceLimits* MarketSnapshotMessage::unsafe_arena_release_market_price_limits() {
  // @@protoc_insertion_point(field_unsafe_arena_release:t4proto.v1.market.MarketSnapshotMessage.market_price_limits)
  if (payload_case() == kMarketPriceLimits) {
    clear_has_payload();
    ::t4proto::v1::market::MarketPriceLimits* temp = _impl_.payload_.market_price_limits_;
    _impl_.payload_.market_price_limits_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketSnapshotMessage::unsafe_arena_set_allocated_market_price_limits(::t4proto::v1::market::MarketPriceLimits* market_price_limits) {
  clear_payload();
  if (market_price_limits) {
    set_has_market_price_limits();
    _impl_.payload_.market_price_limits_ = market_price_limits;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketSnapshotMessage.market_price_limits)
}
inline ::t4proto::v1::market::MarketPriceLimits* MarketSnapshotMessage::_internal_mutable_market_price_limits() {
  if (payload_case() != kMarketPriceLimits) {
    clear_payload();
    set_has_market_price_limits();
    _impl_.payload_.market_price_limits_ = CreateMaybeMessage< ::t4proto::v1::market::MarketPriceLimits >(GetArenaForAllocation());
  }
  return _impl_.payload_.market_price_limits_;
}
inline ::t4proto::v1::market::MarketPriceLimits* MarketSnapshotMessage::mutable_market_price_limits() {
  ::t4proto::v1::market::MarketPriceLimits* _msg = _internal_mutable_market_price_limits();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSnapshotMessage.market_price_limits)
  return _msg;
}

// .t4proto.v1.market.MarketSettlement market_settlement = 7;
inline bool MarketSnapshotMessage::has_market_settlement() const {
  return payload_case() == kMarketSettlement;
}
inline bool MarketSnapshotMessage::_internal_has_market_settlement() const {
  return payload_case() == kMarketSettlement;
}
inline void MarketSnapshotMessage::set_has_market_settlement() {
  _impl_._oneof_case_[0] = kMarketSettlement;
}
inline void MarketSnapshotMessage::clear_market_settlement() {
  if (payload_case() == kMarketSettlement) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.market_settlement_;
    }
    clear_has_payload();
  }
}
inline ::t4proto::v1::market::MarketSettlement* MarketSnapshotMessage::release_market_settlement() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSnapshotMessage.market_settlement)
  if (payload_case() == kMarketSettlement) {
    clear_has_payload();
    ::t4proto::v1::market::MarketSettlement* temp = _impl_.payload_.market_settlement_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.market_settlement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::t4proto::v1::market::MarketSettlement& MarketSnapshotMessage::_internal_market_settlement() const {
  return payload_case() == kMarketSettlement
      ? *_impl_.payload_.market_settlement_
      : reinterpret_cast< ::t4proto::v1::market::MarketSettlement&>(::t4proto::v1::market::_MarketSettlement_default_instance_);
}
inline const ::t4proto::v1::market::MarketSettlement& MarketSnapshotMessage::market_settlement() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSnapshotMessage.market_settlement)
  return _internal_market_settlement();
}
inline ::t4proto::v1::market::MarketSettlement* MarketSnapshotMessage::unsafe_arena_release_market_settlement() {
  // @@protoc_insertion_point(field_unsafe_arena_release:t4proto.v1.market.MarketSnapshotMessage.market_settlement)
  if (payload_case() == kMarketSettlement) {
    clear_has_payload();
    ::t4proto::v1::market::MarketSettlement* temp = _impl_.payload_.market_settlement_;
    _impl_.payload_.market_settlement_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketSnapshotMessage::unsafe_arena_set_allocated_market_settlement(::t4proto::v1::market::MarketSettlement* market_settlement) {
  clear_payload();
  if (market_settlement) {
    set_has_market_settlement();
    _impl_.payload_.market_settlement_ = market_settlement;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketSnapshotMessage.market_settlement)
}
inline ::t4proto::v1::market::MarketSettlement* MarketSnapshotMessage::_internal_mutable_market_settlement() {
  if (payload_case() != kMarketSettlement) {
    clear_payload();
    set_has_market_settlement();
    _impl_.payload_.market_settlement_ = CreateMaybeMessage< ::t4proto::v1::market::MarketSettlement >(GetArenaForAllocation());
  }
  return _impl_.payload_.market_settlement_;
}
inline ::t4proto::v1::market::MarketSettlement* MarketSnapshotMessage::mutable_market_settlement() {
  ::t4proto::v1::market::MarketSettlement* _msg = _internal_mutable_market_settlement();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSnapshotMessage.market_settlement)
  return _msg;
}

inline bool MarketSnapshotMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void MarketSnapshotMessage::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline MarketSnapshotMessage::PayloadCase MarketSnapshotMessage::payload_case() const {
  return MarketSnapshotMessage::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// MarketSnapshot

// string market_id = 1;
inline void MarketSnapshot::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& MarketSnapshot::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSnapshot.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketSnapshot::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketSnapshot.market_id)
}
inline std::string* MarketSnapshot::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSnapshot.market_id)
  return _s;
}
inline const std::string& MarketSnapshot::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void MarketSnapshot::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketSnapshot::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketSnapshot::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketSnapshot.market_id)
  return _impl_.market_id_.Release();
}
inline void MarketSnapshot::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSnapshot.market_id)
}

// .t4proto.v1.common.MarketMode mode = 2;
inline void MarketSnapshot::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::t4proto::v1::common::MarketMode MarketSnapshot::mode() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSnapshot.mode)
  return _internal_mode();
}
inline void MarketSnapshot::set_mode(::t4proto::v1::common::MarketMode value) {
   _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketSnapshot.mode)
}
inline ::t4proto::v1::common::MarketMode MarketSnapshot::_internal_mode() const {
  return static_cast<::t4proto::v1::common::MarketMode>(_impl_.mode_);
}
inline void MarketSnapshot::_internal_set_mode(::t4proto::v1::common::MarketMode value) {
  ;
  _impl_.mode_ = value;
}

// bool due_to_connection = 3;
inline void MarketSnapshot::clear_due_to_connection() {
  _impl_.due_to_connection_ = false;
}
inline bool MarketSnapshot::due_to_connection() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSnapshot.due_to_connection)
  return _internal_due_to_connection();
}
inline void MarketSnapshot::set_due_to_connection(bool value) {
  _internal_set_due_to_connection(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketSnapshot.due_to_connection)
}
inline bool MarketSnapshot::_internal_due_to_connection() const {
  return _impl_.due_to_connection_;
}
inline void MarketSnapshot::_internal_set_due_to_connection(bool value) {
  ;
  _impl_.due_to_connection_ = value;
}

// bool delayed = 4;
inline void MarketSnapshot::clear_delayed() {
  _impl_.delayed_ = false;
}
inline bool MarketSnapshot::delayed() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSnapshot.delayed)
  return _internal_delayed();
}
inline void MarketSnapshot::set_delayed(bool value) {
  _internal_set_delayed(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketSnapshot.delayed)
}
inline bool MarketSnapshot::_internal_delayed() const {
  return _impl_.delayed_;
}
inline void MarketSnapshot::_internal_set_delayed(bool value) {
  ;
  _impl_.delayed_ = value;
}

// repeated .t4proto.v1.market.MarketSnapshotMessage messages = 5;
inline int MarketSnapshot::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int MarketSnapshot::messages_size() const {
  return _internal_messages_size();
}
inline void MarketSnapshot::clear_messages() {
  _impl_.messages_.Clear();
}
inline ::t4proto::v1::market::MarketSnapshotMessage* MarketSnapshot::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketSnapshot.messages)
  return _impl_.messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketSnapshotMessage >*
MarketSnapshot::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.market.MarketSnapshot.messages)
  return &_impl_.messages_;
}
inline const ::t4proto::v1::market::MarketSnapshotMessage& MarketSnapshot::_internal_messages(int index) const {
  return _impl_.messages_.Get(index);
}
inline const ::t4proto::v1::market::MarketSnapshotMessage& MarketSnapshot::messages(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketSnapshot.messages)
  return _internal_messages(index);
}
inline ::t4proto::v1::market::MarketSnapshotMessage* MarketSnapshot::_internal_add_messages() {
  return _impl_.messages_.Add();
}
inline ::t4proto::v1::market::MarketSnapshotMessage* MarketSnapshot::add_messages() {
  ::t4proto::v1::market::MarketSnapshotMessage* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:t4proto.v1.market.MarketSnapshot.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketSnapshotMessage >&
MarketSnapshot::messages() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.market.MarketSnapshot.messages)
  return _impl_.messages_;
}

// -------------------------------------------------------------------

// MarketByOrderSnapshot_Order

// uint64 order_id = 1;
inline void MarketByOrderSnapshot_Order::clear_order_id() {
  _impl_.order_id_ = ::uint64_t{0u};
}
inline ::uint64_t MarketByOrderSnapshot_Order::order_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderSnapshot.Order.order_id)
  return _internal_order_id();
}
inline void MarketByOrderSnapshot_Order::set_order_id(::uint64_t value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketByOrderSnapshot.Order.order_id)
}
inline ::uint64_t MarketByOrderSnapshot_Order::_internal_order_id() const {
  return _impl_.order_id_;
}
inline void MarketByOrderSnapshot_Order::_internal_set_order_id(::uint64_t value) {
  ;
  _impl_.order_id_ = value;
}

// .t4proto.v1.common.BidOffer bid_offer = 2;
inline void MarketByOrderSnapshot_Order::clear_bid_offer() {
  _impl_.bid_offer_ = 0;
}
inline ::t4proto::v1::common::BidOffer MarketByOrderSnapshot_Order::bid_offer() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderSnapshot.Order.bid_offer)
  return _internal_bid_offer();
}
inline void MarketByOrderSnapshot_Order::set_bid_offer(::t4proto::v1::common::BidOffer value) {
   _internal_set_bid_offer(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketByOrderSnapshot.Order.bid_offer)
}
inline ::t4proto::v1::common::BidOffer MarketByOrderSnapshot_Order::_internal_bid_offer() const {
  return static_cast<::t4proto::v1::common::BidOffer>(_impl_.bid_offer_);
}
inline void MarketByOrderSnapshot_Order::_internal_set_bid_offer(::t4proto::v1::common::BidOffer value) {
  ;
  _impl_.bid_offer_ = value;
}

// .t4proto.v1.common.Price price = 3;
inline bool MarketByOrderSnapshot_Order::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool MarketByOrderSnapshot_Order::has_price() const {
  return _internal_has_price();
}
inline const ::t4proto::v1::common::Price& MarketByOrderSnapshot_Order::_internal_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& MarketByOrderSnapshot_Order::price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderSnapshot.Order.price)
  return _internal_price();
}
inline void MarketByOrderSnapshot_Order::unsafe_arena_set_allocated_price(
    ::t4proto::v1::common::Price* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketByOrderSnapshot.Order.price)
}
inline ::t4proto::v1::common::Price* MarketByOrderSnapshot_Order::release_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* MarketByOrderSnapshot_Order::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketByOrderSnapshot.Order.price)
  
  ::t4proto::v1::common::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* MarketByOrderSnapshot_Order::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::t4proto::v1::common::Price* MarketByOrderSnapshot_Order::mutable_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketByOrderSnapshot.Order.price)
  return _msg;
}
inline void MarketByOrderSnapshot_Order::set_allocated_price(::t4proto::v1::common::Price* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }

  } else {

  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketByOrderSnapshot.Order.price)
}

// int32 volume = 4;
inline void MarketByOrderSnapshot_Order::clear_volume() {
  _impl_.volume_ = 0;
}
inline ::int32_t MarketByOrderSnapshot_Order::volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderSnapshot.Order.volume)
  return _internal_volume();
}
inline void MarketByOrderSnapshot_Order::set_volume(::int32_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketByOrderSnapshot.Order.volume)
}
inline ::int32_t MarketByOrderSnapshot_Order::_internal_volume() const {
  return _impl_.volume_;
}
inline void MarketByOrderSnapshot_Order::_internal_set_volume(::int32_t value) {
  ;
  _impl_.volume_ = value;
}

// uint64 priority = 5;
inline void MarketByOrderSnapshot_Order::clear_priority() {
  _impl_.priority_ = ::uint64_t{0u};
}
inline ::uint64_t MarketByOrderSnapshot_Order::priority() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderSnapshot.Order.priority)
  return _internal_priority();
}
inline void MarketByOrderSnapshot_Order::set_priority(::uint64_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketByOrderSnapshot.Order.priority)
}
inline ::uint64_t MarketByOrderSnapshot_Order::_internal_priority() const {
  return _impl_.priority_;
}
inline void MarketByOrderSnapshot_Order::_internal_set_priority(::uint64_t value) {
  ;
  _impl_.priority_ = value;
}

// -------------------------------------------------------------------

// MarketByOrderSnapshot

// string market_id = 1;
inline void MarketByOrderSnapshot::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& MarketByOrderSnapshot::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderSnapshot.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketByOrderSnapshot::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketByOrderSnapshot.market_id)
}
inline std::string* MarketByOrderSnapshot::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketByOrderSnapshot.market_id)
  return _s;
}
inline const std::string& MarketByOrderSnapshot::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void MarketByOrderSnapshot::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketByOrderSnapshot::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketByOrderSnapshot::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketByOrderSnapshot.market_id)
  return _impl_.market_id_.Release();
}
inline void MarketByOrderSnapshot::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketByOrderSnapshot.market_id)
}

// .google.protobuf.Timestamp time = 2;
inline bool MarketByOrderSnapshot::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool MarketByOrderSnapshot::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketByOrderSnapshot::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketByOrderSnapshot::time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderSnapshot.time)
  return _internal_time();
}
inline void MarketByOrderSnapshot::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketByOrderSnapshot.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketByOrderSnapshot::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketByOrderSnapshot::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketByOrderSnapshot.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketByOrderSnapshot::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketByOrderSnapshot::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketByOrderSnapshot.time)
  return _msg;
}
inline void MarketByOrderSnapshot::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }

  } else {

  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketByOrderSnapshot.time)
}

// .t4proto.v1.common.MarketMode mode = 3;
inline void MarketByOrderSnapshot::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::t4proto::v1::common::MarketMode MarketByOrderSnapshot::mode() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderSnapshot.mode)
  return _internal_mode();
}
inline void MarketByOrderSnapshot::set_mode(::t4proto::v1::common::MarketMode value) {
   _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketByOrderSnapshot.mode)
}
inline ::t4proto::v1::common::MarketMode MarketByOrderSnapshot::_internal_mode() const {
  return static_cast<::t4proto::v1::common::MarketMode>(_impl_.mode_);
}
inline void MarketByOrderSnapshot::_internal_set_mode(::t4proto::v1::common::MarketMode value) {
  ;
  _impl_.mode_ = value;
}

// uint64 last_sequence = 4;
inline void MarketByOrderSnapshot::clear_last_sequence() {
  _impl_.last_sequence_ = ::uint64_t{0u};
}
inline ::uint64_t MarketByOrderSnapshot::last_sequence() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderSnapshot.last_sequence)
  return _internal_last_sequence();
}
inline void MarketByOrderSnapshot::set_last_sequence(::uint64_t value) {
  _internal_set_last_sequence(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketByOrderSnapshot.last_sequence)
}
inline ::uint64_t MarketByOrderSnapshot::_internal_last_sequence() const {
  return _impl_.last_sequence_;
}
inline void MarketByOrderSnapshot::_internal_set_last_sequence(::uint64_t value) {
  ;
  _impl_.last_sequence_ = value;
}

// repeated .t4proto.v1.market.MarketByOrderSnapshot.Order orders = 5;
inline int MarketByOrderSnapshot::_internal_orders_size() const {
  return _impl_.orders_.size();
}
inline int MarketByOrderSnapshot::orders_size() const {
  return _internal_orders_size();
}
inline void MarketByOrderSnapshot::clear_orders() {
  _impl_.orders_.Clear();
}
inline ::t4proto::v1::market::MarketByOrderSnapshot_Order* MarketByOrderSnapshot::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketByOrderSnapshot.orders)
  return _impl_.orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketByOrderSnapshot_Order >*
MarketByOrderSnapshot::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.market.MarketByOrderSnapshot.orders)
  return &_impl_.orders_;
}
inline const ::t4proto::v1::market::MarketByOrderSnapshot_Order& MarketByOrderSnapshot::_internal_orders(int index) const {
  return _impl_.orders_.Get(index);
}
inline const ::t4proto::v1::market::MarketByOrderSnapshot_Order& MarketByOrderSnapshot::orders(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderSnapshot.orders)
  return _internal_orders(index);
}
inline ::t4proto::v1::market::MarketByOrderSnapshot_Order* MarketByOrderSnapshot::_internal_add_orders() {
  return _impl_.orders_.Add();
}
inline ::t4proto::v1::market::MarketByOrderSnapshot_Order* MarketByOrderSnapshot::add_orders() {
  ::t4proto::v1::market::MarketByOrderSnapshot_Order* _add = _internal_add_orders();
  // @@protoc_insertion_point(field_add:t4proto.v1.market.MarketByOrderSnapshot.orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketByOrderSnapshot_Order >&
MarketByOrderSnapshot::orders() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.market.MarketByOrderSnapshot.orders)
  return _impl_.orders_;
}

// -------------------------------------------------------------------

// MarketByOrderUpdate_Update

// .t4proto.v1.market.MarketByOrderUpdate.UpdateType update_type = 1;
inline void MarketByOrderUpdate_Update::clear_update_type() {
  _impl_.update_type_ = 0;
}
inline ::t4proto::v1::market::MarketByOrderUpdate_UpdateType MarketByOrderUpdate_Update::update_type() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderUpdate.Update.update_type)
  return _internal_update_type();
}
inline void MarketByOrderUpdate_Update::set_update_type(::t4proto::v1::market::MarketByOrderUpdate_UpdateType value) {
   _internal_set_update_type(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketByOrderUpdate.Update.update_type)
}
inline ::t4proto::v1::market::MarketByOrderUpdate_UpdateType MarketByOrderUpdate_Update::_internal_update_type() const {
  return static_cast<::t4proto::v1::market::MarketByOrderUpdate_UpdateType>(_impl_.update_type_);
}
inline void MarketByOrderUpdate_Update::_internal_set_update_type(::t4proto::v1::market::MarketByOrderUpdate_UpdateType value) {
  ;
  _impl_.update_type_ = value;
}

// uint64 order_id = 2;
inline void MarketByOrderUpdate_Update::clear_order_id() {
  _impl_.order_id_ = ::uint64_t{0u};
}
inline ::uint64_t MarketByOrderUpdate_Update::order_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderUpdate.Update.order_id)
  return _internal_order_id();
}
inline void MarketByOrderUpdate_Update::set_order_id(::uint64_t value) {
  _internal_set_order_id(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketByOrderUpdate.Update.order_id)
}
inline ::uint64_t MarketByOrderUpdate_Update::_internal_order_id() const {
  return _impl_.order_id_;
}
inline void MarketByOrderUpdate_Update::_internal_set_order_id(::uint64_t value) {
  ;
  _impl_.order_id_ = value;
}

// .t4proto.v1.common.BidOffer bid_offer = 3;
inline void MarketByOrderUpdate_Update::clear_bid_offer() {
  _impl_.bid_offer_ = 0;
}
inline ::t4proto::v1::common::BidOffer MarketByOrderUpdate_Update::bid_offer() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderUpdate.Update.bid_offer)
  return _internal_bid_offer();
}
inline void MarketByOrderUpdate_Update::set_bid_offer(::t4proto::v1::common::BidOffer value) {
   _internal_set_bid_offer(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketByOrderUpdate.Update.bid_offer)
}
inline ::t4proto::v1::common::BidOffer MarketByOrderUpdate_Update::_internal_bid_offer() const {
  return static_cast<::t4proto::v1::common::BidOffer>(_impl_.bid_offer_);
}
inline void MarketByOrderUpdate_Update::_internal_set_bid_offer(::t4proto::v1::common::BidOffer value) {
  ;
  _impl_.bid_offer_ = value;
}

// .t4proto.v1.common.Price price = 4;
inline bool MarketByOrderUpdate_Update::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool MarketByOrderUpdate_Update::has_price() const {
  return _internal_has_price();
}
inline const ::t4proto::v1::common::Price& MarketByOrderUpdate_Update::_internal_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& MarketByOrderUpdate_Update::price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderUpdate.Update.price)
  return _internal_price();
}
inline void MarketByOrderUpdate_Update::unsafe_arena_set_allocated_price(
    ::t4proto::v1::common::Price* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketByOrderUpdate.Update.price)
}
inline ::t4proto::v1::common::Price* MarketByOrderUpdate_Update::release_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* MarketByOrderUpdate_Update::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketByOrderUpdate.Update.price)
  
  ::t4proto::v1::common::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* MarketByOrderUpdate_Update::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::t4proto::v1::common::Price* MarketByOrderUpdate_Update::mutable_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketByOrderUpdate.Update.price)
  return _msg;
}
inline void MarketByOrderUpdate_Update::set_allocated_price(::t4proto::v1::common::Price* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }

  } else {

  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketByOrderUpdate.Update.price)
}

// int32 volume = 5;
inline void MarketByOrderUpdate_Update::clear_volume() {
  _impl_.volume_ = 0;
}
inline ::int32_t MarketByOrderUpdate_Update::volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderUpdate.Update.volume)
  return _internal_volume();
}
inline void MarketByOrderUpdate_Update::set_volume(::int32_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketByOrderUpdate.Update.volume)
}
inline ::int32_t MarketByOrderUpdate_Update::_internal_volume() const {
  return _impl_.volume_;
}
inline void MarketByOrderUpdate_Update::_internal_set_volume(::int32_t value) {
  ;
  _impl_.volume_ = value;
}

// uint64 priority = 6;
inline void MarketByOrderUpdate_Update::clear_priority() {
  _impl_.priority_ = ::uint64_t{0u};
}
inline ::uint64_t MarketByOrderUpdate_Update::priority() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderUpdate.Update.priority)
  return _internal_priority();
}
inline void MarketByOrderUpdate_Update::set_priority(::uint64_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketByOrderUpdate.Update.priority)
}
inline ::uint64_t MarketByOrderUpdate_Update::_internal_priority() const {
  return _impl_.priority_;
}
inline void MarketByOrderUpdate_Update::_internal_set_priority(::uint64_t value) {
  ;
  _impl_.priority_ = value;
}

// -------------------------------------------------------------------

// MarketByOrderUpdate

// string market_id = 1;
inline void MarketByOrderUpdate::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& MarketByOrderUpdate::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderUpdate.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MarketByOrderUpdate::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketByOrderUpdate.market_id)
}
inline std::string* MarketByOrderUpdate::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketByOrderUpdate.market_id)
  return _s;
}
inline const std::string& MarketByOrderUpdate::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void MarketByOrderUpdate::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* MarketByOrderUpdate::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* MarketByOrderUpdate::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketByOrderUpdate.market_id)
  return _impl_.market_id_.Release();
}
inline void MarketByOrderUpdate::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketByOrderUpdate.market_id)
}

// .google.protobuf.Timestamp time = 2;
inline bool MarketByOrderUpdate::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool MarketByOrderUpdate::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketByOrderUpdate::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& MarketByOrderUpdate::time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderUpdate.time)
  return _internal_time();
}
inline void MarketByOrderUpdate::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.market.MarketByOrderUpdate.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketByOrderUpdate::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketByOrderUpdate::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.market.MarketByOrderUpdate.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketByOrderUpdate::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* MarketByOrderUpdate::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketByOrderUpdate.time)
  return _msg;
}
inline void MarketByOrderUpdate::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }

  } else {

  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketByOrderUpdate.time)
}

// .t4proto.v1.common.MarketMode mode = 3;
inline void MarketByOrderUpdate::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::t4proto::v1::common::MarketMode MarketByOrderUpdate::mode() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderUpdate.mode)
  return _internal_mode();
}
inline void MarketByOrderUpdate::set_mode(::t4proto::v1::common::MarketMode value) {
   _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketByOrderUpdate.mode)
}
inline ::t4proto::v1::common::MarketMode MarketByOrderUpdate::_internal_mode() const {
  return static_cast<::t4proto::v1::common::MarketMode>(_impl_.mode_);
}
inline void MarketByOrderUpdate::_internal_set_mode(::t4proto::v1::common::MarketMode value) {
  ;
  _impl_.mode_ = value;
}

// uint64 sequence = 4;
inline void MarketByOrderUpdate::clear_sequence() {
  _impl_.sequence_ = ::uint64_t{0u};
}
inline ::uint64_t MarketByOrderUpdate::sequence() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderUpdate.sequence)
  return _internal_sequence();
}
inline void MarketByOrderUpdate::set_sequence(::uint64_t value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.market.MarketByOrderUpdate.sequence)
}
inline ::uint64_t MarketByOrderUpdate::_internal_sequence() const {
  return _impl_.sequence_;
}
inline void MarketByOrderUpdate::_internal_set_sequence(::uint64_t value) {
  ;
  _impl_.sequence_ = value;
}

// repeated .t4proto.v1.market.MarketByOrderUpdate.Update updates = 5;
inline int MarketByOrderUpdate::_internal_updates_size() const {
  return _impl_.updates_.size();
}
inline int MarketByOrderUpdate::updates_size() const {
  return _internal_updates_size();
}
inline void MarketByOrderUpdate::clear_updates() {
  _impl_.updates_.Clear();
}
inline ::t4proto::v1::market::MarketByOrderUpdate_Update* MarketByOrderUpdate::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:t4proto.v1.market.MarketByOrderUpdate.updates)
  return _impl_.updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketByOrderUpdate_Update >*
MarketByOrderUpdate::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.market.MarketByOrderUpdate.updates)
  return &_impl_.updates_;
}
inline const ::t4proto::v1::market::MarketByOrderUpdate_Update& MarketByOrderUpdate::_internal_updates(int index) const {
  return _impl_.updates_.Get(index);
}
inline const ::t4proto::v1::market::MarketByOrderUpdate_Update& MarketByOrderUpdate::updates(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.market.MarketByOrderUpdate.updates)
  return _internal_updates(index);
}
inline ::t4proto::v1::market::MarketByOrderUpdate_Update* MarketByOrderUpdate::_internal_add_updates() {
  return _impl_.updates_.Add();
}
inline ::t4proto::v1::market::MarketByOrderUpdate_Update* MarketByOrderUpdate::add_updates() {
  ::t4proto::v1::market::MarketByOrderUpdate_Update* _add = _internal_add_updates();
  // @@protoc_insertion_point(field_add:t4proto.v1.market.MarketByOrderUpdate.updates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::market::MarketByOrderUpdate_Update >&
MarketByOrderUpdate::updates() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.market.MarketByOrderUpdate.updates)
  return _impl_.updates_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace market
}  // namespace v1
}  // namespace t4proto


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::t4proto::v1::market::MarketByOrderUpdate_UpdateType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::t4proto::v1::market::MarketByOrderUpdate_UpdateType>() {
  return ::t4proto::v1::market::MarketByOrderUpdate_UpdateType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_t4_2fv1_2fmarket_2fmarket_2eproto_2epb_2eh
