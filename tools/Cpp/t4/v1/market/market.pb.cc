// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: t4/v1/market/market.proto

#include "t4/v1/market/market.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace t4proto {
namespace v1 {
namespace market {
PROTOBUF_CONSTEXPR MarketDepthSubscribe::MarketDepthSubscribe(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exchange_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contract_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.buffer_)*/ 0

  , /*decltype(_impl_.depth_levels_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketDepthSubscribeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDepthSubscribeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDepthSubscribeDefaultTypeInternal() {}
  union {
    MarketDepthSubscribe _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDepthSubscribeDefaultTypeInternal _MarketDepthSubscribe_default_instance_;
PROTOBUF_CONSTEXPR MarketDepthSubscribeReject::MarketDepthSubscribeReject(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.mode_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketDepthSubscribeRejectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDepthSubscribeRejectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDepthSubscribeRejectDefaultTypeInternal() {}
  union {
    MarketDepthSubscribeReject _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDepthSubscribeRejectDefaultTypeInternal _MarketDepthSubscribeReject_default_instance_;
PROTOBUF_CONSTEXPR MarketByOrderSubscribe::MarketByOrderSubscribe(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exchange_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contract_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.subscribe_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketByOrderSubscribeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketByOrderSubscribeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketByOrderSubscribeDefaultTypeInternal() {}
  union {
    MarketByOrderSubscribe _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketByOrderSubscribeDefaultTypeInternal _MarketByOrderSubscribe_default_instance_;
PROTOBUF_CONSTEXPR MarketByOrderSubscribeReject::MarketByOrderSubscribeReject(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.mode_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketByOrderSubscribeRejectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketByOrderSubscribeRejectDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketByOrderSubscribeRejectDefaultTypeInternal() {}
  union {
    MarketByOrderSubscribeReject _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketByOrderSubscribeRejectDefaultTypeInternal _MarketByOrderSubscribeReject_default_instance_;
PROTOBUF_CONSTEXPR MarketDetails_LegItem::MarketDetails_LegItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.delta_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.group_)*/ 0

  , /*decltype(_impl_.volume_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketDetails_LegItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDetails_LegItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDetails_LegItemDefaultTypeInternal() {}
  union {
    MarketDetails_LegItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDetails_LegItemDefaultTypeInternal _MarketDetails_LegItem_default_instance_;
PROTOBUF_CONSTEXPR MarketDetails::MarketDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.legs_)*/{}
  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.exchange_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contract_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_ref_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.group_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.details_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.price_code_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.underlying_market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.vtt_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.point_value_)*/nullptr
  , /*decltype(_impl_.min_price_increment_)*/nullptr
  , /*decltype(_impl_.activation_date_)*/nullptr
  , /*decltype(_impl_.last_trading_date_)*/nullptr
  , /*decltype(_impl_.last_client_update_time_)*/nullptr
  , /*decltype(_impl_.min_cab_price_)*/nullptr
  , /*decltype(_impl_.strike_price_)*/nullptr
  , /*decltype(_impl_.expiry_date_)*/ 0

  , /*decltype(_impl_.contract_type_)*/ 0

  , /*decltype(_impl_.decimals_)*/ 0

  , /*decltype(_impl_.order_types_)*/ 0

  , /*decltype(_impl_.delist_date_)*/ ::int64_t{0}

  , /*decltype(_impl_.exchange_delist_date_)*/ ::int64_t{0}

  , /*decltype(_impl_.strategy_type_)*/ 0

  , /*decltype(_impl_.real_decimals_)*/ 0

  , /*decltype(_impl_.display_decimals_)*/ 0

  , /*decltype(_impl_.clearing_decimals_)*/ 0

  , /*decltype(_impl_.strategy_ratio_)*/ 0

  , /*decltype(_impl_.volume_increment_)*/ 0

  , /*decltype(_impl_.disabled_)*/ false

  , /*decltype(_impl_.maint_intra_margin_)*/ 0

  , /*decltype(_impl_.maint_margin_)*/ 0

  , /*decltype(_impl_.maint_vol_scan_)*/ 0
} {}
struct MarketDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDetailsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDetailsDefaultTypeInternal() {}
  union {
    MarketDetails _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDetailsDefaultTypeInternal _MarketDetails_default_instance_;
PROTOBUF_CONSTEXPR MarketDepth_DepthLine::MarketDepth_DepthLine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.volume_)*/ 0

  , /*decltype(_impl_.num_orders_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketDepth_DepthLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDepth_DepthLineDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDepth_DepthLineDefaultTypeInternal() {}
  union {
    MarketDepth_DepthLine _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDepth_DepthLineDefaultTypeInternal _MarketDepth_DepthLine_default_instance_;
PROTOBUF_CONSTEXPR MarketDepth_TradeData::MarketDepth_TradeData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.last_trade_price_)*/nullptr
  , /*decltype(_impl_.last_trade_spd_price_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.total_traded_volume_)*/ 0

  , /*decltype(_impl_.total_trade_count_)*/ 0

  , /*decltype(_impl_.last_trade_volume_)*/ 0

  , /*decltype(_impl_.last_trade_total_volume_)*/ 0

  , /*decltype(_impl_.last_trade_spd_volume_)*/ 0

  , /*decltype(_impl_.last_trade_spd_total_volume_)*/ 0

  , /*decltype(_impl_.due_to_spread_)*/ false

  , /*decltype(_impl_.at_bid_or_offer_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketDepth_TradeDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDepth_TradeDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDepth_TradeDataDefaultTypeInternal() {}
  union {
    MarketDepth_TradeData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDepth_TradeDataDefaultTypeInternal _MarketDepth_TradeData_default_instance_;
PROTOBUF_CONSTEXPR MarketDepth::MarketDepth(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bids_)*/{}
  , /*decltype(_impl_.offers_)*/{}
  , /*decltype(_impl_.implied_bids_)*/{}
  , /*decltype(_impl_.implied_offers_)*/{}
  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.trade_data_)*/nullptr
  , /*decltype(_impl_.depth_levels_)*/ 0

  , /*decltype(_impl_.depth_buffer_)*/ 0

  , /*decltype(_impl_.delayed_)*/ false

  , /*decltype(_impl_.mode_)*/ 0

  , /*decltype(_impl_.flags_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketDepthDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDepthDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDepthDefaultTypeInternal() {}
  union {
    MarketDepth _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDepthDefaultTypeInternal _MarketDepth_default_instance_;
PROTOBUF_CONSTEXPR MarketDepthTrade::MarketDepthTrade(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.order_volumes_)*/ {}
  ,/* _impl_._order_volumes_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.last_trade_price_)*/nullptr
  , /*decltype(_impl_.total_traded_volume_)*/ 0

  , /*decltype(_impl_.last_trade_volume_)*/ 0

  , /*decltype(_impl_.at_bid_or_offer_)*/ 0

  , /*decltype(_impl_.due_to_spread_)*/ false

  , /*decltype(_impl_.delayed_)*/ false

  , /*decltype(_impl_.total_trade_count_)*/ 0

  , /*decltype(_impl_.mode_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketDepthTradeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketDepthTradeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketDepthTradeDefaultTypeInternal() {}
  union {
    MarketDepthTrade _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketDepthTradeDefaultTypeInternal _MarketDepthTrade_default_instance_;
PROTOBUF_CONSTEXPR MarketHighLow::MarketHighLow(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.open_price_)*/nullptr
  , /*decltype(_impl_.high_price_)*/nullptr
  , /*decltype(_impl_.low_price_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.trade_date_)*/ ::int64_t{0}

  , /*decltype(_impl_.delayed_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketHighLowDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketHighLowDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketHighLowDefaultTypeInternal() {}
  union {
    MarketHighLow _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketHighLowDefaultTypeInternal _MarketHighLow_default_instance_;
PROTOBUF_CONSTEXPR MarketPriceLimits::MarketPriceLimits(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.high_price_)*/nullptr
  , /*decltype(_impl_.low_price_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.delayed_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketPriceLimitsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketPriceLimitsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketPriceLimitsDefaultTypeInternal() {}
  union {
    MarketPriceLimits _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketPriceLimitsDefaultTypeInternal _MarketPriceLimits_default_instance_;
PROTOBUF_CONSTEXPR MarketSettlement::MarketSettlement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exchange_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.settlement_held_price_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.settlement_price_)*/nullptr
  , /*decltype(_impl_.settlement_time_)*/nullptr
  , /*decltype(_impl_.settlement_trade_date_)*/nullptr
  , /*decltype(_impl_.settlement_held_time_)*/nullptr
  , /*decltype(_impl_.settlement_held_trade_date_)*/nullptr
  , /*decltype(_impl_.implied_price_)*/nullptr
  , /*decltype(_impl_.implied_held_price_)*/nullptr
  , /*decltype(_impl_.implied_time_)*/nullptr
  , /*decltype(_impl_.open_interest_time_)*/nullptr
  , /*decltype(_impl_.open_interest_trade_date_)*/nullptr
  , /*decltype(_impl_.cleared_volume_time_)*/nullptr
  , /*decltype(_impl_.cleared_volume_trade_date_)*/nullptr
  , /*decltype(_impl_.vwap_price_)*/nullptr
  , /*decltype(_impl_.vwap_time_)*/nullptr
  , /*decltype(_impl_.vwap_trade_date_)*/nullptr
  , /*decltype(_impl_.delayed_)*/ false

  , /*decltype(_impl_.open_interest_)*/ 0

  , /*decltype(_impl_.cleared_volume_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketSettlementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketSettlementDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketSettlementDefaultTypeInternal() {}
  union {
    MarketSettlement _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketSettlementDefaultTypeInternal _MarketSettlement_default_instance_;
PROTOBUF_CONSTEXPR MarketSnapshotMessage::MarketSnapshotMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct MarketSnapshotMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketSnapshotMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketSnapshotMessageDefaultTypeInternal() {}
  union {
    MarketSnapshotMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketSnapshotMessageDefaultTypeInternal _MarketSnapshotMessage_default_instance_;
PROTOBUF_CONSTEXPR MarketSnapshot::MarketSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.messages_)*/{}
  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.mode_)*/ 0

  , /*decltype(_impl_.due_to_connection_)*/ false

  , /*decltype(_impl_.delayed_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketSnapshotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketSnapshotDefaultTypeInternal() {}
  union {
    MarketSnapshot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketSnapshotDefaultTypeInternal _MarketSnapshot_default_instance_;
PROTOBUF_CONSTEXPR MarketByOrderSnapshot_Order::MarketByOrderSnapshot_Order(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.order_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.bid_offer_)*/ 0

  , /*decltype(_impl_.volume_)*/ 0

  , /*decltype(_impl_.priority_)*/ ::uint64_t{0u}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketByOrderSnapshot_OrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketByOrderSnapshot_OrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketByOrderSnapshot_OrderDefaultTypeInternal() {}
  union {
    MarketByOrderSnapshot_Order _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketByOrderSnapshot_OrderDefaultTypeInternal _MarketByOrderSnapshot_Order_default_instance_;
PROTOBUF_CONSTEXPR MarketByOrderSnapshot::MarketByOrderSnapshot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.orders_)*/{}
  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.last_sequence_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.mode_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketByOrderSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketByOrderSnapshotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketByOrderSnapshotDefaultTypeInternal() {}
  union {
    MarketByOrderSnapshot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketByOrderSnapshotDefaultTypeInternal _MarketByOrderSnapshot_default_instance_;
PROTOBUF_CONSTEXPR MarketByOrderUpdate_Update::MarketByOrderUpdate_Update(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.order_id_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.update_type_)*/ 0

  , /*decltype(_impl_.bid_offer_)*/ 0

  , /*decltype(_impl_.priority_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.volume_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketByOrderUpdate_UpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketByOrderUpdate_UpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketByOrderUpdate_UpdateDefaultTypeInternal() {}
  union {
    MarketByOrderUpdate_Update _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketByOrderUpdate_UpdateDefaultTypeInternal _MarketByOrderUpdate_Update_default_instance_;
PROTOBUF_CONSTEXPR MarketByOrderUpdate::MarketByOrderUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.updates_)*/{}
  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.sequence_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.mode_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MarketByOrderUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MarketByOrderUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MarketByOrderUpdateDefaultTypeInternal() {}
  union {
    MarketByOrderUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MarketByOrderUpdateDefaultTypeInternal _MarketByOrderUpdate_default_instance_;
}  // namespace market
}  // namespace v1
}  // namespace t4proto
static ::_pb::Metadata file_level_metadata_t4_2fv1_2fmarket_2fmarket_2eproto[19];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_t4_2fv1_2fmarket_2fmarket_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_t4_2fv1_2fmarket_2fmarket_2eproto = nullptr;
const ::uint32_t TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthSubscribe, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthSubscribe, _impl_.exchange_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthSubscribe, _impl_.contract_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthSubscribe, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthSubscribe, _impl_.buffer_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthSubscribe, _impl_.depth_levels_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthSubscribeReject, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthSubscribeReject, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthSubscribeReject, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthSubscribeReject, _impl_.mode_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSubscribe, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSubscribe, _impl_.exchange_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSubscribe, _impl_.contract_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSubscribe, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSubscribe, _impl_.subscribe_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSubscribeReject, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSubscribeReject, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSubscribeReject, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSubscribeReject, _impl_.mode_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails_LegItem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails_LegItem, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails_LegItem, _impl_.group_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails_LegItem, _impl_.volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails_LegItem, _impl_.delta_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails_LegItem, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.exchange_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.contract_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.expiry_date_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.contract_type_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.decimals_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.point_value_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.min_price_increment_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.order_types_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.activation_date_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.last_trading_date_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.last_client_update_time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.delist_date_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.exchange_delist_date_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.market_ref_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.group_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.legs_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.details_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.strategy_type_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.price_code_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.real_decimals_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.display_decimals_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.clearing_decimals_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.min_cab_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.strike_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.volume_increment_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.strategy_ratio_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.disabled_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.underlying_market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.vtt_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.maint_intra_margin_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.maint_margin_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDetails, _impl_.maint_vol_scan_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    1,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_DepthLine, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_DepthLine, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_DepthLine, _impl_.volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_DepthLine, _impl_.num_orders_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.total_traded_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.total_trade_count_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.last_trade_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.last_trade_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.last_trade_total_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.last_trade_spd_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.last_trade_spd_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.last_trade_spd_total_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.due_to_spread_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.at_bid_or_offer_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth_TradeData, _impl_.time_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.depth_levels_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.depth_buffer_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.delayed_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.bids_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.offers_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.implied_bids_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.implied_offers_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.mode_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.flags_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepth, _impl_.trade_data_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.total_traded_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.last_trade_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.due_to_spread_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.at_bid_or_offer_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.delayed_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.order_volumes_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.total_trade_count_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.last_trade_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketDepthTrade, _impl_.mode_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketHighLow, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketHighLow, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketHighLow, _impl_.open_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketHighLow, _impl_.high_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketHighLow, _impl_.low_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketHighLow, _impl_.trade_date_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketHighLow, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketHighLow, _impl_.delayed_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketPriceLimits, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketPriceLimits, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketPriceLimits, _impl_.high_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketPriceLimits, _impl_.low_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketPriceLimits, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketPriceLimits, _impl_.delayed_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.exchange_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.delayed_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.settlement_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.settlement_time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.settlement_trade_date_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.settlement_held_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.settlement_held_time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.settlement_held_trade_date_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.implied_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.implied_held_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.implied_time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.open_interest_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.open_interest_time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.open_interest_trade_date_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.cleared_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.cleared_volume_time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.cleared_volume_trade_date_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.vwap_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.vwap_time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSettlement, _impl_.vwap_trade_date_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSnapshotMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSnapshotMessage, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSnapshotMessage, _impl_.payload_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSnapshot, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSnapshot, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSnapshot, _impl_.mode_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSnapshot, _impl_.due_to_connection_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSnapshot, _impl_.delayed_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSnapshot, _impl_.messages_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot_Order, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot_Order, _impl_.order_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot_Order, _impl_.bid_offer_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot_Order, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot_Order, _impl_.volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot_Order, _impl_.priority_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot, _impl_.mode_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot, _impl_.last_sequence_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderSnapshot, _impl_.orders_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate_Update, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate_Update, _impl_.update_type_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate_Update, _impl_.order_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate_Update, _impl_.bid_offer_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate_Update, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate_Update, _impl_.volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate_Update, _impl_.priority_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate, _impl_.mode_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate, _impl_.sequence_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketByOrderUpdate, _impl_.updates_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::t4proto::v1::market::MarketDepthSubscribe)},
        { 13, -1, -1, sizeof(::t4proto::v1::market::MarketDepthSubscribeReject)},
        { 24, -1, -1, sizeof(::t4proto::v1::market::MarketByOrderSubscribe)},
        { 36, -1, -1, sizeof(::t4proto::v1::market::MarketByOrderSubscribeReject)},
        { 47, -1, -1, sizeof(::t4proto::v1::market::MarketDetails_LegItem)},
        { 60, 101, -1, sizeof(::t4proto::v1::market::MarketDetails)},
        { 134, -1, -1, sizeof(::t4proto::v1::market::MarketDepth_DepthLine)},
        { 145, -1, -1, sizeof(::t4proto::v1::market::MarketDepth_TradeData)},
        { 164, -1, -1, sizeof(::t4proto::v1::market::MarketDepth)},
        { 184, -1, -1, sizeof(::t4proto::v1::market::MarketDepthTrade)},
        { 203, -1, -1, sizeof(::t4proto::v1::market::MarketHighLow)},
        { 218, -1, -1, sizeof(::t4proto::v1::market::MarketPriceLimits)},
        { 231, -1, -1, sizeof(::t4proto::v1::market::MarketSettlement)},
        { 260, -1, -1, sizeof(::t4proto::v1::market::MarketSnapshotMessage)},
        { 274, -1, -1, sizeof(::t4proto::v1::market::MarketSnapshot)},
        { 287, -1, -1, sizeof(::t4proto::v1::market::MarketByOrderSnapshot_Order)},
        { 300, -1, -1, sizeof(::t4proto::v1::market::MarketByOrderSnapshot)},
        { 313, -1, -1, sizeof(::t4proto::v1::market::MarketByOrderUpdate_Update)},
        { 327, -1, -1, sizeof(::t4proto::v1::market::MarketByOrderUpdate)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::t4proto::v1::market::_MarketDepthSubscribe_default_instance_._instance,
    &::t4proto::v1::market::_MarketDepthSubscribeReject_default_instance_._instance,
    &::t4proto::v1::market::_MarketByOrderSubscribe_default_instance_._instance,
    &::t4proto::v1::market::_MarketByOrderSubscribeReject_default_instance_._instance,
    &::t4proto::v1::market::_MarketDetails_LegItem_default_instance_._instance,
    &::t4proto::v1::market::_MarketDetails_default_instance_._instance,
    &::t4proto::v1::market::_MarketDepth_DepthLine_default_instance_._instance,
    &::t4proto::v1::market::_MarketDepth_TradeData_default_instance_._instance,
    &::t4proto::v1::market::_MarketDepth_default_instance_._instance,
    &::t4proto::v1::market::_MarketDepthTrade_default_instance_._instance,
    &::t4proto::v1::market::_MarketHighLow_default_instance_._instance,
    &::t4proto::v1::market::_MarketPriceLimits_default_instance_._instance,
    &::t4proto::v1::market::_MarketSettlement_default_instance_._instance,
    &::t4proto::v1::market::_MarketSnapshotMessage_default_instance_._instance,
    &::t4proto::v1::market::_MarketSnapshot_default_instance_._instance,
    &::t4proto::v1::market::_MarketByOrderSnapshot_Order_default_instance_._instance,
    &::t4proto::v1::market::_MarketByOrderSnapshot_default_instance_._instance,
    &::t4proto::v1::market::_MarketByOrderUpdate_Update_default_instance_._instance,
    &::t4proto::v1::market::_MarketByOrderUpdate_default_instance_._instance,
};
const char descriptor_table_protodef_t4_2fv1_2fmarket_2fmarket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\031t4/v1/market/market.proto\022\021t4proto.v1."
    "market\032\037google/protobuf/timestamp.proto\032"
    "\030t4/v1/common/enums.proto\032\030t4/v1/common/"
    "price.proto\"\271\001\n\024MarketDepthSubscribe\022\023\n\013"
    "exchange_id\030\001 \001(\t\022\023\n\013contract_id\030\002 \001(\t\022\021"
    "\n\tmarket_id\030\003 \001(\t\022.\n\006buffer\030\004 \001(\0162\036.t4pr"
    "oto.v1.common.DepthBuffer\0224\n\014depth_level"
    "s\030\005 \001(\0162\036.t4proto.v1.common.DepthLevels\""
    "\206\001\n\032MarketDepthSubscribeReject\022\021\n\tmarket"
    "_id\030\001 \001(\t\022(\n\004time\030\002 \001(\0132\032.google.protobu"
    "f.Timestamp\022+\n\004mode\030\003 \001(\0162\035.t4proto.v1.c"
    "ommon.MarketMode\"h\n\026MarketByOrderSubscri"
    "be\022\023\n\013exchange_id\030\001 \001(\t\022\023\n\013contract_id\030\002"
    " \001(\t\022\021\n\tmarket_id\030\003 \001(\t\022\021\n\tsubscribe\030\004 \001"
    "(\010\"\210\001\n\034MarketByOrderSubscribeReject\022\021\n\tm"
    "arket_id\030\001 \001(\t\022(\n\004time\030\002 \001(\0132\032.google.pr"
    "otobuf.Timestamp\022+\n\004mode\030\003 \001(\0162\035.t4proto"
    ".v1.common.MarketMode\"\304\t\n\rMarketDetails\022"
    "\021\n\tmarket_id\030\001 \001(\t\022\023\n\013exchange_id\030\002 \001(\t\022"
    "\023\n\013contract_id\030\003 \001(\t\022\023\n\013expiry_date\030\004 \001("
    "\005\0226\n\rcontract_type\030\005 \001(\0162\037.t4proto.v1.co"
    "mmon.ContractType\022\020\n\010decimals\030\006 \001(\005\022/\n\013p"
    "oint_value\030\007 \001(\0132\032.t4proto.v1.common.Dec"
    "imal\0225\n\023min_price_increment\030\010 \001(\0132\030.t4pr"
    "oto.v1.common.Price\022\023\n\013order_types\030\t \001(\005"
    "\0223\n\017activation_date\030\n \001(\0132\032.google.proto"
    "buf.Timestamp\0225\n\021last_trading_date\030\013 \001(\013"
    "2\032.google.protobuf.Timestamp\022;\n\027last_cli"
    "ent_update_time\030\014 \001(\0132\032.google.protobuf."
    "Timestamp\022\023\n\013delist_date\030\r \001(\003\022\034\n\024exchan"
    "ge_delist_date\030\016 \001(\003\022\022\n\nmarket_ref\030\017 \001(\t"
    "\022\r\n\005group\030\020 \001(\t\0226\n\004legs\030\021 \003(\0132(.t4proto."
    "v1.market.MarketDetails.LegItem\022\017\n\007detai"
    "ls\030\022 \001(\t\0226\n\rstrategy_type\030\023 \001(\0162\037.t4prot"
    "o.v1.common.StrategyType\022\022\n\nprice_code\030\024"
    " \001(\t\022\025\n\rreal_decimals\030\025 \001(\005\022\030\n\020display_d"
    "ecimals\030\026 \001(\005\022\031\n\021clearing_decimals\030\027 \001(\005"
    "\0224\n\rmin_cab_price\030\030 \001(\0132\030.t4proto.v1.com"
    "mon.PriceH\000\210\001\001\0223\n\014strike_price\030\031 \001(\0132\030.t"
    "4proto.v1.common.PriceH\001\210\001\001\022\030\n\020volume_in"
    "crement\030\032 \001(\005\022\026\n\016strategy_ratio\030\033 \001(\001\022\020\n"
    "\010disabled\030\034 \001(\010\022\034\n\024underlying_market_id\030"
    "\035 \001(\t\022\013\n\003vtt\030\036 \001(\t\022\032\n\022maint_intra_margin"
    "\030\037 \001(\001\022\024\n\014maint_margin\030  \001(\001\022\026\n\016maint_vo"
    "l_scan\030! \001(\001\032s\n\007LegItem\022\021\n\tmarket_id\030\001 \001"
    "(\t\022\r\n\005group\030\002 \001(\005\022\016\n\006volume\030\003 \001(\005\022\r\n\005del"
    "ta\030\004 \001(\t\022\'\n\005price\030\005 \001(\0132\030.t4proto.v1.com"
    "mon.PriceB\020\n\016_min_cab_priceB\017\n\r_strike_p"
    "rice\"\331\010\n\013MarketDepth\022\021\n\tmarket_id\030\001 \001(\t\022"
    "4\n\014depth_levels\030\002 \001(\0162\036.t4proto.v1.commo"
    "n.DepthLevels\0224\n\014depth_buffer\030\003 \001(\0162\036.t4"
    "proto.v1.common.DepthBuffer\022(\n\004time\030\004 \001("
    "\0132\032.google.protobuf.Timestamp\022\017\n\007delayed"
    "\030\005 \001(\010\0226\n\004bids\030\006 \003(\0132(.t4proto.v1.market"
    ".MarketDepth.DepthLine\0228\n\006offers\030\007 \003(\0132("
    ".t4proto.v1.market.MarketDepth.DepthLine"
    "\022>\n\014implied_bids\030\010 \003(\0132(.t4proto.v1.mark"
    "et.MarketDepth.DepthLine\022@\n\016implied_offe"
    "rs\030\t \003(\0132(.t4proto.v1.market.MarketDepth"
    ".DepthLine\022+\n\004mode\030\n \001(\0162\035.t4proto.v1.co"
    "mmon.MarketMode\022.\n\005flags\030\013 \001(\0162\037.t4proto"
    ".v1.common.MarketFlags2\022<\n\ntrade_data\030\014 "
    "\001(\0132(.t4proto.v1.market.MarketDepth.Trad"
    "eData\032X\n\tDepthLine\022\'\n\005price\030\001 \001(\0132\030.t4pr"
    "oto.v1.common.Price\022\016\n\006volume\030\002 \001(\005\022\022\n\nn"
    "um_orders\030\003 \001(\005\032\246\003\n\tTradeData\022\033\n\023total_t"
    "raded_volume\030\001 \001(\005\022\031\n\021total_trade_count\030"
    "\002 \001(\005\0222\n\020last_trade_price\030\003 \001(\0132\030.t4prot"
    "o.v1.common.Price\022\031\n\021last_trade_volume\030\004"
    " \001(\005\022\037\n\027last_trade_total_volume\030\005 \001(\005\0226\n"
    "\024last_trade_spd_price\030\006 \001(\0132\030.t4proto.v1"
    ".common.Price\022\035\n\025last_trade_spd_volume\030\007"
    " \001(\005\022#\n\033last_trade_spd_total_volume\030\010 \001("
    "\005\022\025\n\rdue_to_spread\030\t \001(\010\0224\n\017at_bid_or_of"
    "fer\030\n \001(\0162\033.t4proto.v1.common.BidOffer\022("
    "\n\004time\030\013 \001(\0132\032.google.protobuf.Timestamp"
    "\"\370\002\n\020MarketDepthTrade\022\021\n\tmarket_id\030\001 \001(\t"
    "\022(\n\004time\030\002 \001(\0132\032.google.protobuf.Timesta"
    "mp\022\033\n\023total_traded_volume\030\003 \001(\005\022\031\n\021last_"
    "trade_volume\030\004 \001(\005\022\025\n\rdue_to_spread\030\005 \001("
    "\010\0224\n\017at_bid_or_offer\030\006 \001(\0162\033.t4proto.v1."
    "common.BidOffer\022\017\n\007delayed\030\007 \001(\010\022\025\n\rorde"
    "r_volumes\030\010 \003(\005\022\031\n\021total_trade_count\030\t \001"
    "(\005\0222\n\020last_trade_price\030\n \001(\0132\030.t4proto.v"
    "1.common.Price\022+\n\004mode\030\013 \001(\0162\035.t4proto.v"
    "1.common.MarketMode\"\372\001\n\rMarketHighLow\022\021\n"
    "\tmarket_id\030\001 \001(\t\022,\n\nopen_price\030\002 \001(\0132\030.t"
    "4proto.v1.common.Price\022,\n\nhigh_price\030\003 \001"
    "(\0132\030.t4proto.v1.common.Price\022+\n\tlow_pric"
    "e\030\004 \001(\0132\030.t4proto.v1.common.Price\022\022\n\ntra"
    "de_date\030\005 \001(\003\022(\n\004time\030\006 \001(\0132\032.google.pro"
    "tobuf.Timestamp\022\017\n\007delayed\030\007 \001(\010\"\274\001\n\021Mar"
    "ketPriceLimits\022\021\n\tmarket_id\030\001 \001(\t\022,\n\nhig"
    "h_price\030\002 \001(\0132\030.t4proto.v1.common.Price\022"
    "+\n\tlow_price\030\003 \001(\0132\030.t4proto.v1.common.P"
    "rice\022(\n\004time\030\004 \001(\0132\032.google.protobuf.Tim"
    "estamp\022\017\n\007delayed\030\005 \001(\010\"\320\007\n\020MarketSettle"
    "ment\022\023\n\013exchange_id\030\001 \001(\t\022\021\n\tmarket_id\030\002"
    " \001(\t\022\017\n\007delayed\030\003 \001(\010\0222\n\020settlement_pric"
    "e\030\004 \001(\0132\030.t4proto.v1.common.Price\0223\n\017set"
    "tlement_time\030\005 \001(\0132\032.google.protobuf.Tim"
    "estamp\0229\n\025settlement_trade_date\030\006 \001(\0132\032."
    "google.protobuf.Timestamp\022\035\n\025settlement_"
    "held_price\030\007 \001(\t\0228\n\024settlement_held_time"
    "\030\010 \001(\0132\032.google.protobuf.Timestamp\022>\n\032se"
    "ttlement_held_trade_date\030\t \001(\0132\032.google."
    "protobuf.Timestamp\022/\n\rimplied_price\030\n \001("
    "\0132\030.t4proto.v1.common.Price\0224\n\022implied_h"
    "eld_price\030\013 \001(\0132\030.t4proto.v1.common.Pric"
    "e\0220\n\014implied_time\030\014 \001(\0132\032.google.protobu"
    "f.Timestamp\022\025\n\ropen_interest\030\r \001(\005\0226\n\022op"
    "en_interest_time\030\016 \001(\0132\032.google.protobuf"
    ".Timestamp\022<\n\030open_interest_trade_date\030\017"
    " \001(\0132\032.google.protobuf.Timestamp\022\026\n\016clea"
    "red_volume\030\020 \001(\005\0227\n\023cleared_volume_time\030"
    "\021 \001(\0132\032.google.protobuf.Timestamp\022=\n\031cle"
    "ared_volume_trade_date\030\022 \001(\0132\032.google.pr"
    "otobuf.Timestamp\022,\n\nvwap_price\030\023 \001(\0132\030.t"
    "4proto.v1.common.Price\022-\n\tvwap_time\030\024 \001("
    "\0132\032.google.protobuf.Timestamp\0223\n\017vwap_tr"
    "ade_date\030\025 \001(\0132\032.google.protobuf.Timesta"
    "mp\"\341\002\n\025MarketSnapshotMessage\0226\n\014market_d"
    "epth\030\003 \001(\0132\036.t4proto.v1.market.MarketDep"
    "thH\000\022A\n\022market_depth_trade\030\004 \001(\0132#.t4pro"
    "to.v1.market.MarketDepthTradeH\000\022;\n\017marke"
    "t_high_low\030\005 \001(\0132 .t4proto.v1.market.Mar"
    "ketHighLowH\000\022C\n\023market_price_limits\030\006 \001("
    "\0132$.t4proto.v1.market.MarketPriceLimitsH"
    "\000\022@\n\021market_settlement\030\007 \001(\0132#.t4proto.v"
    "1.market.MarketSettlementH\000B\t\n\007payload\"\270"
    "\001\n\016MarketSnapshot\022\021\n\tmarket_id\030\001 \001(\t\022+\n\004"
    "mode\030\002 \001(\0162\035.t4proto.v1.common.MarketMod"
    "e\022\031\n\021due_to_connection\030\003 \001(\010\022\017\n\007delayed\030"
    "\004 \001(\010\022:\n\010messages\030\005 \003(\0132(.t4proto.v1.mar"
    "ket.MarketSnapshotMessage\"\357\002\n\025MarketByOr"
    "derSnapshot\022\021\n\tmarket_id\030\001 \001(\t\022(\n\004time\030\002"
    " \001(\0132\032.google.protobuf.Timestamp\022+\n\004mode"
    "\030\003 \001(\0162\035.t4proto.v1.common.MarketMode\022\025\n"
    "\rlast_sequence\030\004 \001(\004\022>\n\006orders\030\005 \003(\0132..t"
    "4proto.v1.market.MarketByOrderSnapshot.O"
    "rder\032\224\001\n\005Order\022\020\n\010order_id\030\001 \001(\004\022.\n\tbid_"
    "offer\030\002 \001(\0162\033.t4proto.v1.common.BidOffer"
    "\022\'\n\005price\030\003 \001(\0132\030.t4proto.v1.common.Pric"
    "e\022\016\n\006volume\030\004 \001(\005\022\020\n\010priority\030\005 \001(\004\"\215\004\n\023"
    "MarketByOrderUpdate\022\021\n\tmarket_id\030\001 \001(\t\022("
    "\n\004time\030\002 \001(\0132\032.google.protobuf.Timestamp"
    "\022+\n\004mode\030\003 \001(\0162\035.t4proto.v1.common.Marke"
    "tMode\022\020\n\010sequence\030\004 \001(\004\022>\n\007updates\030\005 \003(\013"
    "2-.t4proto.v1.market.MarketByOrderUpdate"
    ".Update\032\335\001\n\006Update\022F\n\013update_type\030\001 \001(\0162"
    "1.t4proto.v1.market.MarketByOrderUpdate."
    "UpdateType\022\020\n\010order_id\030\002 \001(\004\022.\n\tbid_offe"
    "r\030\003 \001(\0162\033.t4proto.v1.common.BidOffer\022\'\n\005"
    "price\030\004 \001(\0132\030.t4proto.v1.common.Price\022\016\n"
    "\006volume\030\005 \001(\005\022\020\n\010priority\030\006 \001(\004\"Z\n\nUpdat"
    "eType\022\035\n\031UPDATE_TYPE_ADD_OR_UPDATE\020\000\022\026\n\022"
    "UPDATE_TYPE_DELETE\020\001\022\025\n\021UPDATE_TYPE_CLEA"
    "R\020\002b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_deps[3] =
    {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_t4_2fv1_2fcommon_2fenums_2eproto,
        &::descriptor_table_t4_2fv1_2fcommon_2fprice_2eproto,
};
static ::absl::once_flag descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto = {
    false,
    false,
    6291,
    descriptor_table_protodef_t4_2fv1_2fmarket_2fmarket_2eproto,
    "t4/v1/market/market.proto",
    &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once,
    descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_deps,
    3,
    19,
    schemas,
    file_default_instances,
    TableStruct_t4_2fv1_2fmarket_2fmarket_2eproto::offsets,
    file_level_metadata_t4_2fv1_2fmarket_2fmarket_2eproto,
    file_level_enum_descriptors_t4_2fv1_2fmarket_2fmarket_2eproto,
    file_level_service_descriptors_t4_2fv1_2fmarket_2fmarket_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_getter() {
  return &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_t4_2fv1_2fmarket_2fmarket_2eproto(&descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto);
namespace t4proto {
namespace v1 {
namespace market {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MarketByOrderUpdate_UpdateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto);
  return file_level_enum_descriptors_t4_2fv1_2fmarket_2fmarket_2eproto[0];
}
bool MarketByOrderUpdate_UpdateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr MarketByOrderUpdate_UpdateType MarketByOrderUpdate::UPDATE_TYPE_ADD_OR_UPDATE;
constexpr MarketByOrderUpdate_UpdateType MarketByOrderUpdate::UPDATE_TYPE_DELETE;
constexpr MarketByOrderUpdate_UpdateType MarketByOrderUpdate::UPDATE_TYPE_CLEAR;
constexpr MarketByOrderUpdate_UpdateType MarketByOrderUpdate::UpdateType_MIN;
constexpr MarketByOrderUpdate_UpdateType MarketByOrderUpdate::UpdateType_MAX;
constexpr int MarketByOrderUpdate::UpdateType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class MarketDepthSubscribe::_Internal {
 public:
};

MarketDepthSubscribe::MarketDepthSubscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketDepthSubscribe)
}
MarketDepthSubscribe::MarketDepthSubscribe(const MarketDepthSubscribe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketDepthSubscribe* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_id_) {}

    , decltype(_impl_.contract_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.buffer_) {}

    , decltype(_impl_.depth_levels_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.exchange_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_id().empty()) {
    _this->_impl_.exchange_id_.Set(from._internal_exchange_id(), _this->GetArenaForAllocation());
  }
  _impl_.contract_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract_id().empty()) {
    _this->_impl_.contract_id_.Set(from._internal_contract_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.buffer_, &from._impl_.buffer_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.depth_levels_) -
    reinterpret_cast<char*>(&_impl_.buffer_)) + sizeof(_impl_.depth_levels_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketDepthSubscribe)
}

inline void MarketDepthSubscribe::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_id_) {}

    , decltype(_impl_.contract_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.buffer_) { 0 }

    , decltype(_impl_.depth_levels_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.exchange_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contract_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketDepthSubscribe::~MarketDepthSubscribe() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketDepthSubscribe)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketDepthSubscribe::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exchange_id_.Destroy();
  _impl_.contract_id_.Destroy();
  _impl_.market_id_.Destroy();
}

void MarketDepthSubscribe::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketDepthSubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketDepthSubscribe)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exchange_id_.ClearToEmpty();
  _impl_.contract_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  ::memset(&_impl_.buffer_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.depth_levels_) -
      reinterpret_cast<char*>(&_impl_.buffer_)) + sizeof(_impl_.depth_levels_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDepthSubscribe::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string exchange_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_exchange_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketDepthSubscribe.exchange_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string contract_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketDepthSubscribe.contract_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketDepthSubscribe.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.DepthBuffer buffer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_buffer(static_cast<::t4proto::v1::common::DepthBuffer>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.DepthLevels depth_levels = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_depth_levels(static_cast<::t4proto::v1::common::DepthLevels>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketDepthSubscribe::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketDepthSubscribe)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string exchange_id = 1;
  if (!this->_internal_exchange_id().empty()) {
    const std::string& _s = this->_internal_exchange_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDepthSubscribe.exchange_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string contract_id = 2;
  if (!this->_internal_contract_id().empty()) {
    const std::string& _s = this->_internal_contract_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDepthSubscribe.contract_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDepthSubscribe.market_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .t4proto.v1.common.DepthBuffer buffer = 4;
  if (this->_internal_buffer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_buffer(), target);
  }

  // .t4proto.v1.common.DepthLevels depth_levels = 5;
  if (this->_internal_depth_levels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_depth_levels(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketDepthSubscribe)
  return target;
}

::size_t MarketDepthSubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketDepthSubscribe)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exchange_id = 1;
  if (!this->_internal_exchange_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange_id());
  }

  // string contract_id = 2;
  if (!this->_internal_contract_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contract_id());
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // .t4proto.v1.common.DepthBuffer buffer = 4;
  if (this->_internal_buffer() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_buffer());
  }

  // .t4proto.v1.common.DepthLevels depth_levels = 5;
  if (this->_internal_depth_levels() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_depth_levels());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketDepthSubscribe::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketDepthSubscribe::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketDepthSubscribe::GetClassData() const { return &_class_data_; }


void MarketDepthSubscribe::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketDepthSubscribe*>(&to_msg);
  auto& from = static_cast<const MarketDepthSubscribe&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketDepthSubscribe)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_exchange_id().empty()) {
    _this->_internal_set_exchange_id(from._internal_exchange_id());
  }
  if (!from._internal_contract_id().empty()) {
    _this->_internal_set_contract_id(from._internal_contract_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_buffer() != 0) {
    _this->_internal_set_buffer(from._internal_buffer());
  }
  if (from._internal_depth_levels() != 0) {
    _this->_internal_set_depth_levels(from._internal_depth_levels());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDepthSubscribe::CopyFrom(const MarketDepthSubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketDepthSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthSubscribe::IsInitialized() const {
  return true;
}

void MarketDepthSubscribe::InternalSwap(MarketDepthSubscribe* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_id_, lhs_arena,
                                       &other->_impl_.exchange_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_id_, lhs_arena,
                                       &other->_impl_.contract_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDepthSubscribe, _impl_.depth_levels_)
      + sizeof(MarketDepthSubscribe::_impl_.depth_levels_)
      - PROTOBUF_FIELD_OFFSET(MarketDepthSubscribe, _impl_.buffer_)>(
          reinterpret_cast<char*>(&_impl_.buffer_),
          reinterpret_cast<char*>(&other->_impl_.buffer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDepthSubscribe::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_getter, &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once,
      file_level_metadata_t4_2fv1_2fmarket_2fmarket_2eproto[0]);
}
// ===================================================================

class MarketDepthSubscribeReject::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const MarketDepthSubscribeReject* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketDepthSubscribeReject::_Internal::time(const MarketDepthSubscribeReject* msg) {
  return *msg->_impl_.time_;
}
void MarketDepthSubscribeReject::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
MarketDepthSubscribeReject::MarketDepthSubscribeReject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketDepthSubscribeReject)
}
MarketDepthSubscribeReject::MarketDepthSubscribeReject(const MarketDepthSubscribeReject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketDepthSubscribeReject* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.mode_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  _this->_impl_.mode_ = from._impl_.mode_;
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketDepthSubscribeReject)
}

inline void MarketDepthSubscribeReject::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.mode_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketDepthSubscribeReject::~MarketDepthSubscribeReject() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketDepthSubscribeReject)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketDepthSubscribeReject::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
}

void MarketDepthSubscribeReject::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketDepthSubscribeReject::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketDepthSubscribeReject)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  _impl_.mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDepthSubscribeReject::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketDepthSubscribeReject.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.MarketMode mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::t4proto::v1::common::MarketMode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketDepthSubscribeReject::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketDepthSubscribeReject)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDepthSubscribeReject.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .google.protobuf.Timestamp time = 2;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.MarketMode mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketDepthSubscribeReject)
  return target;
}

::size_t MarketDepthSubscribeReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketDepthSubscribeReject)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // .google.protobuf.Timestamp time = 2;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // .t4proto.v1.common.MarketMode mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketDepthSubscribeReject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketDepthSubscribeReject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketDepthSubscribeReject::GetClassData() const { return &_class_data_; }


void MarketDepthSubscribeReject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketDepthSubscribeReject*>(&to_msg);
  auto& from = static_cast<const MarketDepthSubscribeReject&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketDepthSubscribeReject)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDepthSubscribeReject::CopyFrom(const MarketDepthSubscribeReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketDepthSubscribeReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthSubscribeReject::IsInitialized() const {
  return true;
}

void MarketDepthSubscribeReject::InternalSwap(MarketDepthSubscribeReject* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDepthSubscribeReject, _impl_.mode_)
      + sizeof(MarketDepthSubscribeReject::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(MarketDepthSubscribeReject, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDepthSubscribeReject::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_getter, &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once,
      file_level_metadata_t4_2fv1_2fmarket_2fmarket_2eproto[1]);
}
// ===================================================================

class MarketByOrderSubscribe::_Internal {
 public:
};

MarketByOrderSubscribe::MarketByOrderSubscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketByOrderSubscribe)
}
MarketByOrderSubscribe::MarketByOrderSubscribe(const MarketByOrderSubscribe& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketByOrderSubscribe* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_id_) {}

    , decltype(_impl_.contract_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.subscribe_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.exchange_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_id().empty()) {
    _this->_impl_.exchange_id_.Set(from._internal_exchange_id(), _this->GetArenaForAllocation());
  }
  _impl_.contract_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract_id().empty()) {
    _this->_impl_.contract_id_.Set(from._internal_contract_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.subscribe_ = from._impl_.subscribe_;
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketByOrderSubscribe)
}

inline void MarketByOrderSubscribe::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_id_) {}

    , decltype(_impl_.contract_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.subscribe_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.exchange_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contract_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketByOrderSubscribe::~MarketByOrderSubscribe() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketByOrderSubscribe)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketByOrderSubscribe::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exchange_id_.Destroy();
  _impl_.contract_id_.Destroy();
  _impl_.market_id_.Destroy();
}

void MarketByOrderSubscribe::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketByOrderSubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketByOrderSubscribe)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exchange_id_.ClearToEmpty();
  _impl_.contract_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.subscribe_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByOrderSubscribe::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string exchange_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_exchange_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketByOrderSubscribe.exchange_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string contract_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketByOrderSubscribe.contract_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketByOrderSubscribe.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool subscribe = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.subscribe_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketByOrderSubscribe::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketByOrderSubscribe)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string exchange_id = 1;
  if (!this->_internal_exchange_id().empty()) {
    const std::string& _s = this->_internal_exchange_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketByOrderSubscribe.exchange_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string contract_id = 2;
  if (!this->_internal_contract_id().empty()) {
    const std::string& _s = this->_internal_contract_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketByOrderSubscribe.contract_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketByOrderSubscribe.market_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bool subscribe = 4;
  if (this->_internal_subscribe() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_subscribe(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketByOrderSubscribe)
  return target;
}

::size_t MarketByOrderSubscribe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketByOrderSubscribe)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exchange_id = 1;
  if (!this->_internal_exchange_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange_id());
  }

  // string contract_id = 2;
  if (!this->_internal_contract_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contract_id());
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // bool subscribe = 4;
  if (this->_internal_subscribe() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketByOrderSubscribe::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketByOrderSubscribe::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketByOrderSubscribe::GetClassData() const { return &_class_data_; }


void MarketByOrderSubscribe::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketByOrderSubscribe*>(&to_msg);
  auto& from = static_cast<const MarketByOrderSubscribe&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketByOrderSubscribe)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_exchange_id().empty()) {
    _this->_internal_set_exchange_id(from._internal_exchange_id());
  }
  if (!from._internal_contract_id().empty()) {
    _this->_internal_set_contract_id(from._internal_contract_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_subscribe() != 0) {
    _this->_internal_set_subscribe(from._internal_subscribe());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketByOrderSubscribe::CopyFrom(const MarketByOrderSubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketByOrderSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByOrderSubscribe::IsInitialized() const {
  return true;
}

void MarketByOrderSubscribe::InternalSwap(MarketByOrderSubscribe* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_id_, lhs_arena,
                                       &other->_impl_.exchange_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_id_, lhs_arena,
                                       &other->_impl_.contract_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);

  swap(_impl_.subscribe_, other->_impl_.subscribe_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByOrderSubscribe::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_getter, &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once,
      file_level_metadata_t4_2fv1_2fmarket_2fmarket_2eproto[2]);
}
// ===================================================================

class MarketByOrderSubscribeReject::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const MarketByOrderSubscribeReject* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketByOrderSubscribeReject::_Internal::time(const MarketByOrderSubscribeReject* msg) {
  return *msg->_impl_.time_;
}
void MarketByOrderSubscribeReject::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
MarketByOrderSubscribeReject::MarketByOrderSubscribeReject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketByOrderSubscribeReject)
}
MarketByOrderSubscribeReject::MarketByOrderSubscribeReject(const MarketByOrderSubscribeReject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketByOrderSubscribeReject* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.mode_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  _this->_impl_.mode_ = from._impl_.mode_;
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketByOrderSubscribeReject)
}

inline void MarketByOrderSubscribeReject::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.mode_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketByOrderSubscribeReject::~MarketByOrderSubscribeReject() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketByOrderSubscribeReject)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketByOrderSubscribeReject::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
}

void MarketByOrderSubscribeReject::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketByOrderSubscribeReject::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketByOrderSubscribeReject)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  _impl_.mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByOrderSubscribeReject::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketByOrderSubscribeReject.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.MarketMode mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::t4proto::v1::common::MarketMode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketByOrderSubscribeReject::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketByOrderSubscribeReject)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketByOrderSubscribeReject.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .google.protobuf.Timestamp time = 2;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.MarketMode mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketByOrderSubscribeReject)
  return target;
}

::size_t MarketByOrderSubscribeReject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketByOrderSubscribeReject)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // .google.protobuf.Timestamp time = 2;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // .t4proto.v1.common.MarketMode mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketByOrderSubscribeReject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketByOrderSubscribeReject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketByOrderSubscribeReject::GetClassData() const { return &_class_data_; }


void MarketByOrderSubscribeReject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketByOrderSubscribeReject*>(&to_msg);
  auto& from = static_cast<const MarketByOrderSubscribeReject&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketByOrderSubscribeReject)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketByOrderSubscribeReject::CopyFrom(const MarketByOrderSubscribeReject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketByOrderSubscribeReject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByOrderSubscribeReject::IsInitialized() const {
  return true;
}

void MarketByOrderSubscribeReject::InternalSwap(MarketByOrderSubscribeReject* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribeReject, _impl_.mode_)
      + sizeof(MarketByOrderSubscribeReject::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(MarketByOrderSubscribeReject, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByOrderSubscribeReject::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_getter, &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once,
      file_level_metadata_t4_2fv1_2fmarket_2fmarket_2eproto[3]);
}
// ===================================================================

class MarketDetails_LegItem::_Internal {
 public:
  static const ::t4proto::v1::common::Price& price(const MarketDetails_LegItem* msg);
};

const ::t4proto::v1::common::Price&
MarketDetails_LegItem::_Internal::price(const MarketDetails_LegItem* msg) {
  return *msg->_impl_.price_;
}
void MarketDetails_LegItem::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
MarketDetails_LegItem::MarketDetails_LegItem(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketDetails.LegItem)
}
MarketDetails_LegItem::MarketDetails_LegItem(const MarketDetails_LegItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketDetails_LegItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.delta_) {}

    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.group_) {}

    , decltype(_impl_.volume_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.delta_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delta_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_delta().empty()) {
    _this->_impl_.delta_.Set(from._internal_delta(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::t4proto::v1::common::Price(*from._impl_.price_);
  }
  ::memcpy(&_impl_.group_, &from._impl_.group_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.volume_) -
    reinterpret_cast<char*>(&_impl_.group_)) + sizeof(_impl_.volume_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketDetails.LegItem)
}

inline void MarketDetails_LegItem::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.delta_) {}

    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.group_) { 0 }

    , decltype(_impl_.volume_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.delta_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.delta_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketDetails_LegItem::~MarketDetails_LegItem() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketDetails.LegItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketDetails_LegItem::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  _impl_.delta_.Destroy();
  if (this != internal_default_instance()) delete _impl_.price_;
}

void MarketDetails_LegItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketDetails_LegItem::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketDetails.LegItem)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  _impl_.delta_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  ::memset(&_impl_.group_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.volume_) -
      reinterpret_cast<char*>(&_impl_.group_)) + sizeof(_impl_.volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDetails_LegItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketDetails.LegItem.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 group = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.group_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 volume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string delta = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_delta();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketDetails.LegItem.delta"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketDetails_LegItem::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketDetails.LegItem)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.LegItem.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 group = 2;
  if (this->_internal_group() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_group(), target);
  }

  // int32 volume = 3;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_volume(), target);
  }

  // string delta = 4;
  if (!this->_internal_delta().empty()) {
    const std::string& _s = this->_internal_delta();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.LegItem.delta");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // .t4proto.v1.common.Price price = 5;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketDetails.LegItem)
  return target;
}

::size_t MarketDetails_LegItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketDetails.LegItem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string delta = 4;
  if (!this->_internal_delta().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_delta());
  }

  // .t4proto.v1.common.Price price = 5;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // int32 group = 2;
  if (this->_internal_group() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_group());
  }

  // int32 volume = 3;
  if (this->_internal_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_volume());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketDetails_LegItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketDetails_LegItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketDetails_LegItem::GetClassData() const { return &_class_data_; }


void MarketDetails_LegItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketDetails_LegItem*>(&to_msg);
  auto& from = static_cast<const MarketDetails_LegItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketDetails.LegItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_delta().empty()) {
    _this->_internal_set_delta(from._internal_delta());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_price());
  }
  if (from._internal_group() != 0) {
    _this->_internal_set_group(from._internal_group());
  }
  if (from._internal_volume() != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDetails_LegItem::CopyFrom(const MarketDetails_LegItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketDetails.LegItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDetails_LegItem::IsInitialized() const {
  return true;
}

void MarketDetails_LegItem::InternalSwap(MarketDetails_LegItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.delta_, lhs_arena,
                                       &other->_impl_.delta_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDetails_LegItem, _impl_.volume_)
      + sizeof(MarketDetails_LegItem::_impl_.volume_)
      - PROTOBUF_FIELD_OFFSET(MarketDetails_LegItem, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDetails_LegItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_getter, &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once,
      file_level_metadata_t4_2fv1_2fmarket_2fmarket_2eproto[4]);
}
// ===================================================================

class MarketDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<MarketDetails>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_._has_bits_);
  static const ::t4proto::v1::common::Decimal& point_value(const MarketDetails* msg);
  static const ::t4proto::v1::common::Price& min_price_increment(const MarketDetails* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& activation_date(const MarketDetails* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_trading_date(const MarketDetails* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& last_client_update_time(const MarketDetails* msg);
  static const ::t4proto::v1::common::Price& min_cab_price(const MarketDetails* msg);
  static void set_has_min_cab_price(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::t4proto::v1::common::Price& strike_price(const MarketDetails* msg);
  static void set_has_strike_price(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::t4proto::v1::common::Decimal&
MarketDetails::_Internal::point_value(const MarketDetails* msg) {
  return *msg->_impl_.point_value_;
}
const ::t4proto::v1::common::Price&
MarketDetails::_Internal::min_price_increment(const MarketDetails* msg) {
  return *msg->_impl_.min_price_increment_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketDetails::_Internal::activation_date(const MarketDetails* msg) {
  return *msg->_impl_.activation_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketDetails::_Internal::last_trading_date(const MarketDetails* msg) {
  return *msg->_impl_.last_trading_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketDetails::_Internal::last_client_update_time(const MarketDetails* msg) {
  return *msg->_impl_.last_client_update_time_;
}
const ::t4proto::v1::common::Price&
MarketDetails::_Internal::min_cab_price(const MarketDetails* msg) {
  return *msg->_impl_.min_cab_price_;
}
const ::t4proto::v1::common::Price&
MarketDetails::_Internal::strike_price(const MarketDetails* msg) {
  return *msg->_impl_.strike_price_;
}
void MarketDetails::clear_point_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.point_value_ != nullptr) {
    delete _impl_.point_value_;
  }
  _impl_.point_value_ = nullptr;
}
void MarketDetails::clear_min_price_increment() {
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_ != nullptr) {
    delete _impl_.min_price_increment_;
  }
  _impl_.min_price_increment_ = nullptr;
}
void MarketDetails::clear_activation_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.activation_date_ != nullptr) {
    delete _impl_.activation_date_;
  }
  _impl_.activation_date_ = nullptr;
}
void MarketDetails::clear_last_trading_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_trading_date_ != nullptr) {
    delete _impl_.last_trading_date_;
  }
  _impl_.last_trading_date_ = nullptr;
}
void MarketDetails::clear_last_client_update_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_client_update_time_ != nullptr) {
    delete _impl_.last_client_update_time_;
  }
  _impl_.last_client_update_time_ = nullptr;
}
void MarketDetails::clear_min_cab_price() {
  if (_impl_.min_cab_price_ != nullptr) _impl_.min_cab_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void MarketDetails::clear_strike_price() {
  if (_impl_.strike_price_ != nullptr) _impl_.strike_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
MarketDetails::MarketDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketDetails)
}
MarketDetails::MarketDetails(const MarketDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.legs_){from._impl_.legs_}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.exchange_id_) {}

    , decltype(_impl_.contract_id_) {}

    , decltype(_impl_.market_ref_) {}

    , decltype(_impl_.group_) {}

    , decltype(_impl_.details_) {}

    , decltype(_impl_.price_code_) {}

    , decltype(_impl_.underlying_market_id_) {}

    , decltype(_impl_.vtt_) {}

    , decltype(_impl_.point_value_){nullptr}
    , decltype(_impl_.min_price_increment_){nullptr}
    , decltype(_impl_.activation_date_){nullptr}
    , decltype(_impl_.last_trading_date_){nullptr}
    , decltype(_impl_.last_client_update_time_){nullptr}
    , decltype(_impl_.min_cab_price_){nullptr}
    , decltype(_impl_.strike_price_){nullptr}
    , decltype(_impl_.expiry_date_) {}

    , decltype(_impl_.contract_type_) {}

    , decltype(_impl_.decimals_) {}

    , decltype(_impl_.order_types_) {}

    , decltype(_impl_.delist_date_) {}

    , decltype(_impl_.exchange_delist_date_) {}

    , decltype(_impl_.strategy_type_) {}

    , decltype(_impl_.real_decimals_) {}

    , decltype(_impl_.display_decimals_) {}

    , decltype(_impl_.clearing_decimals_) {}

    , decltype(_impl_.strategy_ratio_) {}

    , decltype(_impl_.volume_increment_) {}

    , decltype(_impl_.disabled_) {}

    , decltype(_impl_.maint_intra_margin_) {}

    , decltype(_impl_.maint_margin_) {}

    , decltype(_impl_.maint_vol_scan_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.exchange_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_id().empty()) {
    _this->_impl_.exchange_id_.Set(from._internal_exchange_id(), _this->GetArenaForAllocation());
  }
  _impl_.contract_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract_id().empty()) {
    _this->_impl_.contract_id_.Set(from._internal_contract_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_ref_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_ref().empty()) {
    _this->_impl_.market_ref_.Set(from._internal_market_ref(), _this->GetArenaForAllocation());
  }
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.group_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group().empty()) {
    _this->_impl_.group_.Set(from._internal_group(), _this->GetArenaForAllocation());
  }
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.details_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_details().empty()) {
    _this->_impl_.details_.Set(from._internal_details(), _this->GetArenaForAllocation());
  }
  _impl_.price_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_code_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_price_code().empty()) {
    _this->_impl_.price_code_.Set(from._internal_price_code(), _this->GetArenaForAllocation());
  }
  _impl_.underlying_market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.underlying_market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_underlying_market_id().empty()) {
    _this->_impl_.underlying_market_id_.Set(from._internal_underlying_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.vtt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.vtt_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vtt().empty()) {
    _this->_impl_.vtt_.Set(from._internal_vtt(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_point_value()) {
    _this->_impl_.point_value_ = new ::t4proto::v1::common::Decimal(*from._impl_.point_value_);
  }
  if (from._internal_has_min_price_increment()) {
    _this->_impl_.min_price_increment_ = new ::t4proto::v1::common::Price(*from._impl_.min_price_increment_);
  }
  if (from._internal_has_activation_date()) {
    _this->_impl_.activation_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.activation_date_);
  }
  if (from._internal_has_last_trading_date()) {
    _this->_impl_.last_trading_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_trading_date_);
  }
  if (from._internal_has_last_client_update_time()) {
    _this->_impl_.last_client_update_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.last_client_update_time_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.min_cab_price_ = new ::t4proto::v1::common::Price(*from._impl_.min_cab_price_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.strike_price_ = new ::t4proto::v1::common::Price(*from._impl_.strike_price_);
  }
  ::memcpy(&_impl_.expiry_date_, &from._impl_.expiry_date_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.maint_vol_scan_) -
    reinterpret_cast<char*>(&_impl_.expiry_date_)) + sizeof(_impl_.maint_vol_scan_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketDetails)
}

inline void MarketDetails::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.legs_){arena}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.exchange_id_) {}

    , decltype(_impl_.contract_id_) {}

    , decltype(_impl_.market_ref_) {}

    , decltype(_impl_.group_) {}

    , decltype(_impl_.details_) {}

    , decltype(_impl_.price_code_) {}

    , decltype(_impl_.underlying_market_id_) {}

    , decltype(_impl_.vtt_) {}

    , decltype(_impl_.point_value_){nullptr}
    , decltype(_impl_.min_price_increment_){nullptr}
    , decltype(_impl_.activation_date_){nullptr}
    , decltype(_impl_.last_trading_date_){nullptr}
    , decltype(_impl_.last_client_update_time_){nullptr}
    , decltype(_impl_.min_cab_price_){nullptr}
    , decltype(_impl_.strike_price_){nullptr}
    , decltype(_impl_.expiry_date_) { 0 }

    , decltype(_impl_.contract_type_) { 0 }

    , decltype(_impl_.decimals_) { 0 }

    , decltype(_impl_.order_types_) { 0 }

    , decltype(_impl_.delist_date_) { ::int64_t{0} }

    , decltype(_impl_.exchange_delist_date_) { ::int64_t{0} }

    , decltype(_impl_.strategy_type_) { 0 }

    , decltype(_impl_.real_decimals_) { 0 }

    , decltype(_impl_.display_decimals_) { 0 }

    , decltype(_impl_.clearing_decimals_) { 0 }

    , decltype(_impl_.strategy_ratio_) { 0 }

    , decltype(_impl_.volume_increment_) { 0 }

    , decltype(_impl_.disabled_) { false }

    , decltype(_impl_.maint_intra_margin_) { 0 }

    , decltype(_impl_.maint_margin_) { 0 }

    , decltype(_impl_.maint_vol_scan_) { 0 }

  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contract_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_ref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_ref_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.group_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.details_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.price_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.price_code_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.underlying_market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.underlying_market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vtt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.vtt_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketDetails::~MarketDetails() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketDetails::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.legs_.~RepeatedPtrField();
  _impl_.market_id_.Destroy();
  _impl_.exchange_id_.Destroy();
  _impl_.contract_id_.Destroy();
  _impl_.market_ref_.Destroy();
  _impl_.group_.Destroy();
  _impl_.details_.Destroy();
  _impl_.price_code_.Destroy();
  _impl_.underlying_market_id_.Destroy();
  _impl_.vtt_.Destroy();
  if (this != internal_default_instance()) delete _impl_.point_value_;
  if (this != internal_default_instance()) delete _impl_.min_price_increment_;
  if (this != internal_default_instance()) delete _impl_.activation_date_;
  if (this != internal_default_instance()) delete _impl_.last_trading_date_;
  if (this != internal_default_instance()) delete _impl_.last_client_update_time_;
  if (this != internal_default_instance()) delete _impl_.min_cab_price_;
  if (this != internal_default_instance()) delete _impl_.strike_price_;
}

void MarketDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketDetails)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.legs_.Clear();
  _impl_.market_id_.ClearToEmpty();
  _impl_.exchange_id_.ClearToEmpty();
  _impl_.contract_id_.ClearToEmpty();
  _impl_.market_ref_.ClearToEmpty();
  _impl_.group_.ClearToEmpty();
  _impl_.details_.ClearToEmpty();
  _impl_.price_code_.ClearToEmpty();
  _impl_.underlying_market_id_.ClearToEmpty();
  _impl_.vtt_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.point_value_ != nullptr) {
    delete _impl_.point_value_;
  }
  _impl_.point_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.min_price_increment_ != nullptr) {
    delete _impl_.min_price_increment_;
  }
  _impl_.min_price_increment_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.activation_date_ != nullptr) {
    delete _impl_.activation_date_;
  }
  _impl_.activation_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_trading_date_ != nullptr) {
    delete _impl_.last_trading_date_;
  }
  _impl_.last_trading_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_client_update_time_ != nullptr) {
    delete _impl_.last_client_update_time_;
  }
  _impl_.last_client_update_time_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.min_cab_price_ != nullptr);
      _impl_.min_cab_price_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.strike_price_ != nullptr);
      _impl_.strike_price_->Clear();
    }
  }
  ::memset(&_impl_.expiry_date_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.maint_vol_scan_) -
      reinterpret_cast<char*>(&_impl_.expiry_date_)) + sizeof(_impl_.maint_vol_scan_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketDetails.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string exchange_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_exchange_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketDetails.exchange_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string contract_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketDetails.contract_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 expiry_date = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.expiry_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.ContractType contract_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_contract_type(static_cast<::t4proto::v1::common::ContractType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 decimals = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.decimals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Decimal point_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_value(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price min_price_increment = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_price_increment(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 order_types = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.order_types_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp activation_date = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_date(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp last_trading_date = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_trading_date(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp last_client_update_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_client_update_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 delist_date = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _impl_.delist_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 exchange_delist_date = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _impl_.exchange_delist_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_ref = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_market_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketDetails.market_ref"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string group = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketDetails.group"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .t4proto.v1.market.MarketDetails.LegItem legs = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_legs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string details = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketDetails.details"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.StrategyType strategy_type = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 152)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_strategy_type(static_cast<::t4proto::v1::common::StrategyType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string price_code = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_price_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketDetails.price_code"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 real_decimals = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 168)) {
          _impl_.real_decimals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 display_decimals = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 176)) {
          _impl_.display_decimals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 clearing_decimals = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 184)) {
          _impl_.clearing_decimals_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .t4proto.v1.common.Price min_cab_price = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_cab_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .t4proto.v1.common.Price strike_price = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_strike_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 volume_increment = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 208)) {
          _impl_.volume_increment_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // double strategy_ratio = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 217)) {
          _impl_.strategy_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool disabled = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 224)) {
          _impl_.disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string underlying_market_id = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_underlying_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketDetails.underlying_market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string vtt = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_vtt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketDetails.vtt"));
        } else {
          goto handle_unusual;
        }
        continue;
      // double maint_intra_margin = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 249)) {
          _impl_.maint_intra_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double maint_margin = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 1)) {
          _impl_.maint_margin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      // double maint_vol_scan = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 9)) {
          _impl_.maint_vol_scan_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketDetails::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketDetails)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string exchange_id = 2;
  if (!this->_internal_exchange_id().empty()) {
    const std::string& _s = this->_internal_exchange_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.exchange_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string contract_id = 3;
  if (!this->_internal_contract_id().empty()) {
    const std::string& _s = this->_internal_contract_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.contract_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // int32 expiry_date = 4;
  if (this->_internal_expiry_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_expiry_date(), target);
  }

  // .t4proto.v1.common.ContractType contract_type = 5;
  if (this->_internal_contract_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_contract_type(), target);
  }

  // int32 decimals = 6;
  if (this->_internal_decimals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_decimals(), target);
  }

  // .t4proto.v1.common.Decimal point_value = 7;
  if (this->_internal_has_point_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::point_value(this),
        _Internal::point_value(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.Price min_price_increment = 8;
  if (this->_internal_has_min_price_increment()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::min_price_increment(this),
        _Internal::min_price_increment(this).GetCachedSize(), target, stream);
  }

  // int32 order_types = 9;
  if (this->_internal_order_types() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        9, this->_internal_order_types(), target);
  }

  // .google.protobuf.Timestamp activation_date = 10;
  if (this->_internal_has_activation_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::activation_date(this),
        _Internal::activation_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_trading_date = 11;
  if (this->_internal_has_last_trading_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::last_trading_date(this),
        _Internal::last_trading_date(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp last_client_update_time = 12;
  if (this->_internal_has_last_client_update_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::last_client_update_time(this),
        _Internal::last_client_update_time(this).GetCachedSize(), target, stream);
  }

  // int64 delist_date = 13;
  if (this->_internal_delist_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        13, this->_internal_delist_date(), target);
  }

  // int64 exchange_delist_date = 14;
  if (this->_internal_exchange_delist_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        14, this->_internal_exchange_delist_date(), target);
  }

  // string market_ref = 15;
  if (!this->_internal_market_ref().empty()) {
    const std::string& _s = this->_internal_market_ref();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.market_ref");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // string group = 16;
  if (!this->_internal_group().empty()) {
    const std::string& _s = this->_internal_group();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.group");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // repeated .t4proto.v1.market.MarketDetails.LegItem legs = 17;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_legs_size()); i < n; i++) {
    const auto& repfield = this->_internal_legs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(17, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string details = 18;
  if (!this->_internal_details().empty()) {
    const std::string& _s = this->_internal_details();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.details");
    target = stream->WriteStringMaybeAliased(18, _s, target);
  }

  // .t4proto.v1.common.StrategyType strategy_type = 19;
  if (this->_internal_strategy_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        19, this->_internal_strategy_type(), target);
  }

  // string price_code = 20;
  if (!this->_internal_price_code().empty()) {
    const std::string& _s = this->_internal_price_code();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.price_code");
    target = stream->WriteStringMaybeAliased(20, _s, target);
  }

  // int32 real_decimals = 21;
  if (this->_internal_real_decimals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        21, this->_internal_real_decimals(), target);
  }

  // int32 display_decimals = 22;
  if (this->_internal_display_decimals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        22, this->_internal_display_decimals(), target);
  }

  // int32 clearing_decimals = 23;
  if (this->_internal_clearing_decimals() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        23, this->_internal_clearing_decimals(), target);
  }

  // optional .t4proto.v1.common.Price min_cab_price = 24;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::min_cab_price(this),
        _Internal::min_cab_price(this).GetCachedSize(), target, stream);
  }

  // optional .t4proto.v1.common.Price strike_price = 25;
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::strike_price(this),
        _Internal::strike_price(this).GetCachedSize(), target, stream);
  }

  // int32 volume_increment = 26;
  if (this->_internal_volume_increment() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        26, this->_internal_volume_increment(), target);
  }

  // double strategy_ratio = 27;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_strategy_ratio = this->_internal_strategy_ratio();
  ::uint64_t raw_strategy_ratio;
  memcpy(&raw_strategy_ratio, &tmp_strategy_ratio, sizeof(tmp_strategy_ratio));
  if (raw_strategy_ratio != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        27, this->_internal_strategy_ratio(), target);
  }

  // bool disabled = 28;
  if (this->_internal_disabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        28, this->_internal_disabled(), target);
  }

  // string underlying_market_id = 29;
  if (!this->_internal_underlying_market_id().empty()) {
    const std::string& _s = this->_internal_underlying_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.underlying_market_id");
    target = stream->WriteStringMaybeAliased(29, _s, target);
  }

  // string vtt = 30;
  if (!this->_internal_vtt().empty()) {
    const std::string& _s = this->_internal_vtt();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDetails.vtt");
    target = stream->WriteStringMaybeAliased(30, _s, target);
  }

  // double maint_intra_margin = 31;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_maint_intra_margin = this->_internal_maint_intra_margin();
  ::uint64_t raw_maint_intra_margin;
  memcpy(&raw_maint_intra_margin, &tmp_maint_intra_margin, sizeof(tmp_maint_intra_margin));
  if (raw_maint_intra_margin != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        31, this->_internal_maint_intra_margin(), target);
  }

  // double maint_margin = 32;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_maint_margin = this->_internal_maint_margin();
  ::uint64_t raw_maint_margin;
  memcpy(&raw_maint_margin, &tmp_maint_margin, sizeof(tmp_maint_margin));
  if (raw_maint_margin != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        32, this->_internal_maint_margin(), target);
  }

  // double maint_vol_scan = 33;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_maint_vol_scan = this->_internal_maint_vol_scan();
  ::uint64_t raw_maint_vol_scan;
  memcpy(&raw_maint_vol_scan, &tmp_maint_vol_scan, sizeof(tmp_maint_vol_scan));
  if (raw_maint_vol_scan != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        33, this->_internal_maint_vol_scan(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketDetails)
  return target;
}

::size_t MarketDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketDetails)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .t4proto.v1.market.MarketDetails.LegItem legs = 17;
  total_size += 2UL * this->_internal_legs_size();
  for (const auto& msg : this->_impl_.legs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string exchange_id = 2;
  if (!this->_internal_exchange_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange_id());
  }

  // string contract_id = 3;
  if (!this->_internal_contract_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contract_id());
  }

  // string market_ref = 15;
  if (!this->_internal_market_ref().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_ref());
  }

  // string group = 16;
  if (!this->_internal_group().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_group());
  }

  // string details = 18;
  if (!this->_internal_details().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_details());
  }

  // string price_code = 20;
  if (!this->_internal_price_code().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_price_code());
  }

  // string underlying_market_id = 29;
  if (!this->_internal_underlying_market_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_underlying_market_id());
  }

  // string vtt = 30;
  if (!this->_internal_vtt().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_vtt());
  }

  // .t4proto.v1.common.Decimal point_value = 7;
  if (this->_internal_has_point_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.point_value_);
  }

  // .t4proto.v1.common.Price min_price_increment = 8;
  if (this->_internal_has_min_price_increment()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.min_price_increment_);
  }

  // .google.protobuf.Timestamp activation_date = 10;
  if (this->_internal_has_activation_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.activation_date_);
  }

  // .google.protobuf.Timestamp last_trading_date = 11;
  if (this->_internal_has_last_trading_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_trading_date_);
  }

  // .google.protobuf.Timestamp last_client_update_time = 12;
  if (this->_internal_has_last_client_update_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_client_update_time_);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .t4proto.v1.common.Price min_cab_price = 24;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.min_cab_price_);
    }

    // optional .t4proto.v1.common.Price strike_price = 25;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.strike_price_);
    }

  }
  // int32 expiry_date = 4;
  if (this->_internal_expiry_date() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_expiry_date());
  }

  // .t4proto.v1.common.ContractType contract_type = 5;
  if (this->_internal_contract_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_contract_type());
  }

  // int32 decimals = 6;
  if (this->_internal_decimals() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_decimals());
  }

  // int32 order_types = 9;
  if (this->_internal_order_types() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_order_types());
  }

  // int64 delist_date = 13;
  if (this->_internal_delist_date() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_delist_date());
  }

  // int64 exchange_delist_date = 14;
  if (this->_internal_exchange_delist_date() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_exchange_delist_date());
  }

  // .t4proto.v1.common.StrategyType strategy_type = 19;
  if (this->_internal_strategy_type() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_strategy_type());
  }

  // int32 real_decimals = 21;
  if (this->_internal_real_decimals() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_real_decimals());
  }

  // int32 display_decimals = 22;
  if (this->_internal_display_decimals() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_display_decimals());
  }

  // int32 clearing_decimals = 23;
  if (this->_internal_clearing_decimals() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_clearing_decimals());
  }

  // double strategy_ratio = 27;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_strategy_ratio = this->_internal_strategy_ratio();
  ::uint64_t raw_strategy_ratio;
  memcpy(&raw_strategy_ratio, &tmp_strategy_ratio, sizeof(tmp_strategy_ratio));
  if (raw_strategy_ratio != 0) {
    total_size += 10;
  }

  // int32 volume_increment = 26;
  if (this->_internal_volume_increment() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_volume_increment());
  }

  // bool disabled = 28;
  if (this->_internal_disabled() != 0) {
    total_size += 3;
  }

  // double maint_intra_margin = 31;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_maint_intra_margin = this->_internal_maint_intra_margin();
  ::uint64_t raw_maint_intra_margin;
  memcpy(&raw_maint_intra_margin, &tmp_maint_intra_margin, sizeof(tmp_maint_intra_margin));
  if (raw_maint_intra_margin != 0) {
    total_size += 10;
  }

  // double maint_margin = 32;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_maint_margin = this->_internal_maint_margin();
  ::uint64_t raw_maint_margin;
  memcpy(&raw_maint_margin, &tmp_maint_margin, sizeof(tmp_maint_margin));
  if (raw_maint_margin != 0) {
    total_size += 10;
  }

  // double maint_vol_scan = 33;
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_maint_vol_scan = this->_internal_maint_vol_scan();
  ::uint64_t raw_maint_vol_scan;
  memcpy(&raw_maint_vol_scan, &tmp_maint_vol_scan, sizeof(tmp_maint_vol_scan));
  if (raw_maint_vol_scan != 0) {
    total_size += 10;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketDetails::GetClassData() const { return &_class_data_; }


void MarketDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketDetails*>(&to_msg);
  auto& from = static_cast<const MarketDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketDetails)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.legs_.MergeFrom(from._impl_.legs_);
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_exchange_id().empty()) {
    _this->_internal_set_exchange_id(from._internal_exchange_id());
  }
  if (!from._internal_contract_id().empty()) {
    _this->_internal_set_contract_id(from._internal_contract_id());
  }
  if (!from._internal_market_ref().empty()) {
    _this->_internal_set_market_ref(from._internal_market_ref());
  }
  if (!from._internal_group().empty()) {
    _this->_internal_set_group(from._internal_group());
  }
  if (!from._internal_details().empty()) {
    _this->_internal_set_details(from._internal_details());
  }
  if (!from._internal_price_code().empty()) {
    _this->_internal_set_price_code(from._internal_price_code());
  }
  if (!from._internal_underlying_market_id().empty()) {
    _this->_internal_set_underlying_market_id(from._internal_underlying_market_id());
  }
  if (!from._internal_vtt().empty()) {
    _this->_internal_set_vtt(from._internal_vtt());
  }
  if (from._internal_has_point_value()) {
    _this->_internal_mutable_point_value()->::t4proto::v1::common::Decimal::MergeFrom(
        from._internal_point_value());
  }
  if (from._internal_has_min_price_increment()) {
    _this->_internal_mutable_min_price_increment()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_min_price_increment());
  }
  if (from._internal_has_activation_date()) {
    _this->_internal_mutable_activation_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_activation_date());
  }
  if (from._internal_has_last_trading_date()) {
    _this->_internal_mutable_last_trading_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_trading_date());
  }
  if (from._internal_has_last_client_update_time()) {
    _this->_internal_mutable_last_client_update_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_last_client_update_time());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_min_cab_price()->::t4proto::v1::common::Price::MergeFrom(
          from._internal_min_cab_price());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_strike_price()->::t4proto::v1::common::Price::MergeFrom(
          from._internal_strike_price());
    }
  }
  if (from._internal_expiry_date() != 0) {
    _this->_internal_set_expiry_date(from._internal_expiry_date());
  }
  if (from._internal_contract_type() != 0) {
    _this->_internal_set_contract_type(from._internal_contract_type());
  }
  if (from._internal_decimals() != 0) {
    _this->_internal_set_decimals(from._internal_decimals());
  }
  if (from._internal_order_types() != 0) {
    _this->_internal_set_order_types(from._internal_order_types());
  }
  if (from._internal_delist_date() != 0) {
    _this->_internal_set_delist_date(from._internal_delist_date());
  }
  if (from._internal_exchange_delist_date() != 0) {
    _this->_internal_set_exchange_delist_date(from._internal_exchange_delist_date());
  }
  if (from._internal_strategy_type() != 0) {
    _this->_internal_set_strategy_type(from._internal_strategy_type());
  }
  if (from._internal_real_decimals() != 0) {
    _this->_internal_set_real_decimals(from._internal_real_decimals());
  }
  if (from._internal_display_decimals() != 0) {
    _this->_internal_set_display_decimals(from._internal_display_decimals());
  }
  if (from._internal_clearing_decimals() != 0) {
    _this->_internal_set_clearing_decimals(from._internal_clearing_decimals());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_strategy_ratio = from._internal_strategy_ratio();
  ::uint64_t raw_strategy_ratio;
  memcpy(&raw_strategy_ratio, &tmp_strategy_ratio, sizeof(tmp_strategy_ratio));
  if (raw_strategy_ratio != 0) {
    _this->_internal_set_strategy_ratio(from._internal_strategy_ratio());
  }
  if (from._internal_volume_increment() != 0) {
    _this->_internal_set_volume_increment(from._internal_volume_increment());
  }
  if (from._internal_disabled() != 0) {
    _this->_internal_set_disabled(from._internal_disabled());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_maint_intra_margin = from._internal_maint_intra_margin();
  ::uint64_t raw_maint_intra_margin;
  memcpy(&raw_maint_intra_margin, &tmp_maint_intra_margin, sizeof(tmp_maint_intra_margin));
  if (raw_maint_intra_margin != 0) {
    _this->_internal_set_maint_intra_margin(from._internal_maint_intra_margin());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_maint_margin = from._internal_maint_margin();
  ::uint64_t raw_maint_margin;
  memcpy(&raw_maint_margin, &tmp_maint_margin, sizeof(tmp_maint_margin));
  if (raw_maint_margin != 0) {
    _this->_internal_set_maint_margin(from._internal_maint_margin());
  }
  static_assert(sizeof(::uint64_t) == sizeof(double), "Code assumes ::uint64_t and double are the same size.");
  double tmp_maint_vol_scan = from._internal_maint_vol_scan();
  ::uint64_t raw_maint_vol_scan;
  memcpy(&raw_maint_vol_scan, &tmp_maint_vol_scan, sizeof(tmp_maint_vol_scan));
  if (raw_maint_vol_scan != 0) {
    _this->_internal_set_maint_vol_scan(from._internal_maint_vol_scan());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDetails::CopyFrom(const MarketDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDetails::IsInitialized() const {
  return true;
}

void MarketDetails::InternalSwap(MarketDetails* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.legs_.InternalSwap(&other->_impl_.legs_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_id_, lhs_arena,
                                       &other->_impl_.exchange_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_id_, lhs_arena,
                                       &other->_impl_.contract_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_ref_, lhs_arena,
                                       &other->_impl_.market_ref_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.group_, lhs_arena,
                                       &other->_impl_.group_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.details_, lhs_arena,
                                       &other->_impl_.details_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.price_code_, lhs_arena,
                                       &other->_impl_.price_code_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.underlying_market_id_, lhs_arena,
                                       &other->_impl_.underlying_market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.vtt_, lhs_arena,
                                       &other->_impl_.vtt_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.maint_vol_scan_)
      + sizeof(MarketDetails::_impl_.maint_vol_scan_)
      - PROTOBUF_FIELD_OFFSET(MarketDetails, _impl_.point_value_)>(
          reinterpret_cast<char*>(&_impl_.point_value_),
          reinterpret_cast<char*>(&other->_impl_.point_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_getter, &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once,
      file_level_metadata_t4_2fv1_2fmarket_2fmarket_2eproto[5]);
}
// ===================================================================

class MarketDepth_DepthLine::_Internal {
 public:
  static const ::t4proto::v1::common::Price& price(const MarketDepth_DepthLine* msg);
};

const ::t4proto::v1::common::Price&
MarketDepth_DepthLine::_Internal::price(const MarketDepth_DepthLine* msg) {
  return *msg->_impl_.price_;
}
void MarketDepth_DepthLine::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
MarketDepth_DepthLine::MarketDepth_DepthLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketDepth.DepthLine)
}
MarketDepth_DepthLine::MarketDepth_DepthLine(const MarketDepth_DepthLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketDepth_DepthLine* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_){nullptr}
    , decltype(_impl_.volume_) {}

    , decltype(_impl_.num_orders_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::t4proto::v1::common::Price(*from._impl_.price_);
  }
  ::memcpy(&_impl_.volume_, &from._impl_.volume_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.num_orders_) -
    reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.num_orders_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketDepth.DepthLine)
}

inline void MarketDepth_DepthLine::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.price_){nullptr}
    , decltype(_impl_.volume_) { 0 }

    , decltype(_impl_.num_orders_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MarketDepth_DepthLine::~MarketDepth_DepthLine() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketDepth.DepthLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketDepth_DepthLine::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.price_;
}

void MarketDepth_DepthLine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketDepth_DepthLine::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketDepth.DepthLine)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  ::memset(&_impl_.volume_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.num_orders_) -
      reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.num_orders_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDepth_DepthLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .t4proto.v1.common.Price price = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 volume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 num_orders = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.num_orders_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketDepth_DepthLine::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketDepth.DepthLine)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .t4proto.v1.common.Price price = 1;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // int32 volume = 2;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_volume(), target);
  }

  // int32 num_orders = 3;
  if (this->_internal_num_orders() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_num_orders(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketDepth.DepthLine)
  return target;
}

::size_t MarketDepth_DepthLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketDepth.DepthLine)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .t4proto.v1.common.Price price = 1;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // int32 volume = 2;
  if (this->_internal_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_volume());
  }

  // int32 num_orders = 3;
  if (this->_internal_num_orders() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_num_orders());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketDepth_DepthLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketDepth_DepthLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketDepth_DepthLine::GetClassData() const { return &_class_data_; }


void MarketDepth_DepthLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketDepth_DepthLine*>(&to_msg);
  auto& from = static_cast<const MarketDepth_DepthLine&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketDepth.DepthLine)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_price());
  }
  if (from._internal_volume() != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  if (from._internal_num_orders() != 0) {
    _this->_internal_set_num_orders(from._internal_num_orders());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDepth_DepthLine::CopyFrom(const MarketDepth_DepthLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketDepth.DepthLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepth_DepthLine::IsInitialized() const {
  return true;
}

void MarketDepth_DepthLine::InternalSwap(MarketDepth_DepthLine* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDepth_DepthLine, _impl_.num_orders_)
      + sizeof(MarketDepth_DepthLine::_impl_.num_orders_)
      - PROTOBUF_FIELD_OFFSET(MarketDepth_DepthLine, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDepth_DepthLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_getter, &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once,
      file_level_metadata_t4_2fv1_2fmarket_2fmarket_2eproto[6]);
}
// ===================================================================

class MarketDepth_TradeData::_Internal {
 public:
  static const ::t4proto::v1::common::Price& last_trade_price(const MarketDepth_TradeData* msg);
  static const ::t4proto::v1::common::Price& last_trade_spd_price(const MarketDepth_TradeData* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const MarketDepth_TradeData* msg);
};

const ::t4proto::v1::common::Price&
MarketDepth_TradeData::_Internal::last_trade_price(const MarketDepth_TradeData* msg) {
  return *msg->_impl_.last_trade_price_;
}
const ::t4proto::v1::common::Price&
MarketDepth_TradeData::_Internal::last_trade_spd_price(const MarketDepth_TradeData* msg) {
  return *msg->_impl_.last_trade_spd_price_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketDepth_TradeData::_Internal::time(const MarketDepth_TradeData* msg) {
  return *msg->_impl_.time_;
}
void MarketDepth_TradeData::clear_last_trade_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_trade_price_ != nullptr) {
    delete _impl_.last_trade_price_;
  }
  _impl_.last_trade_price_ = nullptr;
}
void MarketDepth_TradeData::clear_last_trade_spd_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_trade_spd_price_ != nullptr) {
    delete _impl_.last_trade_spd_price_;
  }
  _impl_.last_trade_spd_price_ = nullptr;
}
void MarketDepth_TradeData::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
MarketDepth_TradeData::MarketDepth_TradeData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketDepth.TradeData)
}
MarketDepth_TradeData::MarketDepth_TradeData(const MarketDepth_TradeData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketDepth_TradeData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.last_trade_price_){nullptr}
    , decltype(_impl_.last_trade_spd_price_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.total_traded_volume_) {}

    , decltype(_impl_.total_trade_count_) {}

    , decltype(_impl_.last_trade_volume_) {}

    , decltype(_impl_.last_trade_total_volume_) {}

    , decltype(_impl_.last_trade_spd_volume_) {}

    , decltype(_impl_.last_trade_spd_total_volume_) {}

    , decltype(_impl_.due_to_spread_) {}

    , decltype(_impl_.at_bid_or_offer_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_last_trade_price()) {
    _this->_impl_.last_trade_price_ = new ::t4proto::v1::common::Price(*from._impl_.last_trade_price_);
  }
  if (from._internal_has_last_trade_spd_price()) {
    _this->_impl_.last_trade_spd_price_ = new ::t4proto::v1::common::Price(*from._impl_.last_trade_spd_price_);
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  ::memcpy(&_impl_.total_traded_volume_, &from._impl_.total_traded_volume_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.at_bid_or_offer_) -
    reinterpret_cast<char*>(&_impl_.total_traded_volume_)) + sizeof(_impl_.at_bid_or_offer_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketDepth.TradeData)
}

inline void MarketDepth_TradeData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.last_trade_price_){nullptr}
    , decltype(_impl_.last_trade_spd_price_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.total_traded_volume_) { 0 }

    , decltype(_impl_.total_trade_count_) { 0 }

    , decltype(_impl_.last_trade_volume_) { 0 }

    , decltype(_impl_.last_trade_total_volume_) { 0 }

    , decltype(_impl_.last_trade_spd_volume_) { 0 }

    , decltype(_impl_.last_trade_spd_total_volume_) { 0 }

    , decltype(_impl_.due_to_spread_) { false }

    , decltype(_impl_.at_bid_or_offer_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MarketDepth_TradeData::~MarketDepth_TradeData() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketDepth.TradeData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketDepth_TradeData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.last_trade_price_;
  if (this != internal_default_instance()) delete _impl_.last_trade_spd_price_;
  if (this != internal_default_instance()) delete _impl_.time_;
}

void MarketDepth_TradeData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketDepth_TradeData::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketDepth.TradeData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.last_trade_price_ != nullptr) {
    delete _impl_.last_trade_price_;
  }
  _impl_.last_trade_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_trade_spd_price_ != nullptr) {
    delete _impl_.last_trade_spd_price_;
  }
  _impl_.last_trade_spd_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  ::memset(&_impl_.total_traded_volume_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.at_bid_or_offer_) -
      reinterpret_cast<char*>(&_impl_.total_traded_volume_)) + sizeof(_impl_.at_bid_or_offer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDepth_TradeData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 total_traded_volume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.total_traded_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 total_trade_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.total_trade_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price last_trade_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_trade_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 last_trade_volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.last_trade_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 last_trade_total_volume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.last_trade_total_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price last_trade_spd_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_trade_spd_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 last_trade_spd_volume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.last_trade_spd_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 last_trade_spd_total_volume = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.last_trade_spd_total_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool due_to_spread = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.due_to_spread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.BidOffer at_bid_or_offer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_at_bid_or_offer(static_cast<::t4proto::v1::common::BidOffer>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketDepth_TradeData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketDepth.TradeData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 total_traded_volume = 1;
  if (this->_internal_total_traded_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_total_traded_volume(), target);
  }

  // int32 total_trade_count = 2;
  if (this->_internal_total_trade_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_total_trade_count(), target);
  }

  // .t4proto.v1.common.Price last_trade_price = 3;
  if (this->_internal_has_last_trade_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::last_trade_price(this),
        _Internal::last_trade_price(this).GetCachedSize(), target, stream);
  }

  // int32 last_trade_volume = 4;
  if (this->_internal_last_trade_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_last_trade_volume(), target);
  }

  // int32 last_trade_total_volume = 5;
  if (this->_internal_last_trade_total_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_last_trade_total_volume(), target);
  }

  // .t4proto.v1.common.Price last_trade_spd_price = 6;
  if (this->_internal_has_last_trade_spd_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::last_trade_spd_price(this),
        _Internal::last_trade_spd_price(this).GetCachedSize(), target, stream);
  }

  // int32 last_trade_spd_volume = 7;
  if (this->_internal_last_trade_spd_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        7, this->_internal_last_trade_spd_volume(), target);
  }

  // int32 last_trade_spd_total_volume = 8;
  if (this->_internal_last_trade_spd_total_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        8, this->_internal_last_trade_spd_total_volume(), target);
  }

  // bool due_to_spread = 9;
  if (this->_internal_due_to_spread() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_due_to_spread(), target);
  }

  // .t4proto.v1.common.BidOffer at_bid_or_offer = 10;
  if (this->_internal_at_bid_or_offer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_at_bid_or_offer(), target);
  }

  // .google.protobuf.Timestamp time = 11;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketDepth.TradeData)
  return target;
}

::size_t MarketDepth_TradeData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketDepth.TradeData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .t4proto.v1.common.Price last_trade_price = 3;
  if (this->_internal_has_last_trade_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_trade_price_);
  }

  // .t4proto.v1.common.Price last_trade_spd_price = 6;
  if (this->_internal_has_last_trade_spd_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_trade_spd_price_);
  }

  // .google.protobuf.Timestamp time = 11;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // int32 total_traded_volume = 1;
  if (this->_internal_total_traded_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_total_traded_volume());
  }

  // int32 total_trade_count = 2;
  if (this->_internal_total_trade_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_total_trade_count());
  }

  // int32 last_trade_volume = 4;
  if (this->_internal_last_trade_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_last_trade_volume());
  }

  // int32 last_trade_total_volume = 5;
  if (this->_internal_last_trade_total_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_last_trade_total_volume());
  }

  // int32 last_trade_spd_volume = 7;
  if (this->_internal_last_trade_spd_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_last_trade_spd_volume());
  }

  // int32 last_trade_spd_total_volume = 8;
  if (this->_internal_last_trade_spd_total_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_last_trade_spd_total_volume());
  }

  // bool due_to_spread = 9;
  if (this->_internal_due_to_spread() != 0) {
    total_size += 2;
  }

  // .t4proto.v1.common.BidOffer at_bid_or_offer = 10;
  if (this->_internal_at_bid_or_offer() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_at_bid_or_offer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketDepth_TradeData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketDepth_TradeData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketDepth_TradeData::GetClassData() const { return &_class_data_; }


void MarketDepth_TradeData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketDepth_TradeData*>(&to_msg);
  auto& from = static_cast<const MarketDepth_TradeData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketDepth.TradeData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_last_trade_price()) {
    _this->_internal_mutable_last_trade_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_last_trade_price());
  }
  if (from._internal_has_last_trade_spd_price()) {
    _this->_internal_mutable_last_trade_spd_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_last_trade_spd_price());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_total_traded_volume() != 0) {
    _this->_internal_set_total_traded_volume(from._internal_total_traded_volume());
  }
  if (from._internal_total_trade_count() != 0) {
    _this->_internal_set_total_trade_count(from._internal_total_trade_count());
  }
  if (from._internal_last_trade_volume() != 0) {
    _this->_internal_set_last_trade_volume(from._internal_last_trade_volume());
  }
  if (from._internal_last_trade_total_volume() != 0) {
    _this->_internal_set_last_trade_total_volume(from._internal_last_trade_total_volume());
  }
  if (from._internal_last_trade_spd_volume() != 0) {
    _this->_internal_set_last_trade_spd_volume(from._internal_last_trade_spd_volume());
  }
  if (from._internal_last_trade_spd_total_volume() != 0) {
    _this->_internal_set_last_trade_spd_total_volume(from._internal_last_trade_spd_total_volume());
  }
  if (from._internal_due_to_spread() != 0) {
    _this->_internal_set_due_to_spread(from._internal_due_to_spread());
  }
  if (from._internal_at_bid_or_offer() != 0) {
    _this->_internal_set_at_bid_or_offer(from._internal_at_bid_or_offer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDepth_TradeData::CopyFrom(const MarketDepth_TradeData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketDepth.TradeData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepth_TradeData::IsInitialized() const {
  return true;
}

void MarketDepth_TradeData::InternalSwap(MarketDepth_TradeData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.at_bid_or_offer_)
      + sizeof(MarketDepth_TradeData::_impl_.at_bid_or_offer_)
      - PROTOBUF_FIELD_OFFSET(MarketDepth_TradeData, _impl_.last_trade_price_)>(
          reinterpret_cast<char*>(&_impl_.last_trade_price_),
          reinterpret_cast<char*>(&other->_impl_.last_trade_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDepth_TradeData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_getter, &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once,
      file_level_metadata_t4_2fv1_2fmarket_2fmarket_2eproto[7]);
}
// ===================================================================

class MarketDepth::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const MarketDepth* msg);
  static const ::t4proto::v1::market::MarketDepth_TradeData& trade_data(const MarketDepth* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketDepth::_Internal::time(const MarketDepth* msg) {
  return *msg->_impl_.time_;
}
const ::t4proto::v1::market::MarketDepth_TradeData&
MarketDepth::_Internal::trade_data(const MarketDepth* msg) {
  return *msg->_impl_.trade_data_;
}
void MarketDepth::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
MarketDepth::MarketDepth(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketDepth)
}
MarketDepth::MarketDepth(const MarketDepth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketDepth* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bids_){from._impl_.bids_}
    , decltype(_impl_.offers_){from._impl_.offers_}
    , decltype(_impl_.implied_bids_){from._impl_.implied_bids_}
    , decltype(_impl_.implied_offers_){from._impl_.implied_offers_}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.trade_data_){nullptr}
    , decltype(_impl_.depth_levels_) {}

    , decltype(_impl_.depth_buffer_) {}

    , decltype(_impl_.delayed_) {}

    , decltype(_impl_.mode_) {}

    , decltype(_impl_.flags_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  if (from._internal_has_trade_data()) {
    _this->_impl_.trade_data_ = new ::t4proto::v1::market::MarketDepth_TradeData(*from._impl_.trade_data_);
  }
  ::memcpy(&_impl_.depth_levels_, &from._impl_.depth_levels_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.flags_) -
    reinterpret_cast<char*>(&_impl_.depth_levels_)) + sizeof(_impl_.flags_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketDepth)
}

inline void MarketDepth::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.bids_){arena}
    , decltype(_impl_.offers_){arena}
    , decltype(_impl_.implied_bids_){arena}
    , decltype(_impl_.implied_offers_){arena}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.trade_data_){nullptr}
    , decltype(_impl_.depth_levels_) { 0 }

    , decltype(_impl_.depth_buffer_) { 0 }

    , decltype(_impl_.delayed_) { false }

    , decltype(_impl_.mode_) { 0 }

    , decltype(_impl_.flags_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketDepth::~MarketDepth() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketDepth)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketDepth::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bids_.~RepeatedPtrField();
  _impl_.offers_.~RepeatedPtrField();
  _impl_.implied_bids_.~RepeatedPtrField();
  _impl_.implied_offers_.~RepeatedPtrField();
  _impl_.market_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
  if (this != internal_default_instance()) delete _impl_.trade_data_;
}

void MarketDepth::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketDepth::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketDepth)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bids_.Clear();
  _impl_.offers_.Clear();
  _impl_.implied_bids_.Clear();
  _impl_.implied_offers_.Clear();
  _impl_.market_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.trade_data_ != nullptr) {
    delete _impl_.trade_data_;
  }
  _impl_.trade_data_ = nullptr;
  ::memset(&_impl_.depth_levels_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.flags_) -
      reinterpret_cast<char*>(&_impl_.depth_levels_)) + sizeof(_impl_.flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDepth::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketDepth.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.DepthLevels depth_levels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_depth_levels(static_cast<::t4proto::v1::common::DepthLevels>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.DepthBuffer depth_buffer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_depth_buffer(static_cast<::t4proto::v1::common::DepthBuffer>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool delayed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.delayed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .t4proto.v1.market.MarketDepth.DepthLine bids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .t4proto.v1.market.MarketDepth.DepthLine offers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_offers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .t4proto.v1.market.MarketDepth.DepthLine implied_bids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_implied_bids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .t4proto.v1.market.MarketDepth.DepthLine implied_offers = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_implied_offers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.MarketMode mode = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::t4proto::v1::common::MarketMode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.MarketFlags2 flags = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_flags(static_cast<::t4proto::v1::common::MarketFlags2>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.market.MarketDepth.TradeData trade_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_trade_data(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketDepth::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketDepth)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDepth.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .t4proto.v1.common.DepthLevels depth_levels = 2;
  if (this->_internal_depth_levels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_depth_levels(), target);
  }

  // .t4proto.v1.common.DepthBuffer depth_buffer = 3;
  if (this->_internal_depth_buffer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_depth_buffer(), target);
  }

  // .google.protobuf.Timestamp time = 4;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // bool delayed = 5;
  if (this->_internal_delayed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_delayed(), target);
  }

  // repeated .t4proto.v1.market.MarketDepth.DepthLine bids = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bids_size()); i < n; i++) {
    const auto& repfield = this->_internal_bids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .t4proto.v1.market.MarketDepth.DepthLine offers = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_offers_size()); i < n; i++) {
    const auto& repfield = this->_internal_offers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .t4proto.v1.market.MarketDepth.DepthLine implied_bids = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_implied_bids_size()); i < n; i++) {
    const auto& repfield = this->_internal_implied_bids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .t4proto.v1.market.MarketDepth.DepthLine implied_offers = 9;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_implied_offers_size()); i < n; i++) {
    const auto& repfield = this->_internal_implied_offers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.MarketMode mode = 10;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_mode(), target);
  }

  // .t4proto.v1.common.MarketFlags2 flags = 11;
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        11, this->_internal_flags(), target);
  }

  // .t4proto.v1.market.MarketDepth.TradeData trade_data = 12;
  if (this->_internal_has_trade_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::trade_data(this),
        _Internal::trade_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketDepth)
  return target;
}

::size_t MarketDepth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketDepth)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .t4proto.v1.market.MarketDepth.DepthLine bids = 6;
  total_size += 1UL * this->_internal_bids_size();
  for (const auto& msg : this->_impl_.bids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .t4proto.v1.market.MarketDepth.DepthLine offers = 7;
  total_size += 1UL * this->_internal_offers_size();
  for (const auto& msg : this->_impl_.offers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .t4proto.v1.market.MarketDepth.DepthLine implied_bids = 8;
  total_size += 1UL * this->_internal_implied_bids_size();
  for (const auto& msg : this->_impl_.implied_bids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .t4proto.v1.market.MarketDepth.DepthLine implied_offers = 9;
  total_size += 1UL * this->_internal_implied_offers_size();
  for (const auto& msg : this->_impl_.implied_offers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // .google.protobuf.Timestamp time = 4;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // .t4proto.v1.market.MarketDepth.TradeData trade_data = 12;
  if (this->_internal_has_trade_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trade_data_);
  }

  // .t4proto.v1.common.DepthLevels depth_levels = 2;
  if (this->_internal_depth_levels() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_depth_levels());
  }

  // .t4proto.v1.common.DepthBuffer depth_buffer = 3;
  if (this->_internal_depth_buffer() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_depth_buffer());
  }

  // bool delayed = 5;
  if (this->_internal_delayed() != 0) {
    total_size += 2;
  }

  // .t4proto.v1.common.MarketMode mode = 10;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // .t4proto.v1.common.MarketFlags2 flags = 11;
  if (this->_internal_flags() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketDepth::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketDepth::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketDepth::GetClassData() const { return &_class_data_; }


void MarketDepth::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketDepth*>(&to_msg);
  auto& from = static_cast<const MarketDepth&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketDepth)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bids_.MergeFrom(from._impl_.bids_);
  _this->_impl_.offers_.MergeFrom(from._impl_.offers_);
  _this->_impl_.implied_bids_.MergeFrom(from._impl_.implied_bids_);
  _this->_impl_.implied_offers_.MergeFrom(from._impl_.implied_offers_);
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_has_trade_data()) {
    _this->_internal_mutable_trade_data()->::t4proto::v1::market::MarketDepth_TradeData::MergeFrom(
        from._internal_trade_data());
  }
  if (from._internal_depth_levels() != 0) {
    _this->_internal_set_depth_levels(from._internal_depth_levels());
  }
  if (from._internal_depth_buffer() != 0) {
    _this->_internal_set_depth_buffer(from._internal_depth_buffer());
  }
  if (from._internal_delayed() != 0) {
    _this->_internal_set_delayed(from._internal_delayed());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_flags() != 0) {
    _this->_internal_set_flags(from._internal_flags());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDepth::CopyFrom(const MarketDepth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketDepth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepth::IsInitialized() const {
  return true;
}

void MarketDepth::InternalSwap(MarketDepth* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bids_.InternalSwap(&other->_impl_.bids_);
  _impl_.offers_.InternalSwap(&other->_impl_.offers_);
  _impl_.implied_bids_.InternalSwap(&other->_impl_.implied_bids_);
  _impl_.implied_offers_.InternalSwap(&other->_impl_.implied_offers_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.flags_)
      + sizeof(MarketDepth::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(MarketDepth, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDepth::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_getter, &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once,
      file_level_metadata_t4_2fv1_2fmarket_2fmarket_2eproto[8]);
}
// ===================================================================

class MarketDepthTrade::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const MarketDepthTrade* msg);
  static const ::t4proto::v1::common::Price& last_trade_price(const MarketDepthTrade* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketDepthTrade::_Internal::time(const MarketDepthTrade* msg) {
  return *msg->_impl_.time_;
}
const ::t4proto::v1::common::Price&
MarketDepthTrade::_Internal::last_trade_price(const MarketDepthTrade* msg) {
  return *msg->_impl_.last_trade_price_;
}
void MarketDepthTrade::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
void MarketDepthTrade::clear_last_trade_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.last_trade_price_ != nullptr) {
    delete _impl_.last_trade_price_;
  }
  _impl_.last_trade_price_ = nullptr;
}
MarketDepthTrade::MarketDepthTrade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketDepthTrade)
}
MarketDepthTrade::MarketDepthTrade(const MarketDepthTrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketDepthTrade* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.order_volumes_) { from._impl_.order_volumes_ }
    ,/* _impl_._order_volumes_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.last_trade_price_){nullptr}
    , decltype(_impl_.total_traded_volume_) {}

    , decltype(_impl_.last_trade_volume_) {}

    , decltype(_impl_.at_bid_or_offer_) {}

    , decltype(_impl_.due_to_spread_) {}

    , decltype(_impl_.delayed_) {}

    , decltype(_impl_.total_trade_count_) {}

    , decltype(_impl_.mode_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  if (from._internal_has_last_trade_price()) {
    _this->_impl_.last_trade_price_ = new ::t4proto::v1::common::Price(*from._impl_.last_trade_price_);
  }
  ::memcpy(&_impl_.total_traded_volume_, &from._impl_.total_traded_volume_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.mode_) -
    reinterpret_cast<char*>(&_impl_.total_traded_volume_)) + sizeof(_impl_.mode_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketDepthTrade)
}

inline void MarketDepthTrade::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.order_volumes_) { arena }
    ,/* _impl_._order_volumes_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.last_trade_price_){nullptr}
    , decltype(_impl_.total_traded_volume_) { 0 }

    , decltype(_impl_.last_trade_volume_) { 0 }

    , decltype(_impl_.at_bid_or_offer_) { 0 }

    , decltype(_impl_.due_to_spread_) { false }

    , decltype(_impl_.delayed_) { false }

    , decltype(_impl_.total_trade_count_) { 0 }

    , decltype(_impl_.mode_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketDepthTrade::~MarketDepthTrade() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketDepthTrade)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketDepthTrade::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.order_volumes_.~RepeatedField();
  _impl_.market_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
  if (this != internal_default_instance()) delete _impl_.last_trade_price_;
}

void MarketDepthTrade::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketDepthTrade::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketDepthTrade)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.order_volumes_.Clear();
  _impl_.market_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.last_trade_price_ != nullptr) {
    delete _impl_.last_trade_price_;
  }
  _impl_.last_trade_price_ = nullptr;
  ::memset(&_impl_.total_traded_volume_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.mode_) -
      reinterpret_cast<char*>(&_impl_.total_traded_volume_)) + sizeof(_impl_.mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketDepthTrade::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketDepthTrade.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 total_traded_volume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.total_traded_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 last_trade_volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.last_trade_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool due_to_spread = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.due_to_spread_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.BidOffer at_bid_or_offer = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_at_bid_or_offer(static_cast<::t4proto::v1::common::BidOffer>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool delayed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.delayed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated int32 order_volumes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_order_volumes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 64) {
          _internal_add_order_volumes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 total_trade_count = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.total_trade_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price last_trade_price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_last_trade_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.MarketMode mode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::t4proto::v1::common::MarketMode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketDepthTrade::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketDepthTrade)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketDepthTrade.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .google.protobuf.Timestamp time = 2;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // int32 total_traded_volume = 3;
  if (this->_internal_total_traded_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_total_traded_volume(), target);
  }

  // int32 last_trade_volume = 4;
  if (this->_internal_last_trade_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_last_trade_volume(), target);
  }

  // bool due_to_spread = 5;
  if (this->_internal_due_to_spread() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_due_to_spread(), target);
  }

  // .t4proto.v1.common.BidOffer at_bid_or_offer = 6;
  if (this->_internal_at_bid_or_offer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_at_bid_or_offer(), target);
  }

  // bool delayed = 7;
  if (this->_internal_delayed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_delayed(), target);
  }

  // repeated int32 order_volumes = 8;
  {
    int byte_size = _impl_._order_volumes_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(8, _internal_order_volumes(),
                                                 byte_size, target);
    }
  }

  // int32 total_trade_count = 9;
  if (this->_internal_total_trade_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        9, this->_internal_total_trade_count(), target);
  }

  // .t4proto.v1.common.Price last_trade_price = 10;
  if (this->_internal_has_last_trade_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::last_trade_price(this),
        _Internal::last_trade_price(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.MarketMode mode = 11;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        11, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketDepthTrade)
  return target;
}

::size_t MarketDepthTrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketDepthTrade)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 order_volumes = 8;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int32Size(this->_impl_.order_volumes_)
    ;
    _impl_._order_volumes_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // .google.protobuf.Timestamp time = 2;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // .t4proto.v1.common.Price last_trade_price = 10;
  if (this->_internal_has_last_trade_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.last_trade_price_);
  }

  // int32 total_traded_volume = 3;
  if (this->_internal_total_traded_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_total_traded_volume());
  }

  // int32 last_trade_volume = 4;
  if (this->_internal_last_trade_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_last_trade_volume());
  }

  // .t4proto.v1.common.BidOffer at_bid_or_offer = 6;
  if (this->_internal_at_bid_or_offer() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_at_bid_or_offer());
  }

  // bool due_to_spread = 5;
  if (this->_internal_due_to_spread() != 0) {
    total_size += 2;
  }

  // bool delayed = 7;
  if (this->_internal_delayed() != 0) {
    total_size += 2;
  }

  // int32 total_trade_count = 9;
  if (this->_internal_total_trade_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_total_trade_count());
  }

  // .t4proto.v1.common.MarketMode mode = 11;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketDepthTrade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketDepthTrade::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketDepthTrade::GetClassData() const { return &_class_data_; }


void MarketDepthTrade::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketDepthTrade*>(&to_msg);
  auto& from = static_cast<const MarketDepthTrade&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketDepthTrade)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.order_volumes_.MergeFrom(from._impl_.order_volumes_);
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_has_last_trade_price()) {
    _this->_internal_mutable_last_trade_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_last_trade_price());
  }
  if (from._internal_total_traded_volume() != 0) {
    _this->_internal_set_total_traded_volume(from._internal_total_traded_volume());
  }
  if (from._internal_last_trade_volume() != 0) {
    _this->_internal_set_last_trade_volume(from._internal_last_trade_volume());
  }
  if (from._internal_at_bid_or_offer() != 0) {
    _this->_internal_set_at_bid_or_offer(from._internal_at_bid_or_offer());
  }
  if (from._internal_due_to_spread() != 0) {
    _this->_internal_set_due_to_spread(from._internal_due_to_spread());
  }
  if (from._internal_delayed() != 0) {
    _this->_internal_set_delayed(from._internal_delayed());
  }
  if (from._internal_total_trade_count() != 0) {
    _this->_internal_set_total_trade_count(from._internal_total_trade_count());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketDepthTrade::CopyFrom(const MarketDepthTrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketDepthTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDepthTrade::IsInitialized() const {
  return true;
}

void MarketDepthTrade::InternalSwap(MarketDepthTrade* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.order_volumes_.InternalSwap(&other->_impl_.order_volumes_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.mode_)
      + sizeof(MarketDepthTrade::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(MarketDepthTrade, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketDepthTrade::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_getter, &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once,
      file_level_metadata_t4_2fv1_2fmarket_2fmarket_2eproto[9]);
}
// ===================================================================

class MarketHighLow::_Internal {
 public:
  static const ::t4proto::v1::common::Price& open_price(const MarketHighLow* msg);
  static const ::t4proto::v1::common::Price& high_price(const MarketHighLow* msg);
  static const ::t4proto::v1::common::Price& low_price(const MarketHighLow* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const MarketHighLow* msg);
};

const ::t4proto::v1::common::Price&
MarketHighLow::_Internal::open_price(const MarketHighLow* msg) {
  return *msg->_impl_.open_price_;
}
const ::t4proto::v1::common::Price&
MarketHighLow::_Internal::high_price(const MarketHighLow* msg) {
  return *msg->_impl_.high_price_;
}
const ::t4proto::v1::common::Price&
MarketHighLow::_Internal::low_price(const MarketHighLow* msg) {
  return *msg->_impl_.low_price_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketHighLow::_Internal::time(const MarketHighLow* msg) {
  return *msg->_impl_.time_;
}
void MarketHighLow::clear_open_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.open_price_ != nullptr) {
    delete _impl_.open_price_;
  }
  _impl_.open_price_ = nullptr;
}
void MarketHighLow::clear_high_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.high_price_ != nullptr) {
    delete _impl_.high_price_;
  }
  _impl_.high_price_ = nullptr;
}
void MarketHighLow::clear_low_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.low_price_ != nullptr) {
    delete _impl_.low_price_;
  }
  _impl_.low_price_ = nullptr;
}
void MarketHighLow::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
MarketHighLow::MarketHighLow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketHighLow)
}
MarketHighLow::MarketHighLow(const MarketHighLow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketHighLow* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.open_price_){nullptr}
    , decltype(_impl_.high_price_){nullptr}
    , decltype(_impl_.low_price_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.trade_date_) {}

    , decltype(_impl_.delayed_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_open_price()) {
    _this->_impl_.open_price_ = new ::t4proto::v1::common::Price(*from._impl_.open_price_);
  }
  if (from._internal_has_high_price()) {
    _this->_impl_.high_price_ = new ::t4proto::v1::common::Price(*from._impl_.high_price_);
  }
  if (from._internal_has_low_price()) {
    _this->_impl_.low_price_ = new ::t4proto::v1::common::Price(*from._impl_.low_price_);
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  ::memcpy(&_impl_.trade_date_, &from._impl_.trade_date_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.delayed_) -
    reinterpret_cast<char*>(&_impl_.trade_date_)) + sizeof(_impl_.delayed_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketHighLow)
}

inline void MarketHighLow::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.open_price_){nullptr}
    , decltype(_impl_.high_price_){nullptr}
    , decltype(_impl_.low_price_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.trade_date_) { ::int64_t{0} }

    , decltype(_impl_.delayed_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketHighLow::~MarketHighLow() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketHighLow)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketHighLow::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.open_price_;
  if (this != internal_default_instance()) delete _impl_.high_price_;
  if (this != internal_default_instance()) delete _impl_.low_price_;
  if (this != internal_default_instance()) delete _impl_.time_;
}

void MarketHighLow::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketHighLow::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketHighLow)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.open_price_ != nullptr) {
    delete _impl_.open_price_;
  }
  _impl_.open_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.high_price_ != nullptr) {
    delete _impl_.high_price_;
  }
  _impl_.high_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.low_price_ != nullptr) {
    delete _impl_.low_price_;
  }
  _impl_.low_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  ::memset(&_impl_.trade_date_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.delayed_) -
      reinterpret_cast<char*>(&_impl_.trade_date_)) + sizeof(_impl_.delayed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketHighLow::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketHighLow.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price open_price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price high_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_high_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price low_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_low_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 trade_date = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.trade_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool delayed = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _impl_.delayed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketHighLow::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketHighLow)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketHighLow.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .t4proto.v1.common.Price open_price = 2;
  if (this->_internal_has_open_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::open_price(this),
        _Internal::open_price(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.Price high_price = 3;
  if (this->_internal_has_high_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::high_price(this),
        _Internal::high_price(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.Price low_price = 4;
  if (this->_internal_has_low_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::low_price(this),
        _Internal::low_price(this).GetCachedSize(), target, stream);
  }

  // int64 trade_date = 5;
  if (this->_internal_trade_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_trade_date(), target);
  }

  // .google.protobuf.Timestamp time = 6;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // bool delayed = 7;
  if (this->_internal_delayed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_delayed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketHighLow)
  return target;
}

::size_t MarketHighLow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketHighLow)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // .t4proto.v1.common.Price open_price = 2;
  if (this->_internal_has_open_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.open_price_);
  }

  // .t4proto.v1.common.Price high_price = 3;
  if (this->_internal_has_high_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.high_price_);
  }

  // .t4proto.v1.common.Price low_price = 4;
  if (this->_internal_has_low_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.low_price_);
  }

  // .google.protobuf.Timestamp time = 6;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // int64 trade_date = 5;
  if (this->_internal_trade_date() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_trade_date());
  }

  // bool delayed = 7;
  if (this->_internal_delayed() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketHighLow::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketHighLow::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketHighLow::GetClassData() const { return &_class_data_; }


void MarketHighLow::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketHighLow*>(&to_msg);
  auto& from = static_cast<const MarketHighLow&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketHighLow)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_has_open_price()) {
    _this->_internal_mutable_open_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_open_price());
  }
  if (from._internal_has_high_price()) {
    _this->_internal_mutable_high_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_high_price());
  }
  if (from._internal_has_low_price()) {
    _this->_internal_mutable_low_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_low_price());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_trade_date() != 0) {
    _this->_internal_set_trade_date(from._internal_trade_date());
  }
  if (from._internal_delayed() != 0) {
    _this->_internal_set_delayed(from._internal_delayed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketHighLow::CopyFrom(const MarketHighLow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketHighLow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketHighLow::IsInitialized() const {
  return true;
}

void MarketHighLow::InternalSwap(MarketHighLow* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketHighLow, _impl_.delayed_)
      + sizeof(MarketHighLow::_impl_.delayed_)
      - PROTOBUF_FIELD_OFFSET(MarketHighLow, _impl_.open_price_)>(
          reinterpret_cast<char*>(&_impl_.open_price_),
          reinterpret_cast<char*>(&other->_impl_.open_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketHighLow::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_getter, &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once,
      file_level_metadata_t4_2fv1_2fmarket_2fmarket_2eproto[10]);
}
// ===================================================================

class MarketPriceLimits::_Internal {
 public:
  static const ::t4proto::v1::common::Price& high_price(const MarketPriceLimits* msg);
  static const ::t4proto::v1::common::Price& low_price(const MarketPriceLimits* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const MarketPriceLimits* msg);
};

const ::t4proto::v1::common::Price&
MarketPriceLimits::_Internal::high_price(const MarketPriceLimits* msg) {
  return *msg->_impl_.high_price_;
}
const ::t4proto::v1::common::Price&
MarketPriceLimits::_Internal::low_price(const MarketPriceLimits* msg) {
  return *msg->_impl_.low_price_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketPriceLimits::_Internal::time(const MarketPriceLimits* msg) {
  return *msg->_impl_.time_;
}
void MarketPriceLimits::clear_high_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.high_price_ != nullptr) {
    delete _impl_.high_price_;
  }
  _impl_.high_price_ = nullptr;
}
void MarketPriceLimits::clear_low_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.low_price_ != nullptr) {
    delete _impl_.low_price_;
  }
  _impl_.low_price_ = nullptr;
}
void MarketPriceLimits::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
MarketPriceLimits::MarketPriceLimits(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketPriceLimits)
}
MarketPriceLimits::MarketPriceLimits(const MarketPriceLimits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketPriceLimits* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.high_price_){nullptr}
    , decltype(_impl_.low_price_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.delayed_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_high_price()) {
    _this->_impl_.high_price_ = new ::t4proto::v1::common::Price(*from._impl_.high_price_);
  }
  if (from._internal_has_low_price()) {
    _this->_impl_.low_price_ = new ::t4proto::v1::common::Price(*from._impl_.low_price_);
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  _this->_impl_.delayed_ = from._impl_.delayed_;
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketPriceLimits)
}

inline void MarketPriceLimits::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.market_id_) {}

    , decltype(_impl_.high_price_){nullptr}
    , decltype(_impl_.low_price_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.delayed_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketPriceLimits::~MarketPriceLimits() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketPriceLimits)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketPriceLimits::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.market_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.high_price_;
  if (this != internal_default_instance()) delete _impl_.low_price_;
  if (this != internal_default_instance()) delete _impl_.time_;
}

void MarketPriceLimits::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketPriceLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketPriceLimits)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.market_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.high_price_ != nullptr) {
    delete _impl_.high_price_;
  }
  _impl_.high_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.low_price_ != nullptr) {
    delete _impl_.low_price_;
  }
  _impl_.low_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  _impl_.delayed_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketPriceLimits::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketPriceLimits.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price high_price = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_high_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price low_price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_low_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool delayed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.delayed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketPriceLimits::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketPriceLimits)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketPriceLimits.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .t4proto.v1.common.Price high_price = 2;
  if (this->_internal_has_high_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::high_price(this),
        _Internal::high_price(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.Price low_price = 3;
  if (this->_internal_has_low_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::low_price(this),
        _Internal::low_price(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time = 4;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // bool delayed = 5;
  if (this->_internal_delayed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_delayed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketPriceLimits)
  return target;
}

::size_t MarketPriceLimits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketPriceLimits)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // .t4proto.v1.common.Price high_price = 2;
  if (this->_internal_has_high_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.high_price_);
  }

  // .t4proto.v1.common.Price low_price = 3;
  if (this->_internal_has_low_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.low_price_);
  }

  // .google.protobuf.Timestamp time = 4;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // bool delayed = 5;
  if (this->_internal_delayed() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketPriceLimits::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketPriceLimits::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketPriceLimits::GetClassData() const { return &_class_data_; }


void MarketPriceLimits::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketPriceLimits*>(&to_msg);
  auto& from = static_cast<const MarketPriceLimits&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketPriceLimits)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_has_high_price()) {
    _this->_internal_mutable_high_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_high_price());
  }
  if (from._internal_has_low_price()) {
    _this->_internal_mutable_low_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_low_price());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_delayed() != 0) {
    _this->_internal_set_delayed(from._internal_delayed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketPriceLimits::CopyFrom(const MarketPriceLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketPriceLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketPriceLimits::IsInitialized() const {
  return true;
}

void MarketPriceLimits::InternalSwap(MarketPriceLimits* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketPriceLimits, _impl_.delayed_)
      + sizeof(MarketPriceLimits::_impl_.delayed_)
      - PROTOBUF_FIELD_OFFSET(MarketPriceLimits, _impl_.high_price_)>(
          reinterpret_cast<char*>(&_impl_.high_price_),
          reinterpret_cast<char*>(&other->_impl_.high_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketPriceLimits::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_getter, &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once,
      file_level_metadata_t4_2fv1_2fmarket_2fmarket_2eproto[11]);
}
// ===================================================================

class MarketSettlement::_Internal {
 public:
  static const ::t4proto::v1::common::Price& settlement_price(const MarketSettlement* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& settlement_time(const MarketSettlement* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& settlement_trade_date(const MarketSettlement* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& settlement_held_time(const MarketSettlement* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& settlement_held_trade_date(const MarketSettlement* msg);
  static const ::t4proto::v1::common::Price& implied_price(const MarketSettlement* msg);
  static const ::t4proto::v1::common::Price& implied_held_price(const MarketSettlement* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& implied_time(const MarketSettlement* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& open_interest_time(const MarketSettlement* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& open_interest_trade_date(const MarketSettlement* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& cleared_volume_time(const MarketSettlement* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& cleared_volume_trade_date(const MarketSettlement* msg);
  static const ::t4proto::v1::common::Price& vwap_price(const MarketSettlement* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& vwap_time(const MarketSettlement* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& vwap_trade_date(const MarketSettlement* msg);
};

const ::t4proto::v1::common::Price&
MarketSettlement::_Internal::settlement_price(const MarketSettlement* msg) {
  return *msg->_impl_.settlement_price_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketSettlement::_Internal::settlement_time(const MarketSettlement* msg) {
  return *msg->_impl_.settlement_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketSettlement::_Internal::settlement_trade_date(const MarketSettlement* msg) {
  return *msg->_impl_.settlement_trade_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketSettlement::_Internal::settlement_held_time(const MarketSettlement* msg) {
  return *msg->_impl_.settlement_held_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketSettlement::_Internal::settlement_held_trade_date(const MarketSettlement* msg) {
  return *msg->_impl_.settlement_held_trade_date_;
}
const ::t4proto::v1::common::Price&
MarketSettlement::_Internal::implied_price(const MarketSettlement* msg) {
  return *msg->_impl_.implied_price_;
}
const ::t4proto::v1::common::Price&
MarketSettlement::_Internal::implied_held_price(const MarketSettlement* msg) {
  return *msg->_impl_.implied_held_price_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketSettlement::_Internal::implied_time(const MarketSettlement* msg) {
  return *msg->_impl_.implied_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketSettlement::_Internal::open_interest_time(const MarketSettlement* msg) {
  return *msg->_impl_.open_interest_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketSettlement::_Internal::open_interest_trade_date(const MarketSettlement* msg) {
  return *msg->_impl_.open_interest_trade_date_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketSettlement::_Internal::cleared_volume_time(const MarketSettlement* msg) {
  return *msg->_impl_.cleared_volume_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketSettlement::_Internal::cleared_volume_trade_date(const MarketSettlement* msg) {
  return *msg->_impl_.cleared_volume_trade_date_;
}
const ::t4proto::v1::common::Price&
MarketSettlement::_Internal::vwap_price(const MarketSettlement* msg) {
  return *msg->_impl_.vwap_price_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketSettlement::_Internal::vwap_time(const MarketSettlement* msg) {
  return *msg->_impl_.vwap_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketSettlement::_Internal::vwap_trade_date(const MarketSettlement* msg) {
  return *msg->_impl_.vwap_trade_date_;
}
void MarketSettlement::clear_settlement_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.settlement_price_ != nullptr) {
    delete _impl_.settlement_price_;
  }
  _impl_.settlement_price_ = nullptr;
}
void MarketSettlement::clear_settlement_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.settlement_time_ != nullptr) {
    delete _impl_.settlement_time_;
  }
  _impl_.settlement_time_ = nullptr;
}
void MarketSettlement::clear_settlement_trade_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.settlement_trade_date_ != nullptr) {
    delete _impl_.settlement_trade_date_;
  }
  _impl_.settlement_trade_date_ = nullptr;
}
void MarketSettlement::clear_settlement_held_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.settlement_held_time_ != nullptr) {
    delete _impl_.settlement_held_time_;
  }
  _impl_.settlement_held_time_ = nullptr;
}
void MarketSettlement::clear_settlement_held_trade_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.settlement_held_trade_date_ != nullptr) {
    delete _impl_.settlement_held_trade_date_;
  }
  _impl_.settlement_held_trade_date_ = nullptr;
}
void MarketSettlement::clear_implied_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.implied_price_ != nullptr) {
    delete _impl_.implied_price_;
  }
  _impl_.implied_price_ = nullptr;
}
void MarketSettlement::clear_implied_held_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.implied_held_price_ != nullptr) {
    delete _impl_.implied_held_price_;
  }
  _impl_.implied_held_price_ = nullptr;
}
void MarketSettlement::clear_implied_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.implied_time_ != nullptr) {
    delete _impl_.implied_time_;
  }
  _impl_.implied_time_ = nullptr;
}
void MarketSettlement::clear_open_interest_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.open_interest_time_ != nullptr) {
    delete _impl_.open_interest_time_;
  }
  _impl_.open_interest_time_ = nullptr;
}
void MarketSettlement::clear_open_interest_trade_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.open_interest_trade_date_ != nullptr) {
    delete _impl_.open_interest_trade_date_;
  }
  _impl_.open_interest_trade_date_ = nullptr;
}
void MarketSettlement::clear_cleared_volume_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.cleared_volume_time_ != nullptr) {
    delete _impl_.cleared_volume_time_;
  }
  _impl_.cleared_volume_time_ = nullptr;
}
void MarketSettlement::clear_cleared_volume_trade_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.cleared_volume_trade_date_ != nullptr) {
    delete _impl_.cleared_volume_trade_date_;
  }
  _impl_.cleared_volume_trade_date_ = nullptr;
}
void MarketSettlement::clear_vwap_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.vwap_price_ != nullptr) {
    delete _impl_.vwap_price_;
  }
  _impl_.vwap_price_ = nullptr;
}
void MarketSettlement::clear_vwap_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.vwap_time_ != nullptr) {
    delete _impl_.vwap_time_;
  }
  _impl_.vwap_time_ = nullptr;
}
void MarketSettlement::clear_vwap_trade_date() {
  if (GetArenaForAllocation() == nullptr && _impl_.vwap_trade_date_ != nullptr) {
    delete _impl_.vwap_trade_date_;
  }
  _impl_.vwap_trade_date_ = nullptr;
}
MarketSettlement::MarketSettlement(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketSettlement)
}
MarketSettlement::MarketSettlement(const MarketSettlement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketSettlement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.settlement_held_price_) {}

    , decltype(_impl_.settlement_price_){nullptr}
    , decltype(_impl_.settlement_time_){nullptr}
    , decltype(_impl_.settlement_trade_date_){nullptr}
    , decltype(_impl_.settlement_held_time_){nullptr}
    , decltype(_impl_.settlement_held_trade_date_){nullptr}
    , decltype(_impl_.implied_price_){nullptr}
    , decltype(_impl_.implied_held_price_){nullptr}
    , decltype(_impl_.implied_time_){nullptr}
    , decltype(_impl_.open_interest_time_){nullptr}
    , decltype(_impl_.open_interest_trade_date_){nullptr}
    , decltype(_impl_.cleared_volume_time_){nullptr}
    , decltype(_impl_.cleared_volume_trade_date_){nullptr}
    , decltype(_impl_.vwap_price_){nullptr}
    , decltype(_impl_.vwap_time_){nullptr}
    , decltype(_impl_.vwap_trade_date_){nullptr}
    , decltype(_impl_.delayed_) {}

    , decltype(_impl_.open_interest_) {}

    , decltype(_impl_.cleared_volume_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.exchange_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_id().empty()) {
    _this->_impl_.exchange_id_.Set(from._internal_exchange_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.settlement_held_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.settlement_held_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_settlement_held_price().empty()) {
    _this->_impl_.settlement_held_price_.Set(from._internal_settlement_held_price(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_settlement_price()) {
    _this->_impl_.settlement_price_ = new ::t4proto::v1::common::Price(*from._impl_.settlement_price_);
  }
  if (from._internal_has_settlement_time()) {
    _this->_impl_.settlement_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.settlement_time_);
  }
  if (from._internal_has_settlement_trade_date()) {
    _this->_impl_.settlement_trade_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.settlement_trade_date_);
  }
  if (from._internal_has_settlement_held_time()) {
    _this->_impl_.settlement_held_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.settlement_held_time_);
  }
  if (from._internal_has_settlement_held_trade_date()) {
    _this->_impl_.settlement_held_trade_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.settlement_held_trade_date_);
  }
  if (from._internal_has_implied_price()) {
    _this->_impl_.implied_price_ = new ::t4proto::v1::common::Price(*from._impl_.implied_price_);
  }
  if (from._internal_has_implied_held_price()) {
    _this->_impl_.implied_held_price_ = new ::t4proto::v1::common::Price(*from._impl_.implied_held_price_);
  }
  if (from._internal_has_implied_time()) {
    _this->_impl_.implied_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.implied_time_);
  }
  if (from._internal_has_open_interest_time()) {
    _this->_impl_.open_interest_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.open_interest_time_);
  }
  if (from._internal_has_open_interest_trade_date()) {
    _this->_impl_.open_interest_trade_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.open_interest_trade_date_);
  }
  if (from._internal_has_cleared_volume_time()) {
    _this->_impl_.cleared_volume_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.cleared_volume_time_);
  }
  if (from._internal_has_cleared_volume_trade_date()) {
    _this->_impl_.cleared_volume_trade_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.cleared_volume_trade_date_);
  }
  if (from._internal_has_vwap_price()) {
    _this->_impl_.vwap_price_ = new ::t4proto::v1::common::Price(*from._impl_.vwap_price_);
  }
  if (from._internal_has_vwap_time()) {
    _this->_impl_.vwap_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.vwap_time_);
  }
  if (from._internal_has_vwap_trade_date()) {
    _this->_impl_.vwap_trade_date_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.vwap_trade_date_);
  }
  ::memcpy(&_impl_.delayed_, &from._impl_.delayed_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.cleared_volume_) -
    reinterpret_cast<char*>(&_impl_.delayed_)) + sizeof(_impl_.cleared_volume_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketSettlement)
}

inline void MarketSettlement::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.settlement_held_price_) {}

    , decltype(_impl_.settlement_price_){nullptr}
    , decltype(_impl_.settlement_time_){nullptr}
    , decltype(_impl_.settlement_trade_date_){nullptr}
    , decltype(_impl_.settlement_held_time_){nullptr}
    , decltype(_impl_.settlement_held_trade_date_){nullptr}
    , decltype(_impl_.implied_price_){nullptr}
    , decltype(_impl_.implied_held_price_){nullptr}
    , decltype(_impl_.implied_time_){nullptr}
    , decltype(_impl_.open_interest_time_){nullptr}
    , decltype(_impl_.open_interest_trade_date_){nullptr}
    , decltype(_impl_.cleared_volume_time_){nullptr}
    , decltype(_impl_.cleared_volume_trade_date_){nullptr}
    , decltype(_impl_.vwap_price_){nullptr}
    , decltype(_impl_.vwap_time_){nullptr}
    , decltype(_impl_.vwap_trade_date_){nullptr}
    , decltype(_impl_.delayed_) { false }

    , decltype(_impl_.open_interest_) { 0 }

    , decltype(_impl_.cleared_volume_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.exchange_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.settlement_held_price_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.settlement_held_price_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketSettlement::~MarketSettlement() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketSettlement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketSettlement::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exchange_id_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.settlement_held_price_.Destroy();
  if (this != internal_default_instance()) delete _impl_.settlement_price_;
  if (this != internal_default_instance()) delete _impl_.settlement_time_;
  if (this != internal_default_instance()) delete _impl_.settlement_trade_date_;
  if (this != internal_default_instance()) delete _impl_.settlement_held_time_;
  if (this != internal_default_instance()) delete _impl_.settlement_held_trade_date_;
  if (this != internal_default_instance()) delete _impl_.implied_price_;
  if (this != internal_default_instance()) delete _impl_.implied_held_price_;
  if (this != internal_default_instance()) delete _impl_.implied_time_;
  if (this != internal_default_instance()) delete _impl_.open_interest_time_;
  if (this != internal_default_instance()) delete _impl_.open_interest_trade_date_;
  if (this != internal_default_instance()) delete _impl_.cleared_volume_time_;
  if (this != internal_default_instance()) delete _impl_.cleared_volume_trade_date_;
  if (this != internal_default_instance()) delete _impl_.vwap_price_;
  if (this != internal_default_instance()) delete _impl_.vwap_time_;
  if (this != internal_default_instance()) delete _impl_.vwap_trade_date_;
}

void MarketSettlement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketSettlement::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketSettlement)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exchange_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.settlement_held_price_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.settlement_price_ != nullptr) {
    delete _impl_.settlement_price_;
  }
  _impl_.settlement_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.settlement_time_ != nullptr) {
    delete _impl_.settlement_time_;
  }
  _impl_.settlement_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.settlement_trade_date_ != nullptr) {
    delete _impl_.settlement_trade_date_;
  }
  _impl_.settlement_trade_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.settlement_held_time_ != nullptr) {
    delete _impl_.settlement_held_time_;
  }
  _impl_.settlement_held_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.settlement_held_trade_date_ != nullptr) {
    delete _impl_.settlement_held_trade_date_;
  }
  _impl_.settlement_held_trade_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.implied_price_ != nullptr) {
    delete _impl_.implied_price_;
  }
  _impl_.implied_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.implied_held_price_ != nullptr) {
    delete _impl_.implied_held_price_;
  }
  _impl_.implied_held_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.implied_time_ != nullptr) {
    delete _impl_.implied_time_;
  }
  _impl_.implied_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.open_interest_time_ != nullptr) {
    delete _impl_.open_interest_time_;
  }
  _impl_.open_interest_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.open_interest_trade_date_ != nullptr) {
    delete _impl_.open_interest_trade_date_;
  }
  _impl_.open_interest_trade_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cleared_volume_time_ != nullptr) {
    delete _impl_.cleared_volume_time_;
  }
  _impl_.cleared_volume_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cleared_volume_trade_date_ != nullptr) {
    delete _impl_.cleared_volume_trade_date_;
  }
  _impl_.cleared_volume_trade_date_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vwap_price_ != nullptr) {
    delete _impl_.vwap_price_;
  }
  _impl_.vwap_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vwap_time_ != nullptr) {
    delete _impl_.vwap_time_;
  }
  _impl_.vwap_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vwap_trade_date_ != nullptr) {
    delete _impl_.vwap_trade_date_;
  }
  _impl_.vwap_trade_date_ = nullptr;
  ::memset(&_impl_.delayed_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.cleared_volume_) -
      reinterpret_cast<char*>(&_impl_.delayed_)) + sizeof(_impl_.cleared_volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketSettlement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string exchange_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_exchange_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketSettlement.exchange_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketSettlement.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool delayed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.delayed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price settlement_price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_settlement_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp settlement_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_settlement_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp settlement_trade_date = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_settlement_trade_date(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string settlement_held_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_settlement_held_price();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketSettlement.settlement_held_price"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp settlement_held_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_settlement_held_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp settlement_held_trade_date = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_settlement_held_trade_date(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price implied_price = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_implied_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price implied_held_price = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_implied_held_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp implied_time = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_implied_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 open_interest = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _impl_.open_interest_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp open_interest_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_interest_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp open_interest_trade_date = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_open_interest_trade_date(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 cleared_volume = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _impl_.cleared_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp cleared_volume_time = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_cleared_volume_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp cleared_volume_trade_date = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_cleared_volume_trade_date(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price vwap_price = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_vwap_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp vwap_time = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_vwap_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp vwap_trade_date = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_vwap_trade_date(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketSettlement::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketSettlement)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string exchange_id = 1;
  if (!this->_internal_exchange_id().empty()) {
    const std::string& _s = this->_internal_exchange_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketSettlement.exchange_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string market_id = 2;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketSettlement.market_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bool delayed = 3;
  if (this->_internal_delayed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_delayed(), target);
  }

  // .t4proto.v1.common.Price settlement_price = 4;
  if (this->_internal_has_settlement_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::settlement_price(this),
        _Internal::settlement_price(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp settlement_time = 5;
  if (this->_internal_has_settlement_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::settlement_time(this),
        _Internal::settlement_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp settlement_trade_date = 6;
  if (this->_internal_has_settlement_trade_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::settlement_trade_date(this),
        _Internal::settlement_trade_date(this).GetCachedSize(), target, stream);
  }

  // string settlement_held_price = 7;
  if (!this->_internal_settlement_held_price().empty()) {
    const std::string& _s = this->_internal_settlement_held_price();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketSettlement.settlement_held_price");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // .google.protobuf.Timestamp settlement_held_time = 8;
  if (this->_internal_has_settlement_held_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::settlement_held_time(this),
        _Internal::settlement_held_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp settlement_held_trade_date = 9;
  if (this->_internal_has_settlement_held_trade_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::settlement_held_trade_date(this),
        _Internal::settlement_held_trade_date(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.Price implied_price = 10;
  if (this->_internal_has_implied_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::implied_price(this),
        _Internal::implied_price(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.Price implied_held_price = 11;
  if (this->_internal_has_implied_held_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::implied_held_price(this),
        _Internal::implied_held_price(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp implied_time = 12;
  if (this->_internal_has_implied_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::implied_time(this),
        _Internal::implied_time(this).GetCachedSize(), target, stream);
  }

  // int32 open_interest = 13;
  if (this->_internal_open_interest() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        13, this->_internal_open_interest(), target);
  }

  // .google.protobuf.Timestamp open_interest_time = 14;
  if (this->_internal_has_open_interest_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::open_interest_time(this),
        _Internal::open_interest_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp open_interest_trade_date = 15;
  if (this->_internal_has_open_interest_trade_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::open_interest_trade_date(this),
        _Internal::open_interest_trade_date(this).GetCachedSize(), target, stream);
  }

  // int32 cleared_volume = 16;
  if (this->_internal_cleared_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        16, this->_internal_cleared_volume(), target);
  }

  // .google.protobuf.Timestamp cleared_volume_time = 17;
  if (this->_internal_has_cleared_volume_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::cleared_volume_time(this),
        _Internal::cleared_volume_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp cleared_volume_trade_date = 18;
  if (this->_internal_has_cleared_volume_trade_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::cleared_volume_trade_date(this),
        _Internal::cleared_volume_trade_date(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.Price vwap_price = 19;
  if (this->_internal_has_vwap_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::vwap_price(this),
        _Internal::vwap_price(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp vwap_time = 20;
  if (this->_internal_has_vwap_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::vwap_time(this),
        _Internal::vwap_time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp vwap_trade_date = 21;
  if (this->_internal_has_vwap_trade_date()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::vwap_trade_date(this),
        _Internal::vwap_trade_date(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketSettlement)
  return target;
}

::size_t MarketSettlement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketSettlement)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exchange_id = 1;
  if (!this->_internal_exchange_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange_id());
  }

  // string market_id = 2;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string settlement_held_price = 7;
  if (!this->_internal_settlement_held_price().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_settlement_held_price());
  }

  // .t4proto.v1.common.Price settlement_price = 4;
  if (this->_internal_has_settlement_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.settlement_price_);
  }

  // .google.protobuf.Timestamp settlement_time = 5;
  if (this->_internal_has_settlement_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.settlement_time_);
  }

  // .google.protobuf.Timestamp settlement_trade_date = 6;
  if (this->_internal_has_settlement_trade_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.settlement_trade_date_);
  }

  // .google.protobuf.Timestamp settlement_held_time = 8;
  if (this->_internal_has_settlement_held_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.settlement_held_time_);
  }

  // .google.protobuf.Timestamp settlement_held_trade_date = 9;
  if (this->_internal_has_settlement_held_trade_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.settlement_held_trade_date_);
  }

  // .t4proto.v1.common.Price implied_price = 10;
  if (this->_internal_has_implied_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.implied_price_);
  }

  // .t4proto.v1.common.Price implied_held_price = 11;
  if (this->_internal_has_implied_held_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.implied_held_price_);
  }

  // .google.protobuf.Timestamp implied_time = 12;
  if (this->_internal_has_implied_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.implied_time_);
  }

  // .google.protobuf.Timestamp open_interest_time = 14;
  if (this->_internal_has_open_interest_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.open_interest_time_);
  }

  // .google.protobuf.Timestamp open_interest_trade_date = 15;
  if (this->_internal_has_open_interest_trade_date()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.open_interest_trade_date_);
  }

  // .google.protobuf.Timestamp cleared_volume_time = 17;
  if (this->_internal_has_cleared_volume_time()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cleared_volume_time_);
  }

  // .google.protobuf.Timestamp cleared_volume_trade_date = 18;
  if (this->_internal_has_cleared_volume_trade_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cleared_volume_trade_date_);
  }

  // .t4proto.v1.common.Price vwap_price = 19;
  if (this->_internal_has_vwap_price()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vwap_price_);
  }

  // .google.protobuf.Timestamp vwap_time = 20;
  if (this->_internal_has_vwap_time()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vwap_time_);
  }

  // .google.protobuf.Timestamp vwap_trade_date = 21;
  if (this->_internal_has_vwap_trade_date()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vwap_trade_date_);
  }

  // bool delayed = 3;
  if (this->_internal_delayed() != 0) {
    total_size += 2;
  }

  // int32 open_interest = 13;
  if (this->_internal_open_interest() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_open_interest());
  }

  // int32 cleared_volume = 16;
  if (this->_internal_cleared_volume() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_cleared_volume());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketSettlement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketSettlement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketSettlement::GetClassData() const { return &_class_data_; }


void MarketSettlement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketSettlement*>(&to_msg);
  auto& from = static_cast<const MarketSettlement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketSettlement)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_exchange_id().empty()) {
    _this->_internal_set_exchange_id(from._internal_exchange_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_settlement_held_price().empty()) {
    _this->_internal_set_settlement_held_price(from._internal_settlement_held_price());
  }
  if (from._internal_has_settlement_price()) {
    _this->_internal_mutable_settlement_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_settlement_price());
  }
  if (from._internal_has_settlement_time()) {
    _this->_internal_mutable_settlement_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_settlement_time());
  }
  if (from._internal_has_settlement_trade_date()) {
    _this->_internal_mutable_settlement_trade_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_settlement_trade_date());
  }
  if (from._internal_has_settlement_held_time()) {
    _this->_internal_mutable_settlement_held_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_settlement_held_time());
  }
  if (from._internal_has_settlement_held_trade_date()) {
    _this->_internal_mutable_settlement_held_trade_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_settlement_held_trade_date());
  }
  if (from._internal_has_implied_price()) {
    _this->_internal_mutable_implied_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_implied_price());
  }
  if (from._internal_has_implied_held_price()) {
    _this->_internal_mutable_implied_held_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_implied_held_price());
  }
  if (from._internal_has_implied_time()) {
    _this->_internal_mutable_implied_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_implied_time());
  }
  if (from._internal_has_open_interest_time()) {
    _this->_internal_mutable_open_interest_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_open_interest_time());
  }
  if (from._internal_has_open_interest_trade_date()) {
    _this->_internal_mutable_open_interest_trade_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_open_interest_trade_date());
  }
  if (from._internal_has_cleared_volume_time()) {
    _this->_internal_mutable_cleared_volume_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_cleared_volume_time());
  }
  if (from._internal_has_cleared_volume_trade_date()) {
    _this->_internal_mutable_cleared_volume_trade_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_cleared_volume_trade_date());
  }
  if (from._internal_has_vwap_price()) {
    _this->_internal_mutable_vwap_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_vwap_price());
  }
  if (from._internal_has_vwap_time()) {
    _this->_internal_mutable_vwap_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_vwap_time());
  }
  if (from._internal_has_vwap_trade_date()) {
    _this->_internal_mutable_vwap_trade_date()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_vwap_trade_date());
  }
  if (from._internal_delayed() != 0) {
    _this->_internal_set_delayed(from._internal_delayed());
  }
  if (from._internal_open_interest() != 0) {
    _this->_internal_set_open_interest(from._internal_open_interest());
  }
  if (from._internal_cleared_volume() != 0) {
    _this->_internal_set_cleared_volume(from._internal_cleared_volume());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketSettlement::CopyFrom(const MarketSettlement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketSettlement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketSettlement::IsInitialized() const {
  return true;
}

void MarketSettlement::InternalSwap(MarketSettlement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_id_, lhs_arena,
                                       &other->_impl_.exchange_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.settlement_held_price_, lhs_arena,
                                       &other->_impl_.settlement_held_price_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.cleared_volume_)
      + sizeof(MarketSettlement::_impl_.cleared_volume_)
      - PROTOBUF_FIELD_OFFSET(MarketSettlement, _impl_.settlement_price_)>(
          reinterpret_cast<char*>(&_impl_.settlement_price_),
          reinterpret_cast<char*>(&other->_impl_.settlement_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketSettlement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_getter, &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once,
      file_level_metadata_t4_2fv1_2fmarket_2fmarket_2eproto[12]);
}
// ===================================================================

class MarketSnapshotMessage::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::market::MarketSnapshotMessage, _impl_._oneof_case_);
  static const ::t4proto::v1::market::MarketDepth& market_depth(const MarketSnapshotMessage* msg);
  static const ::t4proto::v1::market::MarketDepthTrade& market_depth_trade(const MarketSnapshotMessage* msg);
  static const ::t4proto::v1::market::MarketHighLow& market_high_low(const MarketSnapshotMessage* msg);
  static const ::t4proto::v1::market::MarketPriceLimits& market_price_limits(const MarketSnapshotMessage* msg);
  static const ::t4proto::v1::market::MarketSettlement& market_settlement(const MarketSnapshotMessage* msg);
};

const ::t4proto::v1::market::MarketDepth&
MarketSnapshotMessage::_Internal::market_depth(const MarketSnapshotMessage* msg) {
  return *msg->_impl_.payload_.market_depth_;
}
const ::t4proto::v1::market::MarketDepthTrade&
MarketSnapshotMessage::_Internal::market_depth_trade(const MarketSnapshotMessage* msg) {
  return *msg->_impl_.payload_.market_depth_trade_;
}
const ::t4proto::v1::market::MarketHighLow&
MarketSnapshotMessage::_Internal::market_high_low(const MarketSnapshotMessage* msg) {
  return *msg->_impl_.payload_.market_high_low_;
}
const ::t4proto::v1::market::MarketPriceLimits&
MarketSnapshotMessage::_Internal::market_price_limits(const MarketSnapshotMessage* msg) {
  return *msg->_impl_.payload_.market_price_limits_;
}
const ::t4proto::v1::market::MarketSettlement&
MarketSnapshotMessage::_Internal::market_settlement(const MarketSnapshotMessage* msg) {
  return *msg->_impl_.payload_.market_settlement_;
}
void MarketSnapshotMessage::set_allocated_market_depth(::t4proto::v1::market::MarketDepth* market_depth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (market_depth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(market_depth);
    if (message_arena != submessage_arena) {
      market_depth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_depth, submessage_arena);
    }
    set_has_market_depth();
    _impl_.payload_.market_depth_ = market_depth;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSnapshotMessage.market_depth)
}
void MarketSnapshotMessage::set_allocated_market_depth_trade(::t4proto::v1::market::MarketDepthTrade* market_depth_trade) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (market_depth_trade) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(market_depth_trade);
    if (message_arena != submessage_arena) {
      market_depth_trade = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_depth_trade, submessage_arena);
    }
    set_has_market_depth_trade();
    _impl_.payload_.market_depth_trade_ = market_depth_trade;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSnapshotMessage.market_depth_trade)
}
void MarketSnapshotMessage::set_allocated_market_high_low(::t4proto::v1::market::MarketHighLow* market_high_low) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (market_high_low) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(market_high_low);
    if (message_arena != submessage_arena) {
      market_high_low = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_high_low, submessage_arena);
    }
    set_has_market_high_low();
    _impl_.payload_.market_high_low_ = market_high_low;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSnapshotMessage.market_high_low)
}
void MarketSnapshotMessage::set_allocated_market_price_limits(::t4proto::v1::market::MarketPriceLimits* market_price_limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (market_price_limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(market_price_limits);
    if (message_arena != submessage_arena) {
      market_price_limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_price_limits, submessage_arena);
    }
    set_has_market_price_limits();
    _impl_.payload_.market_price_limits_ = market_price_limits;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSnapshotMessage.market_price_limits)
}
void MarketSnapshotMessage::set_allocated_market_settlement(::t4proto::v1::market::MarketSettlement* market_settlement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (market_settlement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(market_settlement);
    if (message_arena != submessage_arena) {
      market_settlement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_settlement, submessage_arena);
    }
    set_has_market_settlement();
    _impl_.payload_.market_settlement_ = market_settlement;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.market.MarketSnapshotMessage.market_settlement)
}
MarketSnapshotMessage::MarketSnapshotMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketSnapshotMessage)
}
MarketSnapshotMessage::MarketSnapshotMessage(const MarketSnapshotMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketSnapshotMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kMarketDepth: {
      _this->_internal_mutable_market_depth()->::t4proto::v1::market::MarketDepth::MergeFrom(
          from._internal_market_depth());
      break;
    }
    case kMarketDepthTrade: {
      _this->_internal_mutable_market_depth_trade()->::t4proto::v1::market::MarketDepthTrade::MergeFrom(
          from._internal_market_depth_trade());
      break;
    }
    case kMarketHighLow: {
      _this->_internal_mutable_market_high_low()->::t4proto::v1::market::MarketHighLow::MergeFrom(
          from._internal_market_high_low());
      break;
    }
    case kMarketPriceLimits: {
      _this->_internal_mutable_market_price_limits()->::t4proto::v1::market::MarketPriceLimits::MergeFrom(
          from._internal_market_price_limits());
      break;
    }
    case kMarketSettlement: {
      _this->_internal_mutable_market_settlement()->::t4proto::v1::market::MarketSettlement::MergeFrom(
          from._internal_market_settlement());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketSnapshotMessage)
}

inline void MarketSnapshotMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

MarketSnapshotMessage::~MarketSnapshotMessage() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketSnapshotMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketSnapshotMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void MarketSnapshotMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketSnapshotMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:t4proto.v1.market.MarketSnapshotMessage)
  switch (payload_case()) {
    case kMarketDepth: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.market_depth_;
      }
      break;
    }
    case kMarketDepthTrade: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.market_depth_trade_;
      }
      break;
    }
    case kMarketHighLow: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.market_high_low_;
      }
      break;
    }
    case kMarketPriceLimits: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.market_price_limits_;
      }
      break;
    }
    case kMarketSettlement: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.market_settlement_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void MarketSnapshotMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketSnapshotMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketSnapshotMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .t4proto.v1.market.MarketDepth market_depth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_depth(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.market.MarketDepthTrade market_depth_trade = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_depth_trade(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.market.MarketHighLow market_high_low = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_high_low(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.market.MarketPriceLimits market_price_limits = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_price_limits(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.market.MarketSettlement market_settlement = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_settlement(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketSnapshotMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketSnapshotMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .t4proto.v1.market.MarketDepth market_depth = 3;
  if (payload_case() == kMarketDepth) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::market_depth(this),
        _Internal::market_depth(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.market.MarketDepthTrade market_depth_trade = 4;
  if (payload_case() == kMarketDepthTrade) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::market_depth_trade(this),
        _Internal::market_depth_trade(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.market.MarketHighLow market_high_low = 5;
  if (payload_case() == kMarketHighLow) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::market_high_low(this),
        _Internal::market_high_low(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.market.MarketPriceLimits market_price_limits = 6;
  if (payload_case() == kMarketPriceLimits) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::market_price_limits(this),
        _Internal::market_price_limits(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.market.MarketSettlement market_settlement = 7;
  if (payload_case() == kMarketSettlement) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::market_settlement(this),
        _Internal::market_settlement(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketSnapshotMessage)
  return target;
}

::size_t MarketSnapshotMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketSnapshotMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .t4proto.v1.market.MarketDepth market_depth = 3;
    case kMarketDepth: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.market_depth_);
      break;
    }
    // .t4proto.v1.market.MarketDepthTrade market_depth_trade = 4;
    case kMarketDepthTrade: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.market_depth_trade_);
      break;
    }
    // .t4proto.v1.market.MarketHighLow market_high_low = 5;
    case kMarketHighLow: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.market_high_low_);
      break;
    }
    // .t4proto.v1.market.MarketPriceLimits market_price_limits = 6;
    case kMarketPriceLimits: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.market_price_limits_);
      break;
    }
    // .t4proto.v1.market.MarketSettlement market_settlement = 7;
    case kMarketSettlement: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.market_settlement_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketSnapshotMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketSnapshotMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketSnapshotMessage::GetClassData() const { return &_class_data_; }


void MarketSnapshotMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketSnapshotMessage*>(&to_msg);
  auto& from = static_cast<const MarketSnapshotMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketSnapshotMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kMarketDepth: {
      _this->_internal_mutable_market_depth()->::t4proto::v1::market::MarketDepth::MergeFrom(
          from._internal_market_depth());
      break;
    }
    case kMarketDepthTrade: {
      _this->_internal_mutable_market_depth_trade()->::t4proto::v1::market::MarketDepthTrade::MergeFrom(
          from._internal_market_depth_trade());
      break;
    }
    case kMarketHighLow: {
      _this->_internal_mutable_market_high_low()->::t4proto::v1::market::MarketHighLow::MergeFrom(
          from._internal_market_high_low());
      break;
    }
    case kMarketPriceLimits: {
      _this->_internal_mutable_market_price_limits()->::t4proto::v1::market::MarketPriceLimits::MergeFrom(
          from._internal_market_price_limits());
      break;
    }
    case kMarketSettlement: {
      _this->_internal_mutable_market_settlement()->::t4proto::v1::market::MarketSettlement::MergeFrom(
          from._internal_market_settlement());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketSnapshotMessage::CopyFrom(const MarketSnapshotMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketSnapshotMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketSnapshotMessage::IsInitialized() const {
  return true;
}

void MarketSnapshotMessage::InternalSwap(MarketSnapshotMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketSnapshotMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_getter, &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once,
      file_level_metadata_t4_2fv1_2fmarket_2fmarket_2eproto[13]);
}
// ===================================================================

class MarketSnapshot::_Internal {
 public:
};

MarketSnapshot::MarketSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketSnapshot)
}
MarketSnapshot::MarketSnapshot(const MarketSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){from._impl_.messages_}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.mode_) {}

    , decltype(_impl_.due_to_connection_) {}

    , decltype(_impl_.delayed_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.mode_, &from._impl_.mode_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.delayed_) -
    reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.delayed_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketSnapshot)
}

inline void MarketSnapshot::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.messages_){arena}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.mode_) { 0 }

    , decltype(_impl_.due_to_connection_) { false }

    , decltype(_impl_.delayed_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketSnapshot::~MarketSnapshot() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketSnapshot::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messages_.~RepeatedPtrField();
  _impl_.market_id_.Destroy();
}

void MarketSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketSnapshot)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  _impl_.market_id_.ClearToEmpty();
  ::memset(&_impl_.mode_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.delayed_) -
      reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.delayed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketSnapshot.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.MarketMode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::t4proto::v1::common::MarketMode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool due_to_connection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.due_to_connection_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool delayed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.delayed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .t4proto.v1.market.MarketSnapshotMessage messages = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketSnapshot::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketSnapshot)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketSnapshot.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .t4proto.v1.common.MarketMode mode = 2;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_mode(), target);
  }

  // bool due_to_connection = 3;
  if (this->_internal_due_to_connection() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_due_to_connection(), target);
  }

  // bool delayed = 4;
  if (this->_internal_delayed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_delayed(), target);
  }

  // repeated .t4proto.v1.market.MarketSnapshotMessage messages = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_messages_size()); i < n; i++) {
    const auto& repfield = this->_internal_messages(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketSnapshot)
  return target;
}

::size_t MarketSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketSnapshot)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .t4proto.v1.market.MarketSnapshotMessage messages = 5;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->_impl_.messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // .t4proto.v1.common.MarketMode mode = 2;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // bool due_to_connection = 3;
  if (this->_internal_due_to_connection() != 0) {
    total_size += 2;
  }

  // bool delayed = 4;
  if (this->_internal_delayed() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketSnapshot::GetClassData() const { return &_class_data_; }


void MarketSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketSnapshot*>(&to_msg);
  auto& from = static_cast<const MarketSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketSnapshot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.messages_.MergeFrom(from._impl_.messages_);
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_due_to_connection() != 0) {
    _this->_internal_set_due_to_connection(from._internal_due_to_connection());
  }
  if (from._internal_delayed() != 0) {
    _this->_internal_set_delayed(from._internal_delayed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketSnapshot::CopyFrom(const MarketSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketSnapshot::IsInitialized() const {
  return true;
}

void MarketSnapshot::InternalSwap(MarketSnapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketSnapshot, _impl_.delayed_)
      + sizeof(MarketSnapshot::_impl_.delayed_)
      - PROTOBUF_FIELD_OFFSET(MarketSnapshot, _impl_.mode_)>(
          reinterpret_cast<char*>(&_impl_.mode_),
          reinterpret_cast<char*>(&other->_impl_.mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_getter, &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once,
      file_level_metadata_t4_2fv1_2fmarket_2fmarket_2eproto[14]);
}
// ===================================================================

class MarketByOrderSnapshot_Order::_Internal {
 public:
  static const ::t4proto::v1::common::Price& price(const MarketByOrderSnapshot_Order* msg);
};

const ::t4proto::v1::common::Price&
MarketByOrderSnapshot_Order::_Internal::price(const MarketByOrderSnapshot_Order* msg) {
  return *msg->_impl_.price_;
}
void MarketByOrderSnapshot_Order::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
MarketByOrderSnapshot_Order::MarketByOrderSnapshot_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketByOrderSnapshot.Order)
}
MarketByOrderSnapshot_Order::MarketByOrderSnapshot_Order(const MarketByOrderSnapshot_Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketByOrderSnapshot_Order* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_){nullptr}
    , decltype(_impl_.order_id_) {}

    , decltype(_impl_.bid_offer_) {}

    , decltype(_impl_.volume_) {}

    , decltype(_impl_.priority_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::t4proto::v1::common::Price(*from._impl_.price_);
  }
  ::memcpy(&_impl_.order_id_, &from._impl_.order_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.priority_) -
    reinterpret_cast<char*>(&_impl_.order_id_)) + sizeof(_impl_.priority_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketByOrderSnapshot.Order)
}

inline void MarketByOrderSnapshot_Order::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.price_){nullptr}
    , decltype(_impl_.order_id_) { ::uint64_t{0u} }

    , decltype(_impl_.bid_offer_) { 0 }

    , decltype(_impl_.volume_) { 0 }

    , decltype(_impl_.priority_) { ::uint64_t{0u} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MarketByOrderSnapshot_Order::~MarketByOrderSnapshot_Order() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketByOrderSnapshot.Order)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketByOrderSnapshot_Order::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.price_;
}

void MarketByOrderSnapshot_Order::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketByOrderSnapshot_Order::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketByOrderSnapshot.Order)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  ::memset(&_impl_.order_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.priority_) -
      reinterpret_cast<char*>(&_impl_.order_id_)) + sizeof(_impl_.priority_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByOrderSnapshot_Order::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 order_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.order_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.BidOffer bid_offer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_bid_offer(static_cast<::t4proto::v1::common::BidOffer>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 priority = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketByOrderSnapshot_Order::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketByOrderSnapshot.Order)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 order_id = 1;
  if (this->_internal_order_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this->_internal_order_id(), target);
  }

  // .t4proto.v1.common.BidOffer bid_offer = 2;
  if (this->_internal_bid_offer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_bid_offer(), target);
  }

  // .t4proto.v1.common.Price price = 3;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // int32 volume = 4;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_volume(), target);
  }

  // uint64 priority = 5;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        5, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketByOrderSnapshot.Order)
  return target;
}

::size_t MarketByOrderSnapshot_Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketByOrderSnapshot.Order)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .t4proto.v1.common.Price price = 3;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // uint64 order_id = 1;
  if (this->_internal_order_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_order_id());
  }

  // .t4proto.v1.common.BidOffer bid_offer = 2;
  if (this->_internal_bid_offer() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_bid_offer());
  }

  // int32 volume = 4;
  if (this->_internal_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_volume());
  }

  // uint64 priority = 5;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketByOrderSnapshot_Order::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketByOrderSnapshot_Order::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketByOrderSnapshot_Order::GetClassData() const { return &_class_data_; }


void MarketByOrderSnapshot_Order::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketByOrderSnapshot_Order*>(&to_msg);
  auto& from = static_cast<const MarketByOrderSnapshot_Order&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketByOrderSnapshot.Order)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_price());
  }
  if (from._internal_order_id() != 0) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  if (from._internal_bid_offer() != 0) {
    _this->_internal_set_bid_offer(from._internal_bid_offer());
  }
  if (from._internal_volume() != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketByOrderSnapshot_Order::CopyFrom(const MarketByOrderSnapshot_Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketByOrderSnapshot.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByOrderSnapshot_Order::IsInitialized() const {
  return true;
}

void MarketByOrderSnapshot_Order::InternalSwap(MarketByOrderSnapshot_Order* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot_Order, _impl_.priority_)
      + sizeof(MarketByOrderSnapshot_Order::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot_Order, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByOrderSnapshot_Order::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_getter, &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once,
      file_level_metadata_t4_2fv1_2fmarket_2fmarket_2eproto[15]);
}
// ===================================================================

class MarketByOrderSnapshot::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const MarketByOrderSnapshot* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketByOrderSnapshot::_Internal::time(const MarketByOrderSnapshot* msg) {
  return *msg->_impl_.time_;
}
void MarketByOrderSnapshot::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
MarketByOrderSnapshot::MarketByOrderSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketByOrderSnapshot)
}
MarketByOrderSnapshot::MarketByOrderSnapshot(const MarketByOrderSnapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketByOrderSnapshot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){from._impl_.orders_}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.last_sequence_) {}

    , decltype(_impl_.mode_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  ::memcpy(&_impl_.last_sequence_, &from._impl_.last_sequence_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.mode_) -
    reinterpret_cast<char*>(&_impl_.last_sequence_)) + sizeof(_impl_.mode_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketByOrderSnapshot)
}

inline void MarketByOrderSnapshot::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.orders_){arena}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.last_sequence_) { ::uint64_t{0u} }

    , decltype(_impl_.mode_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketByOrderSnapshot::~MarketByOrderSnapshot() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketByOrderSnapshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketByOrderSnapshot::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.orders_.~RepeatedPtrField();
  _impl_.market_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
}

void MarketByOrderSnapshot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketByOrderSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketByOrderSnapshot)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.orders_.Clear();
  _impl_.market_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  ::memset(&_impl_.last_sequence_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.mode_) -
      reinterpret_cast<char*>(&_impl_.last_sequence_)) + sizeof(_impl_.mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByOrderSnapshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketByOrderSnapshot.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.MarketMode mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::t4proto::v1::common::MarketMode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 last_sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.last_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .t4proto.v1.market.MarketByOrderSnapshot.Order orders = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketByOrderSnapshot::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketByOrderSnapshot)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketByOrderSnapshot.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .google.protobuf.Timestamp time = 2;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.MarketMode mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_mode(), target);
  }

  // uint64 last_sequence = 4;
  if (this->_internal_last_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_last_sequence(), target);
  }

  // repeated .t4proto.v1.market.MarketByOrderSnapshot.Order orders = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketByOrderSnapshot)
  return target;
}

::size_t MarketByOrderSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketByOrderSnapshot)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .t4proto.v1.market.MarketByOrderSnapshot.Order orders = 5;
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->_impl_.orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // .google.protobuf.Timestamp time = 2;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // uint64 last_sequence = 4;
  if (this->_internal_last_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_last_sequence());
  }

  // .t4proto.v1.common.MarketMode mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketByOrderSnapshot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketByOrderSnapshot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketByOrderSnapshot::GetClassData() const { return &_class_data_; }


void MarketByOrderSnapshot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketByOrderSnapshot*>(&to_msg);
  auto& from = static_cast<const MarketByOrderSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketByOrderSnapshot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.orders_.MergeFrom(from._impl_.orders_);
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_last_sequence() != 0) {
    _this->_internal_set_last_sequence(from._internal_last_sequence());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketByOrderSnapshot::CopyFrom(const MarketByOrderSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketByOrderSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByOrderSnapshot::IsInitialized() const {
  return true;
}

void MarketByOrderSnapshot::InternalSwap(MarketByOrderSnapshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.orders_.InternalSwap(&other->_impl_.orders_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot, _impl_.mode_)
      + sizeof(MarketByOrderSnapshot::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(MarketByOrderSnapshot, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByOrderSnapshot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_getter, &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once,
      file_level_metadata_t4_2fv1_2fmarket_2fmarket_2eproto[16]);
}
// ===================================================================

class MarketByOrderUpdate_Update::_Internal {
 public:
  static const ::t4proto::v1::common::Price& price(const MarketByOrderUpdate_Update* msg);
};

const ::t4proto::v1::common::Price&
MarketByOrderUpdate_Update::_Internal::price(const MarketByOrderUpdate_Update* msg) {
  return *msg->_impl_.price_;
}
void MarketByOrderUpdate_Update::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
MarketByOrderUpdate_Update::MarketByOrderUpdate_Update(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketByOrderUpdate.Update)
}
MarketByOrderUpdate_Update::MarketByOrderUpdate_Update(const MarketByOrderUpdate_Update& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketByOrderUpdate_Update* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.price_){nullptr}
    , decltype(_impl_.order_id_) {}

    , decltype(_impl_.update_type_) {}

    , decltype(_impl_.bid_offer_) {}

    , decltype(_impl_.priority_) {}

    , decltype(_impl_.volume_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::t4proto::v1::common::Price(*from._impl_.price_);
  }
  ::memcpy(&_impl_.order_id_, &from._impl_.order_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.volume_) -
    reinterpret_cast<char*>(&_impl_.order_id_)) + sizeof(_impl_.volume_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketByOrderUpdate.Update)
}

inline void MarketByOrderUpdate_Update::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.price_){nullptr}
    , decltype(_impl_.order_id_) { ::uint64_t{0u} }

    , decltype(_impl_.update_type_) { 0 }

    , decltype(_impl_.bid_offer_) { 0 }

    , decltype(_impl_.priority_) { ::uint64_t{0u} }

    , decltype(_impl_.volume_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MarketByOrderUpdate_Update::~MarketByOrderUpdate_Update() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketByOrderUpdate.Update)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketByOrderUpdate_Update::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.price_;
}

void MarketByOrderUpdate_Update::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketByOrderUpdate_Update::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketByOrderUpdate.Update)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  ::memset(&_impl_.order_id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.volume_) -
      reinterpret_cast<char*>(&_impl_.order_id_)) + sizeof(_impl_.volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByOrderUpdate_Update::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .t4proto.v1.market.MarketByOrderUpdate.UpdateType update_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_update_type(static_cast<::t4proto::v1::market::MarketByOrderUpdate_UpdateType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 order_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.order_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.BidOffer bid_offer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_bid_offer(static_cast<::t4proto::v1::common::BidOffer>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 volume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 priority = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketByOrderUpdate_Update::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketByOrderUpdate.Update)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .t4proto.v1.market.MarketByOrderUpdate.UpdateType update_type = 1;
  if (this->_internal_update_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_update_type(), target);
  }

  // uint64 order_id = 2;
  if (this->_internal_order_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_order_id(), target);
  }

  // .t4proto.v1.common.BidOffer bid_offer = 3;
  if (this->_internal_bid_offer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_bid_offer(), target);
  }

  // .t4proto.v1.common.Price price = 4;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // int32 volume = 5;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_volume(), target);
  }

  // uint64 priority = 6;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this->_internal_priority(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketByOrderUpdate.Update)
  return target;
}

::size_t MarketByOrderUpdate_Update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketByOrderUpdate.Update)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .t4proto.v1.common.Price price = 4;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // uint64 order_id = 2;
  if (this->_internal_order_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_order_id());
  }

  // .t4proto.v1.market.MarketByOrderUpdate.UpdateType update_type = 1;
  if (this->_internal_update_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_update_type());
  }

  // .t4proto.v1.common.BidOffer bid_offer = 3;
  if (this->_internal_bid_offer() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_bid_offer());
  }

  // uint64 priority = 6;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_priority());
  }

  // int32 volume = 5;
  if (this->_internal_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_volume());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketByOrderUpdate_Update::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketByOrderUpdate_Update::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketByOrderUpdate_Update::GetClassData() const { return &_class_data_; }


void MarketByOrderUpdate_Update::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketByOrderUpdate_Update*>(&to_msg);
  auto& from = static_cast<const MarketByOrderUpdate_Update&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketByOrderUpdate.Update)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_price());
  }
  if (from._internal_order_id() != 0) {
    _this->_internal_set_order_id(from._internal_order_id());
  }
  if (from._internal_update_type() != 0) {
    _this->_internal_set_update_type(from._internal_update_type());
  }
  if (from._internal_bid_offer() != 0) {
    _this->_internal_set_bid_offer(from._internal_bid_offer());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  if (from._internal_volume() != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketByOrderUpdate_Update::CopyFrom(const MarketByOrderUpdate_Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketByOrderUpdate.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByOrderUpdate_Update::IsInitialized() const {
  return true;
}

void MarketByOrderUpdate_Update::InternalSwap(MarketByOrderUpdate_Update* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate_Update, _impl_.volume_)
      + sizeof(MarketByOrderUpdate_Update::_impl_.volume_)
      - PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate_Update, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByOrderUpdate_Update::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_getter, &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once,
      file_level_metadata_t4_2fv1_2fmarket_2fmarket_2eproto[17]);
}
// ===================================================================

class MarketByOrderUpdate::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const MarketByOrderUpdate* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
MarketByOrderUpdate::_Internal::time(const MarketByOrderUpdate* msg) {
  return *msg->_impl_.time_;
}
void MarketByOrderUpdate::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
MarketByOrderUpdate::MarketByOrderUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.market.MarketByOrderUpdate)
}
MarketByOrderUpdate::MarketByOrderUpdate(const MarketByOrderUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MarketByOrderUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.updates_){from._impl_.updates_}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.sequence_) {}

    , decltype(_impl_.mode_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  ::memcpy(&_impl_.sequence_, &from._impl_.sequence_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.mode_) -
    reinterpret_cast<char*>(&_impl_.sequence_)) + sizeof(_impl_.mode_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.market.MarketByOrderUpdate)
}

inline void MarketByOrderUpdate::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.updates_){arena}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.sequence_) { ::uint64_t{0u} }

    , decltype(_impl_.mode_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MarketByOrderUpdate::~MarketByOrderUpdate() {
  // @@protoc_insertion_point(destructor:t4proto.v1.market.MarketByOrderUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MarketByOrderUpdate::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.updates_.~RepeatedPtrField();
  _impl_.market_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
}

void MarketByOrderUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MarketByOrderUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.market.MarketByOrderUpdate)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.updates_.Clear();
  _impl_.market_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  ::memset(&_impl_.sequence_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.mode_) -
      reinterpret_cast<char*>(&_impl_.sequence_)) + sizeof(_impl_.mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MarketByOrderUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.market.MarketByOrderUpdate.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.MarketMode mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::t4proto::v1::common::MarketMode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 sequence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .t4proto.v1.market.MarketByOrderUpdate.Update updates = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MarketByOrderUpdate::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.market.MarketByOrderUpdate)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.market.MarketByOrderUpdate.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // .google.protobuf.Timestamp time = 2;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.MarketMode mode = 3;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_mode(), target);
  }

  // uint64 sequence = 4;
  if (this->_internal_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this->_internal_sequence(), target);
  }

  // repeated .t4proto.v1.market.MarketByOrderUpdate.Update updates = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_updates_size()); i < n; i++) {
    const auto& repfield = this->_internal_updates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.market.MarketByOrderUpdate)
  return target;
}

::size_t MarketByOrderUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.market.MarketByOrderUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .t4proto.v1.market.MarketByOrderUpdate.Update updates = 5;
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->_impl_.updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // .google.protobuf.Timestamp time = 2;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // uint64 sequence = 4;
  if (this->_internal_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_sequence());
  }

  // .t4proto.v1.common.MarketMode mode = 3;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MarketByOrderUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MarketByOrderUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MarketByOrderUpdate::GetClassData() const { return &_class_data_; }


void MarketByOrderUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MarketByOrderUpdate*>(&to_msg);
  auto& from = static_cast<const MarketByOrderUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.market.MarketByOrderUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.updates_.MergeFrom(from._impl_.updates_);
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_sequence() != 0) {
    _this->_internal_set_sequence(from._internal_sequence());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MarketByOrderUpdate::CopyFrom(const MarketByOrderUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.market.MarketByOrderUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketByOrderUpdate::IsInitialized() const {
  return true;
}

void MarketByOrderUpdate::InternalSwap(MarketByOrderUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.updates_.InternalSwap(&other->_impl_.updates_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate, _impl_.mode_)
      + sizeof(MarketByOrderUpdate::_impl_.mode_)
      - PROTOBUF_FIELD_OFFSET(MarketByOrderUpdate, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MarketByOrderUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_getter, &descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto_once,
      file_level_metadata_t4_2fv1_2fmarket_2fmarket_2eproto[18]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace market
}  // namespace v1
}  // namespace t4proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::t4proto::v1::market::MarketDepthSubscribe*
Arena::CreateMaybeMessage< ::t4proto::v1::market::MarketDepthSubscribe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::market::MarketDepthSubscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::market::MarketDepthSubscribeReject*
Arena::CreateMaybeMessage< ::t4proto::v1::market::MarketDepthSubscribeReject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::market::MarketDepthSubscribeReject >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::market::MarketByOrderSubscribe*
Arena::CreateMaybeMessage< ::t4proto::v1::market::MarketByOrderSubscribe >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::market::MarketByOrderSubscribe >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::market::MarketByOrderSubscribeReject*
Arena::CreateMaybeMessage< ::t4proto::v1::market::MarketByOrderSubscribeReject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::market::MarketByOrderSubscribeReject >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::market::MarketDetails_LegItem*
Arena::CreateMaybeMessage< ::t4proto::v1::market::MarketDetails_LegItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::market::MarketDetails_LegItem >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::market::MarketDetails*
Arena::CreateMaybeMessage< ::t4proto::v1::market::MarketDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::market::MarketDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::market::MarketDepth_DepthLine*
Arena::CreateMaybeMessage< ::t4proto::v1::market::MarketDepth_DepthLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::market::MarketDepth_DepthLine >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::market::MarketDepth_TradeData*
Arena::CreateMaybeMessage< ::t4proto::v1::market::MarketDepth_TradeData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::market::MarketDepth_TradeData >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::market::MarketDepth*
Arena::CreateMaybeMessage< ::t4proto::v1::market::MarketDepth >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::market::MarketDepth >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::market::MarketDepthTrade*
Arena::CreateMaybeMessage< ::t4proto::v1::market::MarketDepthTrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::market::MarketDepthTrade >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::market::MarketHighLow*
Arena::CreateMaybeMessage< ::t4proto::v1::market::MarketHighLow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::market::MarketHighLow >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::market::MarketPriceLimits*
Arena::CreateMaybeMessage< ::t4proto::v1::market::MarketPriceLimits >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::market::MarketPriceLimits >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::market::MarketSettlement*
Arena::CreateMaybeMessage< ::t4proto::v1::market::MarketSettlement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::market::MarketSettlement >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::market::MarketSnapshotMessage*
Arena::CreateMaybeMessage< ::t4proto::v1::market::MarketSnapshotMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::market::MarketSnapshotMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::market::MarketSnapshot*
Arena::CreateMaybeMessage< ::t4proto::v1::market::MarketSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::market::MarketSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::market::MarketByOrderSnapshot_Order*
Arena::CreateMaybeMessage< ::t4proto::v1::market::MarketByOrderSnapshot_Order >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::market::MarketByOrderSnapshot_Order >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::market::MarketByOrderSnapshot*
Arena::CreateMaybeMessage< ::t4proto::v1::market::MarketByOrderSnapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::market::MarketByOrderSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::market::MarketByOrderUpdate_Update*
Arena::CreateMaybeMessage< ::t4proto::v1::market::MarketByOrderUpdate_Update >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::market::MarketByOrderUpdate_Update >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::market::MarketByOrderUpdate*
Arena::CreateMaybeMessage< ::t4proto::v1::market::MarketByOrderUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::market::MarketByOrderUpdate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
