// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: t4/v1/account/account.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_t4_2fv1_2faccount_2faccount_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_t4_2fv1_2faccount_2faccount_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "t4/v1/common/enums.pb.h"
#include "t4/v1/common/price.pb.h"
#include "t4/v1/market/market.pb.h"
#include "t4/v1/orderrouting/orderrouting.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_t4_2fv1_2faccount_2faccount_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_t4_2fv1_2faccount_2faccount_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_t4_2fv1_2faccount_2faccount_2eproto;
namespace t4proto {
namespace v1 {
namespace account {
class AccountCurrency;
struct AccountCurrencyDefaultTypeInternal;
extern AccountCurrencyDefaultTypeInternal _AccountCurrency_default_instance_;
class AccountDetails;
struct AccountDetailsDefaultTypeInternal;
extern AccountDetailsDefaultTypeInternal _AccountDetails_default_instance_;
class AccountPosition;
struct AccountPositionDefaultTypeInternal;
extern AccountPositionDefaultTypeInternal _AccountPosition_default_instance_;
class AccountPositionProfit;
struct AccountPositionProfitDefaultTypeInternal;
extern AccountPositionProfitDefaultTypeInternal _AccountPositionProfit_default_instance_;
class AccountProfit;
struct AccountProfitDefaultTypeInternal;
extern AccountProfitDefaultTypeInternal _AccountProfit_default_instance_;
class AccountSnapshot;
struct AccountSnapshotDefaultTypeInternal;
extern AccountSnapshotDefaultTypeInternal _AccountSnapshot_default_instance_;
class AccountSnapshotMessage;
struct AccountSnapshotMessageDefaultTypeInternal;
extern AccountSnapshotMessageDefaultTypeInternal _AccountSnapshotMessage_default_instance_;
class AccountSubscribe;
struct AccountSubscribeDefaultTypeInternal;
extern AccountSubscribeDefaultTypeInternal _AccountSubscribe_default_instance_;
class AccountSubscribeResponse;
struct AccountSubscribeResponseDefaultTypeInternal;
extern AccountSubscribeResponseDefaultTypeInternal _AccountSubscribeResponse_default_instance_;
class AccountUpdate;
struct AccountUpdateDefaultTypeInternal;
extern AccountUpdateDefaultTypeInternal _AccountUpdate_default_instance_;
}  // namespace account
}  // namespace v1
}  // namespace t4proto
PROTOBUF_NAMESPACE_OPEN
template <>
::t4proto::v1::account::AccountCurrency* Arena::CreateMaybeMessage<::t4proto::v1::account::AccountCurrency>(Arena*);
template <>
::t4proto::v1::account::AccountDetails* Arena::CreateMaybeMessage<::t4proto::v1::account::AccountDetails>(Arena*);
template <>
::t4proto::v1::account::AccountPosition* Arena::CreateMaybeMessage<::t4proto::v1::account::AccountPosition>(Arena*);
template <>
::t4proto::v1::account::AccountPositionProfit* Arena::CreateMaybeMessage<::t4proto::v1::account::AccountPositionProfit>(Arena*);
template <>
::t4proto::v1::account::AccountProfit* Arena::CreateMaybeMessage<::t4proto::v1::account::AccountProfit>(Arena*);
template <>
::t4proto::v1::account::AccountSnapshot* Arena::CreateMaybeMessage<::t4proto::v1::account::AccountSnapshot>(Arena*);
template <>
::t4proto::v1::account::AccountSnapshotMessage* Arena::CreateMaybeMessage<::t4proto::v1::account::AccountSnapshotMessage>(Arena*);
template <>
::t4proto::v1::account::AccountSubscribe* Arena::CreateMaybeMessage<::t4proto::v1::account::AccountSubscribe>(Arena*);
template <>
::t4proto::v1::account::AccountSubscribeResponse* Arena::CreateMaybeMessage<::t4proto::v1::account::AccountSubscribeResponse>(Arena*);
template <>
::t4proto::v1::account::AccountUpdate* Arena::CreateMaybeMessage<::t4proto::v1::account::AccountUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace t4proto {
namespace v1 {
namespace account {

// ===================================================================


// -------------------------------------------------------------------

class AccountSubscribe final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.account.AccountSubscribe) */ {
 public:
  inline AccountSubscribe() : AccountSubscribe(nullptr) {}
  ~AccountSubscribe() override;
  explicit PROTOBUF_CONSTEXPR AccountSubscribe(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountSubscribe(const AccountSubscribe& from);
  AccountSubscribe(AccountSubscribe&& from) noexcept
    : AccountSubscribe() {
    *this = ::std::move(from);
  }

  inline AccountSubscribe& operator=(const AccountSubscribe& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountSubscribe& operator=(AccountSubscribe&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountSubscribe& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountSubscribe* internal_default_instance() {
    return reinterpret_cast<const AccountSubscribe*>(
               &_AccountSubscribe_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AccountSubscribe& a, AccountSubscribe& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountSubscribe* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountSubscribe* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountSubscribe* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountSubscribe>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountSubscribe& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountSubscribe& from) {
    AccountSubscribe::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountSubscribe* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.account.AccountSubscribe";
  }
  protected:
  explicit AccountSubscribe(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 3,
    kSubscribeFieldNumber = 1,
    kSubscribeAllAccountsFieldNumber = 2,
    kUplModeFieldNumber = 4,
  };
  // repeated string account_id = 3;
  int account_id_size() const;
  private:
  int _internal_account_id_size() const;

  public:
  void clear_account_id() ;
  const std::string& account_id(int index) const;
  std::string* mutable_account_id(int index);
  void set_account_id(int index, const std::string& value);
  void set_account_id(int index, std::string&& value);
  void set_account_id(int index, const char* value);
  void set_account_id(int index, const char* value, std::size_t size);
  void set_account_id(int index, absl::string_view value);
  std::string* add_account_id();
  void add_account_id(const std::string& value);
  void add_account_id(std::string&& value);
  void add_account_id(const char* value);
  void add_account_id(const char* value, std::size_t size);
  void add_account_id(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& account_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_account_id();

  private:
  const std::string& _internal_account_id(int index) const;
  std::string* _internal_add_account_id();

  public:
  // .t4proto.v1.common.AccountSubscribeType subscribe = 1;
  void clear_subscribe() ;
  ::t4proto::v1::common::AccountSubscribeType subscribe() const;
  void set_subscribe(::t4proto::v1::common::AccountSubscribeType value);

  private:
  ::t4proto::v1::common::AccountSubscribeType _internal_subscribe() const;
  void _internal_set_subscribe(::t4proto::v1::common::AccountSubscribeType value);

  public:
  // bool subscribe_all_accounts = 2;
  void clear_subscribe_all_accounts() ;
  bool subscribe_all_accounts() const;
  void set_subscribe_all_accounts(bool value);

  private:
  bool _internal_subscribe_all_accounts() const;
  void _internal_set_subscribe_all_accounts(bool value);

  public:
  // optional .t4proto.v1.common.UPLMode upl_mode = 4;
  bool has_upl_mode() const;
  void clear_upl_mode() ;
  ::t4proto::v1::common::UPLMode upl_mode() const;
  void set_upl_mode(::t4proto::v1::common::UPLMode value);

  private:
  ::t4proto::v1::common::UPLMode _internal_upl_mode() const;
  void _internal_set_upl_mode(::t4proto::v1::common::UPLMode value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.account.AccountSubscribe)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> account_id_;
    int subscribe_;
    bool subscribe_all_accounts_;
    int upl_mode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2faccount_2faccount_2eproto;
};// -------------------------------------------------------------------

class AccountSubscribeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.account.AccountSubscribeResponse) */ {
 public:
  inline AccountSubscribeResponse() : AccountSubscribeResponse(nullptr) {}
  ~AccountSubscribeResponse() override;
  explicit PROTOBUF_CONSTEXPR AccountSubscribeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountSubscribeResponse(const AccountSubscribeResponse& from);
  AccountSubscribeResponse(AccountSubscribeResponse&& from) noexcept
    : AccountSubscribeResponse() {
    *this = ::std::move(from);
  }

  inline AccountSubscribeResponse& operator=(const AccountSubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountSubscribeResponse& operator=(AccountSubscribeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountSubscribeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountSubscribeResponse* internal_default_instance() {
    return reinterpret_cast<const AccountSubscribeResponse*>(
               &_AccountSubscribeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AccountSubscribeResponse& a, AccountSubscribeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountSubscribeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountSubscribeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountSubscribeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountSubscribeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountSubscribeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountSubscribeResponse& from) {
    AccountSubscribeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountSubscribeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.account.AccountSubscribeResponse";
  }
  protected:
  explicit AccountSubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorsFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // repeated string errors = 2;
  int errors_size() const;
  private:
  int _internal_errors_size() const;

  public:
  void clear_errors() ;
  const std::string& errors(int index) const;
  std::string* mutable_errors(int index);
  void set_errors(int index, const std::string& value);
  void set_errors(int index, std::string&& value);
  void set_errors(int index, const char* value);
  void set_errors(int index, const char* value, std::size_t size);
  void set_errors(int index, absl::string_view value);
  std::string* add_errors();
  void add_errors(const std::string& value);
  void add_errors(std::string&& value);
  void add_errors(const char* value);
  void add_errors(const char* value, std::size_t size);
  void add_errors(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& errors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_errors();

  private:
  const std::string& _internal_errors(int index) const;
  std::string* _internal_add_errors();

  public:
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.account.AccountSubscribeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> errors_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2faccount_2faccount_2eproto;
};// -------------------------------------------------------------------

class AccountCurrency final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.account.AccountCurrency) */ {
 public:
  inline AccountCurrency() : AccountCurrency(nullptr) {}
  ~AccountCurrency() override;
  explicit PROTOBUF_CONSTEXPR AccountCurrency(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountCurrency(const AccountCurrency& from);
  AccountCurrency(AccountCurrency&& from) noexcept
    : AccountCurrency() {
    *this = ::std::move(from);
  }

  inline AccountCurrency& operator=(const AccountCurrency& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountCurrency& operator=(AccountCurrency&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountCurrency& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountCurrency* internal_default_instance() {
    return reinterpret_cast<const AccountCurrency*>(
               &_AccountCurrency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AccountCurrency& a, AccountCurrency& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountCurrency* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountCurrency* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountCurrency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountCurrency>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountCurrency& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountCurrency& from) {
    AccountCurrency::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountCurrency* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.account.AccountCurrency";
  }
  protected:
  explicit AccountCurrency(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurrencyFieldNumber = 1,
    kRateFieldNumber = 2,
    kImportFactorFieldNumber = 3,
  };
  // string currency = 1;
  void clear_currency() ;
  const std::string& currency() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_currency(Arg_&& arg, Args_... args);
  std::string* mutable_currency();
  PROTOBUF_NODISCARD std::string* release_currency();
  void set_allocated_currency(std::string* ptr);

  private:
  const std::string& _internal_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_currency(
      const std::string& value);
  std::string* _internal_mutable_currency();

  public:
  // double rate = 2;
  void clear_rate() ;
  double rate() const;
  void set_rate(double value);

  private:
  double _internal_rate() const;
  void _internal_set_rate(double value);

  public:
  // double import_factor = 3;
  void clear_import_factor() ;
  double import_factor() const;
  void set_import_factor(double value);

  private:
  double _internal_import_factor() const;
  void _internal_set_import_factor(double value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.account.AccountCurrency)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr currency_;
    double rate_;
    double import_factor_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2faccount_2faccount_2eproto;
};// -------------------------------------------------------------------

class AccountPosition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.account.AccountPosition) */ {
 public:
  inline AccountPosition() : AccountPosition(nullptr) {}
  ~AccountPosition() override;
  explicit PROTOBUF_CONSTEXPR AccountPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountPosition(const AccountPosition& from);
  AccountPosition(AccountPosition&& from) noexcept
    : AccountPosition() {
    *this = ::std::move(from);
  }

  inline AccountPosition& operator=(const AccountPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountPosition& operator=(AccountPosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountPosition* internal_default_instance() {
    return reinterpret_cast<const AccountPosition*>(
               &_AccountPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AccountPosition& a, AccountPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountPosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountPosition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountPosition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountPosition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountPosition& from) {
    AccountPosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountPosition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.account.AccountPosition";
  }
  protected:
  explicit AccountPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kExchangeIdFieldNumber = 2,
    kContractIdFieldNumber = 3,
    kMarketIdFieldNumber = 4,
    kTradeDateFieldNumber = 15,
    kAverageOpenPriceFieldNumber = 27,
    kTotalOpenPriceFieldNumber = 28,
    kTotalBuyFillPriceFieldNumber = 29,
    kTotalSellFillPriceFieldNumber = 30,
    kDayTotalBuyFillPriceFieldNumber = 31,
    kDayTotalSellFillPriceFieldNumber = 32,
    kTotalOvernightPriceFieldNumber = 33,
    kMarginTimeFieldNumber = 35,
    kAlertingTimeFieldNumber = 37,
    kBuysFieldNumber = 5,
    kSellsFieldNumber = 6,
    kWorkingBuysFieldNumber = 7,
    kWorkingSellsFieldNumber = 8,
    kRplFieldNumber = 9,
    kOvernightUplFieldNumber = 10,
    kMarginFieldNumber = 11,
    kMpFieldNumber = 12,
    kCurrencyRateFieldNumber = 14,
    kOvernightPositionFieldNumber = 13,
    kTotalOpenVolumeFieldNumber = 17,
    kPremiumFieldNumber = 16,
    kFeesAndCommissionsFieldNumber = 18,
    kLongMpFieldNumber = 19,
    kShortMpFieldNumber = 20,
    kPrevMarginFieldNumber = 22,
    kPrevRplFieldNumber = 23,
    kPrevPositionFieldNumber = 21,
    kDayBuysFieldNumber = 25,
    kPrevUplFieldNumber = 24,
    kDaySellsFieldNumber = 26,
    kRiskStatusFieldNumber = 34,
    kAlertingMarginFieldNumber = 36,
    kDayMarginFieldNumber = 38,
    kFullMarginFieldNumber = 39,
    kPreTradeMarginFieldNumber = 40,
  };
  // string account_id = 1;
  void clear_account_id() ;
  const std::string& account_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* ptr);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // string exchange_id = 2;
  void clear_exchange_id() ;
  const std::string& exchange_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* ptr);

  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_id();

  public:
  // string contract_id = 3;
  void clear_contract_id() ;
  const std::string& contract_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contract_id(Arg_&& arg, Args_... args);
  std::string* mutable_contract_id();
  PROTOBUF_NODISCARD std::string* release_contract_id();
  void set_allocated_contract_id(std::string* ptr);

  private:
  const std::string& _internal_contract_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_id(
      const std::string& value);
  std::string* _internal_mutable_contract_id();

  public:
  // string market_id = 4;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // .google.protobuf.Timestamp trade_date = 15;
  bool has_trade_date() const;
  private:
  bool _internal_has_trade_date() const;

  public:
  void clear_trade_date() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& trade_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_trade_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_trade_date();
  void set_allocated_trade_date(::PROTOBUF_NAMESPACE_ID::Timestamp* trade_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_trade_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_trade_date();
  public:
  void unsafe_arena_set_allocated_trade_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* trade_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_trade_date();
  // optional .t4proto.v1.common.Price average_open_price = 27;
  bool has_average_open_price() const;
  void clear_average_open_price() ;
  const ::t4proto::v1::common::Price& average_open_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_average_open_price();
  ::t4proto::v1::common::Price* mutable_average_open_price();
  void set_allocated_average_open_price(::t4proto::v1::common::Price* average_open_price);
  private:
  const ::t4proto::v1::common::Price& _internal_average_open_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_average_open_price();
  public:
  void unsafe_arena_set_allocated_average_open_price(
      ::t4proto::v1::common::Price* average_open_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_average_open_price();
  // optional .t4proto.v1.common.Price total_open_price = 28;
  bool has_total_open_price() const;
  void clear_total_open_price() ;
  const ::t4proto::v1::common::Price& total_open_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_total_open_price();
  ::t4proto::v1::common::Price* mutable_total_open_price();
  void set_allocated_total_open_price(::t4proto::v1::common::Price* total_open_price);
  private:
  const ::t4proto::v1::common::Price& _internal_total_open_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_total_open_price();
  public:
  void unsafe_arena_set_allocated_total_open_price(
      ::t4proto::v1::common::Price* total_open_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_total_open_price();
  // optional .t4proto.v1.common.Price total_buy_fill_price = 29;
  bool has_total_buy_fill_price() const;
  void clear_total_buy_fill_price() ;
  const ::t4proto::v1::common::Price& total_buy_fill_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_total_buy_fill_price();
  ::t4proto::v1::common::Price* mutable_total_buy_fill_price();
  void set_allocated_total_buy_fill_price(::t4proto::v1::common::Price* total_buy_fill_price);
  private:
  const ::t4proto::v1::common::Price& _internal_total_buy_fill_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_total_buy_fill_price();
  public:
  void unsafe_arena_set_allocated_total_buy_fill_price(
      ::t4proto::v1::common::Price* total_buy_fill_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_total_buy_fill_price();
  // optional .t4proto.v1.common.Price total_sell_fill_price = 30;
  bool has_total_sell_fill_price() const;
  void clear_total_sell_fill_price() ;
  const ::t4proto::v1::common::Price& total_sell_fill_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_total_sell_fill_price();
  ::t4proto::v1::common::Price* mutable_total_sell_fill_price();
  void set_allocated_total_sell_fill_price(::t4proto::v1::common::Price* total_sell_fill_price);
  private:
  const ::t4proto::v1::common::Price& _internal_total_sell_fill_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_total_sell_fill_price();
  public:
  void unsafe_arena_set_allocated_total_sell_fill_price(
      ::t4proto::v1::common::Price* total_sell_fill_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_total_sell_fill_price();
  // optional .t4proto.v1.common.Price day_total_buy_fill_price = 31;
  bool has_day_total_buy_fill_price() const;
  void clear_day_total_buy_fill_price() ;
  const ::t4proto::v1::common::Price& day_total_buy_fill_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_day_total_buy_fill_price();
  ::t4proto::v1::common::Price* mutable_day_total_buy_fill_price();
  void set_allocated_day_total_buy_fill_price(::t4proto::v1::common::Price* day_total_buy_fill_price);
  private:
  const ::t4proto::v1::common::Price& _internal_day_total_buy_fill_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_day_total_buy_fill_price();
  public:
  void unsafe_arena_set_allocated_day_total_buy_fill_price(
      ::t4proto::v1::common::Price* day_total_buy_fill_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_day_total_buy_fill_price();
  // optional .t4proto.v1.common.Price day_total_sell_fill_price = 32;
  bool has_day_total_sell_fill_price() const;
  void clear_day_total_sell_fill_price() ;
  const ::t4proto::v1::common::Price& day_total_sell_fill_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_day_total_sell_fill_price();
  ::t4proto::v1::common::Price* mutable_day_total_sell_fill_price();
  void set_allocated_day_total_sell_fill_price(::t4proto::v1::common::Price* day_total_sell_fill_price);
  private:
  const ::t4proto::v1::common::Price& _internal_day_total_sell_fill_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_day_total_sell_fill_price();
  public:
  void unsafe_arena_set_allocated_day_total_sell_fill_price(
      ::t4proto::v1::common::Price* day_total_sell_fill_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_day_total_sell_fill_price();
  // optional .t4proto.v1.common.Price total_overnight_price = 33;
  bool has_total_overnight_price() const;
  void clear_total_overnight_price() ;
  const ::t4proto::v1::common::Price& total_overnight_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_total_overnight_price();
  ::t4proto::v1::common::Price* mutable_total_overnight_price();
  void set_allocated_total_overnight_price(::t4proto::v1::common::Price* total_overnight_price);
  private:
  const ::t4proto::v1::common::Price& _internal_total_overnight_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_total_overnight_price();
  public:
  void unsafe_arena_set_allocated_total_overnight_price(
      ::t4proto::v1::common::Price* total_overnight_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_total_overnight_price();
  // .google.protobuf.Timestamp margin_time = 35;
  bool has_margin_time() const;
  private:
  bool _internal_has_margin_time() const;

  public:
  void clear_margin_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& margin_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_margin_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_margin_time();
  void set_allocated_margin_time(::PROTOBUF_NAMESPACE_ID::Timestamp* margin_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_margin_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_margin_time();
  public:
  void unsafe_arena_set_allocated_margin_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* margin_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_margin_time();
  // .google.protobuf.Timestamp alerting_time = 37;
  bool has_alerting_time() const;
  private:
  bool _internal_has_alerting_time() const;

  public:
  void clear_alerting_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& alerting_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_alerting_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_alerting_time();
  void set_allocated_alerting_time(::PROTOBUF_NAMESPACE_ID::Timestamp* alerting_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_alerting_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_alerting_time();
  public:
  void unsafe_arena_set_allocated_alerting_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* alerting_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_alerting_time();
  // int32 buys = 5;
  void clear_buys() ;
  ::int32_t buys() const;
  void set_buys(::int32_t value);

  private:
  ::int32_t _internal_buys() const;
  void _internal_set_buys(::int32_t value);

  public:
  // int32 sells = 6;
  void clear_sells() ;
  ::int32_t sells() const;
  void set_sells(::int32_t value);

  private:
  ::int32_t _internal_sells() const;
  void _internal_set_sells(::int32_t value);

  public:
  // int32 working_buys = 7;
  void clear_working_buys() ;
  ::int32_t working_buys() const;
  void set_working_buys(::int32_t value);

  private:
  ::int32_t _internal_working_buys() const;
  void _internal_set_working_buys(::int32_t value);

  public:
  // int32 working_sells = 8;
  void clear_working_sells() ;
  ::int32_t working_sells() const;
  void set_working_sells(::int32_t value);

  private:
  ::int32_t _internal_working_sells() const;
  void _internal_set_working_sells(::int32_t value);

  public:
  // double rpl = 9;
  void clear_rpl() ;
  double rpl() const;
  void set_rpl(double value);

  private:
  double _internal_rpl() const;
  void _internal_set_rpl(double value);

  public:
  // double overnight_upl = 10;
  void clear_overnight_upl() ;
  double overnight_upl() const;
  void set_overnight_upl(double value);

  private:
  double _internal_overnight_upl() const;
  void _internal_set_overnight_upl(double value);

  public:
  // double margin = 11;
  void clear_margin() ;
  double margin() const;
  void set_margin(double value);

  private:
  double _internal_margin() const;
  void _internal_set_margin(double value);

  public:
  // double mp = 12;
  void clear_mp() ;
  double mp() const;
  void set_mp(double value);

  private:
  double _internal_mp() const;
  void _internal_set_mp(double value);

  public:
  // double currency_rate = 14;
  void clear_currency_rate() ;
  double currency_rate() const;
  void set_currency_rate(double value);

  private:
  double _internal_currency_rate() const;
  void _internal_set_currency_rate(double value);

  public:
  // int32 overnight_position = 13;
  void clear_overnight_position() ;
  ::int32_t overnight_position() const;
  void set_overnight_position(::int32_t value);

  private:
  ::int32_t _internal_overnight_position() const;
  void _internal_set_overnight_position(::int32_t value);

  public:
  // int32 total_open_volume = 17;
  void clear_total_open_volume() ;
  ::int32_t total_open_volume() const;
  void set_total_open_volume(::int32_t value);

  private:
  ::int32_t _internal_total_open_volume() const;
  void _internal_set_total_open_volume(::int32_t value);

  public:
  // double premium = 16;
  void clear_premium() ;
  double premium() const;
  void set_premium(double value);

  private:
  double _internal_premium() const;
  void _internal_set_premium(double value);

  public:
  // double fees_and_commissions = 18;
  void clear_fees_and_commissions() ;
  double fees_and_commissions() const;
  void set_fees_and_commissions(double value);

  private:
  double _internal_fees_and_commissions() const;
  void _internal_set_fees_and_commissions(double value);

  public:
  // double long_mp = 19;
  void clear_long_mp() ;
  double long_mp() const;
  void set_long_mp(double value);

  private:
  double _internal_long_mp() const;
  void _internal_set_long_mp(double value);

  public:
  // double short_mp = 20;
  void clear_short_mp() ;
  double short_mp() const;
  void set_short_mp(double value);

  private:
  double _internal_short_mp() const;
  void _internal_set_short_mp(double value);

  public:
  // double prev_margin = 22;
  void clear_prev_margin() ;
  double prev_margin() const;
  void set_prev_margin(double value);

  private:
  double _internal_prev_margin() const;
  void _internal_set_prev_margin(double value);

  public:
  // double prev_rpl = 23;
  void clear_prev_rpl() ;
  double prev_rpl() const;
  void set_prev_rpl(double value);

  private:
  double _internal_prev_rpl() const;
  void _internal_set_prev_rpl(double value);

  public:
  // int32 prev_position = 21;
  void clear_prev_position() ;
  ::int32_t prev_position() const;
  void set_prev_position(::int32_t value);

  private:
  ::int32_t _internal_prev_position() const;
  void _internal_set_prev_position(::int32_t value);

  public:
  // int32 day_buys = 25;
  void clear_day_buys() ;
  ::int32_t day_buys() const;
  void set_day_buys(::int32_t value);

  private:
  ::int32_t _internal_day_buys() const;
  void _internal_set_day_buys(::int32_t value);

  public:
  // double prev_upl = 24;
  void clear_prev_upl() ;
  double prev_upl() const;
  void set_prev_upl(double value);

  private:
  double _internal_prev_upl() const;
  void _internal_set_prev_upl(double value);

  public:
  // int32 day_sells = 26;
  void clear_day_sells() ;
  ::int32_t day_sells() const;
  void set_day_sells(::int32_t value);

  private:
  ::int32_t _internal_day_sells() const;
  void _internal_set_day_sells(::int32_t value);

  public:
  // .t4proto.v1.common.ContractRiskStatus risk_status = 34;
  void clear_risk_status() ;
  ::t4proto::v1::common::ContractRiskStatus risk_status() const;
  void set_risk_status(::t4proto::v1::common::ContractRiskStatus value);

  private:
  ::t4proto::v1::common::ContractRiskStatus _internal_risk_status() const;
  void _internal_set_risk_status(::t4proto::v1::common::ContractRiskStatus value);

  public:
  // double alerting_margin = 36;
  void clear_alerting_margin() ;
  double alerting_margin() const;
  void set_alerting_margin(double value);

  private:
  double _internal_alerting_margin() const;
  void _internal_set_alerting_margin(double value);

  public:
  // double day_margin = 38;
  void clear_day_margin() ;
  double day_margin() const;
  void set_day_margin(double value);

  private:
  double _internal_day_margin() const;
  void _internal_set_day_margin(double value);

  public:
  // double full_margin = 39;
  void clear_full_margin() ;
  double full_margin() const;
  void set_full_margin(double value);

  private:
  double _internal_full_margin() const;
  void _internal_set_full_margin(double value);

  public:
  // double pre_trade_margin = 40;
  void clear_pre_trade_margin() ;
  double pre_trade_margin() const;
  void set_pre_trade_margin(double value);

  private:
  double _internal_pre_trade_margin() const;
  void _internal_set_pre_trade_margin(double value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.account.AccountPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* trade_date_;
    ::t4proto::v1::common::Price* average_open_price_;
    ::t4proto::v1::common::Price* total_open_price_;
    ::t4proto::v1::common::Price* total_buy_fill_price_;
    ::t4proto::v1::common::Price* total_sell_fill_price_;
    ::t4proto::v1::common::Price* day_total_buy_fill_price_;
    ::t4proto::v1::common::Price* day_total_sell_fill_price_;
    ::t4proto::v1::common::Price* total_overnight_price_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* margin_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* alerting_time_;
    ::int32_t buys_;
    ::int32_t sells_;
    ::int32_t working_buys_;
    ::int32_t working_sells_;
    double rpl_;
    double overnight_upl_;
    double margin_;
    double mp_;
    double currency_rate_;
    ::int32_t overnight_position_;
    ::int32_t total_open_volume_;
    double premium_;
    double fees_and_commissions_;
    double long_mp_;
    double short_mp_;
    double prev_margin_;
    double prev_rpl_;
    ::int32_t prev_position_;
    ::int32_t day_buys_;
    double prev_upl_;
    ::int32_t day_sells_;
    int risk_status_;
    double alerting_margin_;
    double day_margin_;
    double full_margin_;
    double pre_trade_margin_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2faccount_2faccount_2eproto;
};// -------------------------------------------------------------------

class AccountUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.account.AccountUpdate) */ {
 public:
  inline AccountUpdate() : AccountUpdate(nullptr) {}
  ~AccountUpdate() override;
  explicit PROTOBUF_CONSTEXPR AccountUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountUpdate(const AccountUpdate& from);
  AccountUpdate(AccountUpdate&& from) noexcept
    : AccountUpdate() {
    *this = ::std::move(from);
  }

  inline AccountUpdate& operator=(const AccountUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountUpdate& operator=(AccountUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountUpdate* internal_default_instance() {
    return reinterpret_cast<const AccountUpdate*>(
               &_AccountUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AccountUpdate& a, AccountUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountUpdate& from) {
    AccountUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.account.AccountUpdate";
  }
  protected:
  explicit AccountUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kImportedNetLiqDateFieldNumber = 19,
    kPrevImportedNetLiqDateFieldNumber = 21,
    kMarginTimeFieldNumber = 24,
    kAlertingTimeFieldNumber = 25,
    kBalanceFieldNumber = 3,
    kRplFieldNumber = 4,
    kOvernightUplFieldNumber = 5,
    kMarginFieldNumber = 6,
    kDayMarginFieldNumber = 7,
    kFullMarginFieldNumber = 8,
    kBaseMarginFieldNumber = 9,
    kAlertingMarginFieldNumber = 10,
    kPreTradeMarginFieldNumber = 11,
    kMpFieldNumber = 12,
    kPremiumFieldNumber = 13,
    kLongMpFieldNumber = 14,
    kShortMpFieldNumber = 15,
    kFeesAndCommissionsFieldNumber = 16,
    kPrevMarginFieldNumber = 17,
    kImportedNetLiqFieldNumber = 18,
    kPrevImportedNetLiqFieldNumber = 20,
    kFilledDeltaFieldNumber = 22,
    kWorkingDeltaFieldNumber = 23,
    kStatusFieldNumber = 2,
  };
  // string account_id = 1;
  void clear_account_id() ;
  const std::string& account_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* ptr);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // .google.protobuf.Timestamp imported_net_liq_date = 19;
  bool has_imported_net_liq_date() const;
  private:
  bool _internal_has_imported_net_liq_date() const;

  public:
  void clear_imported_net_liq_date() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& imported_net_liq_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_imported_net_liq_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_imported_net_liq_date();
  void set_allocated_imported_net_liq_date(::PROTOBUF_NAMESPACE_ID::Timestamp* imported_net_liq_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_imported_net_liq_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_imported_net_liq_date();
  public:
  void unsafe_arena_set_allocated_imported_net_liq_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* imported_net_liq_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_imported_net_liq_date();
  // .google.protobuf.Timestamp prev_imported_net_liq_date = 21;
  bool has_prev_imported_net_liq_date() const;
  private:
  bool _internal_has_prev_imported_net_liq_date() const;

  public:
  void clear_prev_imported_net_liq_date() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& prev_imported_net_liq_date() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_prev_imported_net_liq_date();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_prev_imported_net_liq_date();
  void set_allocated_prev_imported_net_liq_date(::PROTOBUF_NAMESPACE_ID::Timestamp* prev_imported_net_liq_date);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_prev_imported_net_liq_date() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_prev_imported_net_liq_date();
  public:
  void unsafe_arena_set_allocated_prev_imported_net_liq_date(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* prev_imported_net_liq_date);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_prev_imported_net_liq_date();
  // .google.protobuf.Timestamp margin_time = 24;
  bool has_margin_time() const;
  private:
  bool _internal_has_margin_time() const;

  public:
  void clear_margin_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& margin_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_margin_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_margin_time();
  void set_allocated_margin_time(::PROTOBUF_NAMESPACE_ID::Timestamp* margin_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_margin_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_margin_time();
  public:
  void unsafe_arena_set_allocated_margin_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* margin_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_margin_time();
  // .google.protobuf.Timestamp alerting_time = 25;
  bool has_alerting_time() const;
  private:
  bool _internal_has_alerting_time() const;

  public:
  void clear_alerting_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& alerting_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_alerting_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_alerting_time();
  void set_allocated_alerting_time(::PROTOBUF_NAMESPACE_ID::Timestamp* alerting_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_alerting_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_alerting_time();
  public:
  void unsafe_arena_set_allocated_alerting_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* alerting_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_alerting_time();
  // double balance = 3;
  void clear_balance() ;
  double balance() const;
  void set_balance(double value);

  private:
  double _internal_balance() const;
  void _internal_set_balance(double value);

  public:
  // double rpl = 4;
  void clear_rpl() ;
  double rpl() const;
  void set_rpl(double value);

  private:
  double _internal_rpl() const;
  void _internal_set_rpl(double value);

  public:
  // double overnight_upl = 5;
  void clear_overnight_upl() ;
  double overnight_upl() const;
  void set_overnight_upl(double value);

  private:
  double _internal_overnight_upl() const;
  void _internal_set_overnight_upl(double value);

  public:
  // double margin = 6;
  void clear_margin() ;
  double margin() const;
  void set_margin(double value);

  private:
  double _internal_margin() const;
  void _internal_set_margin(double value);

  public:
  // double day_margin = 7;
  void clear_day_margin() ;
  double day_margin() const;
  void set_day_margin(double value);

  private:
  double _internal_day_margin() const;
  void _internal_set_day_margin(double value);

  public:
  // double full_margin = 8;
  void clear_full_margin() ;
  double full_margin() const;
  void set_full_margin(double value);

  private:
  double _internal_full_margin() const;
  void _internal_set_full_margin(double value);

  public:
  // double base_margin = 9;
  void clear_base_margin() ;
  double base_margin() const;
  void set_base_margin(double value);

  private:
  double _internal_base_margin() const;
  void _internal_set_base_margin(double value);

  public:
  // double alerting_margin = 10;
  void clear_alerting_margin() ;
  double alerting_margin() const;
  void set_alerting_margin(double value);

  private:
  double _internal_alerting_margin() const;
  void _internal_set_alerting_margin(double value);

  public:
  // double pre_trade_margin = 11;
  void clear_pre_trade_margin() ;
  double pre_trade_margin() const;
  void set_pre_trade_margin(double value);

  private:
  double _internal_pre_trade_margin() const;
  void _internal_set_pre_trade_margin(double value);

  public:
  // double mp = 12;
  void clear_mp() ;
  double mp() const;
  void set_mp(double value);

  private:
  double _internal_mp() const;
  void _internal_set_mp(double value);

  public:
  // double premium = 13;
  void clear_premium() ;
  double premium() const;
  void set_premium(double value);

  private:
  double _internal_premium() const;
  void _internal_set_premium(double value);

  public:
  // double long_mp = 14;
  void clear_long_mp() ;
  double long_mp() const;
  void set_long_mp(double value);

  private:
  double _internal_long_mp() const;
  void _internal_set_long_mp(double value);

  public:
  // double short_mp = 15;
  void clear_short_mp() ;
  double short_mp() const;
  void set_short_mp(double value);

  private:
  double _internal_short_mp() const;
  void _internal_set_short_mp(double value);

  public:
  // double fees_and_commissions = 16;
  void clear_fees_and_commissions() ;
  double fees_and_commissions() const;
  void set_fees_and_commissions(double value);

  private:
  double _internal_fees_and_commissions() const;
  void _internal_set_fees_and_commissions(double value);

  public:
  // double prev_margin = 17;
  void clear_prev_margin() ;
  double prev_margin() const;
  void set_prev_margin(double value);

  private:
  double _internal_prev_margin() const;
  void _internal_set_prev_margin(double value);

  public:
  // double imported_net_liq = 18;
  void clear_imported_net_liq() ;
  double imported_net_liq() const;
  void set_imported_net_liq(double value);

  private:
  double _internal_imported_net_liq() const;
  void _internal_set_imported_net_liq(double value);

  public:
  // double prev_imported_net_liq = 20;
  void clear_prev_imported_net_liq() ;
  double prev_imported_net_liq() const;
  void set_prev_imported_net_liq(double value);

  private:
  double _internal_prev_imported_net_liq() const;
  void _internal_set_prev_imported_net_liq(double value);

  public:
  // double filled_delta = 22;
  void clear_filled_delta() ;
  double filled_delta() const;
  void set_filled_delta(double value);

  private:
  double _internal_filled_delta() const;
  void _internal_set_filled_delta(double value);

  public:
  // double working_delta = 23;
  void clear_working_delta() ;
  double working_delta() const;
  void set_working_delta(double value);

  private:
  double _internal_working_delta() const;
  void _internal_set_working_delta(double value);

  public:
  // .t4proto.v1.common.AccountStatus status = 2;
  void clear_status() ;
  ::t4proto::v1::common::AccountStatus status() const;
  void set_status(::t4proto::v1::common::AccountStatus value);

  private:
  ::t4proto::v1::common::AccountStatus _internal_status() const;
  void _internal_set_status(::t4proto::v1::common::AccountStatus value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.account.AccountUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* imported_net_liq_date_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* prev_imported_net_liq_date_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* margin_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* alerting_time_;
    double balance_;
    double rpl_;
    double overnight_upl_;
    double margin_;
    double day_margin_;
    double full_margin_;
    double base_margin_;
    double alerting_margin_;
    double pre_trade_margin_;
    double mp_;
    double premium_;
    double long_mp_;
    double short_mp_;
    double fees_and_commissions_;
    double prev_margin_;
    double imported_net_liq_;
    double prev_imported_net_liq_;
    double filled_delta_;
    double working_delta_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2faccount_2faccount_2eproto;
};// -------------------------------------------------------------------

class AccountDetails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.account.AccountDetails) */ {
 public:
  inline AccountDetails() : AccountDetails(nullptr) {}
  ~AccountDetails() override;
  explicit PROTOBUF_CONSTEXPR AccountDetails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountDetails(const AccountDetails& from);
  AccountDetails(AccountDetails&& from) noexcept
    : AccountDetails() {
    *this = ::std::move(from);
  }

  inline AccountDetails& operator=(const AccountDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountDetails& operator=(AccountDetails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountDetails& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountDetails* internal_default_instance() {
    return reinterpret_cast<const AccountDetails*>(
               &_AccountDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AccountDetails& a, AccountDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountDetails* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountDetails* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountDetails>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountDetails& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountDetails& from) {
    AccountDetails::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountDetails* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.account.AccountDetails";
  }
  protected:
  explicit AccountDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kAccountNameFieldNumber = 2,
    kAccountFieldNumber = 3,
    kFirmIdFieldNumber = 10,
    kActiveTimeStartFieldNumber = 17,
    kActiveTimeStopFieldNumber = 18,
    kFirmFieldNumber = 22,
    kDisplayNameFieldNumber = 26,
    kRiskDetailsFieldNumber = 30,
    kGroupNameFieldNumber = 34,
    kEnabledFieldNumber = 4,
    kMaxClipSizeFieldNumber = 6,
    kDeletedFieldNumber = 5,
    kPreTradeDisabledFieldNumber = 7,
    kPositionRolloverFieldNumber = 8,
    kPlRolloverFieldNumber = 9,
    kMarginPcFieldNumber = 12,
    kMinBalanceFieldNumber = 11,
    kLossLimitFieldNumber = 13,
    kLossLimitPcFieldNumber = 14,
    kOvernightMarginPcFieldNumber = 15,
    kWarningThresholdPlFieldNumber = 19,
    kWarningThresholdLossLimitFieldNumber = 20,
    kWarningThresholdMarginFieldNumber = 21,
    kModeFieldNumber = 23,
    kDayLossLimitFieldNumber = 25,
    kMaxAccountPositionFieldNumber = 24,
    kWideMarketFieldNumber = 27,
    kOrderRoutingFieldNumber = 16,
    kUsePlForMarginFieldNumber = 28,
    kOptionsSettlementFieldNumber = 33,
    kUsePremiumForMarginFieldNumber = 35,
    kMarginTypeFieldNumber = 29,
    kPriceBandingFieldNumber = 31,
    kDayLossLimitPcFieldNumber = 32,
    kWarningThresholdMinNetEquityFieldNumber = 36,
  };
  // string account_id = 1;
  void clear_account_id() ;
  const std::string& account_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* ptr);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // string account_name = 2;
  void clear_account_name() ;
  const std::string& account_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_name(Arg_&& arg, Args_... args);
  std::string* mutable_account_name();
  PROTOBUF_NODISCARD std::string* release_account_name();
  void set_allocated_account_name(std::string* ptr);

  private:
  const std::string& _internal_account_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_name(
      const std::string& value);
  std::string* _internal_mutable_account_name();

  public:
  // string account = 3;
  void clear_account() ;
  const std::string& account() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account(Arg_&& arg, Args_... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* ptr);

  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(
      const std::string& value);
  std::string* _internal_mutable_account();

  public:
  // string firm_id = 10;
  void clear_firm_id() ;
  const std::string& firm_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_firm_id(Arg_&& arg, Args_... args);
  std::string* mutable_firm_id();
  PROTOBUF_NODISCARD std::string* release_firm_id();
  void set_allocated_firm_id(std::string* ptr);

  private:
  const std::string& _internal_firm_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firm_id(
      const std::string& value);
  std::string* _internal_mutable_firm_id();

  public:
  // string active_time_start = 17;
  void clear_active_time_start() ;
  const std::string& active_time_start() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_active_time_start(Arg_&& arg, Args_... args);
  std::string* mutable_active_time_start();
  PROTOBUF_NODISCARD std::string* release_active_time_start();
  void set_allocated_active_time_start(std::string* ptr);

  private:
  const std::string& _internal_active_time_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_active_time_start(
      const std::string& value);
  std::string* _internal_mutable_active_time_start();

  public:
  // string active_time_stop = 18;
  void clear_active_time_stop() ;
  const std::string& active_time_stop() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_active_time_stop(Arg_&& arg, Args_... args);
  std::string* mutable_active_time_stop();
  PROTOBUF_NODISCARD std::string* release_active_time_stop();
  void set_allocated_active_time_stop(std::string* ptr);

  private:
  const std::string& _internal_active_time_stop() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_active_time_stop(
      const std::string& value);
  std::string* _internal_mutable_active_time_stop();

  public:
  // string firm = 22;
  void clear_firm() ;
  const std::string& firm() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_firm(Arg_&& arg, Args_... args);
  std::string* mutable_firm();
  PROTOBUF_NODISCARD std::string* release_firm();
  void set_allocated_firm(std::string* ptr);

  private:
  const std::string& _internal_firm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firm(
      const std::string& value);
  std::string* _internal_mutable_firm();

  public:
  // string display_name = 26;
  void clear_display_name() ;
  const std::string& display_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_display_name(Arg_&& arg, Args_... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* ptr);

  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(
      const std::string& value);
  std::string* _internal_mutable_display_name();

  public:
  // string risk_details = 30;
  void clear_risk_details() ;
  const std::string& risk_details() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_risk_details(Arg_&& arg, Args_... args);
  std::string* mutable_risk_details();
  PROTOBUF_NODISCARD std::string* release_risk_details();
  void set_allocated_risk_details(std::string* ptr);

  private:
  const std::string& _internal_risk_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_risk_details(
      const std::string& value);
  std::string* _internal_mutable_risk_details();

  public:
  // string group_name = 34;
  void clear_group_name() ;
  const std::string& group_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_group_name(Arg_&& arg, Args_... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* ptr);

  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(
      const std::string& value);
  std::string* _internal_mutable_group_name();

  public:
  // .t4proto.v1.common.AccountEnabled enabled = 4;
  void clear_enabled() ;
  ::t4proto::v1::common::AccountEnabled enabled() const;
  void set_enabled(::t4proto::v1::common::AccountEnabled value);

  private:
  ::t4proto::v1::common::AccountEnabled _internal_enabled() const;
  void _internal_set_enabled(::t4proto::v1::common::AccountEnabled value);

  public:
  // int32 max_clip_size = 6;
  void clear_max_clip_size() ;
  ::int32_t max_clip_size() const;
  void set_max_clip_size(::int32_t value);

  private:
  ::int32_t _internal_max_clip_size() const;
  void _internal_set_max_clip_size(::int32_t value);

  public:
  // bool deleted = 5;
  void clear_deleted() ;
  bool deleted() const;
  void set_deleted(bool value);

  private:
  bool _internal_deleted() const;
  void _internal_set_deleted(bool value);

  public:
  // bool pre_trade_disabled = 7;
  void clear_pre_trade_disabled() ;
  bool pre_trade_disabled() const;
  void set_pre_trade_disabled(bool value);

  private:
  bool _internal_pre_trade_disabled() const;
  void _internal_set_pre_trade_disabled(bool value);

  public:
  // bool position_rollover = 8;
  void clear_position_rollover() ;
  bool position_rollover() const;
  void set_position_rollover(bool value);

  private:
  bool _internal_position_rollover() const;
  void _internal_set_position_rollover(bool value);

  public:
  // bool pl_rollover = 9;
  void clear_pl_rollover() ;
  bool pl_rollover() const;
  void set_pl_rollover(bool value);

  private:
  bool _internal_pl_rollover() const;
  void _internal_set_pl_rollover(bool value);

  public:
  // int32 margin_pc = 12;
  void clear_margin_pc() ;
  ::int32_t margin_pc() const;
  void set_margin_pc(::int32_t value);

  private:
  ::int32_t _internal_margin_pc() const;
  void _internal_set_margin_pc(::int32_t value);

  public:
  // double min_balance = 11;
  void clear_min_balance() ;
  double min_balance() const;
  void set_min_balance(double value);

  private:
  double _internal_min_balance() const;
  void _internal_set_min_balance(double value);

  public:
  // double loss_limit = 13;
  void clear_loss_limit() ;
  double loss_limit() const;
  void set_loss_limit(double value);

  private:
  double _internal_loss_limit() const;
  void _internal_set_loss_limit(double value);

  public:
  // int32 loss_limit_pc = 14;
  void clear_loss_limit_pc() ;
  ::int32_t loss_limit_pc() const;
  void set_loss_limit_pc(::int32_t value);

  private:
  ::int32_t _internal_loss_limit_pc() const;
  void _internal_set_loss_limit_pc(::int32_t value);

  public:
  // int32 overnight_margin_pc = 15;
  void clear_overnight_margin_pc() ;
  ::int32_t overnight_margin_pc() const;
  void set_overnight_margin_pc(::int32_t value);

  private:
  ::int32_t _internal_overnight_margin_pc() const;
  void _internal_set_overnight_margin_pc(::int32_t value);

  public:
  // int32 warning_threshold_pl = 19;
  void clear_warning_threshold_pl() ;
  ::int32_t warning_threshold_pl() const;
  void set_warning_threshold_pl(::int32_t value);

  private:
  ::int32_t _internal_warning_threshold_pl() const;
  void _internal_set_warning_threshold_pl(::int32_t value);

  public:
  // int32 warning_threshold_loss_limit = 20;
  void clear_warning_threshold_loss_limit() ;
  ::int32_t warning_threshold_loss_limit() const;
  void set_warning_threshold_loss_limit(::int32_t value);

  private:
  ::int32_t _internal_warning_threshold_loss_limit() const;
  void _internal_set_warning_threshold_loss_limit(::int32_t value);

  public:
  // int32 warning_threshold_margin = 21;
  void clear_warning_threshold_margin() ;
  ::int32_t warning_threshold_margin() const;
  void set_warning_threshold_margin(::int32_t value);

  private:
  ::int32_t _internal_warning_threshold_margin() const;
  void _internal_set_warning_threshold_margin(::int32_t value);

  public:
  // .t4proto.v1.common.AccountMode mode = 23;
  void clear_mode() ;
  ::t4proto::v1::common::AccountMode mode() const;
  void set_mode(::t4proto::v1::common::AccountMode value);

  private:
  ::t4proto::v1::common::AccountMode _internal_mode() const;
  void _internal_set_mode(::t4proto::v1::common::AccountMode value);

  public:
  // double day_loss_limit = 25;
  void clear_day_loss_limit() ;
  double day_loss_limit() const;
  void set_day_loss_limit(double value);

  private:
  double _internal_day_loss_limit() const;
  void _internal_set_day_loss_limit(double value);

  public:
  // int32 max_account_position = 24;
  void clear_max_account_position() ;
  ::int32_t max_account_position() const;
  void set_max_account_position(::int32_t value);

  private:
  ::int32_t _internal_max_account_position() const;
  void _internal_set_max_account_position(::int32_t value);

  public:
  // int32 wide_market = 27;
  void clear_wide_market() ;
  ::int32_t wide_market() const;
  void set_wide_market(::int32_t value);

  private:
  ::int32_t _internal_wide_market() const;
  void _internal_set_wide_market(::int32_t value);

  public:
  // bool order_routing = 16;
  void clear_order_routing() ;
  bool order_routing() const;
  void set_order_routing(bool value);

  private:
  bool _internal_order_routing() const;
  void _internal_set_order_routing(bool value);

  public:
  // bool use_pl_for_margin = 28;
  void clear_use_pl_for_margin() ;
  bool use_pl_for_margin() const;
  void set_use_pl_for_margin(bool value);

  private:
  bool _internal_use_pl_for_margin() const;
  void _internal_set_use_pl_for_margin(bool value);

  public:
  // bool options_settlement = 33;
  void clear_options_settlement() ;
  bool options_settlement() const;
  void set_options_settlement(bool value);

  private:
  bool _internal_options_settlement() const;
  void _internal_set_options_settlement(bool value);

  public:
  // bool use_premium_for_margin = 35;
  void clear_use_premium_for_margin() ;
  bool use_premium_for_margin() const;
  void set_use_premium_for_margin(bool value);

  private:
  bool _internal_use_premium_for_margin() const;
  void _internal_set_use_premium_for_margin(bool value);

  public:
  // .t4proto.v1.common.AccountMarginType margin_type = 29;
  void clear_margin_type() ;
  ::t4proto::v1::common::AccountMarginType margin_type() const;
  void set_margin_type(::t4proto::v1::common::AccountMarginType value);

  private:
  ::t4proto::v1::common::AccountMarginType _internal_margin_type() const;
  void _internal_set_margin_type(::t4proto::v1::common::AccountMarginType value);

  public:
  // int32 price_banding = 31;
  void clear_price_banding() ;
  ::int32_t price_banding() const;
  void set_price_banding(::int32_t value);

  private:
  ::int32_t _internal_price_banding() const;
  void _internal_set_price_banding(::int32_t value);

  public:
  // int32 day_loss_limit_pc = 32;
  void clear_day_loss_limit_pc() ;
  ::int32_t day_loss_limit_pc() const;
  void set_day_loss_limit_pc(::int32_t value);

  private:
  ::int32_t _internal_day_loss_limit_pc() const;
  void _internal_set_day_loss_limit_pc(::int32_t value);

  public:
  // double warning_threshold_min_net_equity = 36;
  void clear_warning_threshold_min_net_equity() ;
  double warning_threshold_min_net_equity() const;
  void set_warning_threshold_min_net_equity(double value);

  private:
  double _internal_warning_threshold_min_net_equity() const;
  void _internal_set_warning_threshold_min_net_equity(double value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.account.AccountDetails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firm_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_time_start_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr active_time_stop_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firm_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr risk_details_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
    int enabled_;
    ::int32_t max_clip_size_;
    bool deleted_;
    bool pre_trade_disabled_;
    bool position_rollover_;
    bool pl_rollover_;
    ::int32_t margin_pc_;
    double min_balance_;
    double loss_limit_;
    ::int32_t loss_limit_pc_;
    ::int32_t overnight_margin_pc_;
    ::int32_t warning_threshold_pl_;
    ::int32_t warning_threshold_loss_limit_;
    ::int32_t warning_threshold_margin_;
    int mode_;
    double day_loss_limit_;
    ::int32_t max_account_position_;
    ::int32_t wide_market_;
    bool order_routing_;
    bool use_pl_for_margin_;
    bool options_settlement_;
    bool use_premium_for_margin_;
    int margin_type_;
    ::int32_t price_banding_;
    ::int32_t day_loss_limit_pc_;
    double warning_threshold_min_net_equity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2faccount_2faccount_2eproto;
};// -------------------------------------------------------------------

class AccountSnapshotMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.account.AccountSnapshotMessage) */ {
 public:
  inline AccountSnapshotMessage() : AccountSnapshotMessage(nullptr) {}
  ~AccountSnapshotMessage() override;
  explicit PROTOBUF_CONSTEXPR AccountSnapshotMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountSnapshotMessage(const AccountSnapshotMessage& from);
  AccountSnapshotMessage(AccountSnapshotMessage&& from) noexcept
    : AccountSnapshotMessage() {
    *this = ::std::move(from);
  }

  inline AccountSnapshotMessage& operator=(const AccountSnapshotMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountSnapshotMessage& operator=(AccountSnapshotMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountSnapshotMessage& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kAccountPosition = 3,
    kAccountUpdate = 4,
    kAccountDetails = 5,
    kAccountCurrency = 6,
    kMarketDetails = 7,
    kOrderUpdateMulti = 8,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const AccountSnapshotMessage* internal_default_instance() {
    return reinterpret_cast<const AccountSnapshotMessage*>(
               &_AccountSnapshotMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AccountSnapshotMessage& a, AccountSnapshotMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountSnapshotMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountSnapshotMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountSnapshotMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountSnapshotMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountSnapshotMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountSnapshotMessage& from) {
    AccountSnapshotMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountSnapshotMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.account.AccountSnapshotMessage";
  }
  protected:
  explicit AccountSnapshotMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountPositionFieldNumber = 3,
    kAccountUpdateFieldNumber = 4,
    kAccountDetailsFieldNumber = 5,
    kAccountCurrencyFieldNumber = 6,
    kMarketDetailsFieldNumber = 7,
    kOrderUpdateMultiFieldNumber = 8,
  };
  // .t4proto.v1.account.AccountPosition account_position = 3;
  bool has_account_position() const;
  private:
  bool _internal_has_account_position() const;

  public:
  void clear_account_position() ;
  const ::t4proto::v1::account::AccountPosition& account_position() const;
  PROTOBUF_NODISCARD ::t4proto::v1::account::AccountPosition* release_account_position();
  ::t4proto::v1::account::AccountPosition* mutable_account_position();
  void set_allocated_account_position(::t4proto::v1::account::AccountPosition* account_position);
  private:
  const ::t4proto::v1::account::AccountPosition& _internal_account_position() const;
  ::t4proto::v1::account::AccountPosition* _internal_mutable_account_position();
  public:
  void unsafe_arena_set_allocated_account_position(
      ::t4proto::v1::account::AccountPosition* account_position);
  ::t4proto::v1::account::AccountPosition* unsafe_arena_release_account_position();
  // .t4proto.v1.account.AccountUpdate account_update = 4;
  bool has_account_update() const;
  private:
  bool _internal_has_account_update() const;

  public:
  void clear_account_update() ;
  const ::t4proto::v1::account::AccountUpdate& account_update() const;
  PROTOBUF_NODISCARD ::t4proto::v1::account::AccountUpdate* release_account_update();
  ::t4proto::v1::account::AccountUpdate* mutable_account_update();
  void set_allocated_account_update(::t4proto::v1::account::AccountUpdate* account_update);
  private:
  const ::t4proto::v1::account::AccountUpdate& _internal_account_update() const;
  ::t4proto::v1::account::AccountUpdate* _internal_mutable_account_update();
  public:
  void unsafe_arena_set_allocated_account_update(
      ::t4proto::v1::account::AccountUpdate* account_update);
  ::t4proto::v1::account::AccountUpdate* unsafe_arena_release_account_update();
  // .t4proto.v1.account.AccountDetails account_details = 5;
  bool has_account_details() const;
  private:
  bool _internal_has_account_details() const;

  public:
  void clear_account_details() ;
  const ::t4proto::v1::account::AccountDetails& account_details() const;
  PROTOBUF_NODISCARD ::t4proto::v1::account::AccountDetails* release_account_details();
  ::t4proto::v1::account::AccountDetails* mutable_account_details();
  void set_allocated_account_details(::t4proto::v1::account::AccountDetails* account_details);
  private:
  const ::t4proto::v1::account::AccountDetails& _internal_account_details() const;
  ::t4proto::v1::account::AccountDetails* _internal_mutable_account_details();
  public:
  void unsafe_arena_set_allocated_account_details(
      ::t4proto::v1::account::AccountDetails* account_details);
  ::t4proto::v1::account::AccountDetails* unsafe_arena_release_account_details();
  // .t4proto.v1.account.AccountCurrency account_currency = 6;
  bool has_account_currency() const;
  private:
  bool _internal_has_account_currency() const;

  public:
  void clear_account_currency() ;
  const ::t4proto::v1::account::AccountCurrency& account_currency() const;
  PROTOBUF_NODISCARD ::t4proto::v1::account::AccountCurrency* release_account_currency();
  ::t4proto::v1::account::AccountCurrency* mutable_account_currency();
  void set_allocated_account_currency(::t4proto::v1::account::AccountCurrency* account_currency);
  private:
  const ::t4proto::v1::account::AccountCurrency& _internal_account_currency() const;
  ::t4proto::v1::account::AccountCurrency* _internal_mutable_account_currency();
  public:
  void unsafe_arena_set_allocated_account_currency(
      ::t4proto::v1::account::AccountCurrency* account_currency);
  ::t4proto::v1::account::AccountCurrency* unsafe_arena_release_account_currency();
  // .t4proto.v1.market.MarketDetails market_details = 7;
  bool has_market_details() const;
  private:
  bool _internal_has_market_details() const;

  public:
  void clear_market_details() ;
  const ::t4proto::v1::market::MarketDetails& market_details() const;
  PROTOBUF_NODISCARD ::t4proto::v1::market::MarketDetails* release_market_details();
  ::t4proto::v1::market::MarketDetails* mutable_market_details();
  void set_allocated_market_details(::t4proto::v1::market::MarketDetails* market_details);
  private:
  const ::t4proto::v1::market::MarketDetails& _internal_market_details() const;
  ::t4proto::v1::market::MarketDetails* _internal_mutable_market_details();
  public:
  void unsafe_arena_set_allocated_market_details(
      ::t4proto::v1::market::MarketDetails* market_details);
  ::t4proto::v1::market::MarketDetails* unsafe_arena_release_market_details();
  // .t4proto.v1.orderrouting.OrderUpdateMulti order_update_multi = 8;
  bool has_order_update_multi() const;
  private:
  bool _internal_has_order_update_multi() const;

  public:
  void clear_order_update_multi() ;
  const ::t4proto::v1::orderrouting::OrderUpdateMulti& order_update_multi() const;
  PROTOBUF_NODISCARD ::t4proto::v1::orderrouting::OrderUpdateMulti* release_order_update_multi();
  ::t4proto::v1::orderrouting::OrderUpdateMulti* mutable_order_update_multi();
  void set_allocated_order_update_multi(::t4proto::v1::orderrouting::OrderUpdateMulti* order_update_multi);
  private:
  const ::t4proto::v1::orderrouting::OrderUpdateMulti& _internal_order_update_multi() const;
  ::t4proto::v1::orderrouting::OrderUpdateMulti* _internal_mutable_order_update_multi();
  public:
  void unsafe_arena_set_allocated_order_update_multi(
      ::t4proto::v1::orderrouting::OrderUpdateMulti* order_update_multi);
  ::t4proto::v1::orderrouting::OrderUpdateMulti* unsafe_arena_release_order_update_multi();
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:t4proto.v1.account.AccountSnapshotMessage)
 private:
  class _Internal;
  void set_has_account_position();
  void set_has_account_update();
  void set_has_account_details();
  void set_has_account_currency();
  void set_has_market_details();
  void set_has_order_update_multi();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::t4proto::v1::account::AccountPosition* account_position_;
      ::t4proto::v1::account::AccountUpdate* account_update_;
      ::t4proto::v1::account::AccountDetails* account_details_;
      ::t4proto::v1::account::AccountCurrency* account_currency_;
      ::t4proto::v1::market::MarketDetails* market_details_;
      ::t4proto::v1::orderrouting::OrderUpdateMulti* order_update_multi_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2faccount_2faccount_2eproto;
};// -------------------------------------------------------------------

class AccountSnapshot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.account.AccountSnapshot) */ {
 public:
  inline AccountSnapshot() : AccountSnapshot(nullptr) {}
  ~AccountSnapshot() override;
  explicit PROTOBUF_CONSTEXPR AccountSnapshot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountSnapshot(const AccountSnapshot& from);
  AccountSnapshot(AccountSnapshot&& from) noexcept
    : AccountSnapshot() {
    *this = ::std::move(from);
  }

  inline AccountSnapshot& operator=(const AccountSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountSnapshot& operator=(AccountSnapshot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountSnapshot& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountSnapshot* internal_default_instance() {
    return reinterpret_cast<const AccountSnapshot*>(
               &_AccountSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AccountSnapshot& a, AccountSnapshot& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountSnapshot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountSnapshot* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountSnapshot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountSnapshot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountSnapshot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountSnapshot& from) {
    AccountSnapshot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountSnapshot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.account.AccountSnapshot";
  }
  protected:
  explicit AccountSnapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessagesFieldNumber = 6,
    kAccountIdFieldNumber = 1,
    kLastUpdateRequestedFieldNumber = 2,
    kLastUpdateSuppliedFieldNumber = 3,
    kStatusFieldNumber = 4,
    kDueToConnectionFieldNumber = 5,
  };
  // repeated .t4proto.v1.account.AccountSnapshotMessage messages = 6;
  int messages_size() const;
  private:
  int _internal_messages_size() const;

  public:
  void clear_messages() ;
  ::t4proto::v1::account::AccountSnapshotMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::account::AccountSnapshotMessage >*
      mutable_messages();
  private:
  const ::t4proto::v1::account::AccountSnapshotMessage& _internal_messages(int index) const;
  ::t4proto::v1::account::AccountSnapshotMessage* _internal_add_messages();
  public:
  const ::t4proto::v1::account::AccountSnapshotMessage& messages(int index) const;
  ::t4proto::v1::account::AccountSnapshotMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::account::AccountSnapshotMessage >&
      messages() const;
  // string account_id = 1;
  void clear_account_id() ;
  const std::string& account_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* ptr);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // int64 last_update_requested = 2;
  void clear_last_update_requested() ;
  ::int64_t last_update_requested() const;
  void set_last_update_requested(::int64_t value);

  private:
  ::int64_t _internal_last_update_requested() const;
  void _internal_set_last_update_requested(::int64_t value);

  public:
  // int64 last_update_supplied = 3;
  void clear_last_update_supplied() ;
  ::int64_t last_update_supplied() const;
  void set_last_update_supplied(::int64_t value);

  private:
  ::int64_t _internal_last_update_supplied() const;
  void _internal_set_last_update_supplied(::int64_t value);

  public:
  // .t4proto.v1.common.AccountStatus status = 4;
  void clear_status() ;
  ::t4proto::v1::common::AccountStatus status() const;
  void set_status(::t4proto::v1::common::AccountStatus value);

  private:
  ::t4proto::v1::common::AccountStatus _internal_status() const;
  void _internal_set_status(::t4proto::v1::common::AccountStatus value);

  public:
  // bool due_to_connection = 5;
  void clear_due_to_connection() ;
  bool due_to_connection() const;
  void set_due_to_connection(bool value);

  private:
  bool _internal_due_to_connection() const;
  void _internal_set_due_to_connection(bool value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.account.AccountSnapshot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::account::AccountSnapshotMessage > messages_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::int64_t last_update_requested_;
    ::int64_t last_update_supplied_;
    int status_;
    bool due_to_connection_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2faccount_2faccount_2eproto;
};// -------------------------------------------------------------------

class AccountProfit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.account.AccountProfit) */ {
 public:
  inline AccountProfit() : AccountProfit(nullptr) {}
  ~AccountProfit() override;
  explicit PROTOBUF_CONSTEXPR AccountProfit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountProfit(const AccountProfit& from);
  AccountProfit(AccountProfit&& from) noexcept
    : AccountProfit() {
    *this = ::std::move(from);
  }

  inline AccountProfit& operator=(const AccountProfit& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountProfit& operator=(AccountProfit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountProfit& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountProfit* internal_default_instance() {
    return reinterpret_cast<const AccountProfit*>(
               &_AccountProfit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AccountProfit& a, AccountProfit& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountProfit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountProfit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountProfit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountProfit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountProfit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountProfit& from) {
    AccountProfit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountProfit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.account.AccountProfit";
  }
  protected:
  explicit AccountProfit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kUpdateTimeFieldNumber = 2,
    kUplFieldNumber = 3,
    kUplTradeFieldNumber = 4,
    kRplFieldNumber = 5,
    kDayUplFieldNumber = 6,
    kDayUplTradeFieldNumber = 7,
    kDayRplFieldNumber = 8,
    kWarningPlFieldNumber = 9,
    kWarningLossLimitFieldNumber = 10,
    kWarningMarginFieldNumber = 11,
    kTotalWorkingOrdersFieldNumber = 12,
    kTotalWorkingVolumeFieldNumber = 13,
    kIsAlertingLiveMarginFieldNumber = 14,
    kIsAlertingFullMarginFieldNumber = 15,
  };
  // string account_id = 1;
  void clear_account_id() ;
  const std::string& account_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* ptr);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // .google.protobuf.Timestamp update_time = 2;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;

  public:
  void clear_update_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();
  // optional double upl = 3;
  bool has_upl() const;
  void clear_upl() ;
  double upl() const;
  void set_upl(double value);

  private:
  double _internal_upl() const;
  void _internal_set_upl(double value);

  public:
  // optional double upl_trade = 4;
  bool has_upl_trade() const;
  void clear_upl_trade() ;
  double upl_trade() const;
  void set_upl_trade(double value);

  private:
  double _internal_upl_trade() const;
  void _internal_set_upl_trade(double value);

  public:
  // optional double rpl = 5;
  bool has_rpl() const;
  void clear_rpl() ;
  double rpl() const;
  void set_rpl(double value);

  private:
  double _internal_rpl() const;
  void _internal_set_rpl(double value);

  public:
  // optional double day_upl = 6;
  bool has_day_upl() const;
  void clear_day_upl() ;
  double day_upl() const;
  void set_day_upl(double value);

  private:
  double _internal_day_upl() const;
  void _internal_set_day_upl(double value);

  public:
  // optional double day_upl_trade = 7;
  bool has_day_upl_trade() const;
  void clear_day_upl_trade() ;
  double day_upl_trade() const;
  void set_day_upl_trade(double value);

  private:
  double _internal_day_upl_trade() const;
  void _internal_set_day_upl_trade(double value);

  public:
  // optional double day_rpl = 8;
  bool has_day_rpl() const;
  void clear_day_rpl() ;
  double day_rpl() const;
  void set_day_rpl(double value);

  private:
  double _internal_day_rpl() const;
  void _internal_set_day_rpl(double value);

  public:
  // optional int32 warning_pl = 9;
  bool has_warning_pl() const;
  void clear_warning_pl() ;
  ::int32_t warning_pl() const;
  void set_warning_pl(::int32_t value);

  private:
  ::int32_t _internal_warning_pl() const;
  void _internal_set_warning_pl(::int32_t value);

  public:
  // optional int32 warning_loss_limit = 10;
  bool has_warning_loss_limit() const;
  void clear_warning_loss_limit() ;
  ::int32_t warning_loss_limit() const;
  void set_warning_loss_limit(::int32_t value);

  private:
  ::int32_t _internal_warning_loss_limit() const;
  void _internal_set_warning_loss_limit(::int32_t value);

  public:
  // optional int32 warning_margin = 11;
  bool has_warning_margin() const;
  void clear_warning_margin() ;
  ::int32_t warning_margin() const;
  void set_warning_margin(::int32_t value);

  private:
  ::int32_t _internal_warning_margin() const;
  void _internal_set_warning_margin(::int32_t value);

  public:
  // optional int32 total_working_orders = 12;
  bool has_total_working_orders() const;
  void clear_total_working_orders() ;
  ::int32_t total_working_orders() const;
  void set_total_working_orders(::int32_t value);

  private:
  ::int32_t _internal_total_working_orders() const;
  void _internal_set_total_working_orders(::int32_t value);

  public:
  // optional int32 total_working_volume = 13;
  bool has_total_working_volume() const;
  void clear_total_working_volume() ;
  ::int32_t total_working_volume() const;
  void set_total_working_volume(::int32_t value);

  private:
  ::int32_t _internal_total_working_volume() const;
  void _internal_set_total_working_volume(::int32_t value);

  public:
  // optional bool is_alerting_live_margin = 14;
  bool has_is_alerting_live_margin() const;
  void clear_is_alerting_live_margin() ;
  bool is_alerting_live_margin() const;
  void set_is_alerting_live_margin(bool value);

  private:
  bool _internal_is_alerting_live_margin() const;
  void _internal_set_is_alerting_live_margin(bool value);

  public:
  // optional bool is_alerting_full_margin = 15;
  bool has_is_alerting_full_margin() const;
  void clear_is_alerting_full_margin() ;
  bool is_alerting_full_margin() const;
  void set_is_alerting_full_margin(bool value);

  private:
  bool _internal_is_alerting_full_margin() const;
  void _internal_set_is_alerting_full_margin(bool value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.account.AccountProfit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
    double upl_;
    double upl_trade_;
    double rpl_;
    double day_upl_;
    double day_upl_trade_;
    double day_rpl_;
    ::int32_t warning_pl_;
    ::int32_t warning_loss_limit_;
    ::int32_t warning_margin_;
    ::int32_t total_working_orders_;
    ::int32_t total_working_volume_;
    bool is_alerting_live_margin_;
    bool is_alerting_full_margin_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2faccount_2faccount_2eproto;
};// -------------------------------------------------------------------

class AccountPositionProfit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.account.AccountPositionProfit) */ {
 public:
  inline AccountPositionProfit() : AccountPositionProfit(nullptr) {}
  ~AccountPositionProfit() override;
  explicit PROTOBUF_CONSTEXPR AccountPositionProfit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccountPositionProfit(const AccountPositionProfit& from);
  AccountPositionProfit(AccountPositionProfit&& from) noexcept
    : AccountPositionProfit() {
    *this = ::std::move(from);
  }

  inline AccountPositionProfit& operator=(const AccountPositionProfit& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccountPositionProfit& operator=(AccountPositionProfit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccountPositionProfit& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccountPositionProfit* internal_default_instance() {
    return reinterpret_cast<const AccountPositionProfit*>(
               &_AccountPositionProfit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AccountPositionProfit& a, AccountPositionProfit& b) {
    a.Swap(&b);
  }
  inline void Swap(AccountPositionProfit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccountPositionProfit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AccountPositionProfit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AccountPositionProfit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccountPositionProfit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AccountPositionProfit& from) {
    AccountPositionProfit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountPositionProfit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.account.AccountPositionProfit";
  }
  protected:
  explicit AccountPositionProfit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kExchangeIdFieldNumber = 2,
    kContractIdFieldNumber = 3,
    kMarketIdFieldNumber = 4,
    kUpdateTimeFieldNumber = 6,
    kNetFieldNumber = 10,
    kUplFieldNumber = 11,
    kUplTradeFieldNumber = 12,
    kRplFieldNumber = 13,
    kUplUsdFieldNumber = 14,
    kUplTradeUsdFieldNumber = 15,
    kRplUsdFieldNumber = 16,
    kDayNetFieldNumber = 17,
    kDayRplFieldNumber = 18,
    kDayRplUsdFieldNumber = 19,
    kDayUplFieldNumber = 20,
    kDayUplTradeFieldNumber = 21,
    kDayUplUsdFieldNumber = 22,
    kDayUplTradeUsdFieldNumber = 23,
    kDelayedFieldNumber = 5,
    kIsOptionsFieldNumber = 7,
    kHasDataFieldNumber = 8,
    kIsImpliedFieldNumber = 9,
  };
  // string account_id = 1;
  void clear_account_id() ;
  const std::string& account_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* ptr);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // string exchange_id = 2;
  void clear_exchange_id() ;
  const std::string& exchange_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* ptr);

  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_id();

  public:
  // string contract_id = 3;
  void clear_contract_id() ;
  const std::string& contract_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contract_id(Arg_&& arg, Args_... args);
  std::string* mutable_contract_id();
  PROTOBUF_NODISCARD std::string* release_contract_id();
  void set_allocated_contract_id(std::string* ptr);

  private:
  const std::string& _internal_contract_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_id(
      const std::string& value);
  std::string* _internal_mutable_contract_id();

  public:
  // string market_id = 4;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // .google.protobuf.Timestamp update_time = 6;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;

  public:
  void clear_update_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();
  // optional double net = 10;
  bool has_net() const;
  void clear_net() ;
  double net() const;
  void set_net(double value);

  private:
  double _internal_net() const;
  void _internal_set_net(double value);

  public:
  // optional double upl = 11;
  bool has_upl() const;
  void clear_upl() ;
  double upl() const;
  void set_upl(double value);

  private:
  double _internal_upl() const;
  void _internal_set_upl(double value);

  public:
  // optional double upl_trade = 12;
  bool has_upl_trade() const;
  void clear_upl_trade() ;
  double upl_trade() const;
  void set_upl_trade(double value);

  private:
  double _internal_upl_trade() const;
  void _internal_set_upl_trade(double value);

  public:
  // optional double rpl = 13;
  bool has_rpl() const;
  void clear_rpl() ;
  double rpl() const;
  void set_rpl(double value);

  private:
  double _internal_rpl() const;
  void _internal_set_rpl(double value);

  public:
  // optional double upl_usd = 14;
  bool has_upl_usd() const;
  void clear_upl_usd() ;
  double upl_usd() const;
  void set_upl_usd(double value);

  private:
  double _internal_upl_usd() const;
  void _internal_set_upl_usd(double value);

  public:
  // optional double upl_trade_usd = 15;
  bool has_upl_trade_usd() const;
  void clear_upl_trade_usd() ;
  double upl_trade_usd() const;
  void set_upl_trade_usd(double value);

  private:
  double _internal_upl_trade_usd() const;
  void _internal_set_upl_trade_usd(double value);

  public:
  // optional double rpl_usd = 16;
  bool has_rpl_usd() const;
  void clear_rpl_usd() ;
  double rpl_usd() const;
  void set_rpl_usd(double value);

  private:
  double _internal_rpl_usd() const;
  void _internal_set_rpl_usd(double value);

  public:
  // optional double day_net = 17;
  bool has_day_net() const;
  void clear_day_net() ;
  double day_net() const;
  void set_day_net(double value);

  private:
  double _internal_day_net() const;
  void _internal_set_day_net(double value);

  public:
  // optional double day_rpl = 18;
  bool has_day_rpl() const;
  void clear_day_rpl() ;
  double day_rpl() const;
  void set_day_rpl(double value);

  private:
  double _internal_day_rpl() const;
  void _internal_set_day_rpl(double value);

  public:
  // optional double day_rpl_usd = 19;
  bool has_day_rpl_usd() const;
  void clear_day_rpl_usd() ;
  double day_rpl_usd() const;
  void set_day_rpl_usd(double value);

  private:
  double _internal_day_rpl_usd() const;
  void _internal_set_day_rpl_usd(double value);

  public:
  // optional double day_upl = 20;
  bool has_day_upl() const;
  void clear_day_upl() ;
  double day_upl() const;
  void set_day_upl(double value);

  private:
  double _internal_day_upl() const;
  void _internal_set_day_upl(double value);

  public:
  // optional double day_upl_trade = 21;
  bool has_day_upl_trade() const;
  void clear_day_upl_trade() ;
  double day_upl_trade() const;
  void set_day_upl_trade(double value);

  private:
  double _internal_day_upl_trade() const;
  void _internal_set_day_upl_trade(double value);

  public:
  // optional double day_upl_usd = 22;
  bool has_day_upl_usd() const;
  void clear_day_upl_usd() ;
  double day_upl_usd() const;
  void set_day_upl_usd(double value);

  private:
  double _internal_day_upl_usd() const;
  void _internal_set_day_upl_usd(double value);

  public:
  // optional double day_upl_trade_usd = 23;
  bool has_day_upl_trade_usd() const;
  void clear_day_upl_trade_usd() ;
  double day_upl_trade_usd() const;
  void set_day_upl_trade_usd(double value);

  private:
  double _internal_day_upl_trade_usd() const;
  void _internal_set_day_upl_trade_usd(double value);

  public:
  // bool delayed = 5;
  void clear_delayed() ;
  bool delayed() const;
  void set_delayed(bool value);

  private:
  bool _internal_delayed() const;
  void _internal_set_delayed(bool value);

  public:
  // bool is_options = 7;
  void clear_is_options() ;
  bool is_options() const;
  void set_is_options(bool value);

  private:
  bool _internal_is_options() const;
  void _internal_set_is_options(bool value);

  public:
  // bool has_data = 8;
  void clear_has_data() ;
  bool has_data() const;
  void set_has_data(bool value);

  private:
  bool _internal_has_data() const;
  void _internal_set_has_data(bool value);

  public:
  // bool is_implied = 9;
  void clear_is_implied() ;
  bool is_implied() const;
  void set_is_implied(bool value);

  private:
  bool _internal_is_implied() const;
  void _internal_set_is_implied(bool value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.account.AccountPositionProfit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
    double net_;
    double upl_;
    double upl_trade_;
    double rpl_;
    double upl_usd_;
    double upl_trade_usd_;
    double rpl_usd_;
    double day_net_;
    double day_rpl_;
    double day_rpl_usd_;
    double day_upl_;
    double day_upl_trade_;
    double day_upl_usd_;
    double day_upl_trade_usd_;
    bool delayed_;
    bool is_options_;
    bool has_data_;
    bool is_implied_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2faccount_2faccount_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AccountSubscribe

// .t4proto.v1.common.AccountSubscribeType subscribe = 1;
inline void AccountSubscribe::clear_subscribe() {
  _impl_.subscribe_ = 0;
}
inline ::t4proto::v1::common::AccountSubscribeType AccountSubscribe::subscribe() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountSubscribe.subscribe)
  return _internal_subscribe();
}
inline void AccountSubscribe::set_subscribe(::t4proto::v1::common::AccountSubscribeType value) {
   _internal_set_subscribe(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountSubscribe.subscribe)
}
inline ::t4proto::v1::common::AccountSubscribeType AccountSubscribe::_internal_subscribe() const {
  return static_cast<::t4proto::v1::common::AccountSubscribeType>(_impl_.subscribe_);
}
inline void AccountSubscribe::_internal_set_subscribe(::t4proto::v1::common::AccountSubscribeType value) {
  ;
  _impl_.subscribe_ = value;
}

// bool subscribe_all_accounts = 2;
inline void AccountSubscribe::clear_subscribe_all_accounts() {
  _impl_.subscribe_all_accounts_ = false;
}
inline bool AccountSubscribe::subscribe_all_accounts() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountSubscribe.subscribe_all_accounts)
  return _internal_subscribe_all_accounts();
}
inline void AccountSubscribe::set_subscribe_all_accounts(bool value) {
  _internal_set_subscribe_all_accounts(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountSubscribe.subscribe_all_accounts)
}
inline bool AccountSubscribe::_internal_subscribe_all_accounts() const {
  return _impl_.subscribe_all_accounts_;
}
inline void AccountSubscribe::_internal_set_subscribe_all_accounts(bool value) {
  ;
  _impl_.subscribe_all_accounts_ = value;
}

// repeated string account_id = 3;
inline int AccountSubscribe::_internal_account_id_size() const {
  return _impl_.account_id_.size();
}
inline int AccountSubscribe::account_id_size() const {
  return _internal_account_id_size();
}
inline void AccountSubscribe::clear_account_id() {
  _impl_.account_id_.Clear();
}
inline std::string* AccountSubscribe::add_account_id() {
  std::string* _s = _internal_add_account_id();
  // @@protoc_insertion_point(field_add_mutable:t4proto.v1.account.AccountSubscribe.account_id)
  return _s;
}
inline const std::string& AccountSubscribe::_internal_account_id(int index) const {
  return _impl_.account_id_.Get(index);
}
inline const std::string& AccountSubscribe::account_id(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountSubscribe.account_id)
  return _internal_account_id(index);
}
inline std::string* AccountSubscribe::mutable_account_id(int index) {
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountSubscribe.account_id)
  return _impl_.account_id_.Mutable(index);
}
inline void AccountSubscribe::set_account_id(int index, const std::string& value) {
  _impl_.account_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountSubscribe.account_id)
}
inline void AccountSubscribe::set_account_id(int index, std::string&& value) {
  _impl_.account_id_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountSubscribe.account_id)
}
inline void AccountSubscribe::set_account_id(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _impl_.account_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:t4proto.v1.account.AccountSubscribe.account_id)
}
inline void AccountSubscribe::set_account_id(int index, const char* value,
                              std::size_t size) {
  _impl_.account_id_.Mutable(index)->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:t4proto.v1.account.AccountSubscribe.account_id)
}
inline void AccountSubscribe::set_account_id(int index, absl::string_view value) {
  _impl_.account_id_.Mutable(index)->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:t4proto.v1.account.AccountSubscribe.account_id)
}
inline std::string* AccountSubscribe::_internal_add_account_id() { return _impl_.account_id_.Add(); }
inline void AccountSubscribe::add_account_id(const std::string& value) {
  _impl_.account_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:t4proto.v1.account.AccountSubscribe.account_id)
}
inline void AccountSubscribe::add_account_id(std::string&& value) {
  _impl_.account_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:t4proto.v1.account.AccountSubscribe.account_id)
}
inline void AccountSubscribe::add_account_id(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _impl_.account_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:t4proto.v1.account.AccountSubscribe.account_id)
}
inline void AccountSubscribe::add_account_id(const char* value, std::size_t size) {
  _impl_.account_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:t4proto.v1.account.AccountSubscribe.account_id)
}
inline void AccountSubscribe::add_account_id(absl::string_view value) {
  _impl_.account_id_.Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:t4proto.v1.account.AccountSubscribe.account_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AccountSubscribe::account_id() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.account.AccountSubscribe.account_id)
  return _impl_.account_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* AccountSubscribe::mutable_account_id() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.account.AccountSubscribe.account_id)
  return &_impl_.account_id_;
}

// optional .t4proto.v1.common.UPLMode upl_mode = 4;
inline bool AccountSubscribe::has_upl_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AccountSubscribe::clear_upl_mode() {
  _impl_.upl_mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::t4proto::v1::common::UPLMode AccountSubscribe::upl_mode() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountSubscribe.upl_mode)
  return _internal_upl_mode();
}
inline void AccountSubscribe::set_upl_mode(::t4proto::v1::common::UPLMode value) {
   _internal_set_upl_mode(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountSubscribe.upl_mode)
}
inline ::t4proto::v1::common::UPLMode AccountSubscribe::_internal_upl_mode() const {
  return static_cast<::t4proto::v1::common::UPLMode>(_impl_.upl_mode_);
}
inline void AccountSubscribe::_internal_set_upl_mode(::t4proto::v1::common::UPLMode value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.upl_mode_ = value;
}

// -------------------------------------------------------------------

// AccountSubscribeResponse

// bool success = 1;
inline void AccountSubscribeResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool AccountSubscribeResponse::success() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountSubscribeResponse.success)
  return _internal_success();
}
inline void AccountSubscribeResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountSubscribeResponse.success)
}
inline bool AccountSubscribeResponse::_internal_success() const {
  return _impl_.success_;
}
inline void AccountSubscribeResponse::_internal_set_success(bool value) {
  ;
  _impl_.success_ = value;
}

// repeated string errors = 2;
inline int AccountSubscribeResponse::_internal_errors_size() const {
  return _impl_.errors_.size();
}
inline int AccountSubscribeResponse::errors_size() const {
  return _internal_errors_size();
}
inline void AccountSubscribeResponse::clear_errors() {
  _impl_.errors_.Clear();
}
inline std::string* AccountSubscribeResponse::add_errors() {
  std::string* _s = _internal_add_errors();
  // @@protoc_insertion_point(field_add_mutable:t4proto.v1.account.AccountSubscribeResponse.errors)
  return _s;
}
inline const std::string& AccountSubscribeResponse::_internal_errors(int index) const {
  return _impl_.errors_.Get(index);
}
inline const std::string& AccountSubscribeResponse::errors(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountSubscribeResponse.errors)
  return _internal_errors(index);
}
inline std::string* AccountSubscribeResponse::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountSubscribeResponse.errors)
  return _impl_.errors_.Mutable(index);
}
inline void AccountSubscribeResponse::set_errors(int index, const std::string& value) {
  _impl_.errors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountSubscribeResponse.errors)
}
inline void AccountSubscribeResponse::set_errors(int index, std::string&& value) {
  _impl_.errors_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountSubscribeResponse.errors)
}
inline void AccountSubscribeResponse::set_errors(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _impl_.errors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:t4proto.v1.account.AccountSubscribeResponse.errors)
}
inline void AccountSubscribeResponse::set_errors(int index, const char* value,
                              std::size_t size) {
  _impl_.errors_.Mutable(index)->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:t4proto.v1.account.AccountSubscribeResponse.errors)
}
inline void AccountSubscribeResponse::set_errors(int index, absl::string_view value) {
  _impl_.errors_.Mutable(index)->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:t4proto.v1.account.AccountSubscribeResponse.errors)
}
inline std::string* AccountSubscribeResponse::_internal_add_errors() { return _impl_.errors_.Add(); }
inline void AccountSubscribeResponse::add_errors(const std::string& value) {
  _impl_.errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:t4proto.v1.account.AccountSubscribeResponse.errors)
}
inline void AccountSubscribeResponse::add_errors(std::string&& value) {
  _impl_.errors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:t4proto.v1.account.AccountSubscribeResponse.errors)
}
inline void AccountSubscribeResponse::add_errors(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _impl_.errors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:t4proto.v1.account.AccountSubscribeResponse.errors)
}
inline void AccountSubscribeResponse::add_errors(const char* value, std::size_t size) {
  _impl_.errors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:t4proto.v1.account.AccountSubscribeResponse.errors)
}
inline void AccountSubscribeResponse::add_errors(absl::string_view value) {
  _impl_.errors_.Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:t4proto.v1.account.AccountSubscribeResponse.errors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AccountSubscribeResponse::errors() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.account.AccountSubscribeResponse.errors)
  return _impl_.errors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* AccountSubscribeResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.account.AccountSubscribeResponse.errors)
  return &_impl_.errors_;
}

// -------------------------------------------------------------------

// AccountCurrency

// string currency = 1;
inline void AccountCurrency::clear_currency() {
  _impl_.currency_.ClearToEmpty();
}
inline const std::string& AccountCurrency::currency() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountCurrency.currency)
  return _internal_currency();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountCurrency::set_currency(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.currency_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountCurrency.currency)
}
inline std::string* AccountCurrency::mutable_currency() {
  std::string* _s = _internal_mutable_currency();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountCurrency.currency)
  return _s;
}
inline const std::string& AccountCurrency::_internal_currency() const {
  return _impl_.currency_.Get();
}
inline void AccountCurrency::_internal_set_currency(const std::string& value) {
  ;


  _impl_.currency_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountCurrency::_internal_mutable_currency() {
  ;
  return _impl_.currency_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountCurrency::release_currency() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountCurrency.currency)
  return _impl_.currency_.Release();
}
inline void AccountCurrency::set_allocated_currency(std::string* value) {
  _impl_.currency_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.currency_.IsDefault()) {
          _impl_.currency_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountCurrency.currency)
}

// double rate = 2;
inline void AccountCurrency::clear_rate() {
  _impl_.rate_ = 0;
}
inline double AccountCurrency::rate() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountCurrency.rate)
  return _internal_rate();
}
inline void AccountCurrency::set_rate(double value) {
  _internal_set_rate(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountCurrency.rate)
}
inline double AccountCurrency::_internal_rate() const {
  return _impl_.rate_;
}
inline void AccountCurrency::_internal_set_rate(double value) {
  ;
  _impl_.rate_ = value;
}

// double import_factor = 3;
inline void AccountCurrency::clear_import_factor() {
  _impl_.import_factor_ = 0;
}
inline double AccountCurrency::import_factor() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountCurrency.import_factor)
  return _internal_import_factor();
}
inline void AccountCurrency::set_import_factor(double value) {
  _internal_set_import_factor(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountCurrency.import_factor)
}
inline double AccountCurrency::_internal_import_factor() const {
  return _impl_.import_factor_;
}
inline void AccountCurrency::_internal_set_import_factor(double value) {
  ;
  _impl_.import_factor_ = value;
}

// -------------------------------------------------------------------

// AccountPosition

// string account_id = 1;
inline void AccountPosition::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& AccountPosition::account_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountPosition::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.account_id)
}
inline std::string* AccountPosition::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountPosition.account_id)
  return _s;
}
inline const std::string& AccountPosition::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void AccountPosition::_internal_set_account_id(const std::string& value) {
  ;


  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountPosition::_internal_mutable_account_id() {
  ;
  return _impl_.account_id_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountPosition::release_account_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountPosition.account_id)
  return _impl_.account_id_.Release();
}
inline void AccountPosition::set_allocated_account_id(std::string* value) {
  _impl_.account_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountPosition.account_id)
}

// string exchange_id = 2;
inline void AccountPosition::clear_exchange_id() {
  _impl_.exchange_id_.ClearToEmpty();
}
inline const std::string& AccountPosition::exchange_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.exchange_id)
  return _internal_exchange_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountPosition::set_exchange_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.exchange_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.exchange_id)
}
inline std::string* AccountPosition::mutable_exchange_id() {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountPosition.exchange_id)
  return _s;
}
inline const std::string& AccountPosition::_internal_exchange_id() const {
  return _impl_.exchange_id_.Get();
}
inline void AccountPosition::_internal_set_exchange_id(const std::string& value) {
  ;


  _impl_.exchange_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountPosition::_internal_mutable_exchange_id() {
  ;
  return _impl_.exchange_id_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountPosition::release_exchange_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountPosition.exchange_id)
  return _impl_.exchange_id_.Release();
}
inline void AccountPosition::set_allocated_exchange_id(std::string* value) {
  _impl_.exchange_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_id_.IsDefault()) {
          _impl_.exchange_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountPosition.exchange_id)
}

// string contract_id = 3;
inline void AccountPosition::clear_contract_id() {
  _impl_.contract_id_.ClearToEmpty();
}
inline const std::string& AccountPosition::contract_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.contract_id)
  return _internal_contract_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountPosition::set_contract_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.contract_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.contract_id)
}
inline std::string* AccountPosition::mutable_contract_id() {
  std::string* _s = _internal_mutable_contract_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountPosition.contract_id)
  return _s;
}
inline const std::string& AccountPosition::_internal_contract_id() const {
  return _impl_.contract_id_.Get();
}
inline void AccountPosition::_internal_set_contract_id(const std::string& value) {
  ;


  _impl_.contract_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountPosition::_internal_mutable_contract_id() {
  ;
  return _impl_.contract_id_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountPosition::release_contract_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountPosition.contract_id)
  return _impl_.contract_id_.Release();
}
inline void AccountPosition::set_allocated_contract_id(std::string* value) {
  _impl_.contract_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contract_id_.IsDefault()) {
          _impl_.contract_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountPosition.contract_id)
}

// string market_id = 4;
inline void AccountPosition::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& AccountPosition::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountPosition::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.market_id)
}
inline std::string* AccountPosition::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountPosition.market_id)
  return _s;
}
inline const std::string& AccountPosition::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void AccountPosition::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountPosition::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountPosition::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountPosition.market_id)
  return _impl_.market_id_.Release();
}
inline void AccountPosition::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountPosition.market_id)
}

// int32 buys = 5;
inline void AccountPosition::clear_buys() {
  _impl_.buys_ = 0;
}
inline ::int32_t AccountPosition::buys() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.buys)
  return _internal_buys();
}
inline void AccountPosition::set_buys(::int32_t value) {
  _internal_set_buys(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.buys)
}
inline ::int32_t AccountPosition::_internal_buys() const {
  return _impl_.buys_;
}
inline void AccountPosition::_internal_set_buys(::int32_t value) {
  ;
  _impl_.buys_ = value;
}

// int32 sells = 6;
inline void AccountPosition::clear_sells() {
  _impl_.sells_ = 0;
}
inline ::int32_t AccountPosition::sells() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.sells)
  return _internal_sells();
}
inline void AccountPosition::set_sells(::int32_t value) {
  _internal_set_sells(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.sells)
}
inline ::int32_t AccountPosition::_internal_sells() const {
  return _impl_.sells_;
}
inline void AccountPosition::_internal_set_sells(::int32_t value) {
  ;
  _impl_.sells_ = value;
}

// int32 working_buys = 7;
inline void AccountPosition::clear_working_buys() {
  _impl_.working_buys_ = 0;
}
inline ::int32_t AccountPosition::working_buys() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.working_buys)
  return _internal_working_buys();
}
inline void AccountPosition::set_working_buys(::int32_t value) {
  _internal_set_working_buys(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.working_buys)
}
inline ::int32_t AccountPosition::_internal_working_buys() const {
  return _impl_.working_buys_;
}
inline void AccountPosition::_internal_set_working_buys(::int32_t value) {
  ;
  _impl_.working_buys_ = value;
}

// int32 working_sells = 8;
inline void AccountPosition::clear_working_sells() {
  _impl_.working_sells_ = 0;
}
inline ::int32_t AccountPosition::working_sells() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.working_sells)
  return _internal_working_sells();
}
inline void AccountPosition::set_working_sells(::int32_t value) {
  _internal_set_working_sells(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.working_sells)
}
inline ::int32_t AccountPosition::_internal_working_sells() const {
  return _impl_.working_sells_;
}
inline void AccountPosition::_internal_set_working_sells(::int32_t value) {
  ;
  _impl_.working_sells_ = value;
}

// double rpl = 9;
inline void AccountPosition::clear_rpl() {
  _impl_.rpl_ = 0;
}
inline double AccountPosition::rpl() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.rpl)
  return _internal_rpl();
}
inline void AccountPosition::set_rpl(double value) {
  _internal_set_rpl(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.rpl)
}
inline double AccountPosition::_internal_rpl() const {
  return _impl_.rpl_;
}
inline void AccountPosition::_internal_set_rpl(double value) {
  ;
  _impl_.rpl_ = value;
}

// double overnight_upl = 10;
inline void AccountPosition::clear_overnight_upl() {
  _impl_.overnight_upl_ = 0;
}
inline double AccountPosition::overnight_upl() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.overnight_upl)
  return _internal_overnight_upl();
}
inline void AccountPosition::set_overnight_upl(double value) {
  _internal_set_overnight_upl(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.overnight_upl)
}
inline double AccountPosition::_internal_overnight_upl() const {
  return _impl_.overnight_upl_;
}
inline void AccountPosition::_internal_set_overnight_upl(double value) {
  ;
  _impl_.overnight_upl_ = value;
}

// double margin = 11;
inline void AccountPosition::clear_margin() {
  _impl_.margin_ = 0;
}
inline double AccountPosition::margin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.margin)
  return _internal_margin();
}
inline void AccountPosition::set_margin(double value) {
  _internal_set_margin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.margin)
}
inline double AccountPosition::_internal_margin() const {
  return _impl_.margin_;
}
inline void AccountPosition::_internal_set_margin(double value) {
  ;
  _impl_.margin_ = value;
}

// double mp = 12;
inline void AccountPosition::clear_mp() {
  _impl_.mp_ = 0;
}
inline double AccountPosition::mp() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.mp)
  return _internal_mp();
}
inline void AccountPosition::set_mp(double value) {
  _internal_set_mp(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.mp)
}
inline double AccountPosition::_internal_mp() const {
  return _impl_.mp_;
}
inline void AccountPosition::_internal_set_mp(double value) {
  ;
  _impl_.mp_ = value;
}

// int32 overnight_position = 13;
inline void AccountPosition::clear_overnight_position() {
  _impl_.overnight_position_ = 0;
}
inline ::int32_t AccountPosition::overnight_position() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.overnight_position)
  return _internal_overnight_position();
}
inline void AccountPosition::set_overnight_position(::int32_t value) {
  _internal_set_overnight_position(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.overnight_position)
}
inline ::int32_t AccountPosition::_internal_overnight_position() const {
  return _impl_.overnight_position_;
}
inline void AccountPosition::_internal_set_overnight_position(::int32_t value) {
  ;
  _impl_.overnight_position_ = value;
}

// double currency_rate = 14;
inline void AccountPosition::clear_currency_rate() {
  _impl_.currency_rate_ = 0;
}
inline double AccountPosition::currency_rate() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.currency_rate)
  return _internal_currency_rate();
}
inline void AccountPosition::set_currency_rate(double value) {
  _internal_set_currency_rate(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.currency_rate)
}
inline double AccountPosition::_internal_currency_rate() const {
  return _impl_.currency_rate_;
}
inline void AccountPosition::_internal_set_currency_rate(double value) {
  ;
  _impl_.currency_rate_ = value;
}

// .google.protobuf.Timestamp trade_date = 15;
inline bool AccountPosition::_internal_has_trade_date() const {
  return this != internal_default_instance() && _impl_.trade_date_ != nullptr;
}
inline bool AccountPosition::has_trade_date() const {
  return _internal_has_trade_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AccountPosition::_internal_trade_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.trade_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AccountPosition::trade_date() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.trade_date)
  return _internal_trade_date();
}
inline void AccountPosition::unsafe_arena_set_allocated_trade_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* trade_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trade_date_);
  }
  _impl_.trade_date_ = trade_date;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountPosition.trade_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountPosition::release_trade_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.trade_date_;
  _impl_.trade_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountPosition::unsafe_arena_release_trade_date() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountPosition.trade_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.trade_date_;
  _impl_.trade_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountPosition::_internal_mutable_trade_date() {
  
  if (_impl_.trade_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.trade_date_ = p;
  }
  return _impl_.trade_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountPosition::mutable_trade_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_trade_date();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountPosition.trade_date)
  return _msg;
}
inline void AccountPosition::set_allocated_trade_date(::PROTOBUF_NAMESPACE_ID::Timestamp* trade_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trade_date_);
  }
  if (trade_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trade_date));
    if (message_arena != submessage_arena) {
      trade_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trade_date, submessage_arena);
    }

  } else {

  }
  _impl_.trade_date_ = trade_date;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountPosition.trade_date)
}

// double premium = 16;
inline void AccountPosition::clear_premium() {
  _impl_.premium_ = 0;
}
inline double AccountPosition::premium() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.premium)
  return _internal_premium();
}
inline void AccountPosition::set_premium(double value) {
  _internal_set_premium(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.premium)
}
inline double AccountPosition::_internal_premium() const {
  return _impl_.premium_;
}
inline void AccountPosition::_internal_set_premium(double value) {
  ;
  _impl_.premium_ = value;
}

// int32 total_open_volume = 17;
inline void AccountPosition::clear_total_open_volume() {
  _impl_.total_open_volume_ = 0;
}
inline ::int32_t AccountPosition::total_open_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.total_open_volume)
  return _internal_total_open_volume();
}
inline void AccountPosition::set_total_open_volume(::int32_t value) {
  _internal_set_total_open_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.total_open_volume)
}
inline ::int32_t AccountPosition::_internal_total_open_volume() const {
  return _impl_.total_open_volume_;
}
inline void AccountPosition::_internal_set_total_open_volume(::int32_t value) {
  ;
  _impl_.total_open_volume_ = value;
}

// double fees_and_commissions = 18;
inline void AccountPosition::clear_fees_and_commissions() {
  _impl_.fees_and_commissions_ = 0;
}
inline double AccountPosition::fees_and_commissions() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.fees_and_commissions)
  return _internal_fees_and_commissions();
}
inline void AccountPosition::set_fees_and_commissions(double value) {
  _internal_set_fees_and_commissions(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.fees_and_commissions)
}
inline double AccountPosition::_internal_fees_and_commissions() const {
  return _impl_.fees_and_commissions_;
}
inline void AccountPosition::_internal_set_fees_and_commissions(double value) {
  ;
  _impl_.fees_and_commissions_ = value;
}

// double long_mp = 19;
inline void AccountPosition::clear_long_mp() {
  _impl_.long_mp_ = 0;
}
inline double AccountPosition::long_mp() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.long_mp)
  return _internal_long_mp();
}
inline void AccountPosition::set_long_mp(double value) {
  _internal_set_long_mp(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.long_mp)
}
inline double AccountPosition::_internal_long_mp() const {
  return _impl_.long_mp_;
}
inline void AccountPosition::_internal_set_long_mp(double value) {
  ;
  _impl_.long_mp_ = value;
}

// double short_mp = 20;
inline void AccountPosition::clear_short_mp() {
  _impl_.short_mp_ = 0;
}
inline double AccountPosition::short_mp() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.short_mp)
  return _internal_short_mp();
}
inline void AccountPosition::set_short_mp(double value) {
  _internal_set_short_mp(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.short_mp)
}
inline double AccountPosition::_internal_short_mp() const {
  return _impl_.short_mp_;
}
inline void AccountPosition::_internal_set_short_mp(double value) {
  ;
  _impl_.short_mp_ = value;
}

// int32 prev_position = 21;
inline void AccountPosition::clear_prev_position() {
  _impl_.prev_position_ = 0;
}
inline ::int32_t AccountPosition::prev_position() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.prev_position)
  return _internal_prev_position();
}
inline void AccountPosition::set_prev_position(::int32_t value) {
  _internal_set_prev_position(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.prev_position)
}
inline ::int32_t AccountPosition::_internal_prev_position() const {
  return _impl_.prev_position_;
}
inline void AccountPosition::_internal_set_prev_position(::int32_t value) {
  ;
  _impl_.prev_position_ = value;
}

// double prev_margin = 22;
inline void AccountPosition::clear_prev_margin() {
  _impl_.prev_margin_ = 0;
}
inline double AccountPosition::prev_margin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.prev_margin)
  return _internal_prev_margin();
}
inline void AccountPosition::set_prev_margin(double value) {
  _internal_set_prev_margin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.prev_margin)
}
inline double AccountPosition::_internal_prev_margin() const {
  return _impl_.prev_margin_;
}
inline void AccountPosition::_internal_set_prev_margin(double value) {
  ;
  _impl_.prev_margin_ = value;
}

// double prev_rpl = 23;
inline void AccountPosition::clear_prev_rpl() {
  _impl_.prev_rpl_ = 0;
}
inline double AccountPosition::prev_rpl() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.prev_rpl)
  return _internal_prev_rpl();
}
inline void AccountPosition::set_prev_rpl(double value) {
  _internal_set_prev_rpl(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.prev_rpl)
}
inline double AccountPosition::_internal_prev_rpl() const {
  return _impl_.prev_rpl_;
}
inline void AccountPosition::_internal_set_prev_rpl(double value) {
  ;
  _impl_.prev_rpl_ = value;
}

// double prev_upl = 24;
inline void AccountPosition::clear_prev_upl() {
  _impl_.prev_upl_ = 0;
}
inline double AccountPosition::prev_upl() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.prev_upl)
  return _internal_prev_upl();
}
inline void AccountPosition::set_prev_upl(double value) {
  _internal_set_prev_upl(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.prev_upl)
}
inline double AccountPosition::_internal_prev_upl() const {
  return _impl_.prev_upl_;
}
inline void AccountPosition::_internal_set_prev_upl(double value) {
  ;
  _impl_.prev_upl_ = value;
}

// int32 day_buys = 25;
inline void AccountPosition::clear_day_buys() {
  _impl_.day_buys_ = 0;
}
inline ::int32_t AccountPosition::day_buys() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.day_buys)
  return _internal_day_buys();
}
inline void AccountPosition::set_day_buys(::int32_t value) {
  _internal_set_day_buys(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.day_buys)
}
inline ::int32_t AccountPosition::_internal_day_buys() const {
  return _impl_.day_buys_;
}
inline void AccountPosition::_internal_set_day_buys(::int32_t value) {
  ;
  _impl_.day_buys_ = value;
}

// int32 day_sells = 26;
inline void AccountPosition::clear_day_sells() {
  _impl_.day_sells_ = 0;
}
inline ::int32_t AccountPosition::day_sells() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.day_sells)
  return _internal_day_sells();
}
inline void AccountPosition::set_day_sells(::int32_t value) {
  _internal_set_day_sells(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.day_sells)
}
inline ::int32_t AccountPosition::_internal_day_sells() const {
  return _impl_.day_sells_;
}
inline void AccountPosition::_internal_set_day_sells(::int32_t value) {
  ;
  _impl_.day_sells_ = value;
}

// optional .t4proto.v1.common.Price average_open_price = 27;
inline bool AccountPosition::has_average_open_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.average_open_price_ != nullptr);
  return value;
}
inline const ::t4proto::v1::common::Price& AccountPosition::_internal_average_open_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.average_open_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& AccountPosition::average_open_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.average_open_price)
  return _internal_average_open_price();
}
inline void AccountPosition::unsafe_arena_set_allocated_average_open_price(
    ::t4proto::v1::common::Price* average_open_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.average_open_price_);
  }
  _impl_.average_open_price_ = average_open_price;
  if (average_open_price) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountPosition.average_open_price)
}
inline ::t4proto::v1::common::Price* AccountPosition::release_average_open_price() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::t4proto::v1::common::Price* temp = _impl_.average_open_price_;
  _impl_.average_open_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* AccountPosition::unsafe_arena_release_average_open_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountPosition.average_open_price)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::t4proto::v1::common::Price* temp = _impl_.average_open_price_;
  _impl_.average_open_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* AccountPosition::_internal_mutable_average_open_price() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.average_open_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.average_open_price_ = p;
  }
  return _impl_.average_open_price_;
}
inline ::t4proto::v1::common::Price* AccountPosition::mutable_average_open_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_average_open_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountPosition.average_open_price)
  return _msg;
}
inline void AccountPosition::set_allocated_average_open_price(::t4proto::v1::common::Price* average_open_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.average_open_price_);
  }
  if (average_open_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(average_open_price));
    if (message_arena != submessage_arena) {
      average_open_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, average_open_price, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.average_open_price_ = average_open_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountPosition.average_open_price)
}

// optional .t4proto.v1.common.Price total_open_price = 28;
inline bool AccountPosition::has_total_open_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.total_open_price_ != nullptr);
  return value;
}
inline const ::t4proto::v1::common::Price& AccountPosition::_internal_total_open_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.total_open_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& AccountPosition::total_open_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.total_open_price)
  return _internal_total_open_price();
}
inline void AccountPosition::unsafe_arena_set_allocated_total_open_price(
    ::t4proto::v1::common::Price* total_open_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_open_price_);
  }
  _impl_.total_open_price_ = total_open_price;
  if (total_open_price) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountPosition.total_open_price)
}
inline ::t4proto::v1::common::Price* AccountPosition::release_total_open_price() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::t4proto::v1::common::Price* temp = _impl_.total_open_price_;
  _impl_.total_open_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* AccountPosition::unsafe_arena_release_total_open_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountPosition.total_open_price)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::t4proto::v1::common::Price* temp = _impl_.total_open_price_;
  _impl_.total_open_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* AccountPosition::_internal_mutable_total_open_price() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.total_open_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.total_open_price_ = p;
  }
  return _impl_.total_open_price_;
}
inline ::t4proto::v1::common::Price* AccountPosition::mutable_total_open_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_total_open_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountPosition.total_open_price)
  return _msg;
}
inline void AccountPosition::set_allocated_total_open_price(::t4proto::v1::common::Price* total_open_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_open_price_);
  }
  if (total_open_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_open_price));
    if (message_arena != submessage_arena) {
      total_open_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_open_price, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.total_open_price_ = total_open_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountPosition.total_open_price)
}

// optional .t4proto.v1.common.Price total_buy_fill_price = 29;
inline bool AccountPosition::has_total_buy_fill_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.total_buy_fill_price_ != nullptr);
  return value;
}
inline const ::t4proto::v1::common::Price& AccountPosition::_internal_total_buy_fill_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.total_buy_fill_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& AccountPosition::total_buy_fill_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.total_buy_fill_price)
  return _internal_total_buy_fill_price();
}
inline void AccountPosition::unsafe_arena_set_allocated_total_buy_fill_price(
    ::t4proto::v1::common::Price* total_buy_fill_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_buy_fill_price_);
  }
  _impl_.total_buy_fill_price_ = total_buy_fill_price;
  if (total_buy_fill_price) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountPosition.total_buy_fill_price)
}
inline ::t4proto::v1::common::Price* AccountPosition::release_total_buy_fill_price() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::t4proto::v1::common::Price* temp = _impl_.total_buy_fill_price_;
  _impl_.total_buy_fill_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* AccountPosition::unsafe_arena_release_total_buy_fill_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountPosition.total_buy_fill_price)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::t4proto::v1::common::Price* temp = _impl_.total_buy_fill_price_;
  _impl_.total_buy_fill_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* AccountPosition::_internal_mutable_total_buy_fill_price() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.total_buy_fill_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.total_buy_fill_price_ = p;
  }
  return _impl_.total_buy_fill_price_;
}
inline ::t4proto::v1::common::Price* AccountPosition::mutable_total_buy_fill_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_total_buy_fill_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountPosition.total_buy_fill_price)
  return _msg;
}
inline void AccountPosition::set_allocated_total_buy_fill_price(::t4proto::v1::common::Price* total_buy_fill_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_buy_fill_price_);
  }
  if (total_buy_fill_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_buy_fill_price));
    if (message_arena != submessage_arena) {
      total_buy_fill_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_buy_fill_price, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.total_buy_fill_price_ = total_buy_fill_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountPosition.total_buy_fill_price)
}

// optional .t4proto.v1.common.Price total_sell_fill_price = 30;
inline bool AccountPosition::has_total_sell_fill_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.total_sell_fill_price_ != nullptr);
  return value;
}
inline const ::t4proto::v1::common::Price& AccountPosition::_internal_total_sell_fill_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.total_sell_fill_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& AccountPosition::total_sell_fill_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.total_sell_fill_price)
  return _internal_total_sell_fill_price();
}
inline void AccountPosition::unsafe_arena_set_allocated_total_sell_fill_price(
    ::t4proto::v1::common::Price* total_sell_fill_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_sell_fill_price_);
  }
  _impl_.total_sell_fill_price_ = total_sell_fill_price;
  if (total_sell_fill_price) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountPosition.total_sell_fill_price)
}
inline ::t4proto::v1::common::Price* AccountPosition::release_total_sell_fill_price() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::t4proto::v1::common::Price* temp = _impl_.total_sell_fill_price_;
  _impl_.total_sell_fill_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* AccountPosition::unsafe_arena_release_total_sell_fill_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountPosition.total_sell_fill_price)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::t4proto::v1::common::Price* temp = _impl_.total_sell_fill_price_;
  _impl_.total_sell_fill_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* AccountPosition::_internal_mutable_total_sell_fill_price() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.total_sell_fill_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.total_sell_fill_price_ = p;
  }
  return _impl_.total_sell_fill_price_;
}
inline ::t4proto::v1::common::Price* AccountPosition::mutable_total_sell_fill_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_total_sell_fill_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountPosition.total_sell_fill_price)
  return _msg;
}
inline void AccountPosition::set_allocated_total_sell_fill_price(::t4proto::v1::common::Price* total_sell_fill_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_sell_fill_price_);
  }
  if (total_sell_fill_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_sell_fill_price));
    if (message_arena != submessage_arena) {
      total_sell_fill_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_sell_fill_price, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.total_sell_fill_price_ = total_sell_fill_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountPosition.total_sell_fill_price)
}

// optional .t4proto.v1.common.Price day_total_buy_fill_price = 31;
inline bool AccountPosition::has_day_total_buy_fill_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.day_total_buy_fill_price_ != nullptr);
  return value;
}
inline const ::t4proto::v1::common::Price& AccountPosition::_internal_day_total_buy_fill_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.day_total_buy_fill_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& AccountPosition::day_total_buy_fill_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.day_total_buy_fill_price)
  return _internal_day_total_buy_fill_price();
}
inline void AccountPosition::unsafe_arena_set_allocated_day_total_buy_fill_price(
    ::t4proto::v1::common::Price* day_total_buy_fill_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.day_total_buy_fill_price_);
  }
  _impl_.day_total_buy_fill_price_ = day_total_buy_fill_price;
  if (day_total_buy_fill_price) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountPosition.day_total_buy_fill_price)
}
inline ::t4proto::v1::common::Price* AccountPosition::release_day_total_buy_fill_price() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::t4proto::v1::common::Price* temp = _impl_.day_total_buy_fill_price_;
  _impl_.day_total_buy_fill_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* AccountPosition::unsafe_arena_release_day_total_buy_fill_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountPosition.day_total_buy_fill_price)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::t4proto::v1::common::Price* temp = _impl_.day_total_buy_fill_price_;
  _impl_.day_total_buy_fill_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* AccountPosition::_internal_mutable_day_total_buy_fill_price() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.day_total_buy_fill_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.day_total_buy_fill_price_ = p;
  }
  return _impl_.day_total_buy_fill_price_;
}
inline ::t4proto::v1::common::Price* AccountPosition::mutable_day_total_buy_fill_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_day_total_buy_fill_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountPosition.day_total_buy_fill_price)
  return _msg;
}
inline void AccountPosition::set_allocated_day_total_buy_fill_price(::t4proto::v1::common::Price* day_total_buy_fill_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.day_total_buy_fill_price_);
  }
  if (day_total_buy_fill_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(day_total_buy_fill_price));
    if (message_arena != submessage_arena) {
      day_total_buy_fill_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, day_total_buy_fill_price, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.day_total_buy_fill_price_ = day_total_buy_fill_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountPosition.day_total_buy_fill_price)
}

// optional .t4proto.v1.common.Price day_total_sell_fill_price = 32;
inline bool AccountPosition::has_day_total_sell_fill_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.day_total_sell_fill_price_ != nullptr);
  return value;
}
inline const ::t4proto::v1::common::Price& AccountPosition::_internal_day_total_sell_fill_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.day_total_sell_fill_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& AccountPosition::day_total_sell_fill_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.day_total_sell_fill_price)
  return _internal_day_total_sell_fill_price();
}
inline void AccountPosition::unsafe_arena_set_allocated_day_total_sell_fill_price(
    ::t4proto::v1::common::Price* day_total_sell_fill_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.day_total_sell_fill_price_);
  }
  _impl_.day_total_sell_fill_price_ = day_total_sell_fill_price;
  if (day_total_sell_fill_price) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountPosition.day_total_sell_fill_price)
}
inline ::t4proto::v1::common::Price* AccountPosition::release_day_total_sell_fill_price() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::t4proto::v1::common::Price* temp = _impl_.day_total_sell_fill_price_;
  _impl_.day_total_sell_fill_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* AccountPosition::unsafe_arena_release_day_total_sell_fill_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountPosition.day_total_sell_fill_price)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::t4proto::v1::common::Price* temp = _impl_.day_total_sell_fill_price_;
  _impl_.day_total_sell_fill_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* AccountPosition::_internal_mutable_day_total_sell_fill_price() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.day_total_sell_fill_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.day_total_sell_fill_price_ = p;
  }
  return _impl_.day_total_sell_fill_price_;
}
inline ::t4proto::v1::common::Price* AccountPosition::mutable_day_total_sell_fill_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_day_total_sell_fill_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountPosition.day_total_sell_fill_price)
  return _msg;
}
inline void AccountPosition::set_allocated_day_total_sell_fill_price(::t4proto::v1::common::Price* day_total_sell_fill_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.day_total_sell_fill_price_);
  }
  if (day_total_sell_fill_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(day_total_sell_fill_price));
    if (message_arena != submessage_arena) {
      day_total_sell_fill_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, day_total_sell_fill_price, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.day_total_sell_fill_price_ = day_total_sell_fill_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountPosition.day_total_sell_fill_price)
}

// optional .t4proto.v1.common.Price total_overnight_price = 33;
inline bool AccountPosition::has_total_overnight_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.total_overnight_price_ != nullptr);
  return value;
}
inline const ::t4proto::v1::common::Price& AccountPosition::_internal_total_overnight_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.total_overnight_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& AccountPosition::total_overnight_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.total_overnight_price)
  return _internal_total_overnight_price();
}
inline void AccountPosition::unsafe_arena_set_allocated_total_overnight_price(
    ::t4proto::v1::common::Price* total_overnight_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_overnight_price_);
  }
  _impl_.total_overnight_price_ = total_overnight_price;
  if (total_overnight_price) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountPosition.total_overnight_price)
}
inline ::t4proto::v1::common::Price* AccountPosition::release_total_overnight_price() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::t4proto::v1::common::Price* temp = _impl_.total_overnight_price_;
  _impl_.total_overnight_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* AccountPosition::unsafe_arena_release_total_overnight_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountPosition.total_overnight_price)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::t4proto::v1::common::Price* temp = _impl_.total_overnight_price_;
  _impl_.total_overnight_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* AccountPosition::_internal_mutable_total_overnight_price() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.total_overnight_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.total_overnight_price_ = p;
  }
  return _impl_.total_overnight_price_;
}
inline ::t4proto::v1::common::Price* AccountPosition::mutable_total_overnight_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_total_overnight_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountPosition.total_overnight_price)
  return _msg;
}
inline void AccountPosition::set_allocated_total_overnight_price(::t4proto::v1::common::Price* total_overnight_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.total_overnight_price_);
  }
  if (total_overnight_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(total_overnight_price));
    if (message_arena != submessage_arena) {
      total_overnight_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, total_overnight_price, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.total_overnight_price_ = total_overnight_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountPosition.total_overnight_price)
}

// .t4proto.v1.common.ContractRiskStatus risk_status = 34;
inline void AccountPosition::clear_risk_status() {
  _impl_.risk_status_ = 0;
}
inline ::t4proto::v1::common::ContractRiskStatus AccountPosition::risk_status() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.risk_status)
  return _internal_risk_status();
}
inline void AccountPosition::set_risk_status(::t4proto::v1::common::ContractRiskStatus value) {
   _internal_set_risk_status(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.risk_status)
}
inline ::t4proto::v1::common::ContractRiskStatus AccountPosition::_internal_risk_status() const {
  return static_cast<::t4proto::v1::common::ContractRiskStatus>(_impl_.risk_status_);
}
inline void AccountPosition::_internal_set_risk_status(::t4proto::v1::common::ContractRiskStatus value) {
  ;
  _impl_.risk_status_ = value;
}

// .google.protobuf.Timestamp margin_time = 35;
inline bool AccountPosition::_internal_has_margin_time() const {
  return this != internal_default_instance() && _impl_.margin_time_ != nullptr;
}
inline bool AccountPosition::has_margin_time() const {
  return _internal_has_margin_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AccountPosition::_internal_margin_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.margin_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AccountPosition::margin_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.margin_time)
  return _internal_margin_time();
}
inline void AccountPosition::unsafe_arena_set_allocated_margin_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* margin_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.margin_time_);
  }
  _impl_.margin_time_ = margin_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountPosition.margin_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountPosition::release_margin_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.margin_time_;
  _impl_.margin_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountPosition::unsafe_arena_release_margin_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountPosition.margin_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.margin_time_;
  _impl_.margin_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountPosition::_internal_mutable_margin_time() {
  
  if (_impl_.margin_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.margin_time_ = p;
  }
  return _impl_.margin_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountPosition::mutable_margin_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_margin_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountPosition.margin_time)
  return _msg;
}
inline void AccountPosition::set_allocated_margin_time(::PROTOBUF_NAMESPACE_ID::Timestamp* margin_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.margin_time_);
  }
  if (margin_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(margin_time));
    if (message_arena != submessage_arena) {
      margin_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, margin_time, submessage_arena);
    }

  } else {

  }
  _impl_.margin_time_ = margin_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountPosition.margin_time)
}

// double alerting_margin = 36;
inline void AccountPosition::clear_alerting_margin() {
  _impl_.alerting_margin_ = 0;
}
inline double AccountPosition::alerting_margin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.alerting_margin)
  return _internal_alerting_margin();
}
inline void AccountPosition::set_alerting_margin(double value) {
  _internal_set_alerting_margin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.alerting_margin)
}
inline double AccountPosition::_internal_alerting_margin() const {
  return _impl_.alerting_margin_;
}
inline void AccountPosition::_internal_set_alerting_margin(double value) {
  ;
  _impl_.alerting_margin_ = value;
}

// .google.protobuf.Timestamp alerting_time = 37;
inline bool AccountPosition::_internal_has_alerting_time() const {
  return this != internal_default_instance() && _impl_.alerting_time_ != nullptr;
}
inline bool AccountPosition::has_alerting_time() const {
  return _internal_has_alerting_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AccountPosition::_internal_alerting_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.alerting_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AccountPosition::alerting_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.alerting_time)
  return _internal_alerting_time();
}
inline void AccountPosition::unsafe_arena_set_allocated_alerting_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* alerting_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alerting_time_);
  }
  _impl_.alerting_time_ = alerting_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountPosition.alerting_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountPosition::release_alerting_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.alerting_time_;
  _impl_.alerting_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountPosition::unsafe_arena_release_alerting_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountPosition.alerting_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.alerting_time_;
  _impl_.alerting_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountPosition::_internal_mutable_alerting_time() {
  
  if (_impl_.alerting_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.alerting_time_ = p;
  }
  return _impl_.alerting_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountPosition::mutable_alerting_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_alerting_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountPosition.alerting_time)
  return _msg;
}
inline void AccountPosition::set_allocated_alerting_time(::PROTOBUF_NAMESPACE_ID::Timestamp* alerting_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alerting_time_);
  }
  if (alerting_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alerting_time));
    if (message_arena != submessage_arena) {
      alerting_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alerting_time, submessage_arena);
    }

  } else {

  }
  _impl_.alerting_time_ = alerting_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountPosition.alerting_time)
}

// double day_margin = 38;
inline void AccountPosition::clear_day_margin() {
  _impl_.day_margin_ = 0;
}
inline double AccountPosition::day_margin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.day_margin)
  return _internal_day_margin();
}
inline void AccountPosition::set_day_margin(double value) {
  _internal_set_day_margin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.day_margin)
}
inline double AccountPosition::_internal_day_margin() const {
  return _impl_.day_margin_;
}
inline void AccountPosition::_internal_set_day_margin(double value) {
  ;
  _impl_.day_margin_ = value;
}

// double full_margin = 39;
inline void AccountPosition::clear_full_margin() {
  _impl_.full_margin_ = 0;
}
inline double AccountPosition::full_margin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.full_margin)
  return _internal_full_margin();
}
inline void AccountPosition::set_full_margin(double value) {
  _internal_set_full_margin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.full_margin)
}
inline double AccountPosition::_internal_full_margin() const {
  return _impl_.full_margin_;
}
inline void AccountPosition::_internal_set_full_margin(double value) {
  ;
  _impl_.full_margin_ = value;
}

// double pre_trade_margin = 40;
inline void AccountPosition::clear_pre_trade_margin() {
  _impl_.pre_trade_margin_ = 0;
}
inline double AccountPosition::pre_trade_margin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPosition.pre_trade_margin)
  return _internal_pre_trade_margin();
}
inline void AccountPosition::set_pre_trade_margin(double value) {
  _internal_set_pre_trade_margin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPosition.pre_trade_margin)
}
inline double AccountPosition::_internal_pre_trade_margin() const {
  return _impl_.pre_trade_margin_;
}
inline void AccountPosition::_internal_set_pre_trade_margin(double value) {
  ;
  _impl_.pre_trade_margin_ = value;
}

// -------------------------------------------------------------------

// AccountUpdate

// string account_id = 1;
inline void AccountUpdate::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& AccountUpdate::account_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountUpdate::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountUpdate.account_id)
}
inline std::string* AccountUpdate::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountUpdate.account_id)
  return _s;
}
inline const std::string& AccountUpdate::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void AccountUpdate::_internal_set_account_id(const std::string& value) {
  ;


  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountUpdate::_internal_mutable_account_id() {
  ;
  return _impl_.account_id_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountUpdate::release_account_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountUpdate.account_id)
  return _impl_.account_id_.Release();
}
inline void AccountUpdate::set_allocated_account_id(std::string* value) {
  _impl_.account_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountUpdate.account_id)
}

// .t4proto.v1.common.AccountStatus status = 2;
inline void AccountUpdate::clear_status() {
  _impl_.status_ = 0;
}
inline ::t4proto::v1::common::AccountStatus AccountUpdate::status() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.status)
  return _internal_status();
}
inline void AccountUpdate::set_status(::t4proto::v1::common::AccountStatus value) {
   _internal_set_status(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountUpdate.status)
}
inline ::t4proto::v1::common::AccountStatus AccountUpdate::_internal_status() const {
  return static_cast<::t4proto::v1::common::AccountStatus>(_impl_.status_);
}
inline void AccountUpdate::_internal_set_status(::t4proto::v1::common::AccountStatus value) {
  ;
  _impl_.status_ = value;
}

// double balance = 3;
inline void AccountUpdate::clear_balance() {
  _impl_.balance_ = 0;
}
inline double AccountUpdate::balance() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.balance)
  return _internal_balance();
}
inline void AccountUpdate::set_balance(double value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountUpdate.balance)
}
inline double AccountUpdate::_internal_balance() const {
  return _impl_.balance_;
}
inline void AccountUpdate::_internal_set_balance(double value) {
  ;
  _impl_.balance_ = value;
}

// double rpl = 4;
inline void AccountUpdate::clear_rpl() {
  _impl_.rpl_ = 0;
}
inline double AccountUpdate::rpl() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.rpl)
  return _internal_rpl();
}
inline void AccountUpdate::set_rpl(double value) {
  _internal_set_rpl(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountUpdate.rpl)
}
inline double AccountUpdate::_internal_rpl() const {
  return _impl_.rpl_;
}
inline void AccountUpdate::_internal_set_rpl(double value) {
  ;
  _impl_.rpl_ = value;
}

// double overnight_upl = 5;
inline void AccountUpdate::clear_overnight_upl() {
  _impl_.overnight_upl_ = 0;
}
inline double AccountUpdate::overnight_upl() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.overnight_upl)
  return _internal_overnight_upl();
}
inline void AccountUpdate::set_overnight_upl(double value) {
  _internal_set_overnight_upl(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountUpdate.overnight_upl)
}
inline double AccountUpdate::_internal_overnight_upl() const {
  return _impl_.overnight_upl_;
}
inline void AccountUpdate::_internal_set_overnight_upl(double value) {
  ;
  _impl_.overnight_upl_ = value;
}

// double margin = 6;
inline void AccountUpdate::clear_margin() {
  _impl_.margin_ = 0;
}
inline double AccountUpdate::margin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.margin)
  return _internal_margin();
}
inline void AccountUpdate::set_margin(double value) {
  _internal_set_margin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountUpdate.margin)
}
inline double AccountUpdate::_internal_margin() const {
  return _impl_.margin_;
}
inline void AccountUpdate::_internal_set_margin(double value) {
  ;
  _impl_.margin_ = value;
}

// double day_margin = 7;
inline void AccountUpdate::clear_day_margin() {
  _impl_.day_margin_ = 0;
}
inline double AccountUpdate::day_margin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.day_margin)
  return _internal_day_margin();
}
inline void AccountUpdate::set_day_margin(double value) {
  _internal_set_day_margin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountUpdate.day_margin)
}
inline double AccountUpdate::_internal_day_margin() const {
  return _impl_.day_margin_;
}
inline void AccountUpdate::_internal_set_day_margin(double value) {
  ;
  _impl_.day_margin_ = value;
}

// double full_margin = 8;
inline void AccountUpdate::clear_full_margin() {
  _impl_.full_margin_ = 0;
}
inline double AccountUpdate::full_margin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.full_margin)
  return _internal_full_margin();
}
inline void AccountUpdate::set_full_margin(double value) {
  _internal_set_full_margin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountUpdate.full_margin)
}
inline double AccountUpdate::_internal_full_margin() const {
  return _impl_.full_margin_;
}
inline void AccountUpdate::_internal_set_full_margin(double value) {
  ;
  _impl_.full_margin_ = value;
}

// double base_margin = 9;
inline void AccountUpdate::clear_base_margin() {
  _impl_.base_margin_ = 0;
}
inline double AccountUpdate::base_margin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.base_margin)
  return _internal_base_margin();
}
inline void AccountUpdate::set_base_margin(double value) {
  _internal_set_base_margin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountUpdate.base_margin)
}
inline double AccountUpdate::_internal_base_margin() const {
  return _impl_.base_margin_;
}
inline void AccountUpdate::_internal_set_base_margin(double value) {
  ;
  _impl_.base_margin_ = value;
}

// double alerting_margin = 10;
inline void AccountUpdate::clear_alerting_margin() {
  _impl_.alerting_margin_ = 0;
}
inline double AccountUpdate::alerting_margin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.alerting_margin)
  return _internal_alerting_margin();
}
inline void AccountUpdate::set_alerting_margin(double value) {
  _internal_set_alerting_margin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountUpdate.alerting_margin)
}
inline double AccountUpdate::_internal_alerting_margin() const {
  return _impl_.alerting_margin_;
}
inline void AccountUpdate::_internal_set_alerting_margin(double value) {
  ;
  _impl_.alerting_margin_ = value;
}

// double pre_trade_margin = 11;
inline void AccountUpdate::clear_pre_trade_margin() {
  _impl_.pre_trade_margin_ = 0;
}
inline double AccountUpdate::pre_trade_margin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.pre_trade_margin)
  return _internal_pre_trade_margin();
}
inline void AccountUpdate::set_pre_trade_margin(double value) {
  _internal_set_pre_trade_margin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountUpdate.pre_trade_margin)
}
inline double AccountUpdate::_internal_pre_trade_margin() const {
  return _impl_.pre_trade_margin_;
}
inline void AccountUpdate::_internal_set_pre_trade_margin(double value) {
  ;
  _impl_.pre_trade_margin_ = value;
}

// double mp = 12;
inline void AccountUpdate::clear_mp() {
  _impl_.mp_ = 0;
}
inline double AccountUpdate::mp() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.mp)
  return _internal_mp();
}
inline void AccountUpdate::set_mp(double value) {
  _internal_set_mp(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountUpdate.mp)
}
inline double AccountUpdate::_internal_mp() const {
  return _impl_.mp_;
}
inline void AccountUpdate::_internal_set_mp(double value) {
  ;
  _impl_.mp_ = value;
}

// double premium = 13;
inline void AccountUpdate::clear_premium() {
  _impl_.premium_ = 0;
}
inline double AccountUpdate::premium() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.premium)
  return _internal_premium();
}
inline void AccountUpdate::set_premium(double value) {
  _internal_set_premium(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountUpdate.premium)
}
inline double AccountUpdate::_internal_premium() const {
  return _impl_.premium_;
}
inline void AccountUpdate::_internal_set_premium(double value) {
  ;
  _impl_.premium_ = value;
}

// double long_mp = 14;
inline void AccountUpdate::clear_long_mp() {
  _impl_.long_mp_ = 0;
}
inline double AccountUpdate::long_mp() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.long_mp)
  return _internal_long_mp();
}
inline void AccountUpdate::set_long_mp(double value) {
  _internal_set_long_mp(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountUpdate.long_mp)
}
inline double AccountUpdate::_internal_long_mp() const {
  return _impl_.long_mp_;
}
inline void AccountUpdate::_internal_set_long_mp(double value) {
  ;
  _impl_.long_mp_ = value;
}

// double short_mp = 15;
inline void AccountUpdate::clear_short_mp() {
  _impl_.short_mp_ = 0;
}
inline double AccountUpdate::short_mp() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.short_mp)
  return _internal_short_mp();
}
inline void AccountUpdate::set_short_mp(double value) {
  _internal_set_short_mp(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountUpdate.short_mp)
}
inline double AccountUpdate::_internal_short_mp() const {
  return _impl_.short_mp_;
}
inline void AccountUpdate::_internal_set_short_mp(double value) {
  ;
  _impl_.short_mp_ = value;
}

// double fees_and_commissions = 16;
inline void AccountUpdate::clear_fees_and_commissions() {
  _impl_.fees_and_commissions_ = 0;
}
inline double AccountUpdate::fees_and_commissions() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.fees_and_commissions)
  return _internal_fees_and_commissions();
}
inline void AccountUpdate::set_fees_and_commissions(double value) {
  _internal_set_fees_and_commissions(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountUpdate.fees_and_commissions)
}
inline double AccountUpdate::_internal_fees_and_commissions() const {
  return _impl_.fees_and_commissions_;
}
inline void AccountUpdate::_internal_set_fees_and_commissions(double value) {
  ;
  _impl_.fees_and_commissions_ = value;
}

// double prev_margin = 17;
inline void AccountUpdate::clear_prev_margin() {
  _impl_.prev_margin_ = 0;
}
inline double AccountUpdate::prev_margin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.prev_margin)
  return _internal_prev_margin();
}
inline void AccountUpdate::set_prev_margin(double value) {
  _internal_set_prev_margin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountUpdate.prev_margin)
}
inline double AccountUpdate::_internal_prev_margin() const {
  return _impl_.prev_margin_;
}
inline void AccountUpdate::_internal_set_prev_margin(double value) {
  ;
  _impl_.prev_margin_ = value;
}

// double imported_net_liq = 18;
inline void AccountUpdate::clear_imported_net_liq() {
  _impl_.imported_net_liq_ = 0;
}
inline double AccountUpdate::imported_net_liq() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.imported_net_liq)
  return _internal_imported_net_liq();
}
inline void AccountUpdate::set_imported_net_liq(double value) {
  _internal_set_imported_net_liq(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountUpdate.imported_net_liq)
}
inline double AccountUpdate::_internal_imported_net_liq() const {
  return _impl_.imported_net_liq_;
}
inline void AccountUpdate::_internal_set_imported_net_liq(double value) {
  ;
  _impl_.imported_net_liq_ = value;
}

// .google.protobuf.Timestamp imported_net_liq_date = 19;
inline bool AccountUpdate::_internal_has_imported_net_liq_date() const {
  return this != internal_default_instance() && _impl_.imported_net_liq_date_ != nullptr;
}
inline bool AccountUpdate::has_imported_net_liq_date() const {
  return _internal_has_imported_net_liq_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AccountUpdate::_internal_imported_net_liq_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.imported_net_liq_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AccountUpdate::imported_net_liq_date() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.imported_net_liq_date)
  return _internal_imported_net_liq_date();
}
inline void AccountUpdate::unsafe_arena_set_allocated_imported_net_liq_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* imported_net_liq_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.imported_net_liq_date_);
  }
  _impl_.imported_net_liq_date_ = imported_net_liq_date;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountUpdate.imported_net_liq_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountUpdate::release_imported_net_liq_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.imported_net_liq_date_;
  _impl_.imported_net_liq_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountUpdate::unsafe_arena_release_imported_net_liq_date() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountUpdate.imported_net_liq_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.imported_net_liq_date_;
  _impl_.imported_net_liq_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountUpdate::_internal_mutable_imported_net_liq_date() {
  
  if (_impl_.imported_net_liq_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.imported_net_liq_date_ = p;
  }
  return _impl_.imported_net_liq_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountUpdate::mutable_imported_net_liq_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_imported_net_liq_date();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountUpdate.imported_net_liq_date)
  return _msg;
}
inline void AccountUpdate::set_allocated_imported_net_liq_date(::PROTOBUF_NAMESPACE_ID::Timestamp* imported_net_liq_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.imported_net_liq_date_);
  }
  if (imported_net_liq_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(imported_net_liq_date));
    if (message_arena != submessage_arena) {
      imported_net_liq_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, imported_net_liq_date, submessage_arena);
    }

  } else {

  }
  _impl_.imported_net_liq_date_ = imported_net_liq_date;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountUpdate.imported_net_liq_date)
}

// double prev_imported_net_liq = 20;
inline void AccountUpdate::clear_prev_imported_net_liq() {
  _impl_.prev_imported_net_liq_ = 0;
}
inline double AccountUpdate::prev_imported_net_liq() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.prev_imported_net_liq)
  return _internal_prev_imported_net_liq();
}
inline void AccountUpdate::set_prev_imported_net_liq(double value) {
  _internal_set_prev_imported_net_liq(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountUpdate.prev_imported_net_liq)
}
inline double AccountUpdate::_internal_prev_imported_net_liq() const {
  return _impl_.prev_imported_net_liq_;
}
inline void AccountUpdate::_internal_set_prev_imported_net_liq(double value) {
  ;
  _impl_.prev_imported_net_liq_ = value;
}

// .google.protobuf.Timestamp prev_imported_net_liq_date = 21;
inline bool AccountUpdate::_internal_has_prev_imported_net_liq_date() const {
  return this != internal_default_instance() && _impl_.prev_imported_net_liq_date_ != nullptr;
}
inline bool AccountUpdate::has_prev_imported_net_liq_date() const {
  return _internal_has_prev_imported_net_liq_date();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AccountUpdate::_internal_prev_imported_net_liq_date() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.prev_imported_net_liq_date_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AccountUpdate::prev_imported_net_liq_date() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.prev_imported_net_liq_date)
  return _internal_prev_imported_net_liq_date();
}
inline void AccountUpdate::unsafe_arena_set_allocated_prev_imported_net_liq_date(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* prev_imported_net_liq_date) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prev_imported_net_liq_date_);
  }
  _impl_.prev_imported_net_liq_date_ = prev_imported_net_liq_date;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountUpdate.prev_imported_net_liq_date)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountUpdate::release_prev_imported_net_liq_date() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.prev_imported_net_liq_date_;
  _impl_.prev_imported_net_liq_date_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountUpdate::unsafe_arena_release_prev_imported_net_liq_date() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountUpdate.prev_imported_net_liq_date)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.prev_imported_net_liq_date_;
  _impl_.prev_imported_net_liq_date_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountUpdate::_internal_mutable_prev_imported_net_liq_date() {
  
  if (_impl_.prev_imported_net_liq_date_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.prev_imported_net_liq_date_ = p;
  }
  return _impl_.prev_imported_net_liq_date_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountUpdate::mutable_prev_imported_net_liq_date() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_prev_imported_net_liq_date();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountUpdate.prev_imported_net_liq_date)
  return _msg;
}
inline void AccountUpdate::set_allocated_prev_imported_net_liq_date(::PROTOBUF_NAMESPACE_ID::Timestamp* prev_imported_net_liq_date) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prev_imported_net_liq_date_);
  }
  if (prev_imported_net_liq_date) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prev_imported_net_liq_date));
    if (message_arena != submessage_arena) {
      prev_imported_net_liq_date = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prev_imported_net_liq_date, submessage_arena);
    }

  } else {

  }
  _impl_.prev_imported_net_liq_date_ = prev_imported_net_liq_date;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountUpdate.prev_imported_net_liq_date)
}

// double filled_delta = 22;
inline void AccountUpdate::clear_filled_delta() {
  _impl_.filled_delta_ = 0;
}
inline double AccountUpdate::filled_delta() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.filled_delta)
  return _internal_filled_delta();
}
inline void AccountUpdate::set_filled_delta(double value) {
  _internal_set_filled_delta(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountUpdate.filled_delta)
}
inline double AccountUpdate::_internal_filled_delta() const {
  return _impl_.filled_delta_;
}
inline void AccountUpdate::_internal_set_filled_delta(double value) {
  ;
  _impl_.filled_delta_ = value;
}

// double working_delta = 23;
inline void AccountUpdate::clear_working_delta() {
  _impl_.working_delta_ = 0;
}
inline double AccountUpdate::working_delta() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.working_delta)
  return _internal_working_delta();
}
inline void AccountUpdate::set_working_delta(double value) {
  _internal_set_working_delta(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountUpdate.working_delta)
}
inline double AccountUpdate::_internal_working_delta() const {
  return _impl_.working_delta_;
}
inline void AccountUpdate::_internal_set_working_delta(double value) {
  ;
  _impl_.working_delta_ = value;
}

// .google.protobuf.Timestamp margin_time = 24;
inline bool AccountUpdate::_internal_has_margin_time() const {
  return this != internal_default_instance() && _impl_.margin_time_ != nullptr;
}
inline bool AccountUpdate::has_margin_time() const {
  return _internal_has_margin_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AccountUpdate::_internal_margin_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.margin_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AccountUpdate::margin_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.margin_time)
  return _internal_margin_time();
}
inline void AccountUpdate::unsafe_arena_set_allocated_margin_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* margin_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.margin_time_);
  }
  _impl_.margin_time_ = margin_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountUpdate.margin_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountUpdate::release_margin_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.margin_time_;
  _impl_.margin_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountUpdate::unsafe_arena_release_margin_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountUpdate.margin_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.margin_time_;
  _impl_.margin_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountUpdate::_internal_mutable_margin_time() {
  
  if (_impl_.margin_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.margin_time_ = p;
  }
  return _impl_.margin_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountUpdate::mutable_margin_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_margin_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountUpdate.margin_time)
  return _msg;
}
inline void AccountUpdate::set_allocated_margin_time(::PROTOBUF_NAMESPACE_ID::Timestamp* margin_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.margin_time_);
  }
  if (margin_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(margin_time));
    if (message_arena != submessage_arena) {
      margin_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, margin_time, submessage_arena);
    }

  } else {

  }
  _impl_.margin_time_ = margin_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountUpdate.margin_time)
}

// .google.protobuf.Timestamp alerting_time = 25;
inline bool AccountUpdate::_internal_has_alerting_time() const {
  return this != internal_default_instance() && _impl_.alerting_time_ != nullptr;
}
inline bool AccountUpdate::has_alerting_time() const {
  return _internal_has_alerting_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AccountUpdate::_internal_alerting_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.alerting_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AccountUpdate::alerting_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountUpdate.alerting_time)
  return _internal_alerting_time();
}
inline void AccountUpdate::unsafe_arena_set_allocated_alerting_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* alerting_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alerting_time_);
  }
  _impl_.alerting_time_ = alerting_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountUpdate.alerting_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountUpdate::release_alerting_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.alerting_time_;
  _impl_.alerting_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountUpdate::unsafe_arena_release_alerting_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountUpdate.alerting_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.alerting_time_;
  _impl_.alerting_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountUpdate::_internal_mutable_alerting_time() {
  
  if (_impl_.alerting_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.alerting_time_ = p;
  }
  return _impl_.alerting_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountUpdate::mutable_alerting_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_alerting_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountUpdate.alerting_time)
  return _msg;
}
inline void AccountUpdate::set_allocated_alerting_time(::PROTOBUF_NAMESPACE_ID::Timestamp* alerting_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alerting_time_);
  }
  if (alerting_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alerting_time));
    if (message_arena != submessage_arena) {
      alerting_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alerting_time, submessage_arena);
    }

  } else {

  }
  _impl_.alerting_time_ = alerting_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountUpdate.alerting_time)
}

// -------------------------------------------------------------------

// AccountDetails

// string account_id = 1;
inline void AccountDetails::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& AccountDetails::account_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountDetails::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.account_id)
}
inline std::string* AccountDetails::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountDetails.account_id)
  return _s;
}
inline const std::string& AccountDetails::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void AccountDetails::_internal_set_account_id(const std::string& value) {
  ;


  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountDetails::_internal_mutable_account_id() {
  ;
  return _impl_.account_id_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountDetails::release_account_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountDetails.account_id)
  return _impl_.account_id_.Release();
}
inline void AccountDetails::set_allocated_account_id(std::string* value) {
  _impl_.account_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountDetails.account_id)
}

// string account_name = 2;
inline void AccountDetails::clear_account_name() {
  _impl_.account_name_.ClearToEmpty();
}
inline const std::string& AccountDetails::account_name() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.account_name)
  return _internal_account_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountDetails::set_account_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.account_name)
}
inline std::string* AccountDetails::mutable_account_name() {
  std::string* _s = _internal_mutable_account_name();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountDetails.account_name)
  return _s;
}
inline const std::string& AccountDetails::_internal_account_name() const {
  return _impl_.account_name_.Get();
}
inline void AccountDetails::_internal_set_account_name(const std::string& value) {
  ;


  _impl_.account_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountDetails::_internal_mutable_account_name() {
  ;
  return _impl_.account_name_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountDetails::release_account_name() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountDetails.account_name)
  return _impl_.account_name_.Release();
}
inline void AccountDetails::set_allocated_account_name(std::string* value) {
  _impl_.account_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_name_.IsDefault()) {
          _impl_.account_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountDetails.account_name)
}

// string account = 3;
inline void AccountDetails::clear_account() {
  _impl_.account_.ClearToEmpty();
}
inline const std::string& AccountDetails::account() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.account)
  return _internal_account();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountDetails::set_account(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.account)
}
inline std::string* AccountDetails::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountDetails.account)
  return _s;
}
inline const std::string& AccountDetails::_internal_account() const {
  return _impl_.account_.Get();
}
inline void AccountDetails::_internal_set_account(const std::string& value) {
  ;


  _impl_.account_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountDetails::_internal_mutable_account() {
  ;
  return _impl_.account_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountDetails::release_account() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountDetails.account)
  return _impl_.account_.Release();
}
inline void AccountDetails::set_allocated_account(std::string* value) {
  _impl_.account_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_.IsDefault()) {
          _impl_.account_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountDetails.account)
}

// .t4proto.v1.common.AccountEnabled enabled = 4;
inline void AccountDetails::clear_enabled() {
  _impl_.enabled_ = 0;
}
inline ::t4proto::v1::common::AccountEnabled AccountDetails::enabled() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.enabled)
  return _internal_enabled();
}
inline void AccountDetails::set_enabled(::t4proto::v1::common::AccountEnabled value) {
   _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.enabled)
}
inline ::t4proto::v1::common::AccountEnabled AccountDetails::_internal_enabled() const {
  return static_cast<::t4proto::v1::common::AccountEnabled>(_impl_.enabled_);
}
inline void AccountDetails::_internal_set_enabled(::t4proto::v1::common::AccountEnabled value) {
  ;
  _impl_.enabled_ = value;
}

// bool deleted = 5;
inline void AccountDetails::clear_deleted() {
  _impl_.deleted_ = false;
}
inline bool AccountDetails::deleted() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.deleted)
  return _internal_deleted();
}
inline void AccountDetails::set_deleted(bool value) {
  _internal_set_deleted(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.deleted)
}
inline bool AccountDetails::_internal_deleted() const {
  return _impl_.deleted_;
}
inline void AccountDetails::_internal_set_deleted(bool value) {
  ;
  _impl_.deleted_ = value;
}

// int32 max_clip_size = 6;
inline void AccountDetails::clear_max_clip_size() {
  _impl_.max_clip_size_ = 0;
}
inline ::int32_t AccountDetails::max_clip_size() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.max_clip_size)
  return _internal_max_clip_size();
}
inline void AccountDetails::set_max_clip_size(::int32_t value) {
  _internal_set_max_clip_size(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.max_clip_size)
}
inline ::int32_t AccountDetails::_internal_max_clip_size() const {
  return _impl_.max_clip_size_;
}
inline void AccountDetails::_internal_set_max_clip_size(::int32_t value) {
  ;
  _impl_.max_clip_size_ = value;
}

// bool pre_trade_disabled = 7;
inline void AccountDetails::clear_pre_trade_disabled() {
  _impl_.pre_trade_disabled_ = false;
}
inline bool AccountDetails::pre_trade_disabled() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.pre_trade_disabled)
  return _internal_pre_trade_disabled();
}
inline void AccountDetails::set_pre_trade_disabled(bool value) {
  _internal_set_pre_trade_disabled(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.pre_trade_disabled)
}
inline bool AccountDetails::_internal_pre_trade_disabled() const {
  return _impl_.pre_trade_disabled_;
}
inline void AccountDetails::_internal_set_pre_trade_disabled(bool value) {
  ;
  _impl_.pre_trade_disabled_ = value;
}

// bool position_rollover = 8;
inline void AccountDetails::clear_position_rollover() {
  _impl_.position_rollover_ = false;
}
inline bool AccountDetails::position_rollover() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.position_rollover)
  return _internal_position_rollover();
}
inline void AccountDetails::set_position_rollover(bool value) {
  _internal_set_position_rollover(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.position_rollover)
}
inline bool AccountDetails::_internal_position_rollover() const {
  return _impl_.position_rollover_;
}
inline void AccountDetails::_internal_set_position_rollover(bool value) {
  ;
  _impl_.position_rollover_ = value;
}

// bool pl_rollover = 9;
inline void AccountDetails::clear_pl_rollover() {
  _impl_.pl_rollover_ = false;
}
inline bool AccountDetails::pl_rollover() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.pl_rollover)
  return _internal_pl_rollover();
}
inline void AccountDetails::set_pl_rollover(bool value) {
  _internal_set_pl_rollover(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.pl_rollover)
}
inline bool AccountDetails::_internal_pl_rollover() const {
  return _impl_.pl_rollover_;
}
inline void AccountDetails::_internal_set_pl_rollover(bool value) {
  ;
  _impl_.pl_rollover_ = value;
}

// string firm_id = 10;
inline void AccountDetails::clear_firm_id() {
  _impl_.firm_id_.ClearToEmpty();
}
inline const std::string& AccountDetails::firm_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.firm_id)
  return _internal_firm_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountDetails::set_firm_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.firm_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.firm_id)
}
inline std::string* AccountDetails::mutable_firm_id() {
  std::string* _s = _internal_mutable_firm_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountDetails.firm_id)
  return _s;
}
inline const std::string& AccountDetails::_internal_firm_id() const {
  return _impl_.firm_id_.Get();
}
inline void AccountDetails::_internal_set_firm_id(const std::string& value) {
  ;


  _impl_.firm_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountDetails::_internal_mutable_firm_id() {
  ;
  return _impl_.firm_id_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountDetails::release_firm_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountDetails.firm_id)
  return _impl_.firm_id_.Release();
}
inline void AccountDetails::set_allocated_firm_id(std::string* value) {
  _impl_.firm_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.firm_id_.IsDefault()) {
          _impl_.firm_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountDetails.firm_id)
}

// double min_balance = 11;
inline void AccountDetails::clear_min_balance() {
  _impl_.min_balance_ = 0;
}
inline double AccountDetails::min_balance() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.min_balance)
  return _internal_min_balance();
}
inline void AccountDetails::set_min_balance(double value) {
  _internal_set_min_balance(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.min_balance)
}
inline double AccountDetails::_internal_min_balance() const {
  return _impl_.min_balance_;
}
inline void AccountDetails::_internal_set_min_balance(double value) {
  ;
  _impl_.min_balance_ = value;
}

// int32 margin_pc = 12;
inline void AccountDetails::clear_margin_pc() {
  _impl_.margin_pc_ = 0;
}
inline ::int32_t AccountDetails::margin_pc() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.margin_pc)
  return _internal_margin_pc();
}
inline void AccountDetails::set_margin_pc(::int32_t value) {
  _internal_set_margin_pc(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.margin_pc)
}
inline ::int32_t AccountDetails::_internal_margin_pc() const {
  return _impl_.margin_pc_;
}
inline void AccountDetails::_internal_set_margin_pc(::int32_t value) {
  ;
  _impl_.margin_pc_ = value;
}

// double loss_limit = 13;
inline void AccountDetails::clear_loss_limit() {
  _impl_.loss_limit_ = 0;
}
inline double AccountDetails::loss_limit() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.loss_limit)
  return _internal_loss_limit();
}
inline void AccountDetails::set_loss_limit(double value) {
  _internal_set_loss_limit(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.loss_limit)
}
inline double AccountDetails::_internal_loss_limit() const {
  return _impl_.loss_limit_;
}
inline void AccountDetails::_internal_set_loss_limit(double value) {
  ;
  _impl_.loss_limit_ = value;
}

// int32 loss_limit_pc = 14;
inline void AccountDetails::clear_loss_limit_pc() {
  _impl_.loss_limit_pc_ = 0;
}
inline ::int32_t AccountDetails::loss_limit_pc() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.loss_limit_pc)
  return _internal_loss_limit_pc();
}
inline void AccountDetails::set_loss_limit_pc(::int32_t value) {
  _internal_set_loss_limit_pc(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.loss_limit_pc)
}
inline ::int32_t AccountDetails::_internal_loss_limit_pc() const {
  return _impl_.loss_limit_pc_;
}
inline void AccountDetails::_internal_set_loss_limit_pc(::int32_t value) {
  ;
  _impl_.loss_limit_pc_ = value;
}

// int32 overnight_margin_pc = 15;
inline void AccountDetails::clear_overnight_margin_pc() {
  _impl_.overnight_margin_pc_ = 0;
}
inline ::int32_t AccountDetails::overnight_margin_pc() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.overnight_margin_pc)
  return _internal_overnight_margin_pc();
}
inline void AccountDetails::set_overnight_margin_pc(::int32_t value) {
  _internal_set_overnight_margin_pc(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.overnight_margin_pc)
}
inline ::int32_t AccountDetails::_internal_overnight_margin_pc() const {
  return _impl_.overnight_margin_pc_;
}
inline void AccountDetails::_internal_set_overnight_margin_pc(::int32_t value) {
  ;
  _impl_.overnight_margin_pc_ = value;
}

// bool order_routing = 16;
inline void AccountDetails::clear_order_routing() {
  _impl_.order_routing_ = false;
}
inline bool AccountDetails::order_routing() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.order_routing)
  return _internal_order_routing();
}
inline void AccountDetails::set_order_routing(bool value) {
  _internal_set_order_routing(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.order_routing)
}
inline bool AccountDetails::_internal_order_routing() const {
  return _impl_.order_routing_;
}
inline void AccountDetails::_internal_set_order_routing(bool value) {
  ;
  _impl_.order_routing_ = value;
}

// string active_time_start = 17;
inline void AccountDetails::clear_active_time_start() {
  _impl_.active_time_start_.ClearToEmpty();
}
inline const std::string& AccountDetails::active_time_start() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.active_time_start)
  return _internal_active_time_start();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountDetails::set_active_time_start(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.active_time_start_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.active_time_start)
}
inline std::string* AccountDetails::mutable_active_time_start() {
  std::string* _s = _internal_mutable_active_time_start();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountDetails.active_time_start)
  return _s;
}
inline const std::string& AccountDetails::_internal_active_time_start() const {
  return _impl_.active_time_start_.Get();
}
inline void AccountDetails::_internal_set_active_time_start(const std::string& value) {
  ;


  _impl_.active_time_start_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountDetails::_internal_mutable_active_time_start() {
  ;
  return _impl_.active_time_start_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountDetails::release_active_time_start() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountDetails.active_time_start)
  return _impl_.active_time_start_.Release();
}
inline void AccountDetails::set_allocated_active_time_start(std::string* value) {
  _impl_.active_time_start_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.active_time_start_.IsDefault()) {
          _impl_.active_time_start_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountDetails.active_time_start)
}

// string active_time_stop = 18;
inline void AccountDetails::clear_active_time_stop() {
  _impl_.active_time_stop_.ClearToEmpty();
}
inline const std::string& AccountDetails::active_time_stop() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.active_time_stop)
  return _internal_active_time_stop();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountDetails::set_active_time_stop(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.active_time_stop_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.active_time_stop)
}
inline std::string* AccountDetails::mutable_active_time_stop() {
  std::string* _s = _internal_mutable_active_time_stop();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountDetails.active_time_stop)
  return _s;
}
inline const std::string& AccountDetails::_internal_active_time_stop() const {
  return _impl_.active_time_stop_.Get();
}
inline void AccountDetails::_internal_set_active_time_stop(const std::string& value) {
  ;


  _impl_.active_time_stop_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountDetails::_internal_mutable_active_time_stop() {
  ;
  return _impl_.active_time_stop_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountDetails::release_active_time_stop() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountDetails.active_time_stop)
  return _impl_.active_time_stop_.Release();
}
inline void AccountDetails::set_allocated_active_time_stop(std::string* value) {
  _impl_.active_time_stop_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.active_time_stop_.IsDefault()) {
          _impl_.active_time_stop_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountDetails.active_time_stop)
}

// int32 warning_threshold_pl = 19;
inline void AccountDetails::clear_warning_threshold_pl() {
  _impl_.warning_threshold_pl_ = 0;
}
inline ::int32_t AccountDetails::warning_threshold_pl() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.warning_threshold_pl)
  return _internal_warning_threshold_pl();
}
inline void AccountDetails::set_warning_threshold_pl(::int32_t value) {
  _internal_set_warning_threshold_pl(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.warning_threshold_pl)
}
inline ::int32_t AccountDetails::_internal_warning_threshold_pl() const {
  return _impl_.warning_threshold_pl_;
}
inline void AccountDetails::_internal_set_warning_threshold_pl(::int32_t value) {
  ;
  _impl_.warning_threshold_pl_ = value;
}

// int32 warning_threshold_loss_limit = 20;
inline void AccountDetails::clear_warning_threshold_loss_limit() {
  _impl_.warning_threshold_loss_limit_ = 0;
}
inline ::int32_t AccountDetails::warning_threshold_loss_limit() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.warning_threshold_loss_limit)
  return _internal_warning_threshold_loss_limit();
}
inline void AccountDetails::set_warning_threshold_loss_limit(::int32_t value) {
  _internal_set_warning_threshold_loss_limit(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.warning_threshold_loss_limit)
}
inline ::int32_t AccountDetails::_internal_warning_threshold_loss_limit() const {
  return _impl_.warning_threshold_loss_limit_;
}
inline void AccountDetails::_internal_set_warning_threshold_loss_limit(::int32_t value) {
  ;
  _impl_.warning_threshold_loss_limit_ = value;
}

// int32 warning_threshold_margin = 21;
inline void AccountDetails::clear_warning_threshold_margin() {
  _impl_.warning_threshold_margin_ = 0;
}
inline ::int32_t AccountDetails::warning_threshold_margin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.warning_threshold_margin)
  return _internal_warning_threshold_margin();
}
inline void AccountDetails::set_warning_threshold_margin(::int32_t value) {
  _internal_set_warning_threshold_margin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.warning_threshold_margin)
}
inline ::int32_t AccountDetails::_internal_warning_threshold_margin() const {
  return _impl_.warning_threshold_margin_;
}
inline void AccountDetails::_internal_set_warning_threshold_margin(::int32_t value) {
  ;
  _impl_.warning_threshold_margin_ = value;
}

// string firm = 22;
inline void AccountDetails::clear_firm() {
  _impl_.firm_.ClearToEmpty();
}
inline const std::string& AccountDetails::firm() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.firm)
  return _internal_firm();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountDetails::set_firm(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.firm_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.firm)
}
inline std::string* AccountDetails::mutable_firm() {
  std::string* _s = _internal_mutable_firm();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountDetails.firm)
  return _s;
}
inline const std::string& AccountDetails::_internal_firm() const {
  return _impl_.firm_.Get();
}
inline void AccountDetails::_internal_set_firm(const std::string& value) {
  ;


  _impl_.firm_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountDetails::_internal_mutable_firm() {
  ;
  return _impl_.firm_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountDetails::release_firm() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountDetails.firm)
  return _impl_.firm_.Release();
}
inline void AccountDetails::set_allocated_firm(std::string* value) {
  _impl_.firm_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.firm_.IsDefault()) {
          _impl_.firm_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountDetails.firm)
}

// .t4proto.v1.common.AccountMode mode = 23;
inline void AccountDetails::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::t4proto::v1::common::AccountMode AccountDetails::mode() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.mode)
  return _internal_mode();
}
inline void AccountDetails::set_mode(::t4proto::v1::common::AccountMode value) {
   _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.mode)
}
inline ::t4proto::v1::common::AccountMode AccountDetails::_internal_mode() const {
  return static_cast<::t4proto::v1::common::AccountMode>(_impl_.mode_);
}
inline void AccountDetails::_internal_set_mode(::t4proto::v1::common::AccountMode value) {
  ;
  _impl_.mode_ = value;
}

// int32 max_account_position = 24;
inline void AccountDetails::clear_max_account_position() {
  _impl_.max_account_position_ = 0;
}
inline ::int32_t AccountDetails::max_account_position() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.max_account_position)
  return _internal_max_account_position();
}
inline void AccountDetails::set_max_account_position(::int32_t value) {
  _internal_set_max_account_position(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.max_account_position)
}
inline ::int32_t AccountDetails::_internal_max_account_position() const {
  return _impl_.max_account_position_;
}
inline void AccountDetails::_internal_set_max_account_position(::int32_t value) {
  ;
  _impl_.max_account_position_ = value;
}

// double day_loss_limit = 25;
inline void AccountDetails::clear_day_loss_limit() {
  _impl_.day_loss_limit_ = 0;
}
inline double AccountDetails::day_loss_limit() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.day_loss_limit)
  return _internal_day_loss_limit();
}
inline void AccountDetails::set_day_loss_limit(double value) {
  _internal_set_day_loss_limit(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.day_loss_limit)
}
inline double AccountDetails::_internal_day_loss_limit() const {
  return _impl_.day_loss_limit_;
}
inline void AccountDetails::_internal_set_day_loss_limit(double value) {
  ;
  _impl_.day_loss_limit_ = value;
}

// string display_name = 26;
inline void AccountDetails::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& AccountDetails::display_name() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.display_name)
  return _internal_display_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountDetails::set_display_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.display_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.display_name)
}
inline std::string* AccountDetails::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountDetails.display_name)
  return _s;
}
inline const std::string& AccountDetails::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void AccountDetails::_internal_set_display_name(const std::string& value) {
  ;


  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountDetails::_internal_mutable_display_name() {
  ;
  return _impl_.display_name_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountDetails::release_display_name() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountDetails.display_name)
  return _impl_.display_name_.Release();
}
inline void AccountDetails::set_allocated_display_name(std::string* value) {
  _impl_.display_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.display_name_.IsDefault()) {
          _impl_.display_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountDetails.display_name)
}

// int32 wide_market = 27;
inline void AccountDetails::clear_wide_market() {
  _impl_.wide_market_ = 0;
}
inline ::int32_t AccountDetails::wide_market() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.wide_market)
  return _internal_wide_market();
}
inline void AccountDetails::set_wide_market(::int32_t value) {
  _internal_set_wide_market(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.wide_market)
}
inline ::int32_t AccountDetails::_internal_wide_market() const {
  return _impl_.wide_market_;
}
inline void AccountDetails::_internal_set_wide_market(::int32_t value) {
  ;
  _impl_.wide_market_ = value;
}

// bool use_pl_for_margin = 28;
inline void AccountDetails::clear_use_pl_for_margin() {
  _impl_.use_pl_for_margin_ = false;
}
inline bool AccountDetails::use_pl_for_margin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.use_pl_for_margin)
  return _internal_use_pl_for_margin();
}
inline void AccountDetails::set_use_pl_for_margin(bool value) {
  _internal_set_use_pl_for_margin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.use_pl_for_margin)
}
inline bool AccountDetails::_internal_use_pl_for_margin() const {
  return _impl_.use_pl_for_margin_;
}
inline void AccountDetails::_internal_set_use_pl_for_margin(bool value) {
  ;
  _impl_.use_pl_for_margin_ = value;
}

// .t4proto.v1.common.AccountMarginType margin_type = 29;
inline void AccountDetails::clear_margin_type() {
  _impl_.margin_type_ = 0;
}
inline ::t4proto::v1::common::AccountMarginType AccountDetails::margin_type() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.margin_type)
  return _internal_margin_type();
}
inline void AccountDetails::set_margin_type(::t4proto::v1::common::AccountMarginType value) {
   _internal_set_margin_type(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.margin_type)
}
inline ::t4proto::v1::common::AccountMarginType AccountDetails::_internal_margin_type() const {
  return static_cast<::t4proto::v1::common::AccountMarginType>(_impl_.margin_type_);
}
inline void AccountDetails::_internal_set_margin_type(::t4proto::v1::common::AccountMarginType value) {
  ;
  _impl_.margin_type_ = value;
}

// string risk_details = 30;
inline void AccountDetails::clear_risk_details() {
  _impl_.risk_details_.ClearToEmpty();
}
inline const std::string& AccountDetails::risk_details() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.risk_details)
  return _internal_risk_details();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountDetails::set_risk_details(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.risk_details_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.risk_details)
}
inline std::string* AccountDetails::mutable_risk_details() {
  std::string* _s = _internal_mutable_risk_details();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountDetails.risk_details)
  return _s;
}
inline const std::string& AccountDetails::_internal_risk_details() const {
  return _impl_.risk_details_.Get();
}
inline void AccountDetails::_internal_set_risk_details(const std::string& value) {
  ;


  _impl_.risk_details_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountDetails::_internal_mutable_risk_details() {
  ;
  return _impl_.risk_details_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountDetails::release_risk_details() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountDetails.risk_details)
  return _impl_.risk_details_.Release();
}
inline void AccountDetails::set_allocated_risk_details(std::string* value) {
  _impl_.risk_details_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.risk_details_.IsDefault()) {
          _impl_.risk_details_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountDetails.risk_details)
}

// int32 price_banding = 31;
inline void AccountDetails::clear_price_banding() {
  _impl_.price_banding_ = 0;
}
inline ::int32_t AccountDetails::price_banding() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.price_banding)
  return _internal_price_banding();
}
inline void AccountDetails::set_price_banding(::int32_t value) {
  _internal_set_price_banding(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.price_banding)
}
inline ::int32_t AccountDetails::_internal_price_banding() const {
  return _impl_.price_banding_;
}
inline void AccountDetails::_internal_set_price_banding(::int32_t value) {
  ;
  _impl_.price_banding_ = value;
}

// int32 day_loss_limit_pc = 32;
inline void AccountDetails::clear_day_loss_limit_pc() {
  _impl_.day_loss_limit_pc_ = 0;
}
inline ::int32_t AccountDetails::day_loss_limit_pc() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.day_loss_limit_pc)
  return _internal_day_loss_limit_pc();
}
inline void AccountDetails::set_day_loss_limit_pc(::int32_t value) {
  _internal_set_day_loss_limit_pc(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.day_loss_limit_pc)
}
inline ::int32_t AccountDetails::_internal_day_loss_limit_pc() const {
  return _impl_.day_loss_limit_pc_;
}
inline void AccountDetails::_internal_set_day_loss_limit_pc(::int32_t value) {
  ;
  _impl_.day_loss_limit_pc_ = value;
}

// bool options_settlement = 33;
inline void AccountDetails::clear_options_settlement() {
  _impl_.options_settlement_ = false;
}
inline bool AccountDetails::options_settlement() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.options_settlement)
  return _internal_options_settlement();
}
inline void AccountDetails::set_options_settlement(bool value) {
  _internal_set_options_settlement(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.options_settlement)
}
inline bool AccountDetails::_internal_options_settlement() const {
  return _impl_.options_settlement_;
}
inline void AccountDetails::_internal_set_options_settlement(bool value) {
  ;
  _impl_.options_settlement_ = value;
}

// string group_name = 34;
inline void AccountDetails::clear_group_name() {
  _impl_.group_name_.ClearToEmpty();
}
inline const std::string& AccountDetails::group_name() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.group_name)
  return _internal_group_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountDetails::set_group_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.group_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.group_name)
}
inline std::string* AccountDetails::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountDetails.group_name)
  return _s;
}
inline const std::string& AccountDetails::_internal_group_name() const {
  return _impl_.group_name_.Get();
}
inline void AccountDetails::_internal_set_group_name(const std::string& value) {
  ;


  _impl_.group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountDetails::_internal_mutable_group_name() {
  ;
  return _impl_.group_name_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountDetails::release_group_name() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountDetails.group_name)
  return _impl_.group_name_.Release();
}
inline void AccountDetails::set_allocated_group_name(std::string* value) {
  _impl_.group_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.group_name_.IsDefault()) {
          _impl_.group_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountDetails.group_name)
}

// bool use_premium_for_margin = 35;
inline void AccountDetails::clear_use_premium_for_margin() {
  _impl_.use_premium_for_margin_ = false;
}
inline bool AccountDetails::use_premium_for_margin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.use_premium_for_margin)
  return _internal_use_premium_for_margin();
}
inline void AccountDetails::set_use_premium_for_margin(bool value) {
  _internal_set_use_premium_for_margin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.use_premium_for_margin)
}
inline bool AccountDetails::_internal_use_premium_for_margin() const {
  return _impl_.use_premium_for_margin_;
}
inline void AccountDetails::_internal_set_use_premium_for_margin(bool value) {
  ;
  _impl_.use_premium_for_margin_ = value;
}

// double warning_threshold_min_net_equity = 36;
inline void AccountDetails::clear_warning_threshold_min_net_equity() {
  _impl_.warning_threshold_min_net_equity_ = 0;
}
inline double AccountDetails::warning_threshold_min_net_equity() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountDetails.warning_threshold_min_net_equity)
  return _internal_warning_threshold_min_net_equity();
}
inline void AccountDetails::set_warning_threshold_min_net_equity(double value) {
  _internal_set_warning_threshold_min_net_equity(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountDetails.warning_threshold_min_net_equity)
}
inline double AccountDetails::_internal_warning_threshold_min_net_equity() const {
  return _impl_.warning_threshold_min_net_equity_;
}
inline void AccountDetails::_internal_set_warning_threshold_min_net_equity(double value) {
  ;
  _impl_.warning_threshold_min_net_equity_ = value;
}

// -------------------------------------------------------------------

// AccountSnapshotMessage

// .t4proto.v1.account.AccountPosition account_position = 3;
inline bool AccountSnapshotMessage::has_account_position() const {
  return payload_case() == kAccountPosition;
}
inline bool AccountSnapshotMessage::_internal_has_account_position() const {
  return payload_case() == kAccountPosition;
}
inline void AccountSnapshotMessage::set_has_account_position() {
  _impl_._oneof_case_[0] = kAccountPosition;
}
inline void AccountSnapshotMessage::clear_account_position() {
  if (payload_case() == kAccountPosition) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.account_position_;
    }
    clear_has_payload();
  }
}
inline ::t4proto::v1::account::AccountPosition* AccountSnapshotMessage::release_account_position() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountSnapshotMessage.account_position)
  if (payload_case() == kAccountPosition) {
    clear_has_payload();
    ::t4proto::v1::account::AccountPosition* temp = _impl_.payload_.account_position_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.account_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::t4proto::v1::account::AccountPosition& AccountSnapshotMessage::_internal_account_position() const {
  return payload_case() == kAccountPosition
      ? *_impl_.payload_.account_position_
      : reinterpret_cast< ::t4proto::v1::account::AccountPosition&>(::t4proto::v1::account::_AccountPosition_default_instance_);
}
inline const ::t4proto::v1::account::AccountPosition& AccountSnapshotMessage::account_position() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountSnapshotMessage.account_position)
  return _internal_account_position();
}
inline ::t4proto::v1::account::AccountPosition* AccountSnapshotMessage::unsafe_arena_release_account_position() {
  // @@protoc_insertion_point(field_unsafe_arena_release:t4proto.v1.account.AccountSnapshotMessage.account_position)
  if (payload_case() == kAccountPosition) {
    clear_has_payload();
    ::t4proto::v1::account::AccountPosition* temp = _impl_.payload_.account_position_;
    _impl_.payload_.account_position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AccountSnapshotMessage::unsafe_arena_set_allocated_account_position(::t4proto::v1::account::AccountPosition* account_position) {
  clear_payload();
  if (account_position) {
    set_has_account_position();
    _impl_.payload_.account_position_ = account_position;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountSnapshotMessage.account_position)
}
inline ::t4proto::v1::account::AccountPosition* AccountSnapshotMessage::_internal_mutable_account_position() {
  if (payload_case() != kAccountPosition) {
    clear_payload();
    set_has_account_position();
    _impl_.payload_.account_position_ = CreateMaybeMessage< ::t4proto::v1::account::AccountPosition >(GetArenaForAllocation());
  }
  return _impl_.payload_.account_position_;
}
inline ::t4proto::v1::account::AccountPosition* AccountSnapshotMessage::mutable_account_position() {
  ::t4proto::v1::account::AccountPosition* _msg = _internal_mutable_account_position();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountSnapshotMessage.account_position)
  return _msg;
}

// .t4proto.v1.account.AccountUpdate account_update = 4;
inline bool AccountSnapshotMessage::has_account_update() const {
  return payload_case() == kAccountUpdate;
}
inline bool AccountSnapshotMessage::_internal_has_account_update() const {
  return payload_case() == kAccountUpdate;
}
inline void AccountSnapshotMessage::set_has_account_update() {
  _impl_._oneof_case_[0] = kAccountUpdate;
}
inline void AccountSnapshotMessage::clear_account_update() {
  if (payload_case() == kAccountUpdate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.account_update_;
    }
    clear_has_payload();
  }
}
inline ::t4proto::v1::account::AccountUpdate* AccountSnapshotMessage::release_account_update() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountSnapshotMessage.account_update)
  if (payload_case() == kAccountUpdate) {
    clear_has_payload();
    ::t4proto::v1::account::AccountUpdate* temp = _impl_.payload_.account_update_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.account_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::t4proto::v1::account::AccountUpdate& AccountSnapshotMessage::_internal_account_update() const {
  return payload_case() == kAccountUpdate
      ? *_impl_.payload_.account_update_
      : reinterpret_cast< ::t4proto::v1::account::AccountUpdate&>(::t4proto::v1::account::_AccountUpdate_default_instance_);
}
inline const ::t4proto::v1::account::AccountUpdate& AccountSnapshotMessage::account_update() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountSnapshotMessage.account_update)
  return _internal_account_update();
}
inline ::t4proto::v1::account::AccountUpdate* AccountSnapshotMessage::unsafe_arena_release_account_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:t4proto.v1.account.AccountSnapshotMessage.account_update)
  if (payload_case() == kAccountUpdate) {
    clear_has_payload();
    ::t4proto::v1::account::AccountUpdate* temp = _impl_.payload_.account_update_;
    _impl_.payload_.account_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AccountSnapshotMessage::unsafe_arena_set_allocated_account_update(::t4proto::v1::account::AccountUpdate* account_update) {
  clear_payload();
  if (account_update) {
    set_has_account_update();
    _impl_.payload_.account_update_ = account_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountSnapshotMessage.account_update)
}
inline ::t4proto::v1::account::AccountUpdate* AccountSnapshotMessage::_internal_mutable_account_update() {
  if (payload_case() != kAccountUpdate) {
    clear_payload();
    set_has_account_update();
    _impl_.payload_.account_update_ = CreateMaybeMessage< ::t4proto::v1::account::AccountUpdate >(GetArenaForAllocation());
  }
  return _impl_.payload_.account_update_;
}
inline ::t4proto::v1::account::AccountUpdate* AccountSnapshotMessage::mutable_account_update() {
  ::t4proto::v1::account::AccountUpdate* _msg = _internal_mutable_account_update();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountSnapshotMessage.account_update)
  return _msg;
}

// .t4proto.v1.account.AccountDetails account_details = 5;
inline bool AccountSnapshotMessage::has_account_details() const {
  return payload_case() == kAccountDetails;
}
inline bool AccountSnapshotMessage::_internal_has_account_details() const {
  return payload_case() == kAccountDetails;
}
inline void AccountSnapshotMessage::set_has_account_details() {
  _impl_._oneof_case_[0] = kAccountDetails;
}
inline void AccountSnapshotMessage::clear_account_details() {
  if (payload_case() == kAccountDetails) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.account_details_;
    }
    clear_has_payload();
  }
}
inline ::t4proto::v1::account::AccountDetails* AccountSnapshotMessage::release_account_details() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountSnapshotMessage.account_details)
  if (payload_case() == kAccountDetails) {
    clear_has_payload();
    ::t4proto::v1::account::AccountDetails* temp = _impl_.payload_.account_details_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.account_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::t4proto::v1::account::AccountDetails& AccountSnapshotMessage::_internal_account_details() const {
  return payload_case() == kAccountDetails
      ? *_impl_.payload_.account_details_
      : reinterpret_cast< ::t4proto::v1::account::AccountDetails&>(::t4proto::v1::account::_AccountDetails_default_instance_);
}
inline const ::t4proto::v1::account::AccountDetails& AccountSnapshotMessage::account_details() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountSnapshotMessage.account_details)
  return _internal_account_details();
}
inline ::t4proto::v1::account::AccountDetails* AccountSnapshotMessage::unsafe_arena_release_account_details() {
  // @@protoc_insertion_point(field_unsafe_arena_release:t4proto.v1.account.AccountSnapshotMessage.account_details)
  if (payload_case() == kAccountDetails) {
    clear_has_payload();
    ::t4proto::v1::account::AccountDetails* temp = _impl_.payload_.account_details_;
    _impl_.payload_.account_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AccountSnapshotMessage::unsafe_arena_set_allocated_account_details(::t4proto::v1::account::AccountDetails* account_details) {
  clear_payload();
  if (account_details) {
    set_has_account_details();
    _impl_.payload_.account_details_ = account_details;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountSnapshotMessage.account_details)
}
inline ::t4proto::v1::account::AccountDetails* AccountSnapshotMessage::_internal_mutable_account_details() {
  if (payload_case() != kAccountDetails) {
    clear_payload();
    set_has_account_details();
    _impl_.payload_.account_details_ = CreateMaybeMessage< ::t4proto::v1::account::AccountDetails >(GetArenaForAllocation());
  }
  return _impl_.payload_.account_details_;
}
inline ::t4proto::v1::account::AccountDetails* AccountSnapshotMessage::mutable_account_details() {
  ::t4proto::v1::account::AccountDetails* _msg = _internal_mutable_account_details();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountSnapshotMessage.account_details)
  return _msg;
}

// .t4proto.v1.account.AccountCurrency account_currency = 6;
inline bool AccountSnapshotMessage::has_account_currency() const {
  return payload_case() == kAccountCurrency;
}
inline bool AccountSnapshotMessage::_internal_has_account_currency() const {
  return payload_case() == kAccountCurrency;
}
inline void AccountSnapshotMessage::set_has_account_currency() {
  _impl_._oneof_case_[0] = kAccountCurrency;
}
inline void AccountSnapshotMessage::clear_account_currency() {
  if (payload_case() == kAccountCurrency) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.account_currency_;
    }
    clear_has_payload();
  }
}
inline ::t4proto::v1::account::AccountCurrency* AccountSnapshotMessage::release_account_currency() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountSnapshotMessage.account_currency)
  if (payload_case() == kAccountCurrency) {
    clear_has_payload();
    ::t4proto::v1::account::AccountCurrency* temp = _impl_.payload_.account_currency_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.account_currency_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::t4proto::v1::account::AccountCurrency& AccountSnapshotMessage::_internal_account_currency() const {
  return payload_case() == kAccountCurrency
      ? *_impl_.payload_.account_currency_
      : reinterpret_cast< ::t4proto::v1::account::AccountCurrency&>(::t4proto::v1::account::_AccountCurrency_default_instance_);
}
inline const ::t4proto::v1::account::AccountCurrency& AccountSnapshotMessage::account_currency() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountSnapshotMessage.account_currency)
  return _internal_account_currency();
}
inline ::t4proto::v1::account::AccountCurrency* AccountSnapshotMessage::unsafe_arena_release_account_currency() {
  // @@protoc_insertion_point(field_unsafe_arena_release:t4proto.v1.account.AccountSnapshotMessage.account_currency)
  if (payload_case() == kAccountCurrency) {
    clear_has_payload();
    ::t4proto::v1::account::AccountCurrency* temp = _impl_.payload_.account_currency_;
    _impl_.payload_.account_currency_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AccountSnapshotMessage::unsafe_arena_set_allocated_account_currency(::t4proto::v1::account::AccountCurrency* account_currency) {
  clear_payload();
  if (account_currency) {
    set_has_account_currency();
    _impl_.payload_.account_currency_ = account_currency;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountSnapshotMessage.account_currency)
}
inline ::t4proto::v1::account::AccountCurrency* AccountSnapshotMessage::_internal_mutable_account_currency() {
  if (payload_case() != kAccountCurrency) {
    clear_payload();
    set_has_account_currency();
    _impl_.payload_.account_currency_ = CreateMaybeMessage< ::t4proto::v1::account::AccountCurrency >(GetArenaForAllocation());
  }
  return _impl_.payload_.account_currency_;
}
inline ::t4proto::v1::account::AccountCurrency* AccountSnapshotMessage::mutable_account_currency() {
  ::t4proto::v1::account::AccountCurrency* _msg = _internal_mutable_account_currency();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountSnapshotMessage.account_currency)
  return _msg;
}

// .t4proto.v1.market.MarketDetails market_details = 7;
inline bool AccountSnapshotMessage::has_market_details() const {
  return payload_case() == kMarketDetails;
}
inline bool AccountSnapshotMessage::_internal_has_market_details() const {
  return payload_case() == kMarketDetails;
}
inline void AccountSnapshotMessage::set_has_market_details() {
  _impl_._oneof_case_[0] = kMarketDetails;
}
inline ::t4proto::v1::market::MarketDetails* AccountSnapshotMessage::release_market_details() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountSnapshotMessage.market_details)
  if (payload_case() == kMarketDetails) {
    clear_has_payload();
    ::t4proto::v1::market::MarketDetails* temp = _impl_.payload_.market_details_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.market_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::t4proto::v1::market::MarketDetails& AccountSnapshotMessage::_internal_market_details() const {
  return payload_case() == kMarketDetails
      ? *_impl_.payload_.market_details_
      : reinterpret_cast< ::t4proto::v1::market::MarketDetails&>(::t4proto::v1::market::_MarketDetails_default_instance_);
}
inline const ::t4proto::v1::market::MarketDetails& AccountSnapshotMessage::market_details() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountSnapshotMessage.market_details)
  return _internal_market_details();
}
inline ::t4proto::v1::market::MarketDetails* AccountSnapshotMessage::unsafe_arena_release_market_details() {
  // @@protoc_insertion_point(field_unsafe_arena_release:t4proto.v1.account.AccountSnapshotMessage.market_details)
  if (payload_case() == kMarketDetails) {
    clear_has_payload();
    ::t4proto::v1::market::MarketDetails* temp = _impl_.payload_.market_details_;
    _impl_.payload_.market_details_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AccountSnapshotMessage::unsafe_arena_set_allocated_market_details(::t4proto::v1::market::MarketDetails* market_details) {
  clear_payload();
  if (market_details) {
    set_has_market_details();
    _impl_.payload_.market_details_ = market_details;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountSnapshotMessage.market_details)
}
inline ::t4proto::v1::market::MarketDetails* AccountSnapshotMessage::_internal_mutable_market_details() {
  if (payload_case() != kMarketDetails) {
    clear_payload();
    set_has_market_details();
    _impl_.payload_.market_details_ = CreateMaybeMessage< ::t4proto::v1::market::MarketDetails >(GetArenaForAllocation());
  }
  return _impl_.payload_.market_details_;
}
inline ::t4proto::v1::market::MarketDetails* AccountSnapshotMessage::mutable_market_details() {
  ::t4proto::v1::market::MarketDetails* _msg = _internal_mutable_market_details();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountSnapshotMessage.market_details)
  return _msg;
}

// .t4proto.v1.orderrouting.OrderUpdateMulti order_update_multi = 8;
inline bool AccountSnapshotMessage::has_order_update_multi() const {
  return payload_case() == kOrderUpdateMulti;
}
inline bool AccountSnapshotMessage::_internal_has_order_update_multi() const {
  return payload_case() == kOrderUpdateMulti;
}
inline void AccountSnapshotMessage::set_has_order_update_multi() {
  _impl_._oneof_case_[0] = kOrderUpdateMulti;
}
inline ::t4proto::v1::orderrouting::OrderUpdateMulti* AccountSnapshotMessage::release_order_update_multi() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountSnapshotMessage.order_update_multi)
  if (payload_case() == kOrderUpdateMulti) {
    clear_has_payload();
    ::t4proto::v1::orderrouting::OrderUpdateMulti* temp = _impl_.payload_.order_update_multi_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.order_update_multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::t4proto::v1::orderrouting::OrderUpdateMulti& AccountSnapshotMessage::_internal_order_update_multi() const {
  return payload_case() == kOrderUpdateMulti
      ? *_impl_.payload_.order_update_multi_
      : reinterpret_cast< ::t4proto::v1::orderrouting::OrderUpdateMulti&>(::t4proto::v1::orderrouting::_OrderUpdateMulti_default_instance_);
}
inline const ::t4proto::v1::orderrouting::OrderUpdateMulti& AccountSnapshotMessage::order_update_multi() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountSnapshotMessage.order_update_multi)
  return _internal_order_update_multi();
}
inline ::t4proto::v1::orderrouting::OrderUpdateMulti* AccountSnapshotMessage::unsafe_arena_release_order_update_multi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:t4proto.v1.account.AccountSnapshotMessage.order_update_multi)
  if (payload_case() == kOrderUpdateMulti) {
    clear_has_payload();
    ::t4proto::v1::orderrouting::OrderUpdateMulti* temp = _impl_.payload_.order_update_multi_;
    _impl_.payload_.order_update_multi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AccountSnapshotMessage::unsafe_arena_set_allocated_order_update_multi(::t4proto::v1::orderrouting::OrderUpdateMulti* order_update_multi) {
  clear_payload();
  if (order_update_multi) {
    set_has_order_update_multi();
    _impl_.payload_.order_update_multi_ = order_update_multi;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountSnapshotMessage.order_update_multi)
}
inline ::t4proto::v1::orderrouting::OrderUpdateMulti* AccountSnapshotMessage::_internal_mutable_order_update_multi() {
  if (payload_case() != kOrderUpdateMulti) {
    clear_payload();
    set_has_order_update_multi();
    _impl_.payload_.order_update_multi_ = CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderUpdateMulti >(GetArenaForAllocation());
  }
  return _impl_.payload_.order_update_multi_;
}
inline ::t4proto::v1::orderrouting::OrderUpdateMulti* AccountSnapshotMessage::mutable_order_update_multi() {
  ::t4proto::v1::orderrouting::OrderUpdateMulti* _msg = _internal_mutable_order_update_multi();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountSnapshotMessage.order_update_multi)
  return _msg;
}

inline bool AccountSnapshotMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void AccountSnapshotMessage::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline AccountSnapshotMessage::PayloadCase AccountSnapshotMessage::payload_case() const {
  return AccountSnapshotMessage::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// AccountSnapshot

// string account_id = 1;
inline void AccountSnapshot::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& AccountSnapshot::account_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountSnapshot.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountSnapshot::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountSnapshot.account_id)
}
inline std::string* AccountSnapshot::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountSnapshot.account_id)
  return _s;
}
inline const std::string& AccountSnapshot::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void AccountSnapshot::_internal_set_account_id(const std::string& value) {
  ;


  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountSnapshot::_internal_mutable_account_id() {
  ;
  return _impl_.account_id_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountSnapshot::release_account_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountSnapshot.account_id)
  return _impl_.account_id_.Release();
}
inline void AccountSnapshot::set_allocated_account_id(std::string* value) {
  _impl_.account_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountSnapshot.account_id)
}

// int64 last_update_requested = 2;
inline void AccountSnapshot::clear_last_update_requested() {
  _impl_.last_update_requested_ = ::int64_t{0};
}
inline ::int64_t AccountSnapshot::last_update_requested() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountSnapshot.last_update_requested)
  return _internal_last_update_requested();
}
inline void AccountSnapshot::set_last_update_requested(::int64_t value) {
  _internal_set_last_update_requested(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountSnapshot.last_update_requested)
}
inline ::int64_t AccountSnapshot::_internal_last_update_requested() const {
  return _impl_.last_update_requested_;
}
inline void AccountSnapshot::_internal_set_last_update_requested(::int64_t value) {
  ;
  _impl_.last_update_requested_ = value;
}

// int64 last_update_supplied = 3;
inline void AccountSnapshot::clear_last_update_supplied() {
  _impl_.last_update_supplied_ = ::int64_t{0};
}
inline ::int64_t AccountSnapshot::last_update_supplied() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountSnapshot.last_update_supplied)
  return _internal_last_update_supplied();
}
inline void AccountSnapshot::set_last_update_supplied(::int64_t value) {
  _internal_set_last_update_supplied(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountSnapshot.last_update_supplied)
}
inline ::int64_t AccountSnapshot::_internal_last_update_supplied() const {
  return _impl_.last_update_supplied_;
}
inline void AccountSnapshot::_internal_set_last_update_supplied(::int64_t value) {
  ;
  _impl_.last_update_supplied_ = value;
}

// .t4proto.v1.common.AccountStatus status = 4;
inline void AccountSnapshot::clear_status() {
  _impl_.status_ = 0;
}
inline ::t4proto::v1::common::AccountStatus AccountSnapshot::status() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountSnapshot.status)
  return _internal_status();
}
inline void AccountSnapshot::set_status(::t4proto::v1::common::AccountStatus value) {
   _internal_set_status(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountSnapshot.status)
}
inline ::t4proto::v1::common::AccountStatus AccountSnapshot::_internal_status() const {
  return static_cast<::t4proto::v1::common::AccountStatus>(_impl_.status_);
}
inline void AccountSnapshot::_internal_set_status(::t4proto::v1::common::AccountStatus value) {
  ;
  _impl_.status_ = value;
}

// bool due_to_connection = 5;
inline void AccountSnapshot::clear_due_to_connection() {
  _impl_.due_to_connection_ = false;
}
inline bool AccountSnapshot::due_to_connection() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountSnapshot.due_to_connection)
  return _internal_due_to_connection();
}
inline void AccountSnapshot::set_due_to_connection(bool value) {
  _internal_set_due_to_connection(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountSnapshot.due_to_connection)
}
inline bool AccountSnapshot::_internal_due_to_connection() const {
  return _impl_.due_to_connection_;
}
inline void AccountSnapshot::_internal_set_due_to_connection(bool value) {
  ;
  _impl_.due_to_connection_ = value;
}

// repeated .t4proto.v1.account.AccountSnapshotMessage messages = 6;
inline int AccountSnapshot::_internal_messages_size() const {
  return _impl_.messages_.size();
}
inline int AccountSnapshot::messages_size() const {
  return _internal_messages_size();
}
inline void AccountSnapshot::clear_messages() {
  _impl_.messages_.Clear();
}
inline ::t4proto::v1::account::AccountSnapshotMessage* AccountSnapshot::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountSnapshot.messages)
  return _impl_.messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::account::AccountSnapshotMessage >*
AccountSnapshot::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.account.AccountSnapshot.messages)
  return &_impl_.messages_;
}
inline const ::t4proto::v1::account::AccountSnapshotMessage& AccountSnapshot::_internal_messages(int index) const {
  return _impl_.messages_.Get(index);
}
inline const ::t4proto::v1::account::AccountSnapshotMessage& AccountSnapshot::messages(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountSnapshot.messages)
  return _internal_messages(index);
}
inline ::t4proto::v1::account::AccountSnapshotMessage* AccountSnapshot::_internal_add_messages() {
  return _impl_.messages_.Add();
}
inline ::t4proto::v1::account::AccountSnapshotMessage* AccountSnapshot::add_messages() {
  ::t4proto::v1::account::AccountSnapshotMessage* _add = _internal_add_messages();
  // @@protoc_insertion_point(field_add:t4proto.v1.account.AccountSnapshot.messages)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::account::AccountSnapshotMessage >&
AccountSnapshot::messages() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.account.AccountSnapshot.messages)
  return _impl_.messages_;
}

// -------------------------------------------------------------------

// AccountProfit

// string account_id = 1;
inline void AccountProfit::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& AccountProfit::account_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountProfit.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountProfit::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountProfit.account_id)
}
inline std::string* AccountProfit::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountProfit.account_id)
  return _s;
}
inline const std::string& AccountProfit::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void AccountProfit::_internal_set_account_id(const std::string& value) {
  ;


  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountProfit::_internal_mutable_account_id() {
  ;
  return _impl_.account_id_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountProfit::release_account_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountProfit.account_id)
  return _impl_.account_id_.Release();
}
inline void AccountProfit::set_allocated_account_id(std::string* value) {
  _impl_.account_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountProfit.account_id)
}

// .google.protobuf.Timestamp update_time = 2;
inline bool AccountProfit::_internal_has_update_time() const {
  return this != internal_default_instance() && _impl_.update_time_ != nullptr;
}
inline bool AccountProfit::has_update_time() const {
  return _internal_has_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AccountProfit::_internal_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AccountProfit::update_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountProfit.update_time)
  return _internal_update_time();
}
inline void AccountProfit::unsafe_arena_set_allocated_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountProfit.update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountProfit::release_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountProfit::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountProfit.update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountProfit::_internal_mutable_update_time() {
  
  if (_impl_.update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.update_time_ = p;
  }
  return _impl_.update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountProfit::mutable_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountProfit.update_time)
  return _msg;
}
inline void AccountProfit::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }

  } else {

  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountProfit.update_time)
}

// optional double upl = 3;
inline bool AccountProfit::has_upl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AccountProfit::clear_upl() {
  _impl_.upl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double AccountProfit::upl() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountProfit.upl)
  return _internal_upl();
}
inline void AccountProfit::set_upl(double value) {
  _internal_set_upl(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountProfit.upl)
}
inline double AccountProfit::_internal_upl() const {
  return _impl_.upl_;
}
inline void AccountProfit::_internal_set_upl(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.upl_ = value;
}

// optional double upl_trade = 4;
inline bool AccountProfit::has_upl_trade() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AccountProfit::clear_upl_trade() {
  _impl_.upl_trade_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double AccountProfit::upl_trade() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountProfit.upl_trade)
  return _internal_upl_trade();
}
inline void AccountProfit::set_upl_trade(double value) {
  _internal_set_upl_trade(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountProfit.upl_trade)
}
inline double AccountProfit::_internal_upl_trade() const {
  return _impl_.upl_trade_;
}
inline void AccountProfit::_internal_set_upl_trade(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.upl_trade_ = value;
}

// optional double rpl = 5;
inline bool AccountProfit::has_rpl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AccountProfit::clear_rpl() {
  _impl_.rpl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double AccountProfit::rpl() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountProfit.rpl)
  return _internal_rpl();
}
inline void AccountProfit::set_rpl(double value) {
  _internal_set_rpl(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountProfit.rpl)
}
inline double AccountProfit::_internal_rpl() const {
  return _impl_.rpl_;
}
inline void AccountProfit::_internal_set_rpl(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.rpl_ = value;
}

// optional double day_upl = 6;
inline bool AccountProfit::has_day_upl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void AccountProfit::clear_day_upl() {
  _impl_.day_upl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double AccountProfit::day_upl() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountProfit.day_upl)
  return _internal_day_upl();
}
inline void AccountProfit::set_day_upl(double value) {
  _internal_set_day_upl(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountProfit.day_upl)
}
inline double AccountProfit::_internal_day_upl() const {
  return _impl_.day_upl_;
}
inline void AccountProfit::_internal_set_day_upl(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.day_upl_ = value;
}

// optional double day_upl_trade = 7;
inline bool AccountProfit::has_day_upl_trade() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void AccountProfit::clear_day_upl_trade() {
  _impl_.day_upl_trade_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double AccountProfit::day_upl_trade() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountProfit.day_upl_trade)
  return _internal_day_upl_trade();
}
inline void AccountProfit::set_day_upl_trade(double value) {
  _internal_set_day_upl_trade(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountProfit.day_upl_trade)
}
inline double AccountProfit::_internal_day_upl_trade() const {
  return _impl_.day_upl_trade_;
}
inline void AccountProfit::_internal_set_day_upl_trade(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.day_upl_trade_ = value;
}

// optional double day_rpl = 8;
inline bool AccountProfit::has_day_rpl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void AccountProfit::clear_day_rpl() {
  _impl_.day_rpl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double AccountProfit::day_rpl() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountProfit.day_rpl)
  return _internal_day_rpl();
}
inline void AccountProfit::set_day_rpl(double value) {
  _internal_set_day_rpl(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountProfit.day_rpl)
}
inline double AccountProfit::_internal_day_rpl() const {
  return _impl_.day_rpl_;
}
inline void AccountProfit::_internal_set_day_rpl(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.day_rpl_ = value;
}

// optional int32 warning_pl = 9;
inline bool AccountProfit::has_warning_pl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void AccountProfit::clear_warning_pl() {
  _impl_.warning_pl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t AccountProfit::warning_pl() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountProfit.warning_pl)
  return _internal_warning_pl();
}
inline void AccountProfit::set_warning_pl(::int32_t value) {
  _internal_set_warning_pl(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountProfit.warning_pl)
}
inline ::int32_t AccountProfit::_internal_warning_pl() const {
  return _impl_.warning_pl_;
}
inline void AccountProfit::_internal_set_warning_pl(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.warning_pl_ = value;
}

// optional int32 warning_loss_limit = 10;
inline bool AccountProfit::has_warning_loss_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void AccountProfit::clear_warning_loss_limit() {
  _impl_.warning_loss_limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t AccountProfit::warning_loss_limit() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountProfit.warning_loss_limit)
  return _internal_warning_loss_limit();
}
inline void AccountProfit::set_warning_loss_limit(::int32_t value) {
  _internal_set_warning_loss_limit(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountProfit.warning_loss_limit)
}
inline ::int32_t AccountProfit::_internal_warning_loss_limit() const {
  return _impl_.warning_loss_limit_;
}
inline void AccountProfit::_internal_set_warning_loss_limit(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.warning_loss_limit_ = value;
}

// optional int32 warning_margin = 11;
inline bool AccountProfit::has_warning_margin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void AccountProfit::clear_warning_margin() {
  _impl_.warning_margin_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t AccountProfit::warning_margin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountProfit.warning_margin)
  return _internal_warning_margin();
}
inline void AccountProfit::set_warning_margin(::int32_t value) {
  _internal_set_warning_margin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountProfit.warning_margin)
}
inline ::int32_t AccountProfit::_internal_warning_margin() const {
  return _impl_.warning_margin_;
}
inline void AccountProfit::_internal_set_warning_margin(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.warning_margin_ = value;
}

// optional int32 total_working_orders = 12;
inline bool AccountProfit::has_total_working_orders() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void AccountProfit::clear_total_working_orders() {
  _impl_.total_working_orders_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t AccountProfit::total_working_orders() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountProfit.total_working_orders)
  return _internal_total_working_orders();
}
inline void AccountProfit::set_total_working_orders(::int32_t value) {
  _internal_set_total_working_orders(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountProfit.total_working_orders)
}
inline ::int32_t AccountProfit::_internal_total_working_orders() const {
  return _impl_.total_working_orders_;
}
inline void AccountProfit::_internal_set_total_working_orders(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.total_working_orders_ = value;
}

// optional int32 total_working_volume = 13;
inline bool AccountProfit::has_total_working_volume() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void AccountProfit::clear_total_working_volume() {
  _impl_.total_working_volume_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t AccountProfit::total_working_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountProfit.total_working_volume)
  return _internal_total_working_volume();
}
inline void AccountProfit::set_total_working_volume(::int32_t value) {
  _internal_set_total_working_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountProfit.total_working_volume)
}
inline ::int32_t AccountProfit::_internal_total_working_volume() const {
  return _impl_.total_working_volume_;
}
inline void AccountProfit::_internal_set_total_working_volume(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.total_working_volume_ = value;
}

// optional bool is_alerting_live_margin = 14;
inline bool AccountProfit::has_is_alerting_live_margin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void AccountProfit::clear_is_alerting_live_margin() {
  _impl_.is_alerting_live_margin_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool AccountProfit::is_alerting_live_margin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountProfit.is_alerting_live_margin)
  return _internal_is_alerting_live_margin();
}
inline void AccountProfit::set_is_alerting_live_margin(bool value) {
  _internal_set_is_alerting_live_margin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountProfit.is_alerting_live_margin)
}
inline bool AccountProfit::_internal_is_alerting_live_margin() const {
  return _impl_.is_alerting_live_margin_;
}
inline void AccountProfit::_internal_set_is_alerting_live_margin(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.is_alerting_live_margin_ = value;
}

// optional bool is_alerting_full_margin = 15;
inline bool AccountProfit::has_is_alerting_full_margin() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void AccountProfit::clear_is_alerting_full_margin() {
  _impl_.is_alerting_full_margin_ = false;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline bool AccountProfit::is_alerting_full_margin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountProfit.is_alerting_full_margin)
  return _internal_is_alerting_full_margin();
}
inline void AccountProfit::set_is_alerting_full_margin(bool value) {
  _internal_set_is_alerting_full_margin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountProfit.is_alerting_full_margin)
}
inline bool AccountProfit::_internal_is_alerting_full_margin() const {
  return _impl_.is_alerting_full_margin_;
}
inline void AccountProfit::_internal_set_is_alerting_full_margin(bool value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.is_alerting_full_margin_ = value;
}

// -------------------------------------------------------------------

// AccountPositionProfit

// string account_id = 1;
inline void AccountPositionProfit::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& AccountPositionProfit::account_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountPositionProfit::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.account_id)
}
inline std::string* AccountPositionProfit::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountPositionProfit.account_id)
  return _s;
}
inline const std::string& AccountPositionProfit::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void AccountPositionProfit::_internal_set_account_id(const std::string& value) {
  ;


  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountPositionProfit::_internal_mutable_account_id() {
  ;
  return _impl_.account_id_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountPositionProfit::release_account_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountPositionProfit.account_id)
  return _impl_.account_id_.Release();
}
inline void AccountPositionProfit::set_allocated_account_id(std::string* value) {
  _impl_.account_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountPositionProfit.account_id)
}

// string exchange_id = 2;
inline void AccountPositionProfit::clear_exchange_id() {
  _impl_.exchange_id_.ClearToEmpty();
}
inline const std::string& AccountPositionProfit::exchange_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.exchange_id)
  return _internal_exchange_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountPositionProfit::set_exchange_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.exchange_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.exchange_id)
}
inline std::string* AccountPositionProfit::mutable_exchange_id() {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountPositionProfit.exchange_id)
  return _s;
}
inline const std::string& AccountPositionProfit::_internal_exchange_id() const {
  return _impl_.exchange_id_.Get();
}
inline void AccountPositionProfit::_internal_set_exchange_id(const std::string& value) {
  ;


  _impl_.exchange_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountPositionProfit::_internal_mutable_exchange_id() {
  ;
  return _impl_.exchange_id_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountPositionProfit::release_exchange_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountPositionProfit.exchange_id)
  return _impl_.exchange_id_.Release();
}
inline void AccountPositionProfit::set_allocated_exchange_id(std::string* value) {
  _impl_.exchange_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_id_.IsDefault()) {
          _impl_.exchange_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountPositionProfit.exchange_id)
}

// string contract_id = 3;
inline void AccountPositionProfit::clear_contract_id() {
  _impl_.contract_id_.ClearToEmpty();
}
inline const std::string& AccountPositionProfit::contract_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.contract_id)
  return _internal_contract_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountPositionProfit::set_contract_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.contract_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.contract_id)
}
inline std::string* AccountPositionProfit::mutable_contract_id() {
  std::string* _s = _internal_mutable_contract_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountPositionProfit.contract_id)
  return _s;
}
inline const std::string& AccountPositionProfit::_internal_contract_id() const {
  return _impl_.contract_id_.Get();
}
inline void AccountPositionProfit::_internal_set_contract_id(const std::string& value) {
  ;


  _impl_.contract_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountPositionProfit::_internal_mutable_contract_id() {
  ;
  return _impl_.contract_id_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountPositionProfit::release_contract_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountPositionProfit.contract_id)
  return _impl_.contract_id_.Release();
}
inline void AccountPositionProfit::set_allocated_contract_id(std::string* value) {
  _impl_.contract_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contract_id_.IsDefault()) {
          _impl_.contract_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountPositionProfit.contract_id)
}

// string market_id = 4;
inline void AccountPositionProfit::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& AccountPositionProfit::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AccountPositionProfit::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.market_id)
}
inline std::string* AccountPositionProfit::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountPositionProfit.market_id)
  return _s;
}
inline const std::string& AccountPositionProfit::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void AccountPositionProfit::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AccountPositionProfit::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* AccountPositionProfit::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountPositionProfit.market_id)
  return _impl_.market_id_.Release();
}
inline void AccountPositionProfit::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountPositionProfit.market_id)
}

// bool delayed = 5;
inline void AccountPositionProfit::clear_delayed() {
  _impl_.delayed_ = false;
}
inline bool AccountPositionProfit::delayed() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.delayed)
  return _internal_delayed();
}
inline void AccountPositionProfit::set_delayed(bool value) {
  _internal_set_delayed(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.delayed)
}
inline bool AccountPositionProfit::_internal_delayed() const {
  return _impl_.delayed_;
}
inline void AccountPositionProfit::_internal_set_delayed(bool value) {
  ;
  _impl_.delayed_ = value;
}

// .google.protobuf.Timestamp update_time = 6;
inline bool AccountPositionProfit::_internal_has_update_time() const {
  return this != internal_default_instance() && _impl_.update_time_ != nullptr;
}
inline bool AccountPositionProfit::has_update_time() const {
  return _internal_has_update_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AccountPositionProfit::_internal_update_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.update_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AccountPositionProfit::update_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.update_time)
  return _internal_update_time();
}
inline void AccountPositionProfit::unsafe_arena_set_allocated_update_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.account.AccountPositionProfit.update_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountPositionProfit::release_update_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountPositionProfit::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.account.AccountPositionProfit.update_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.update_time_;
  _impl_.update_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountPositionProfit::_internal_mutable_update_time() {
  
  if (_impl_.update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.update_time_ = p;
  }
  return _impl_.update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AccountPositionProfit::mutable_update_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_update_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.account.AccountPositionProfit.update_time)
  return _msg;
}
inline void AccountPositionProfit::set_allocated_update_time(::PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time));
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }

  } else {

  }
  _impl_.update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountPositionProfit.update_time)
}

// bool is_options = 7;
inline void AccountPositionProfit::clear_is_options() {
  _impl_.is_options_ = false;
}
inline bool AccountPositionProfit::is_options() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.is_options)
  return _internal_is_options();
}
inline void AccountPositionProfit::set_is_options(bool value) {
  _internal_set_is_options(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.is_options)
}
inline bool AccountPositionProfit::_internal_is_options() const {
  return _impl_.is_options_;
}
inline void AccountPositionProfit::_internal_set_is_options(bool value) {
  ;
  _impl_.is_options_ = value;
}

// bool has_data = 8;
inline void AccountPositionProfit::clear_has_data() {
  _impl_.has_data_ = false;
}
inline bool AccountPositionProfit::has_data() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.has_data)
  return _internal_has_data();
}
inline void AccountPositionProfit::set_has_data(bool value) {
  _internal_set_has_data(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.has_data)
}
inline bool AccountPositionProfit::_internal_has_data() const {
  return _impl_.has_data_;
}
inline void AccountPositionProfit::_internal_set_has_data(bool value) {
  ;
  _impl_.has_data_ = value;
}

// bool is_implied = 9;
inline void AccountPositionProfit::clear_is_implied() {
  _impl_.is_implied_ = false;
}
inline bool AccountPositionProfit::is_implied() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.is_implied)
  return _internal_is_implied();
}
inline void AccountPositionProfit::set_is_implied(bool value) {
  _internal_set_is_implied(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.is_implied)
}
inline bool AccountPositionProfit::_internal_is_implied() const {
  return _impl_.is_implied_;
}
inline void AccountPositionProfit::_internal_set_is_implied(bool value) {
  ;
  _impl_.is_implied_ = value;
}

// optional double net = 10;
inline bool AccountPositionProfit::has_net() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AccountPositionProfit::clear_net() {
  _impl_.net_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline double AccountPositionProfit::net() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.net)
  return _internal_net();
}
inline void AccountPositionProfit::set_net(double value) {
  _internal_set_net(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.net)
}
inline double AccountPositionProfit::_internal_net() const {
  return _impl_.net_;
}
inline void AccountPositionProfit::_internal_set_net(double value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.net_ = value;
}

// optional double upl = 11;
inline bool AccountPositionProfit::has_upl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AccountPositionProfit::clear_upl() {
  _impl_.upl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline double AccountPositionProfit::upl() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.upl)
  return _internal_upl();
}
inline void AccountPositionProfit::set_upl(double value) {
  _internal_set_upl(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.upl)
}
inline double AccountPositionProfit::_internal_upl() const {
  return _impl_.upl_;
}
inline void AccountPositionProfit::_internal_set_upl(double value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.upl_ = value;
}

// optional double upl_trade = 12;
inline bool AccountPositionProfit::has_upl_trade() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AccountPositionProfit::clear_upl_trade() {
  _impl_.upl_trade_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline double AccountPositionProfit::upl_trade() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.upl_trade)
  return _internal_upl_trade();
}
inline void AccountPositionProfit::set_upl_trade(double value) {
  _internal_set_upl_trade(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.upl_trade)
}
inline double AccountPositionProfit::_internal_upl_trade() const {
  return _impl_.upl_trade_;
}
inline void AccountPositionProfit::_internal_set_upl_trade(double value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.upl_trade_ = value;
}

// optional double rpl = 13;
inline bool AccountPositionProfit::has_rpl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void AccountPositionProfit::clear_rpl() {
  _impl_.rpl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline double AccountPositionProfit::rpl() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.rpl)
  return _internal_rpl();
}
inline void AccountPositionProfit::set_rpl(double value) {
  _internal_set_rpl(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.rpl)
}
inline double AccountPositionProfit::_internal_rpl() const {
  return _impl_.rpl_;
}
inline void AccountPositionProfit::_internal_set_rpl(double value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.rpl_ = value;
}

// optional double upl_usd = 14;
inline bool AccountPositionProfit::has_upl_usd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void AccountPositionProfit::clear_upl_usd() {
  _impl_.upl_usd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline double AccountPositionProfit::upl_usd() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.upl_usd)
  return _internal_upl_usd();
}
inline void AccountPositionProfit::set_upl_usd(double value) {
  _internal_set_upl_usd(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.upl_usd)
}
inline double AccountPositionProfit::_internal_upl_usd() const {
  return _impl_.upl_usd_;
}
inline void AccountPositionProfit::_internal_set_upl_usd(double value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.upl_usd_ = value;
}

// optional double upl_trade_usd = 15;
inline bool AccountPositionProfit::has_upl_trade_usd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void AccountPositionProfit::clear_upl_trade_usd() {
  _impl_.upl_trade_usd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline double AccountPositionProfit::upl_trade_usd() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.upl_trade_usd)
  return _internal_upl_trade_usd();
}
inline void AccountPositionProfit::set_upl_trade_usd(double value) {
  _internal_set_upl_trade_usd(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.upl_trade_usd)
}
inline double AccountPositionProfit::_internal_upl_trade_usd() const {
  return _impl_.upl_trade_usd_;
}
inline void AccountPositionProfit::_internal_set_upl_trade_usd(double value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.upl_trade_usd_ = value;
}

// optional double rpl_usd = 16;
inline bool AccountPositionProfit::has_rpl_usd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void AccountPositionProfit::clear_rpl_usd() {
  _impl_.rpl_usd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline double AccountPositionProfit::rpl_usd() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.rpl_usd)
  return _internal_rpl_usd();
}
inline void AccountPositionProfit::set_rpl_usd(double value) {
  _internal_set_rpl_usd(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.rpl_usd)
}
inline double AccountPositionProfit::_internal_rpl_usd() const {
  return _impl_.rpl_usd_;
}
inline void AccountPositionProfit::_internal_set_rpl_usd(double value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.rpl_usd_ = value;
}

// optional double day_net = 17;
inline bool AccountPositionProfit::has_day_net() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void AccountPositionProfit::clear_day_net() {
  _impl_.day_net_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline double AccountPositionProfit::day_net() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.day_net)
  return _internal_day_net();
}
inline void AccountPositionProfit::set_day_net(double value) {
  _internal_set_day_net(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.day_net)
}
inline double AccountPositionProfit::_internal_day_net() const {
  return _impl_.day_net_;
}
inline void AccountPositionProfit::_internal_set_day_net(double value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.day_net_ = value;
}

// optional double day_rpl = 18;
inline bool AccountPositionProfit::has_day_rpl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void AccountPositionProfit::clear_day_rpl() {
  _impl_.day_rpl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline double AccountPositionProfit::day_rpl() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.day_rpl)
  return _internal_day_rpl();
}
inline void AccountPositionProfit::set_day_rpl(double value) {
  _internal_set_day_rpl(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.day_rpl)
}
inline double AccountPositionProfit::_internal_day_rpl() const {
  return _impl_.day_rpl_;
}
inline void AccountPositionProfit::_internal_set_day_rpl(double value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.day_rpl_ = value;
}

// optional double day_rpl_usd = 19;
inline bool AccountPositionProfit::has_day_rpl_usd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void AccountPositionProfit::clear_day_rpl_usd() {
  _impl_.day_rpl_usd_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline double AccountPositionProfit::day_rpl_usd() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.day_rpl_usd)
  return _internal_day_rpl_usd();
}
inline void AccountPositionProfit::set_day_rpl_usd(double value) {
  _internal_set_day_rpl_usd(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.day_rpl_usd)
}
inline double AccountPositionProfit::_internal_day_rpl_usd() const {
  return _impl_.day_rpl_usd_;
}
inline void AccountPositionProfit::_internal_set_day_rpl_usd(double value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.day_rpl_usd_ = value;
}

// optional double day_upl = 20;
inline bool AccountPositionProfit::has_day_upl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void AccountPositionProfit::clear_day_upl() {
  _impl_.day_upl_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline double AccountPositionProfit::day_upl() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.day_upl)
  return _internal_day_upl();
}
inline void AccountPositionProfit::set_day_upl(double value) {
  _internal_set_day_upl(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.day_upl)
}
inline double AccountPositionProfit::_internal_day_upl() const {
  return _impl_.day_upl_;
}
inline void AccountPositionProfit::_internal_set_day_upl(double value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.day_upl_ = value;
}

// optional double day_upl_trade = 21;
inline bool AccountPositionProfit::has_day_upl_trade() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void AccountPositionProfit::clear_day_upl_trade() {
  _impl_.day_upl_trade_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline double AccountPositionProfit::day_upl_trade() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.day_upl_trade)
  return _internal_day_upl_trade();
}
inline void AccountPositionProfit::set_day_upl_trade(double value) {
  _internal_set_day_upl_trade(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.day_upl_trade)
}
inline double AccountPositionProfit::_internal_day_upl_trade() const {
  return _impl_.day_upl_trade_;
}
inline void AccountPositionProfit::_internal_set_day_upl_trade(double value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.day_upl_trade_ = value;
}

// optional double day_upl_usd = 22;
inline bool AccountPositionProfit::has_day_upl_usd() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void AccountPositionProfit::clear_day_upl_usd() {
  _impl_.day_upl_usd_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline double AccountPositionProfit::day_upl_usd() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.day_upl_usd)
  return _internal_day_upl_usd();
}
inline void AccountPositionProfit::set_day_upl_usd(double value) {
  _internal_set_day_upl_usd(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.day_upl_usd)
}
inline double AccountPositionProfit::_internal_day_upl_usd() const {
  return _impl_.day_upl_usd_;
}
inline void AccountPositionProfit::_internal_set_day_upl_usd(double value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.day_upl_usd_ = value;
}

// optional double day_upl_trade_usd = 23;
inline bool AccountPositionProfit::has_day_upl_trade_usd() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void AccountPositionProfit::clear_day_upl_trade_usd() {
  _impl_.day_upl_trade_usd_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline double AccountPositionProfit::day_upl_trade_usd() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.account.AccountPositionProfit.day_upl_trade_usd)
  return _internal_day_upl_trade_usd();
}
inline void AccountPositionProfit::set_day_upl_trade_usd(double value) {
  _internal_set_day_upl_trade_usd(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.account.AccountPositionProfit.day_upl_trade_usd)
}
inline double AccountPositionProfit::_internal_day_upl_trade_usd() const {
  return _impl_.day_upl_trade_usd_;
}
inline void AccountPositionProfit::_internal_set_day_upl_trade_usd(double value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.day_upl_trade_usd_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace account
}  // namespace v1
}  // namespace t4proto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_t4_2fv1_2faccount_2faccount_2eproto_2epb_2eh
