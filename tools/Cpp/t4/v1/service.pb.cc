// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: t4/v1/service.proto

#include "t4/v1/service.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace t4proto {
namespace v1 {
namespace service {
PROTOBUF_CONSTEXPR ClientMessage::ClientMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ClientMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientMessageDefaultTypeInternal() {}
  union {
    ClientMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientMessageDefaultTypeInternal _ClientMessage_default_instance_;
PROTOBUF_CONSTEXPR ServerMessage::ServerMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ServerMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMessageDefaultTypeInternal() {}
  union {
    ServerMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMessageDefaultTypeInternal _ServerMessage_default_instance_;
PROTOBUF_CONSTEXPR Heartbeat::Heartbeat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartbeatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatDefaultTypeInternal() {}
  union {
    Heartbeat _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;
}  // namespace service
}  // namespace v1
}  // namespace t4proto
static ::_pb::Metadata file_level_metadata_t4_2fv1_2fservice_2eproto[3];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_t4_2fv1_2fservice_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_t4_2fv1_2fservice_2eproto = nullptr;
const ::uint32_t TableStruct_t4_2fv1_2fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::service::ClientMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::service::ClientMessage, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::service::ClientMessage, _impl_.payload_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::service::ServerMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::service::ServerMessage, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::service::ServerMessage, _impl_.payload_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::service::Heartbeat, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::service::Heartbeat, _impl_.timestamp_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::t4proto::v1::service::ClientMessage)},
        { 19, -1, -1, sizeof(::t4proto::v1::service::ServerMessage)},
        { 57, -1, -1, sizeof(::t4proto::v1::service::Heartbeat)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::t4proto::v1::service::_ClientMessage_default_instance_._instance,
    &::t4proto::v1::service::_ServerMessage_default_instance_._instance,
    &::t4proto::v1::service::_Heartbeat_default_instance_._instance,
};
const char descriptor_table_protodef_t4_2fv1_2fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\023t4/v1/service.proto\022\022t4proto.v1.servic"
    "e\032\025t4/v1/auth/auth.proto\032\031t4/v1/market/m"
    "arket.proto\032\033t4/v1/account/account.proto"
    "\032%t4/v1/orderrouting/orderrouting.proto\""
    "\256\005\n\rClientMessage\0222\n\theartbeat\030\001 \001(\0132\035.t"
    "4proto.v1.service.HeartbeatH\000\0226\n\rlogin_r"
    "equest\030\002 \001(\0132\035.t4proto.v1.auth.LoginRequ"
    "estH\000\022S\n\034authentication_token_request\030\003 "
    "\001(\0132+.t4proto.v1.auth.AuthenticationToke"
    "nRequestH\000\022I\n\026market_depth_subscribe\030d \001"
    "(\0132\'.t4proto.v1.market.MarketDepthSubscr"
    "ibeH\000\022N\n\031market_by_order_subscribe\030e \001(\013"
    "2).t4proto.v1.market.MarketByOrderSubscr"
    "ibeH\000\022B\n\021account_subscribe\030\310\001 \001(\0132$.t4pr"
    "oto.v1.account.AccountSubscribeH\000\022=\n\014ord"
    "er_submit\030\254\002 \001(\0132$.t4proto.v1.orderrouti"
    "ng.OrderSubmitH\000\022=\n\014order_revise\030\255\002 \001(\0132"
    "$.t4proto.v1.orderrouting.OrderReviseH\000\022"
    "9\n\norder_pull\030\256\002 \001(\0132\".t4proto.v1.orderr"
    "outing.OrderPullH\000\0229\n\ncreate_uds\030\324\002 \001(\0132"
    "\".t4proto.v1.orderrouting.CreateUDSH\000B\t\n"
    "\007payload\"\202\020\n\rServerMessage\0222\n\theartbeat\030"
    "\001 \001(\0132\035.t4proto.v1.service.HeartbeatH\000\0228"
    "\n\016login_response\030\002 \001(\0132\036.t4proto.v1.auth"
    ".LoginResponseH\000\022D\n\024authentication_token"
    "\030\003 \001(\0132$.t4proto.v1.auth.AuthenticationT"
    "okenH\000\022V\n\035market_depth_subscribe_reject\030"
    "d \001(\0132-.t4proto.v1.market.MarketDepthSub"
    "scribeRejectH\000\022[\n market_by_order_subscr"
    "ibe_reject\030e \001(\0132/.t4proto.v1.market.Mar"
    "ketByOrderSubscribeRejectH\000\022:\n\016market_de"
    "tails\030f \001(\0132 .t4proto.v1.market.MarketDe"
    "tailsH\000\0226\n\014market_depth\030g \001(\0132\036.t4proto."
    "v1.market.MarketDepthH\000\022A\n\022market_depth_"
    "trade\030h \001(\0132#.t4proto.v1.market.MarketDe"
    "pthTradeH\000\022;\n\017market_high_low\030i \001(\0132 .t4"
    "proto.v1.market.MarketHighLowH\000\022C\n\023marke"
    "t_price_limits\030j \001(\0132$.t4proto.v1.market"
    ".MarketPriceLimitsH\000\022@\n\021market_settlemen"
    "t\030k \001(\0132#.t4proto.v1.market.MarketSettle"
    "mentH\000\022<\n\017market_snapshot\030l \001(\0132!.t4prot"
    "o.v1.market.MarketSnapshotH\000\022L\n\030market_b"
    "y_order_snapshot\030m \001(\0132(.t4proto.v1.mark"
    "et.MarketByOrderSnapshotH\000\022H\n\026market_by_"
    "order_update\030n \001(\0132&.t4proto.v1.market.M"
    "arketByOrderUpdateH\000\022S\n\032account_subscrib"
    "e_response\030\310\001 \001(\0132,.t4proto.v1.account.A"
    "ccountSubscribeResponseH\000\022@\n\020account_cur"
    "rency\030\311\001 \001(\0132#.t4proto.v1.account.Accoun"
    "tCurrencyH\000\022@\n\020account_position\030\312\001 \001(\0132#"
    ".t4proto.v1.account.AccountPositionH\000\022<\n"
    "\016account_update\030\313\001 \001(\0132!.t4proto.v1.acco"
    "unt.AccountUpdateH\000\022>\n\017account_details\030\314"
    "\001 \001(\0132\".t4proto.v1.account.AccountDetail"
    "sH\000\022@\n\020account_snapshot\030\315\001 \001(\0132#.t4proto"
    ".v1.account.AccountSnapshotH\000\022<\n\016account"
    "_profit\030\316\001 \001(\0132!.t4proto.v1.account.Acco"
    "untProfitH\000\022M\n\027account_position_profit\030\317"
    "\001 \001(\0132).t4proto.v1.account.AccountPositi"
    "onProfitH\000\022=\n\014order_update\030\254\002 \001(\0132$.t4pr"
    "oto.v1.orderrouting.OrderUpdateH\000\022H\n\022ord"
    "er_update_multi\030\255\002 \001(\0132).t4proto.v1.orde"
    "rrouting.OrderUpdateMultiH\000\022J\n\023order_upd"
    "ate_failed\030\256\002 \001(\0132*.t4proto.v1.orderrout"
    "ing.OrderUpdateFailedH\000\022J\n\023order_update_"
    "status\030\257\002 \001(\0132*.t4proto.v1.orderrouting."
    "OrderUpdateStatusH\000\022H\n\022order_update_trad"
    "e\030\260\002 \001(\0132).t4proto.v1.orderrouting.Order"
    "UpdateTradeH\000\022O\n\026order_update_trade_leg\030"
    "\261\002 \001(\0132,.t4proto.v1.orderrouting.OrderUp"
    "dateTradeLegH\000\022J\n\023create_uds_response\030\324\002"
    " \001(\0132*.t4proto.v1.orderrouting.CreateUDS"
    "ResponseH\000B\t\n\007payload\"\036\n\tHeartbeat\022\021\n\tti"
    "mestamp\030\001 \001(\003b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_t4_2fv1_2fservice_2eproto_deps[4] =
    {
        &::descriptor_table_t4_2fv1_2faccount_2faccount_2eproto,
        &::descriptor_table_t4_2fv1_2fauth_2fauth_2eproto,
        &::descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto,
        &::descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto,
};
static ::absl::once_flag descriptor_table_t4_2fv1_2fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_t4_2fv1_2fservice_2eproto = {
    false,
    false,
    2941,
    descriptor_table_protodef_t4_2fv1_2fservice_2eproto,
    "t4/v1/service.proto",
    &descriptor_table_t4_2fv1_2fservice_2eproto_once,
    descriptor_table_t4_2fv1_2fservice_2eproto_deps,
    4,
    3,
    schemas,
    file_default_instances,
    TableStruct_t4_2fv1_2fservice_2eproto::offsets,
    file_level_metadata_t4_2fv1_2fservice_2eproto,
    file_level_enum_descriptors_t4_2fv1_2fservice_2eproto,
    file_level_service_descriptors_t4_2fv1_2fservice_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_t4_2fv1_2fservice_2eproto_getter() {
  return &descriptor_table_t4_2fv1_2fservice_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_t4_2fv1_2fservice_2eproto(&descriptor_table_t4_2fv1_2fservice_2eproto);
namespace t4proto {
namespace v1 {
namespace service {
// ===================================================================

class ClientMessage::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::service::ClientMessage, _impl_._oneof_case_);
  static const ::t4proto::v1::service::Heartbeat& heartbeat(const ClientMessage* msg);
  static const ::t4proto::v1::auth::LoginRequest& login_request(const ClientMessage* msg);
  static const ::t4proto::v1::auth::AuthenticationTokenRequest& authentication_token_request(const ClientMessage* msg);
  static const ::t4proto::v1::market::MarketDepthSubscribe& market_depth_subscribe(const ClientMessage* msg);
  static const ::t4proto::v1::market::MarketByOrderSubscribe& market_by_order_subscribe(const ClientMessage* msg);
  static const ::t4proto::v1::account::AccountSubscribe& account_subscribe(const ClientMessage* msg);
  static const ::t4proto::v1::orderrouting::OrderSubmit& order_submit(const ClientMessage* msg);
  static const ::t4proto::v1::orderrouting::OrderRevise& order_revise(const ClientMessage* msg);
  static const ::t4proto::v1::orderrouting::OrderPull& order_pull(const ClientMessage* msg);
  static const ::t4proto::v1::orderrouting::CreateUDS& create_uds(const ClientMessage* msg);
};

const ::t4proto::v1::service::Heartbeat&
ClientMessage::_Internal::heartbeat(const ClientMessage* msg) {
  return *msg->_impl_.payload_.heartbeat_;
}
const ::t4proto::v1::auth::LoginRequest&
ClientMessage::_Internal::login_request(const ClientMessage* msg) {
  return *msg->_impl_.payload_.login_request_;
}
const ::t4proto::v1::auth::AuthenticationTokenRequest&
ClientMessage::_Internal::authentication_token_request(const ClientMessage* msg) {
  return *msg->_impl_.payload_.authentication_token_request_;
}
const ::t4proto::v1::market::MarketDepthSubscribe&
ClientMessage::_Internal::market_depth_subscribe(const ClientMessage* msg) {
  return *msg->_impl_.payload_.market_depth_subscribe_;
}
const ::t4proto::v1::market::MarketByOrderSubscribe&
ClientMessage::_Internal::market_by_order_subscribe(const ClientMessage* msg) {
  return *msg->_impl_.payload_.market_by_order_subscribe_;
}
const ::t4proto::v1::account::AccountSubscribe&
ClientMessage::_Internal::account_subscribe(const ClientMessage* msg) {
  return *msg->_impl_.payload_.account_subscribe_;
}
const ::t4proto::v1::orderrouting::OrderSubmit&
ClientMessage::_Internal::order_submit(const ClientMessage* msg) {
  return *msg->_impl_.payload_.order_submit_;
}
const ::t4proto::v1::orderrouting::OrderRevise&
ClientMessage::_Internal::order_revise(const ClientMessage* msg) {
  return *msg->_impl_.payload_.order_revise_;
}
const ::t4proto::v1::orderrouting::OrderPull&
ClientMessage::_Internal::order_pull(const ClientMessage* msg) {
  return *msg->_impl_.payload_.order_pull_;
}
const ::t4proto::v1::orderrouting::CreateUDS&
ClientMessage::_Internal::create_uds(const ClientMessage* msg) {
  return *msg->_impl_.payload_.create_uds_;
}
void ClientMessage::set_allocated_heartbeat(::t4proto::v1::service::Heartbeat* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    set_has_heartbeat();
    _impl_.payload_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ClientMessage.heartbeat)
}
void ClientMessage::set_allocated_login_request(::t4proto::v1::auth::LoginRequest* login_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (login_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_request));
    if (message_arena != submessage_arena) {
      login_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_request, submessage_arena);
    }
    set_has_login_request();
    _impl_.payload_.login_request_ = login_request;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ClientMessage.login_request)
}
void ClientMessage::clear_login_request() {
  if (payload_case() == kLoginRequest) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.login_request_;
    }
    clear_has_payload();
  }
}
void ClientMessage::set_allocated_authentication_token_request(::t4proto::v1::auth::AuthenticationTokenRequest* authentication_token_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (authentication_token_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(authentication_token_request));
    if (message_arena != submessage_arena) {
      authentication_token_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authentication_token_request, submessage_arena);
    }
    set_has_authentication_token_request();
    _impl_.payload_.authentication_token_request_ = authentication_token_request;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ClientMessage.authentication_token_request)
}
void ClientMessage::clear_authentication_token_request() {
  if (payload_case() == kAuthenticationTokenRequest) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.authentication_token_request_;
    }
    clear_has_payload();
  }
}
void ClientMessage::set_allocated_market_depth_subscribe(::t4proto::v1::market::MarketDepthSubscribe* market_depth_subscribe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (market_depth_subscribe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_depth_subscribe));
    if (message_arena != submessage_arena) {
      market_depth_subscribe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_depth_subscribe, submessage_arena);
    }
    set_has_market_depth_subscribe();
    _impl_.payload_.market_depth_subscribe_ = market_depth_subscribe;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ClientMessage.market_depth_subscribe)
}
void ClientMessage::clear_market_depth_subscribe() {
  if (payload_case() == kMarketDepthSubscribe) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.market_depth_subscribe_;
    }
    clear_has_payload();
  }
}
void ClientMessage::set_allocated_market_by_order_subscribe(::t4proto::v1::market::MarketByOrderSubscribe* market_by_order_subscribe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (market_by_order_subscribe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_by_order_subscribe));
    if (message_arena != submessage_arena) {
      market_by_order_subscribe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_by_order_subscribe, submessage_arena);
    }
    set_has_market_by_order_subscribe();
    _impl_.payload_.market_by_order_subscribe_ = market_by_order_subscribe;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ClientMessage.market_by_order_subscribe)
}
void ClientMessage::clear_market_by_order_subscribe() {
  if (payload_case() == kMarketByOrderSubscribe) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.market_by_order_subscribe_;
    }
    clear_has_payload();
  }
}
void ClientMessage::set_allocated_account_subscribe(::t4proto::v1::account::AccountSubscribe* account_subscribe) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (account_subscribe) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_subscribe));
    if (message_arena != submessage_arena) {
      account_subscribe = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_subscribe, submessage_arena);
    }
    set_has_account_subscribe();
    _impl_.payload_.account_subscribe_ = account_subscribe;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ClientMessage.account_subscribe)
}
void ClientMessage::clear_account_subscribe() {
  if (payload_case() == kAccountSubscribe) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.account_subscribe_;
    }
    clear_has_payload();
  }
}
void ClientMessage::set_allocated_order_submit(::t4proto::v1::orderrouting::OrderSubmit* order_submit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (order_submit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_submit));
    if (message_arena != submessage_arena) {
      order_submit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_submit, submessage_arena);
    }
    set_has_order_submit();
    _impl_.payload_.order_submit_ = order_submit;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ClientMessage.order_submit)
}
void ClientMessage::clear_order_submit() {
  if (payload_case() == kOrderSubmit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.order_submit_;
    }
    clear_has_payload();
  }
}
void ClientMessage::set_allocated_order_revise(::t4proto::v1::orderrouting::OrderRevise* order_revise) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (order_revise) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_revise));
    if (message_arena != submessage_arena) {
      order_revise = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_revise, submessage_arena);
    }
    set_has_order_revise();
    _impl_.payload_.order_revise_ = order_revise;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ClientMessage.order_revise)
}
void ClientMessage::clear_order_revise() {
  if (payload_case() == kOrderRevise) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.order_revise_;
    }
    clear_has_payload();
  }
}
void ClientMessage::set_allocated_order_pull(::t4proto::v1::orderrouting::OrderPull* order_pull) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (order_pull) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_pull));
    if (message_arena != submessage_arena) {
      order_pull = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_pull, submessage_arena);
    }
    set_has_order_pull();
    _impl_.payload_.order_pull_ = order_pull;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ClientMessage.order_pull)
}
void ClientMessage::clear_order_pull() {
  if (payload_case() == kOrderPull) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.order_pull_;
    }
    clear_has_payload();
  }
}
void ClientMessage::set_allocated_create_uds(::t4proto::v1::orderrouting::CreateUDS* create_uds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (create_uds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_uds));
    if (message_arena != submessage_arena) {
      create_uds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_uds, submessage_arena);
    }
    set_has_create_uds();
    _impl_.payload_.create_uds_ = create_uds;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ClientMessage.create_uds)
}
void ClientMessage::clear_create_uds() {
  if (payload_case() == kCreateUds) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.create_uds_;
    }
    clear_has_payload();
  }
}
ClientMessage::ClientMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.service.ClientMessage)
}
ClientMessage::ClientMessage(const ClientMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClientMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kHeartbeat: {
      _this->_internal_mutable_heartbeat()->::t4proto::v1::service::Heartbeat::MergeFrom(
          from._internal_heartbeat());
      break;
    }
    case kLoginRequest: {
      _this->_internal_mutable_login_request()->::t4proto::v1::auth::LoginRequest::MergeFrom(
          from._internal_login_request());
      break;
    }
    case kAuthenticationTokenRequest: {
      _this->_internal_mutable_authentication_token_request()->::t4proto::v1::auth::AuthenticationTokenRequest::MergeFrom(
          from._internal_authentication_token_request());
      break;
    }
    case kMarketDepthSubscribe: {
      _this->_internal_mutable_market_depth_subscribe()->::t4proto::v1::market::MarketDepthSubscribe::MergeFrom(
          from._internal_market_depth_subscribe());
      break;
    }
    case kMarketByOrderSubscribe: {
      _this->_internal_mutable_market_by_order_subscribe()->::t4proto::v1::market::MarketByOrderSubscribe::MergeFrom(
          from._internal_market_by_order_subscribe());
      break;
    }
    case kAccountSubscribe: {
      _this->_internal_mutable_account_subscribe()->::t4proto::v1::account::AccountSubscribe::MergeFrom(
          from._internal_account_subscribe());
      break;
    }
    case kOrderSubmit: {
      _this->_internal_mutable_order_submit()->::t4proto::v1::orderrouting::OrderSubmit::MergeFrom(
          from._internal_order_submit());
      break;
    }
    case kOrderRevise: {
      _this->_internal_mutable_order_revise()->::t4proto::v1::orderrouting::OrderRevise::MergeFrom(
          from._internal_order_revise());
      break;
    }
    case kOrderPull: {
      _this->_internal_mutable_order_pull()->::t4proto::v1::orderrouting::OrderPull::MergeFrom(
          from._internal_order_pull());
      break;
    }
    case kCreateUds: {
      _this->_internal_mutable_create_uds()->::t4proto::v1::orderrouting::CreateUDS::MergeFrom(
          from._internal_create_uds());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.service.ClientMessage)
}

inline void ClientMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

ClientMessage::~ClientMessage() {
  // @@protoc_insertion_point(destructor:t4proto.v1.service.ClientMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void ClientMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClientMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:t4proto.v1.service.ClientMessage)
  switch (payload_case()) {
    case kHeartbeat: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.heartbeat_;
      }
      break;
    }
    case kLoginRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.login_request_;
      }
      break;
    }
    case kAuthenticationTokenRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.authentication_token_request_;
      }
      break;
    }
    case kMarketDepthSubscribe: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.market_depth_subscribe_;
      }
      break;
    }
    case kMarketByOrderSubscribe: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.market_by_order_subscribe_;
      }
      break;
    }
    case kAccountSubscribe: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.account_subscribe_;
      }
      break;
    }
    case kOrderSubmit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.order_submit_;
      }
      break;
    }
    case kOrderRevise: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.order_revise_;
      }
      break;
    }
    case kOrderPull: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.order_pull_;
      }
      break;
    }
    case kCreateUds: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.create_uds_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void ClientMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.service.ClientMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClientMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .t4proto.v1.service.Heartbeat heartbeat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.auth.LoginRequest login_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_request(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.auth.AuthenticationTokenRequest authentication_token_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_authentication_token_request(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.market.MarketDepthSubscribe market_depth_subscribe = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_depth_subscribe(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.market.MarketByOrderSubscribe market_by_order_subscribe = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_by_order_subscribe(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.account.AccountSubscribe account_subscribe = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_subscribe(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.orderrouting.OrderSubmit order_submit = 300;
      case 300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_submit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.orderrouting.OrderRevise order_revise = 301;
      case 301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_revise(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.orderrouting.OrderPull order_pull = 302;
      case 302:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_pull(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.orderrouting.CreateUDS create_uds = 340;
      case 340:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_uds(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ClientMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.service.ClientMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .t4proto.v1.service.Heartbeat heartbeat = 1;
  if (payload_case() == kHeartbeat) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::heartbeat(this),
        _Internal::heartbeat(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.auth.LoginRequest login_request = 2;
  if (payload_case() == kLoginRequest) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::login_request(this),
        _Internal::login_request(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.auth.AuthenticationTokenRequest authentication_token_request = 3;
  if (payload_case() == kAuthenticationTokenRequest) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::authentication_token_request(this),
        _Internal::authentication_token_request(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.market.MarketDepthSubscribe market_depth_subscribe = 100;
  if (payload_case() == kMarketDepthSubscribe) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::market_depth_subscribe(this),
        _Internal::market_depth_subscribe(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.market.MarketByOrderSubscribe market_by_order_subscribe = 101;
  if (payload_case() == kMarketByOrderSubscribe) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(101, _Internal::market_by_order_subscribe(this),
        _Internal::market_by_order_subscribe(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.account.AccountSubscribe account_subscribe = 200;
  if (payload_case() == kAccountSubscribe) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(200, _Internal::account_subscribe(this),
        _Internal::account_subscribe(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.orderrouting.OrderSubmit order_submit = 300;
  if (payload_case() == kOrderSubmit) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(300, _Internal::order_submit(this),
        _Internal::order_submit(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.orderrouting.OrderRevise order_revise = 301;
  if (payload_case() == kOrderRevise) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(301, _Internal::order_revise(this),
        _Internal::order_revise(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.orderrouting.OrderPull order_pull = 302;
  if (payload_case() == kOrderPull) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(302, _Internal::order_pull(this),
        _Internal::order_pull(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.orderrouting.CreateUDS create_uds = 340;
  if (payload_case() == kCreateUds) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(340, _Internal::create_uds(this),
        _Internal::create_uds(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.service.ClientMessage)
  return target;
}

::size_t ClientMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.service.ClientMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .t4proto.v1.service.Heartbeat heartbeat = 1;
    case kHeartbeat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.heartbeat_);
      break;
    }
    // .t4proto.v1.auth.LoginRequest login_request = 2;
    case kLoginRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.login_request_);
      break;
    }
    // .t4proto.v1.auth.AuthenticationTokenRequest authentication_token_request = 3;
    case kAuthenticationTokenRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.authentication_token_request_);
      break;
    }
    // .t4proto.v1.market.MarketDepthSubscribe market_depth_subscribe = 100;
    case kMarketDepthSubscribe: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.market_depth_subscribe_);
      break;
    }
    // .t4proto.v1.market.MarketByOrderSubscribe market_by_order_subscribe = 101;
    case kMarketByOrderSubscribe: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.market_by_order_subscribe_);
      break;
    }
    // .t4proto.v1.account.AccountSubscribe account_subscribe = 200;
    case kAccountSubscribe: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.account_subscribe_);
      break;
    }
    // .t4proto.v1.orderrouting.OrderSubmit order_submit = 300;
    case kOrderSubmit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.order_submit_);
      break;
    }
    // .t4proto.v1.orderrouting.OrderRevise order_revise = 301;
    case kOrderRevise: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.order_revise_);
      break;
    }
    // .t4proto.v1.orderrouting.OrderPull order_pull = 302;
    case kOrderPull: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.order_pull_);
      break;
    }
    // .t4proto.v1.orderrouting.CreateUDS create_uds = 340;
    case kCreateUds: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.create_uds_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClientMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClientMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClientMessage::GetClassData() const { return &_class_data_; }


void ClientMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClientMessage*>(&to_msg);
  auto& from = static_cast<const ClientMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.service.ClientMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kHeartbeat: {
      _this->_internal_mutable_heartbeat()->::t4proto::v1::service::Heartbeat::MergeFrom(
          from._internal_heartbeat());
      break;
    }
    case kLoginRequest: {
      _this->_internal_mutable_login_request()->::t4proto::v1::auth::LoginRequest::MergeFrom(
          from._internal_login_request());
      break;
    }
    case kAuthenticationTokenRequest: {
      _this->_internal_mutable_authentication_token_request()->::t4proto::v1::auth::AuthenticationTokenRequest::MergeFrom(
          from._internal_authentication_token_request());
      break;
    }
    case kMarketDepthSubscribe: {
      _this->_internal_mutable_market_depth_subscribe()->::t4proto::v1::market::MarketDepthSubscribe::MergeFrom(
          from._internal_market_depth_subscribe());
      break;
    }
    case kMarketByOrderSubscribe: {
      _this->_internal_mutable_market_by_order_subscribe()->::t4proto::v1::market::MarketByOrderSubscribe::MergeFrom(
          from._internal_market_by_order_subscribe());
      break;
    }
    case kAccountSubscribe: {
      _this->_internal_mutable_account_subscribe()->::t4proto::v1::account::AccountSubscribe::MergeFrom(
          from._internal_account_subscribe());
      break;
    }
    case kOrderSubmit: {
      _this->_internal_mutable_order_submit()->::t4proto::v1::orderrouting::OrderSubmit::MergeFrom(
          from._internal_order_submit());
      break;
    }
    case kOrderRevise: {
      _this->_internal_mutable_order_revise()->::t4proto::v1::orderrouting::OrderRevise::MergeFrom(
          from._internal_order_revise());
      break;
    }
    case kOrderPull: {
      _this->_internal_mutable_order_pull()->::t4proto::v1::orderrouting::OrderPull::MergeFrom(
          from._internal_order_pull());
      break;
    }
    case kCreateUds: {
      _this->_internal_mutable_create_uds()->::t4proto::v1::orderrouting::CreateUDS::MergeFrom(
          from._internal_create_uds());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClientMessage::CopyFrom(const ClientMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.service.ClientMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage::IsInitialized() const {
  return true;
}

void ClientMessage::InternalSwap(ClientMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClientMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fservice_2eproto_getter, &descriptor_table_t4_2fv1_2fservice_2eproto_once,
      file_level_metadata_t4_2fv1_2fservice_2eproto[0]);
}
// ===================================================================

class ServerMessage::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::service::ServerMessage, _impl_._oneof_case_);
  static const ::t4proto::v1::service::Heartbeat& heartbeat(const ServerMessage* msg);
  static const ::t4proto::v1::auth::LoginResponse& login_response(const ServerMessage* msg);
  static const ::t4proto::v1::auth::AuthenticationToken& authentication_token(const ServerMessage* msg);
  static const ::t4proto::v1::market::MarketDepthSubscribeReject& market_depth_subscribe_reject(const ServerMessage* msg);
  static const ::t4proto::v1::market::MarketByOrderSubscribeReject& market_by_order_subscribe_reject(const ServerMessage* msg);
  static const ::t4proto::v1::market::MarketDetails& market_details(const ServerMessage* msg);
  static const ::t4proto::v1::market::MarketDepth& market_depth(const ServerMessage* msg);
  static const ::t4proto::v1::market::MarketDepthTrade& market_depth_trade(const ServerMessage* msg);
  static const ::t4proto::v1::market::MarketHighLow& market_high_low(const ServerMessage* msg);
  static const ::t4proto::v1::market::MarketPriceLimits& market_price_limits(const ServerMessage* msg);
  static const ::t4proto::v1::market::MarketSettlement& market_settlement(const ServerMessage* msg);
  static const ::t4proto::v1::market::MarketSnapshot& market_snapshot(const ServerMessage* msg);
  static const ::t4proto::v1::market::MarketByOrderSnapshot& market_by_order_snapshot(const ServerMessage* msg);
  static const ::t4proto::v1::market::MarketByOrderUpdate& market_by_order_update(const ServerMessage* msg);
  static const ::t4proto::v1::account::AccountSubscribeResponse& account_subscribe_response(const ServerMessage* msg);
  static const ::t4proto::v1::account::AccountCurrency& account_currency(const ServerMessage* msg);
  static const ::t4proto::v1::account::AccountPosition& account_position(const ServerMessage* msg);
  static const ::t4proto::v1::account::AccountUpdate& account_update(const ServerMessage* msg);
  static const ::t4proto::v1::account::AccountDetails& account_details(const ServerMessage* msg);
  static const ::t4proto::v1::account::AccountSnapshot& account_snapshot(const ServerMessage* msg);
  static const ::t4proto::v1::account::AccountProfit& account_profit(const ServerMessage* msg);
  static const ::t4proto::v1::account::AccountPositionProfit& account_position_profit(const ServerMessage* msg);
  static const ::t4proto::v1::orderrouting::OrderUpdate& order_update(const ServerMessage* msg);
  static const ::t4proto::v1::orderrouting::OrderUpdateMulti& order_update_multi(const ServerMessage* msg);
  static const ::t4proto::v1::orderrouting::OrderUpdateFailed& order_update_failed(const ServerMessage* msg);
  static const ::t4proto::v1::orderrouting::OrderUpdateStatus& order_update_status(const ServerMessage* msg);
  static const ::t4proto::v1::orderrouting::OrderUpdateTrade& order_update_trade(const ServerMessage* msg);
  static const ::t4proto::v1::orderrouting::OrderUpdateTradeLeg& order_update_trade_leg(const ServerMessage* msg);
  static const ::t4proto::v1::orderrouting::CreateUDSResponse& create_uds_response(const ServerMessage* msg);
};

const ::t4proto::v1::service::Heartbeat&
ServerMessage::_Internal::heartbeat(const ServerMessage* msg) {
  return *msg->_impl_.payload_.heartbeat_;
}
const ::t4proto::v1::auth::LoginResponse&
ServerMessage::_Internal::login_response(const ServerMessage* msg) {
  return *msg->_impl_.payload_.login_response_;
}
const ::t4proto::v1::auth::AuthenticationToken&
ServerMessage::_Internal::authentication_token(const ServerMessage* msg) {
  return *msg->_impl_.payload_.authentication_token_;
}
const ::t4proto::v1::market::MarketDepthSubscribeReject&
ServerMessage::_Internal::market_depth_subscribe_reject(const ServerMessage* msg) {
  return *msg->_impl_.payload_.market_depth_subscribe_reject_;
}
const ::t4proto::v1::market::MarketByOrderSubscribeReject&
ServerMessage::_Internal::market_by_order_subscribe_reject(const ServerMessage* msg) {
  return *msg->_impl_.payload_.market_by_order_subscribe_reject_;
}
const ::t4proto::v1::market::MarketDetails&
ServerMessage::_Internal::market_details(const ServerMessage* msg) {
  return *msg->_impl_.payload_.market_details_;
}
const ::t4proto::v1::market::MarketDepth&
ServerMessage::_Internal::market_depth(const ServerMessage* msg) {
  return *msg->_impl_.payload_.market_depth_;
}
const ::t4proto::v1::market::MarketDepthTrade&
ServerMessage::_Internal::market_depth_trade(const ServerMessage* msg) {
  return *msg->_impl_.payload_.market_depth_trade_;
}
const ::t4proto::v1::market::MarketHighLow&
ServerMessage::_Internal::market_high_low(const ServerMessage* msg) {
  return *msg->_impl_.payload_.market_high_low_;
}
const ::t4proto::v1::market::MarketPriceLimits&
ServerMessage::_Internal::market_price_limits(const ServerMessage* msg) {
  return *msg->_impl_.payload_.market_price_limits_;
}
const ::t4proto::v1::market::MarketSettlement&
ServerMessage::_Internal::market_settlement(const ServerMessage* msg) {
  return *msg->_impl_.payload_.market_settlement_;
}
const ::t4proto::v1::market::MarketSnapshot&
ServerMessage::_Internal::market_snapshot(const ServerMessage* msg) {
  return *msg->_impl_.payload_.market_snapshot_;
}
const ::t4proto::v1::market::MarketByOrderSnapshot&
ServerMessage::_Internal::market_by_order_snapshot(const ServerMessage* msg) {
  return *msg->_impl_.payload_.market_by_order_snapshot_;
}
const ::t4proto::v1::market::MarketByOrderUpdate&
ServerMessage::_Internal::market_by_order_update(const ServerMessage* msg) {
  return *msg->_impl_.payload_.market_by_order_update_;
}
const ::t4proto::v1::account::AccountSubscribeResponse&
ServerMessage::_Internal::account_subscribe_response(const ServerMessage* msg) {
  return *msg->_impl_.payload_.account_subscribe_response_;
}
const ::t4proto::v1::account::AccountCurrency&
ServerMessage::_Internal::account_currency(const ServerMessage* msg) {
  return *msg->_impl_.payload_.account_currency_;
}
const ::t4proto::v1::account::AccountPosition&
ServerMessage::_Internal::account_position(const ServerMessage* msg) {
  return *msg->_impl_.payload_.account_position_;
}
const ::t4proto::v1::account::AccountUpdate&
ServerMessage::_Internal::account_update(const ServerMessage* msg) {
  return *msg->_impl_.payload_.account_update_;
}
const ::t4proto::v1::account::AccountDetails&
ServerMessage::_Internal::account_details(const ServerMessage* msg) {
  return *msg->_impl_.payload_.account_details_;
}
const ::t4proto::v1::account::AccountSnapshot&
ServerMessage::_Internal::account_snapshot(const ServerMessage* msg) {
  return *msg->_impl_.payload_.account_snapshot_;
}
const ::t4proto::v1::account::AccountProfit&
ServerMessage::_Internal::account_profit(const ServerMessage* msg) {
  return *msg->_impl_.payload_.account_profit_;
}
const ::t4proto::v1::account::AccountPositionProfit&
ServerMessage::_Internal::account_position_profit(const ServerMessage* msg) {
  return *msg->_impl_.payload_.account_position_profit_;
}
const ::t4proto::v1::orderrouting::OrderUpdate&
ServerMessage::_Internal::order_update(const ServerMessage* msg) {
  return *msg->_impl_.payload_.order_update_;
}
const ::t4proto::v1::orderrouting::OrderUpdateMulti&
ServerMessage::_Internal::order_update_multi(const ServerMessage* msg) {
  return *msg->_impl_.payload_.order_update_multi_;
}
const ::t4proto::v1::orderrouting::OrderUpdateFailed&
ServerMessage::_Internal::order_update_failed(const ServerMessage* msg) {
  return *msg->_impl_.payload_.order_update_failed_;
}
const ::t4proto::v1::orderrouting::OrderUpdateStatus&
ServerMessage::_Internal::order_update_status(const ServerMessage* msg) {
  return *msg->_impl_.payload_.order_update_status_;
}
const ::t4proto::v1::orderrouting::OrderUpdateTrade&
ServerMessage::_Internal::order_update_trade(const ServerMessage* msg) {
  return *msg->_impl_.payload_.order_update_trade_;
}
const ::t4proto::v1::orderrouting::OrderUpdateTradeLeg&
ServerMessage::_Internal::order_update_trade_leg(const ServerMessage* msg) {
  return *msg->_impl_.payload_.order_update_trade_leg_;
}
const ::t4proto::v1::orderrouting::CreateUDSResponse&
ServerMessage::_Internal::create_uds_response(const ServerMessage* msg) {
  return *msg->_impl_.payload_.create_uds_response_;
}
void ServerMessage::set_allocated_heartbeat(::t4proto::v1::service::Heartbeat* heartbeat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (heartbeat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(heartbeat);
    if (message_arena != submessage_arena) {
      heartbeat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, heartbeat, submessage_arena);
    }
    set_has_heartbeat();
    _impl_.payload_.heartbeat_ = heartbeat;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.heartbeat)
}
void ServerMessage::set_allocated_login_response(::t4proto::v1::auth::LoginResponse* login_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (login_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_response));
    if (message_arena != submessage_arena) {
      login_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_response, submessage_arena);
    }
    set_has_login_response();
    _impl_.payload_.login_response_ = login_response;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.login_response)
}
void ServerMessage::clear_login_response() {
  if (payload_case() == kLoginResponse) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.login_response_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_authentication_token(::t4proto::v1::auth::AuthenticationToken* authentication_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (authentication_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(authentication_token));
    if (message_arena != submessage_arena) {
      authentication_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authentication_token, submessage_arena);
    }
    set_has_authentication_token();
    _impl_.payload_.authentication_token_ = authentication_token;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.authentication_token)
}
void ServerMessage::clear_authentication_token() {
  if (payload_case() == kAuthenticationToken) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.authentication_token_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_market_depth_subscribe_reject(::t4proto::v1::market::MarketDepthSubscribeReject* market_depth_subscribe_reject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (market_depth_subscribe_reject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_depth_subscribe_reject));
    if (message_arena != submessage_arena) {
      market_depth_subscribe_reject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_depth_subscribe_reject, submessage_arena);
    }
    set_has_market_depth_subscribe_reject();
    _impl_.payload_.market_depth_subscribe_reject_ = market_depth_subscribe_reject;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.market_depth_subscribe_reject)
}
void ServerMessage::clear_market_depth_subscribe_reject() {
  if (payload_case() == kMarketDepthSubscribeReject) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.market_depth_subscribe_reject_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_market_by_order_subscribe_reject(::t4proto::v1::market::MarketByOrderSubscribeReject* market_by_order_subscribe_reject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (market_by_order_subscribe_reject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_by_order_subscribe_reject));
    if (message_arena != submessage_arena) {
      market_by_order_subscribe_reject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_by_order_subscribe_reject, submessage_arena);
    }
    set_has_market_by_order_subscribe_reject();
    _impl_.payload_.market_by_order_subscribe_reject_ = market_by_order_subscribe_reject;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.market_by_order_subscribe_reject)
}
void ServerMessage::clear_market_by_order_subscribe_reject() {
  if (payload_case() == kMarketByOrderSubscribeReject) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.market_by_order_subscribe_reject_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_market_details(::t4proto::v1::market::MarketDetails* market_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (market_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_details));
    if (message_arena != submessage_arena) {
      market_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_details, submessage_arena);
    }
    set_has_market_details();
    _impl_.payload_.market_details_ = market_details;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.market_details)
}
void ServerMessage::clear_market_details() {
  if (payload_case() == kMarketDetails) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.market_details_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_market_depth(::t4proto::v1::market::MarketDepth* market_depth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (market_depth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_depth));
    if (message_arena != submessage_arena) {
      market_depth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_depth, submessage_arena);
    }
    set_has_market_depth();
    _impl_.payload_.market_depth_ = market_depth;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.market_depth)
}
void ServerMessage::clear_market_depth() {
  if (payload_case() == kMarketDepth) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.market_depth_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_market_depth_trade(::t4proto::v1::market::MarketDepthTrade* market_depth_trade) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (market_depth_trade) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_depth_trade));
    if (message_arena != submessage_arena) {
      market_depth_trade = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_depth_trade, submessage_arena);
    }
    set_has_market_depth_trade();
    _impl_.payload_.market_depth_trade_ = market_depth_trade;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.market_depth_trade)
}
void ServerMessage::clear_market_depth_trade() {
  if (payload_case() == kMarketDepthTrade) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.market_depth_trade_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_market_high_low(::t4proto::v1::market::MarketHighLow* market_high_low) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (market_high_low) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_high_low));
    if (message_arena != submessage_arena) {
      market_high_low = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_high_low, submessage_arena);
    }
    set_has_market_high_low();
    _impl_.payload_.market_high_low_ = market_high_low;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.market_high_low)
}
void ServerMessage::clear_market_high_low() {
  if (payload_case() == kMarketHighLow) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.market_high_low_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_market_price_limits(::t4proto::v1::market::MarketPriceLimits* market_price_limits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (market_price_limits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_price_limits));
    if (message_arena != submessage_arena) {
      market_price_limits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_price_limits, submessage_arena);
    }
    set_has_market_price_limits();
    _impl_.payload_.market_price_limits_ = market_price_limits;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.market_price_limits)
}
void ServerMessage::clear_market_price_limits() {
  if (payload_case() == kMarketPriceLimits) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.market_price_limits_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_market_settlement(::t4proto::v1::market::MarketSettlement* market_settlement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (market_settlement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_settlement));
    if (message_arena != submessage_arena) {
      market_settlement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_settlement, submessage_arena);
    }
    set_has_market_settlement();
    _impl_.payload_.market_settlement_ = market_settlement;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.market_settlement)
}
void ServerMessage::clear_market_settlement() {
  if (payload_case() == kMarketSettlement) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.market_settlement_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_market_snapshot(::t4proto::v1::market::MarketSnapshot* market_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (market_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_snapshot));
    if (message_arena != submessage_arena) {
      market_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_snapshot, submessage_arena);
    }
    set_has_market_snapshot();
    _impl_.payload_.market_snapshot_ = market_snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.market_snapshot)
}
void ServerMessage::clear_market_snapshot() {
  if (payload_case() == kMarketSnapshot) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.market_snapshot_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_market_by_order_snapshot(::t4proto::v1::market::MarketByOrderSnapshot* market_by_order_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (market_by_order_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_by_order_snapshot));
    if (message_arena != submessage_arena) {
      market_by_order_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_by_order_snapshot, submessage_arena);
    }
    set_has_market_by_order_snapshot();
    _impl_.payload_.market_by_order_snapshot_ = market_by_order_snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.market_by_order_snapshot)
}
void ServerMessage::clear_market_by_order_snapshot() {
  if (payload_case() == kMarketByOrderSnapshot) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.market_by_order_snapshot_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_market_by_order_update(::t4proto::v1::market::MarketByOrderUpdate* market_by_order_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (market_by_order_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(market_by_order_update));
    if (message_arena != submessage_arena) {
      market_by_order_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, market_by_order_update, submessage_arena);
    }
    set_has_market_by_order_update();
    _impl_.payload_.market_by_order_update_ = market_by_order_update;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.market_by_order_update)
}
void ServerMessage::clear_market_by_order_update() {
  if (payload_case() == kMarketByOrderUpdate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.market_by_order_update_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_account_subscribe_response(::t4proto::v1::account::AccountSubscribeResponse* account_subscribe_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (account_subscribe_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_subscribe_response));
    if (message_arena != submessage_arena) {
      account_subscribe_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_subscribe_response, submessage_arena);
    }
    set_has_account_subscribe_response();
    _impl_.payload_.account_subscribe_response_ = account_subscribe_response;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.account_subscribe_response)
}
void ServerMessage::clear_account_subscribe_response() {
  if (payload_case() == kAccountSubscribeResponse) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.account_subscribe_response_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_account_currency(::t4proto::v1::account::AccountCurrency* account_currency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (account_currency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_currency));
    if (message_arena != submessage_arena) {
      account_currency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_currency, submessage_arena);
    }
    set_has_account_currency();
    _impl_.payload_.account_currency_ = account_currency;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.account_currency)
}
void ServerMessage::clear_account_currency() {
  if (payload_case() == kAccountCurrency) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.account_currency_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_account_position(::t4proto::v1::account::AccountPosition* account_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (account_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_position));
    if (message_arena != submessage_arena) {
      account_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_position, submessage_arena);
    }
    set_has_account_position();
    _impl_.payload_.account_position_ = account_position;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.account_position)
}
void ServerMessage::clear_account_position() {
  if (payload_case() == kAccountPosition) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.account_position_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_account_update(::t4proto::v1::account::AccountUpdate* account_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (account_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_update));
    if (message_arena != submessage_arena) {
      account_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_update, submessage_arena);
    }
    set_has_account_update();
    _impl_.payload_.account_update_ = account_update;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.account_update)
}
void ServerMessage::clear_account_update() {
  if (payload_case() == kAccountUpdate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.account_update_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_account_details(::t4proto::v1::account::AccountDetails* account_details) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (account_details) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_details));
    if (message_arena != submessage_arena) {
      account_details = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_details, submessage_arena);
    }
    set_has_account_details();
    _impl_.payload_.account_details_ = account_details;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.account_details)
}
void ServerMessage::clear_account_details() {
  if (payload_case() == kAccountDetails) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.account_details_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_account_snapshot(::t4proto::v1::account::AccountSnapshot* account_snapshot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (account_snapshot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_snapshot));
    if (message_arena != submessage_arena) {
      account_snapshot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_snapshot, submessage_arena);
    }
    set_has_account_snapshot();
    _impl_.payload_.account_snapshot_ = account_snapshot;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.account_snapshot)
}
void ServerMessage::clear_account_snapshot() {
  if (payload_case() == kAccountSnapshot) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.account_snapshot_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_account_profit(::t4proto::v1::account::AccountProfit* account_profit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (account_profit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_profit));
    if (message_arena != submessage_arena) {
      account_profit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_profit, submessage_arena);
    }
    set_has_account_profit();
    _impl_.payload_.account_profit_ = account_profit;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.account_profit)
}
void ServerMessage::clear_account_profit() {
  if (payload_case() == kAccountProfit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.account_profit_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_account_position_profit(::t4proto::v1::account::AccountPositionProfit* account_position_profit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (account_position_profit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(account_position_profit));
    if (message_arena != submessage_arena) {
      account_position_profit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account_position_profit, submessage_arena);
    }
    set_has_account_position_profit();
    _impl_.payload_.account_position_profit_ = account_position_profit;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.account_position_profit)
}
void ServerMessage::clear_account_position_profit() {
  if (payload_case() == kAccountPositionProfit) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.account_position_profit_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_order_update(::t4proto::v1::orderrouting::OrderUpdate* order_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (order_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_update));
    if (message_arena != submessage_arena) {
      order_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_update, submessage_arena);
    }
    set_has_order_update();
    _impl_.payload_.order_update_ = order_update;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.order_update)
}
void ServerMessage::clear_order_update() {
  if (payload_case() == kOrderUpdate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.order_update_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_order_update_multi(::t4proto::v1::orderrouting::OrderUpdateMulti* order_update_multi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (order_update_multi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_update_multi));
    if (message_arena != submessage_arena) {
      order_update_multi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_update_multi, submessage_arena);
    }
    set_has_order_update_multi();
    _impl_.payload_.order_update_multi_ = order_update_multi;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.order_update_multi)
}
void ServerMessage::clear_order_update_multi() {
  if (payload_case() == kOrderUpdateMulti) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.order_update_multi_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_order_update_failed(::t4proto::v1::orderrouting::OrderUpdateFailed* order_update_failed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (order_update_failed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_update_failed));
    if (message_arena != submessage_arena) {
      order_update_failed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_update_failed, submessage_arena);
    }
    set_has_order_update_failed();
    _impl_.payload_.order_update_failed_ = order_update_failed;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.order_update_failed)
}
void ServerMessage::clear_order_update_failed() {
  if (payload_case() == kOrderUpdateFailed) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.order_update_failed_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_order_update_status(::t4proto::v1::orderrouting::OrderUpdateStatus* order_update_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (order_update_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_update_status));
    if (message_arena != submessage_arena) {
      order_update_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_update_status, submessage_arena);
    }
    set_has_order_update_status();
    _impl_.payload_.order_update_status_ = order_update_status;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.order_update_status)
}
void ServerMessage::clear_order_update_status() {
  if (payload_case() == kOrderUpdateStatus) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.order_update_status_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_order_update_trade(::t4proto::v1::orderrouting::OrderUpdateTrade* order_update_trade) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (order_update_trade) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_update_trade));
    if (message_arena != submessage_arena) {
      order_update_trade = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_update_trade, submessage_arena);
    }
    set_has_order_update_trade();
    _impl_.payload_.order_update_trade_ = order_update_trade;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.order_update_trade)
}
void ServerMessage::clear_order_update_trade() {
  if (payload_case() == kOrderUpdateTrade) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.order_update_trade_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_order_update_trade_leg(::t4proto::v1::orderrouting::OrderUpdateTradeLeg* order_update_trade_leg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (order_update_trade_leg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(order_update_trade_leg));
    if (message_arena != submessage_arena) {
      order_update_trade_leg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_update_trade_leg, submessage_arena);
    }
    set_has_order_update_trade_leg();
    _impl_.payload_.order_update_trade_leg_ = order_update_trade_leg;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.order_update_trade_leg)
}
void ServerMessage::clear_order_update_trade_leg() {
  if (payload_case() == kOrderUpdateTradeLeg) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.order_update_trade_leg_;
    }
    clear_has_payload();
  }
}
void ServerMessage::set_allocated_create_uds_response(::t4proto::v1::orderrouting::CreateUDSResponse* create_uds_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (create_uds_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_uds_response));
    if (message_arena != submessage_arena) {
      create_uds_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_uds_response, submessage_arena);
    }
    set_has_create_uds_response();
    _impl_.payload_.create_uds_response_ = create_uds_response;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.service.ServerMessage.create_uds_response)
}
void ServerMessage::clear_create_uds_response() {
  if (payload_case() == kCreateUdsResponse) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.create_uds_response_;
    }
    clear_has_payload();
  }
}
ServerMessage::ServerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.service.ServerMessage)
}
ServerMessage::ServerMessage(const ServerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kHeartbeat: {
      _this->_internal_mutable_heartbeat()->::t4proto::v1::service::Heartbeat::MergeFrom(
          from._internal_heartbeat());
      break;
    }
    case kLoginResponse: {
      _this->_internal_mutable_login_response()->::t4proto::v1::auth::LoginResponse::MergeFrom(
          from._internal_login_response());
      break;
    }
    case kAuthenticationToken: {
      _this->_internal_mutable_authentication_token()->::t4proto::v1::auth::AuthenticationToken::MergeFrom(
          from._internal_authentication_token());
      break;
    }
    case kMarketDepthSubscribeReject: {
      _this->_internal_mutable_market_depth_subscribe_reject()->::t4proto::v1::market::MarketDepthSubscribeReject::MergeFrom(
          from._internal_market_depth_subscribe_reject());
      break;
    }
    case kMarketByOrderSubscribeReject: {
      _this->_internal_mutable_market_by_order_subscribe_reject()->::t4proto::v1::market::MarketByOrderSubscribeReject::MergeFrom(
          from._internal_market_by_order_subscribe_reject());
      break;
    }
    case kMarketDetails: {
      _this->_internal_mutable_market_details()->::t4proto::v1::market::MarketDetails::MergeFrom(
          from._internal_market_details());
      break;
    }
    case kMarketDepth: {
      _this->_internal_mutable_market_depth()->::t4proto::v1::market::MarketDepth::MergeFrom(
          from._internal_market_depth());
      break;
    }
    case kMarketDepthTrade: {
      _this->_internal_mutable_market_depth_trade()->::t4proto::v1::market::MarketDepthTrade::MergeFrom(
          from._internal_market_depth_trade());
      break;
    }
    case kMarketHighLow: {
      _this->_internal_mutable_market_high_low()->::t4proto::v1::market::MarketHighLow::MergeFrom(
          from._internal_market_high_low());
      break;
    }
    case kMarketPriceLimits: {
      _this->_internal_mutable_market_price_limits()->::t4proto::v1::market::MarketPriceLimits::MergeFrom(
          from._internal_market_price_limits());
      break;
    }
    case kMarketSettlement: {
      _this->_internal_mutable_market_settlement()->::t4proto::v1::market::MarketSettlement::MergeFrom(
          from._internal_market_settlement());
      break;
    }
    case kMarketSnapshot: {
      _this->_internal_mutable_market_snapshot()->::t4proto::v1::market::MarketSnapshot::MergeFrom(
          from._internal_market_snapshot());
      break;
    }
    case kMarketByOrderSnapshot: {
      _this->_internal_mutable_market_by_order_snapshot()->::t4proto::v1::market::MarketByOrderSnapshot::MergeFrom(
          from._internal_market_by_order_snapshot());
      break;
    }
    case kMarketByOrderUpdate: {
      _this->_internal_mutable_market_by_order_update()->::t4proto::v1::market::MarketByOrderUpdate::MergeFrom(
          from._internal_market_by_order_update());
      break;
    }
    case kAccountSubscribeResponse: {
      _this->_internal_mutable_account_subscribe_response()->::t4proto::v1::account::AccountSubscribeResponse::MergeFrom(
          from._internal_account_subscribe_response());
      break;
    }
    case kAccountCurrency: {
      _this->_internal_mutable_account_currency()->::t4proto::v1::account::AccountCurrency::MergeFrom(
          from._internal_account_currency());
      break;
    }
    case kAccountPosition: {
      _this->_internal_mutable_account_position()->::t4proto::v1::account::AccountPosition::MergeFrom(
          from._internal_account_position());
      break;
    }
    case kAccountUpdate: {
      _this->_internal_mutable_account_update()->::t4proto::v1::account::AccountUpdate::MergeFrom(
          from._internal_account_update());
      break;
    }
    case kAccountDetails: {
      _this->_internal_mutable_account_details()->::t4proto::v1::account::AccountDetails::MergeFrom(
          from._internal_account_details());
      break;
    }
    case kAccountSnapshot: {
      _this->_internal_mutable_account_snapshot()->::t4proto::v1::account::AccountSnapshot::MergeFrom(
          from._internal_account_snapshot());
      break;
    }
    case kAccountProfit: {
      _this->_internal_mutable_account_profit()->::t4proto::v1::account::AccountProfit::MergeFrom(
          from._internal_account_profit());
      break;
    }
    case kAccountPositionProfit: {
      _this->_internal_mutable_account_position_profit()->::t4proto::v1::account::AccountPositionProfit::MergeFrom(
          from._internal_account_position_profit());
      break;
    }
    case kOrderUpdate: {
      _this->_internal_mutable_order_update()->::t4proto::v1::orderrouting::OrderUpdate::MergeFrom(
          from._internal_order_update());
      break;
    }
    case kOrderUpdateMulti: {
      _this->_internal_mutable_order_update_multi()->::t4proto::v1::orderrouting::OrderUpdateMulti::MergeFrom(
          from._internal_order_update_multi());
      break;
    }
    case kOrderUpdateFailed: {
      _this->_internal_mutable_order_update_failed()->::t4proto::v1::orderrouting::OrderUpdateFailed::MergeFrom(
          from._internal_order_update_failed());
      break;
    }
    case kOrderUpdateStatus: {
      _this->_internal_mutable_order_update_status()->::t4proto::v1::orderrouting::OrderUpdateStatus::MergeFrom(
          from._internal_order_update_status());
      break;
    }
    case kOrderUpdateTrade: {
      _this->_internal_mutable_order_update_trade()->::t4proto::v1::orderrouting::OrderUpdateTrade::MergeFrom(
          from._internal_order_update_trade());
      break;
    }
    case kOrderUpdateTradeLeg: {
      _this->_internal_mutable_order_update_trade_leg()->::t4proto::v1::orderrouting::OrderUpdateTradeLeg::MergeFrom(
          from._internal_order_update_trade_leg());
      break;
    }
    case kCreateUdsResponse: {
      _this->_internal_mutable_create_uds_response()->::t4proto::v1::orderrouting::CreateUDSResponse::MergeFrom(
          from._internal_create_uds_response());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.service.ServerMessage)
}

inline void ServerMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

ServerMessage::~ServerMessage() {
  // @@protoc_insertion_point(destructor:t4proto.v1.service.ServerMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void ServerMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:t4proto.v1.service.ServerMessage)
  switch (payload_case()) {
    case kHeartbeat: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.heartbeat_;
      }
      break;
    }
    case kLoginResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.login_response_;
      }
      break;
    }
    case kAuthenticationToken: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.authentication_token_;
      }
      break;
    }
    case kMarketDepthSubscribeReject: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.market_depth_subscribe_reject_;
      }
      break;
    }
    case kMarketByOrderSubscribeReject: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.market_by_order_subscribe_reject_;
      }
      break;
    }
    case kMarketDetails: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.market_details_;
      }
      break;
    }
    case kMarketDepth: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.market_depth_;
      }
      break;
    }
    case kMarketDepthTrade: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.market_depth_trade_;
      }
      break;
    }
    case kMarketHighLow: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.market_high_low_;
      }
      break;
    }
    case kMarketPriceLimits: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.market_price_limits_;
      }
      break;
    }
    case kMarketSettlement: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.market_settlement_;
      }
      break;
    }
    case kMarketSnapshot: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.market_snapshot_;
      }
      break;
    }
    case kMarketByOrderSnapshot: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.market_by_order_snapshot_;
      }
      break;
    }
    case kMarketByOrderUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.market_by_order_update_;
      }
      break;
    }
    case kAccountSubscribeResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.account_subscribe_response_;
      }
      break;
    }
    case kAccountCurrency: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.account_currency_;
      }
      break;
    }
    case kAccountPosition: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.account_position_;
      }
      break;
    }
    case kAccountUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.account_update_;
      }
      break;
    }
    case kAccountDetails: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.account_details_;
      }
      break;
    }
    case kAccountSnapshot: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.account_snapshot_;
      }
      break;
    }
    case kAccountProfit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.account_profit_;
      }
      break;
    }
    case kAccountPositionProfit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.account_position_profit_;
      }
      break;
    }
    case kOrderUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.order_update_;
      }
      break;
    }
    case kOrderUpdateMulti: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.order_update_multi_;
      }
      break;
    }
    case kOrderUpdateFailed: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.order_update_failed_;
      }
      break;
    }
    case kOrderUpdateStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.order_update_status_;
      }
      break;
    }
    case kOrderUpdateTrade: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.order_update_trade_;
      }
      break;
    }
    case kOrderUpdateTradeLeg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.order_update_trade_leg_;
      }
      break;
    }
    case kCreateUdsResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.create_uds_response_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void ServerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.service.ServerMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .t4proto.v1.service.Heartbeat heartbeat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_heartbeat(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.auth.LoginResponse login_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_login_response(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.auth.AuthenticationToken authentication_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_authentication_token(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.market.MarketDepthSubscribeReject market_depth_subscribe_reject = 100;
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_depth_subscribe_reject(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.market.MarketByOrderSubscribeReject market_by_order_subscribe_reject = 101;
      case 101:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_by_order_subscribe_reject(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.market.MarketDetails market_details = 102;
      case 102:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_details(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.market.MarketDepth market_depth = 103;
      case 103:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_depth(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.market.MarketDepthTrade market_depth_trade = 104;
      case 104:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_depth_trade(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.market.MarketHighLow market_high_low = 105;
      case 105:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_high_low(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.market.MarketPriceLimits market_price_limits = 106;
      case 106:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_price_limits(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.market.MarketSettlement market_settlement = 107;
      case 107:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_settlement(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.market.MarketSnapshot market_snapshot = 108;
      case 108:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_snapshot(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.market.MarketByOrderSnapshot market_by_order_snapshot = 109;
      case 109:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_by_order_snapshot(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.market.MarketByOrderUpdate market_by_order_update = 110;
      case 110:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_market_by_order_update(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.account.AccountSubscribeResponse account_subscribe_response = 200;
      case 200:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_subscribe_response(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.account.AccountCurrency account_currency = 201;
      case 201:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_currency(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.account.AccountPosition account_position = 202;
      case 202:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_position(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.account.AccountUpdate account_update = 203;
      case 203:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_update(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.account.AccountDetails account_details = 204;
      case 204:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_details(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.account.AccountSnapshot account_snapshot = 205;
      case 205:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_snapshot(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.account.AccountProfit account_profit = 206;
      case 206:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_profit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.account.AccountPositionProfit account_position_profit = 207;
      case 207:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_account_position_profit(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.orderrouting.OrderUpdate order_update = 300;
      case 300:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_update(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.orderrouting.OrderUpdateMulti order_update_multi = 301;
      case 301:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_update_multi(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.orderrouting.OrderUpdateFailed order_update_failed = 302;
      case 302:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_update_failed(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.orderrouting.OrderUpdateStatus order_update_status = 303;
      case 303:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_update_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.orderrouting.OrderUpdateTrade order_update_trade = 304;
      case 304:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_update_trade(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.orderrouting.OrderUpdateTradeLeg order_update_trade_leg = 305;
      case 305:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_update_trade_leg(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.orderrouting.CreateUDSResponse create_uds_response = 340;
      case 340:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_uds_response(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ServerMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.service.ServerMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .t4proto.v1.service.Heartbeat heartbeat = 1;
  if (payload_case() == kHeartbeat) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::heartbeat(this),
        _Internal::heartbeat(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.auth.LoginResponse login_response = 2;
  if (payload_case() == kLoginResponse) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::login_response(this),
        _Internal::login_response(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.auth.AuthenticationToken authentication_token = 3;
  if (payload_case() == kAuthenticationToken) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::authentication_token(this),
        _Internal::authentication_token(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.market.MarketDepthSubscribeReject market_depth_subscribe_reject = 100;
  if (payload_case() == kMarketDepthSubscribeReject) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(100, _Internal::market_depth_subscribe_reject(this),
        _Internal::market_depth_subscribe_reject(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.market.MarketByOrderSubscribeReject market_by_order_subscribe_reject = 101;
  if (payload_case() == kMarketByOrderSubscribeReject) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(101, _Internal::market_by_order_subscribe_reject(this),
        _Internal::market_by_order_subscribe_reject(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.market.MarketDetails market_details = 102;
  if (payload_case() == kMarketDetails) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(102, _Internal::market_details(this),
        _Internal::market_details(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.market.MarketDepth market_depth = 103;
  if (payload_case() == kMarketDepth) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(103, _Internal::market_depth(this),
        _Internal::market_depth(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.market.MarketDepthTrade market_depth_trade = 104;
  if (payload_case() == kMarketDepthTrade) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(104, _Internal::market_depth_trade(this),
        _Internal::market_depth_trade(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.market.MarketHighLow market_high_low = 105;
  if (payload_case() == kMarketHighLow) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(105, _Internal::market_high_low(this),
        _Internal::market_high_low(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.market.MarketPriceLimits market_price_limits = 106;
  if (payload_case() == kMarketPriceLimits) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(106, _Internal::market_price_limits(this),
        _Internal::market_price_limits(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.market.MarketSettlement market_settlement = 107;
  if (payload_case() == kMarketSettlement) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(107, _Internal::market_settlement(this),
        _Internal::market_settlement(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.market.MarketSnapshot market_snapshot = 108;
  if (payload_case() == kMarketSnapshot) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(108, _Internal::market_snapshot(this),
        _Internal::market_snapshot(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.market.MarketByOrderSnapshot market_by_order_snapshot = 109;
  if (payload_case() == kMarketByOrderSnapshot) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(109, _Internal::market_by_order_snapshot(this),
        _Internal::market_by_order_snapshot(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.market.MarketByOrderUpdate market_by_order_update = 110;
  if (payload_case() == kMarketByOrderUpdate) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(110, _Internal::market_by_order_update(this),
        _Internal::market_by_order_update(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.account.AccountSubscribeResponse account_subscribe_response = 200;
  if (payload_case() == kAccountSubscribeResponse) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(200, _Internal::account_subscribe_response(this),
        _Internal::account_subscribe_response(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.account.AccountCurrency account_currency = 201;
  if (payload_case() == kAccountCurrency) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(201, _Internal::account_currency(this),
        _Internal::account_currency(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.account.AccountPosition account_position = 202;
  if (payload_case() == kAccountPosition) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(202, _Internal::account_position(this),
        _Internal::account_position(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.account.AccountUpdate account_update = 203;
  if (payload_case() == kAccountUpdate) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(203, _Internal::account_update(this),
        _Internal::account_update(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.account.AccountDetails account_details = 204;
  if (payload_case() == kAccountDetails) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(204, _Internal::account_details(this),
        _Internal::account_details(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.account.AccountSnapshot account_snapshot = 205;
  if (payload_case() == kAccountSnapshot) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(205, _Internal::account_snapshot(this),
        _Internal::account_snapshot(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.account.AccountProfit account_profit = 206;
  if (payload_case() == kAccountProfit) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(206, _Internal::account_profit(this),
        _Internal::account_profit(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.account.AccountPositionProfit account_position_profit = 207;
  if (payload_case() == kAccountPositionProfit) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(207, _Internal::account_position_profit(this),
        _Internal::account_position_profit(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.orderrouting.OrderUpdate order_update = 300;
  if (payload_case() == kOrderUpdate) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(300, _Internal::order_update(this),
        _Internal::order_update(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.orderrouting.OrderUpdateMulti order_update_multi = 301;
  if (payload_case() == kOrderUpdateMulti) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(301, _Internal::order_update_multi(this),
        _Internal::order_update_multi(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.orderrouting.OrderUpdateFailed order_update_failed = 302;
  if (payload_case() == kOrderUpdateFailed) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(302, _Internal::order_update_failed(this),
        _Internal::order_update_failed(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.orderrouting.OrderUpdateStatus order_update_status = 303;
  if (payload_case() == kOrderUpdateStatus) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(303, _Internal::order_update_status(this),
        _Internal::order_update_status(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.orderrouting.OrderUpdateTrade order_update_trade = 304;
  if (payload_case() == kOrderUpdateTrade) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(304, _Internal::order_update_trade(this),
        _Internal::order_update_trade(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.orderrouting.OrderUpdateTradeLeg order_update_trade_leg = 305;
  if (payload_case() == kOrderUpdateTradeLeg) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(305, _Internal::order_update_trade_leg(this),
        _Internal::order_update_trade_leg(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.orderrouting.CreateUDSResponse create_uds_response = 340;
  if (payload_case() == kCreateUdsResponse) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(340, _Internal::create_uds_response(this),
        _Internal::create_uds_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.service.ServerMessage)
  return target;
}

::size_t ServerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.service.ServerMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .t4proto.v1.service.Heartbeat heartbeat = 1;
    case kHeartbeat: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.heartbeat_);
      break;
    }
    // .t4proto.v1.auth.LoginResponse login_response = 2;
    case kLoginResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.login_response_);
      break;
    }
    // .t4proto.v1.auth.AuthenticationToken authentication_token = 3;
    case kAuthenticationToken: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.authentication_token_);
      break;
    }
    // .t4proto.v1.market.MarketDepthSubscribeReject market_depth_subscribe_reject = 100;
    case kMarketDepthSubscribeReject: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.market_depth_subscribe_reject_);
      break;
    }
    // .t4proto.v1.market.MarketByOrderSubscribeReject market_by_order_subscribe_reject = 101;
    case kMarketByOrderSubscribeReject: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.market_by_order_subscribe_reject_);
      break;
    }
    // .t4proto.v1.market.MarketDetails market_details = 102;
    case kMarketDetails: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.market_details_);
      break;
    }
    // .t4proto.v1.market.MarketDepth market_depth = 103;
    case kMarketDepth: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.market_depth_);
      break;
    }
    // .t4proto.v1.market.MarketDepthTrade market_depth_trade = 104;
    case kMarketDepthTrade: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.market_depth_trade_);
      break;
    }
    // .t4proto.v1.market.MarketHighLow market_high_low = 105;
    case kMarketHighLow: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.market_high_low_);
      break;
    }
    // .t4proto.v1.market.MarketPriceLimits market_price_limits = 106;
    case kMarketPriceLimits: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.market_price_limits_);
      break;
    }
    // .t4proto.v1.market.MarketSettlement market_settlement = 107;
    case kMarketSettlement: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.market_settlement_);
      break;
    }
    // .t4proto.v1.market.MarketSnapshot market_snapshot = 108;
    case kMarketSnapshot: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.market_snapshot_);
      break;
    }
    // .t4proto.v1.market.MarketByOrderSnapshot market_by_order_snapshot = 109;
    case kMarketByOrderSnapshot: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.market_by_order_snapshot_);
      break;
    }
    // .t4proto.v1.market.MarketByOrderUpdate market_by_order_update = 110;
    case kMarketByOrderUpdate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.market_by_order_update_);
      break;
    }
    // .t4proto.v1.account.AccountSubscribeResponse account_subscribe_response = 200;
    case kAccountSubscribeResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.account_subscribe_response_);
      break;
    }
    // .t4proto.v1.account.AccountCurrency account_currency = 201;
    case kAccountCurrency: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.account_currency_);
      break;
    }
    // .t4proto.v1.account.AccountPosition account_position = 202;
    case kAccountPosition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.account_position_);
      break;
    }
    // .t4proto.v1.account.AccountUpdate account_update = 203;
    case kAccountUpdate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.account_update_);
      break;
    }
    // .t4proto.v1.account.AccountDetails account_details = 204;
    case kAccountDetails: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.account_details_);
      break;
    }
    // .t4proto.v1.account.AccountSnapshot account_snapshot = 205;
    case kAccountSnapshot: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.account_snapshot_);
      break;
    }
    // .t4proto.v1.account.AccountProfit account_profit = 206;
    case kAccountProfit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.account_profit_);
      break;
    }
    // .t4proto.v1.account.AccountPositionProfit account_position_profit = 207;
    case kAccountPositionProfit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.account_position_profit_);
      break;
    }
    // .t4proto.v1.orderrouting.OrderUpdate order_update = 300;
    case kOrderUpdate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.order_update_);
      break;
    }
    // .t4proto.v1.orderrouting.OrderUpdateMulti order_update_multi = 301;
    case kOrderUpdateMulti: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.order_update_multi_);
      break;
    }
    // .t4proto.v1.orderrouting.OrderUpdateFailed order_update_failed = 302;
    case kOrderUpdateFailed: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.order_update_failed_);
      break;
    }
    // .t4proto.v1.orderrouting.OrderUpdateStatus order_update_status = 303;
    case kOrderUpdateStatus: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.order_update_status_);
      break;
    }
    // .t4proto.v1.orderrouting.OrderUpdateTrade order_update_trade = 304;
    case kOrderUpdateTrade: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.order_update_trade_);
      break;
    }
    // .t4proto.v1.orderrouting.OrderUpdateTradeLeg order_update_trade_leg = 305;
    case kOrderUpdateTradeLeg: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.order_update_trade_leg_);
      break;
    }
    // .t4proto.v1.orderrouting.CreateUDSResponse create_uds_response = 340;
    case kCreateUdsResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.create_uds_response_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMessage::GetClassData() const { return &_class_data_; }


void ServerMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMessage*>(&to_msg);
  auto& from = static_cast<const ServerMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.service.ServerMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kHeartbeat: {
      _this->_internal_mutable_heartbeat()->::t4proto::v1::service::Heartbeat::MergeFrom(
          from._internal_heartbeat());
      break;
    }
    case kLoginResponse: {
      _this->_internal_mutable_login_response()->::t4proto::v1::auth::LoginResponse::MergeFrom(
          from._internal_login_response());
      break;
    }
    case kAuthenticationToken: {
      _this->_internal_mutable_authentication_token()->::t4proto::v1::auth::AuthenticationToken::MergeFrom(
          from._internal_authentication_token());
      break;
    }
    case kMarketDepthSubscribeReject: {
      _this->_internal_mutable_market_depth_subscribe_reject()->::t4proto::v1::market::MarketDepthSubscribeReject::MergeFrom(
          from._internal_market_depth_subscribe_reject());
      break;
    }
    case kMarketByOrderSubscribeReject: {
      _this->_internal_mutable_market_by_order_subscribe_reject()->::t4proto::v1::market::MarketByOrderSubscribeReject::MergeFrom(
          from._internal_market_by_order_subscribe_reject());
      break;
    }
    case kMarketDetails: {
      _this->_internal_mutable_market_details()->::t4proto::v1::market::MarketDetails::MergeFrom(
          from._internal_market_details());
      break;
    }
    case kMarketDepth: {
      _this->_internal_mutable_market_depth()->::t4proto::v1::market::MarketDepth::MergeFrom(
          from._internal_market_depth());
      break;
    }
    case kMarketDepthTrade: {
      _this->_internal_mutable_market_depth_trade()->::t4proto::v1::market::MarketDepthTrade::MergeFrom(
          from._internal_market_depth_trade());
      break;
    }
    case kMarketHighLow: {
      _this->_internal_mutable_market_high_low()->::t4proto::v1::market::MarketHighLow::MergeFrom(
          from._internal_market_high_low());
      break;
    }
    case kMarketPriceLimits: {
      _this->_internal_mutable_market_price_limits()->::t4proto::v1::market::MarketPriceLimits::MergeFrom(
          from._internal_market_price_limits());
      break;
    }
    case kMarketSettlement: {
      _this->_internal_mutable_market_settlement()->::t4proto::v1::market::MarketSettlement::MergeFrom(
          from._internal_market_settlement());
      break;
    }
    case kMarketSnapshot: {
      _this->_internal_mutable_market_snapshot()->::t4proto::v1::market::MarketSnapshot::MergeFrom(
          from._internal_market_snapshot());
      break;
    }
    case kMarketByOrderSnapshot: {
      _this->_internal_mutable_market_by_order_snapshot()->::t4proto::v1::market::MarketByOrderSnapshot::MergeFrom(
          from._internal_market_by_order_snapshot());
      break;
    }
    case kMarketByOrderUpdate: {
      _this->_internal_mutable_market_by_order_update()->::t4proto::v1::market::MarketByOrderUpdate::MergeFrom(
          from._internal_market_by_order_update());
      break;
    }
    case kAccountSubscribeResponse: {
      _this->_internal_mutable_account_subscribe_response()->::t4proto::v1::account::AccountSubscribeResponse::MergeFrom(
          from._internal_account_subscribe_response());
      break;
    }
    case kAccountCurrency: {
      _this->_internal_mutable_account_currency()->::t4proto::v1::account::AccountCurrency::MergeFrom(
          from._internal_account_currency());
      break;
    }
    case kAccountPosition: {
      _this->_internal_mutable_account_position()->::t4proto::v1::account::AccountPosition::MergeFrom(
          from._internal_account_position());
      break;
    }
    case kAccountUpdate: {
      _this->_internal_mutable_account_update()->::t4proto::v1::account::AccountUpdate::MergeFrom(
          from._internal_account_update());
      break;
    }
    case kAccountDetails: {
      _this->_internal_mutable_account_details()->::t4proto::v1::account::AccountDetails::MergeFrom(
          from._internal_account_details());
      break;
    }
    case kAccountSnapshot: {
      _this->_internal_mutable_account_snapshot()->::t4proto::v1::account::AccountSnapshot::MergeFrom(
          from._internal_account_snapshot());
      break;
    }
    case kAccountProfit: {
      _this->_internal_mutable_account_profit()->::t4proto::v1::account::AccountProfit::MergeFrom(
          from._internal_account_profit());
      break;
    }
    case kAccountPositionProfit: {
      _this->_internal_mutable_account_position_profit()->::t4proto::v1::account::AccountPositionProfit::MergeFrom(
          from._internal_account_position_profit());
      break;
    }
    case kOrderUpdate: {
      _this->_internal_mutable_order_update()->::t4proto::v1::orderrouting::OrderUpdate::MergeFrom(
          from._internal_order_update());
      break;
    }
    case kOrderUpdateMulti: {
      _this->_internal_mutable_order_update_multi()->::t4proto::v1::orderrouting::OrderUpdateMulti::MergeFrom(
          from._internal_order_update_multi());
      break;
    }
    case kOrderUpdateFailed: {
      _this->_internal_mutable_order_update_failed()->::t4proto::v1::orderrouting::OrderUpdateFailed::MergeFrom(
          from._internal_order_update_failed());
      break;
    }
    case kOrderUpdateStatus: {
      _this->_internal_mutable_order_update_status()->::t4proto::v1::orderrouting::OrderUpdateStatus::MergeFrom(
          from._internal_order_update_status());
      break;
    }
    case kOrderUpdateTrade: {
      _this->_internal_mutable_order_update_trade()->::t4proto::v1::orderrouting::OrderUpdateTrade::MergeFrom(
          from._internal_order_update_trade());
      break;
    }
    case kOrderUpdateTradeLeg: {
      _this->_internal_mutable_order_update_trade_leg()->::t4proto::v1::orderrouting::OrderUpdateTradeLeg::MergeFrom(
          from._internal_order_update_trade_leg());
      break;
    }
    case kCreateUdsResponse: {
      _this->_internal_mutable_create_uds_response()->::t4proto::v1::orderrouting::CreateUDSResponse::MergeFrom(
          from._internal_create_uds_response());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMessage::CopyFrom(const ServerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.service.ServerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage::IsInitialized() const {
  return true;
}

void ServerMessage::InternalSwap(ServerMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fservice_2eproto_getter, &descriptor_table_t4_2fv1_2fservice_2eproto_once,
      file_level_metadata_t4_2fv1_2fservice_2eproto[1]);
}
// ===================================================================

class Heartbeat::_Internal {
 public:
};

Heartbeat::Heartbeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.service.Heartbeat)
}
Heartbeat::Heartbeat(const Heartbeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.service.Heartbeat)
}

inline void Heartbeat::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.timestamp_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:t4proto.v1.service.Heartbeat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Heartbeat::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void Heartbeat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.service.Heartbeat)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timestamp_ = ::int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Heartbeat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Heartbeat::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.service.Heartbeat)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.service.Heartbeat)
  return target;
}

::size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.service.Heartbeat)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timestamp = 1;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Heartbeat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Heartbeat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Heartbeat::GetClassData() const { return &_class_data_; }


void Heartbeat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Heartbeat*>(&to_msg);
  auto& from = static_cast<const Heartbeat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.service.Heartbeat)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.service.Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
  return true;
}

void Heartbeat::InternalSwap(Heartbeat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);

  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Heartbeat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fservice_2eproto_getter, &descriptor_table_t4_2fv1_2fservice_2eproto_once,
      file_level_metadata_t4_2fv1_2fservice_2eproto[2]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace service
}  // namespace v1
}  // namespace t4proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::t4proto::v1::service::ClientMessage*
Arena::CreateMaybeMessage< ::t4proto::v1::service::ClientMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::service::ClientMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::service::ServerMessage*
Arena::CreateMaybeMessage< ::t4proto::v1::service::ServerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::service::ServerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::service::Heartbeat*
Arena::CreateMaybeMessage< ::t4proto::v1::service::Heartbeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::service::Heartbeat >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
