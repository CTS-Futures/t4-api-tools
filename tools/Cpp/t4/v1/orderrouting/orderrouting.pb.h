// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: t4/v1/orderrouting/orderrouting.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_t4_2fv1_2forderrouting_2forderrouting_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_t4_2fv1_2forderrouting_2forderrouting_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "t4/v1/common/enums.pb.h"
#include "t4/v1/common/price.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_t4_2fv1_2forderrouting_2forderrouting_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto;
namespace t4proto {
namespace v1 {
namespace orderrouting {
class CreateUDS;
struct CreateUDSDefaultTypeInternal;
extern CreateUDSDefaultTypeInternal _CreateUDS_default_instance_;
class CreateUDSResponse;
struct CreateUDSResponseDefaultTypeInternal;
extern CreateUDSResponseDefaultTypeInternal _CreateUDSResponse_default_instance_;
class CreateUDS_Leg;
struct CreateUDS_LegDefaultTypeInternal;
extern CreateUDS_LegDefaultTypeInternal _CreateUDS_Leg_default_instance_;
class OrderActivation;
struct OrderActivationDefaultTypeInternal;
extern OrderActivationDefaultTypeInternal _OrderActivation_default_instance_;
class OrderPull;
struct OrderPullDefaultTypeInternal;
extern OrderPullDefaultTypeInternal _OrderPull_default_instance_;
class OrderPull_Pull;
struct OrderPull_PullDefaultTypeInternal;
extern OrderPull_PullDefaultTypeInternal _OrderPull_Pull_default_instance_;
class OrderRevise;
struct OrderReviseDefaultTypeInternal;
extern OrderReviseDefaultTypeInternal _OrderRevise_default_instance_;
class OrderRevise_Revise;
struct OrderRevise_ReviseDefaultTypeInternal;
extern OrderRevise_ReviseDefaultTypeInternal _OrderRevise_Revise_default_instance_;
class OrderSubmit;
struct OrderSubmitDefaultTypeInternal;
extern OrderSubmitDefaultTypeInternal _OrderSubmit_default_instance_;
class OrderSubmit_Order;
struct OrderSubmit_OrderDefaultTypeInternal;
extern OrderSubmit_OrderDefaultTypeInternal _OrderSubmit_Order_default_instance_;
class OrderUpdate;
struct OrderUpdateDefaultTypeInternal;
extern OrderUpdateDefaultTypeInternal _OrderUpdate_default_instance_;
class OrderUpdateFailed;
struct OrderUpdateFailedDefaultTypeInternal;
extern OrderUpdateFailedDefaultTypeInternal _OrderUpdateFailed_default_instance_;
class OrderUpdateMulti;
struct OrderUpdateMultiDefaultTypeInternal;
extern OrderUpdateMultiDefaultTypeInternal _OrderUpdateMulti_default_instance_;
class OrderUpdateMultiMessage;
struct OrderUpdateMultiMessageDefaultTypeInternal;
extern OrderUpdateMultiMessageDefaultTypeInternal _OrderUpdateMultiMessage_default_instance_;
class OrderUpdateStatus;
struct OrderUpdateStatusDefaultTypeInternal;
extern OrderUpdateStatusDefaultTypeInternal _OrderUpdateStatus_default_instance_;
class OrderUpdateStatus_InstructionExtraEntry_DoNotUse;
struct OrderUpdateStatus_InstructionExtraEntry_DoNotUseDefaultTypeInternal;
extern OrderUpdateStatus_InstructionExtraEntry_DoNotUseDefaultTypeInternal _OrderUpdateStatus_InstructionExtraEntry_DoNotUse_default_instance_;
class OrderUpdateTrade;
struct OrderUpdateTradeDefaultTypeInternal;
extern OrderUpdateTradeDefaultTypeInternal _OrderUpdateTrade_default_instance_;
class OrderUpdateTradeLeg;
struct OrderUpdateTradeLegDefaultTypeInternal;
extern OrderUpdateTradeLegDefaultTypeInternal _OrderUpdateTradeLeg_default_instance_;
class OrderUpdate_InstructionExtraEntry_DoNotUse;
struct OrderUpdate_InstructionExtraEntry_DoNotUseDefaultTypeInternal;
extern OrderUpdate_InstructionExtraEntry_DoNotUseDefaultTypeInternal _OrderUpdate_InstructionExtraEntry_DoNotUse_default_instance_;
class OrderUpdate_Trade;
struct OrderUpdate_TradeDefaultTypeInternal;
extern OrderUpdate_TradeDefaultTypeInternal _OrderUpdate_Trade_default_instance_;
class OrderUpdate_TradeLeg;
struct OrderUpdate_TradeLegDefaultTypeInternal;
extern OrderUpdate_TradeLegDefaultTypeInternal _OrderUpdate_TradeLeg_default_instance_;
}  // namespace orderrouting
}  // namespace v1
}  // namespace t4proto
PROTOBUF_NAMESPACE_OPEN
template <>
::t4proto::v1::orderrouting::CreateUDS* Arena::CreateMaybeMessage<::t4proto::v1::orderrouting::CreateUDS>(Arena*);
template <>
::t4proto::v1::orderrouting::CreateUDSResponse* Arena::CreateMaybeMessage<::t4proto::v1::orderrouting::CreateUDSResponse>(Arena*);
template <>
::t4proto::v1::orderrouting::CreateUDS_Leg* Arena::CreateMaybeMessage<::t4proto::v1::orderrouting::CreateUDS_Leg>(Arena*);
template <>
::t4proto::v1::orderrouting::OrderActivation* Arena::CreateMaybeMessage<::t4proto::v1::orderrouting::OrderActivation>(Arena*);
template <>
::t4proto::v1::orderrouting::OrderPull* Arena::CreateMaybeMessage<::t4proto::v1::orderrouting::OrderPull>(Arena*);
template <>
::t4proto::v1::orderrouting::OrderPull_Pull* Arena::CreateMaybeMessage<::t4proto::v1::orderrouting::OrderPull_Pull>(Arena*);
template <>
::t4proto::v1::orderrouting::OrderRevise* Arena::CreateMaybeMessage<::t4proto::v1::orderrouting::OrderRevise>(Arena*);
template <>
::t4proto::v1::orderrouting::OrderRevise_Revise* Arena::CreateMaybeMessage<::t4proto::v1::orderrouting::OrderRevise_Revise>(Arena*);
template <>
::t4proto::v1::orderrouting::OrderSubmit* Arena::CreateMaybeMessage<::t4proto::v1::orderrouting::OrderSubmit>(Arena*);
template <>
::t4proto::v1::orderrouting::OrderSubmit_Order* Arena::CreateMaybeMessage<::t4proto::v1::orderrouting::OrderSubmit_Order>(Arena*);
template <>
::t4proto::v1::orderrouting::OrderUpdate* Arena::CreateMaybeMessage<::t4proto::v1::orderrouting::OrderUpdate>(Arena*);
template <>
::t4proto::v1::orderrouting::OrderUpdateFailed* Arena::CreateMaybeMessage<::t4proto::v1::orderrouting::OrderUpdateFailed>(Arena*);
template <>
::t4proto::v1::orderrouting::OrderUpdateMulti* Arena::CreateMaybeMessage<::t4proto::v1::orderrouting::OrderUpdateMulti>(Arena*);
template <>
::t4proto::v1::orderrouting::OrderUpdateMultiMessage* Arena::CreateMaybeMessage<::t4proto::v1::orderrouting::OrderUpdateMultiMessage>(Arena*);
template <>
::t4proto::v1::orderrouting::OrderUpdateStatus* Arena::CreateMaybeMessage<::t4proto::v1::orderrouting::OrderUpdateStatus>(Arena*);
template <>
::t4proto::v1::orderrouting::OrderUpdateStatus_InstructionExtraEntry_DoNotUse* Arena::CreateMaybeMessage<::t4proto::v1::orderrouting::OrderUpdateStatus_InstructionExtraEntry_DoNotUse>(Arena*);
template <>
::t4proto::v1::orderrouting::OrderUpdateTrade* Arena::CreateMaybeMessage<::t4proto::v1::orderrouting::OrderUpdateTrade>(Arena*);
template <>
::t4proto::v1::orderrouting::OrderUpdateTradeLeg* Arena::CreateMaybeMessage<::t4proto::v1::orderrouting::OrderUpdateTradeLeg>(Arena*);
template <>
::t4proto::v1::orderrouting::OrderUpdate_InstructionExtraEntry_DoNotUse* Arena::CreateMaybeMessage<::t4proto::v1::orderrouting::OrderUpdate_InstructionExtraEntry_DoNotUse>(Arena*);
template <>
::t4proto::v1::orderrouting::OrderUpdate_Trade* Arena::CreateMaybeMessage<::t4proto::v1::orderrouting::OrderUpdate_Trade>(Arena*);
template <>
::t4proto::v1::orderrouting::OrderUpdate_TradeLeg* Arena::CreateMaybeMessage<::t4proto::v1::orderrouting::OrderUpdate_TradeLeg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace t4proto {
namespace v1 {
namespace orderrouting {

// ===================================================================


// -------------------------------------------------------------------

class OrderActivation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.orderrouting.OrderActivation) */ {
 public:
  inline OrderActivation() : OrderActivation(nullptr) {}
  ~OrderActivation() override;
  explicit PROTOBUF_CONSTEXPR OrderActivation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderActivation(const OrderActivation& from);
  OrderActivation(OrderActivation&& from) noexcept
    : OrderActivation() {
    *this = ::std::move(from);
  }

  inline OrderActivation& operator=(const OrderActivation& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderActivation& operator=(OrderActivation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderActivation& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderActivation* internal_default_instance() {
    return reinterpret_cast<const OrderActivation*>(
               &_OrderActivation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(OrderActivation& a, OrderActivation& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderActivation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderActivation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderActivation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderActivation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderActivation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderActivation& from) {
    OrderActivation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderActivation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.orderrouting.OrderActivation";
  }
  protected:
  explicit OrderActivation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubmitTimeFieldNumber = 1,
    kCancelTimeFieldNumber = 3,
    kActivationCancelTimeFieldNumber = 5,
    kPriceFieldNumber = 8,
    kSubmitDelayMsFieldNumber = 2,
    kCancelDelayMsFieldNumber = 4,
    kActivationCancelDelayMsFieldNumber = 6,
    kModeFieldNumber = 7,
    kVolumeFieldNumber = 9,
    kBidOfferFieldNumber = 10,
    kImpliedFieldNumber = 11,
    kQueueSubmitFieldNumber = 12,
  };
  // optional .google.protobuf.Timestamp submit_time = 1;
  bool has_submit_time() const;
  void clear_submit_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& submit_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_submit_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_submit_time();
  void set_allocated_submit_time(::PROTOBUF_NAMESPACE_ID::Timestamp* submit_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_submit_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_submit_time();
  public:
  void unsafe_arena_set_allocated_submit_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* submit_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_submit_time();
  // optional .google.protobuf.Timestamp cancel_time = 3;
  bool has_cancel_time() const;
  void clear_cancel_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& cancel_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_cancel_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_cancel_time();
  void set_allocated_cancel_time(::PROTOBUF_NAMESPACE_ID::Timestamp* cancel_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_cancel_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_cancel_time();
  public:
  void unsafe_arena_set_allocated_cancel_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* cancel_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_cancel_time();
  // optional .google.protobuf.Timestamp activation_cancel_time = 5;
  bool has_activation_cancel_time() const;
  void clear_activation_cancel_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& activation_cancel_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_activation_cancel_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_activation_cancel_time();
  void set_allocated_activation_cancel_time(::PROTOBUF_NAMESPACE_ID::Timestamp* activation_cancel_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_activation_cancel_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_activation_cancel_time();
  public:
  void unsafe_arena_set_allocated_activation_cancel_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* activation_cancel_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_activation_cancel_time();
  // optional .t4proto.v1.common.Price price = 8;
  bool has_price() const;
  void clear_price() ;
  const ::t4proto::v1::common::Price& price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_price();
  ::t4proto::v1::common::Price* mutable_price();
  void set_allocated_price(::t4proto::v1::common::Price* price);
  private:
  const ::t4proto::v1::common::Price& _internal_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::t4proto::v1::common::Price* price);
  ::t4proto::v1::common::Price* unsafe_arena_release_price();
  // optional int64 submit_delay_ms = 2;
  bool has_submit_delay_ms() const;
  void clear_submit_delay_ms() ;
  ::int64_t submit_delay_ms() const;
  void set_submit_delay_ms(::int64_t value);

  private:
  ::int64_t _internal_submit_delay_ms() const;
  void _internal_set_submit_delay_ms(::int64_t value);

  public:
  // optional int64 cancel_delay_ms = 4;
  bool has_cancel_delay_ms() const;
  void clear_cancel_delay_ms() ;
  ::int64_t cancel_delay_ms() const;
  void set_cancel_delay_ms(::int64_t value);

  private:
  ::int64_t _internal_cancel_delay_ms() const;
  void _internal_set_cancel_delay_ms(::int64_t value);

  public:
  // optional int64 activation_cancel_delay_ms = 6;
  bool has_activation_cancel_delay_ms() const;
  void clear_activation_cancel_delay_ms() ;
  ::int64_t activation_cancel_delay_ms() const;
  void set_activation_cancel_delay_ms(::int64_t value);

  private:
  ::int64_t _internal_activation_cancel_delay_ms() const;
  void _internal_set_activation_cancel_delay_ms(::int64_t value);

  public:
  // optional .t4proto.v1.common.MarketMode mode = 7;
  bool has_mode() const;
  void clear_mode() ;
  ::t4proto::v1::common::MarketMode mode() const;
  void set_mode(::t4proto::v1::common::MarketMode value);

  private:
  ::t4proto::v1::common::MarketMode _internal_mode() const;
  void _internal_set_mode(::t4proto::v1::common::MarketMode value);

  public:
  // optional int32 volume = 9;
  bool has_volume() const;
  void clear_volume() ;
  ::int32_t volume() const;
  void set_volume(::int32_t value);

  private:
  ::int32_t _internal_volume() const;
  void _internal_set_volume(::int32_t value);

  public:
  // optional .t4proto.v1.common.BidOffer bid_offer = 10;
  bool has_bid_offer() const;
  void clear_bid_offer() ;
  ::t4proto::v1::common::BidOffer bid_offer() const;
  void set_bid_offer(::t4proto::v1::common::BidOffer value);

  private:
  ::t4proto::v1::common::BidOffer _internal_bid_offer() const;
  void _internal_set_bid_offer(::t4proto::v1::common::BidOffer value);

  public:
  // optional bool implied = 11;
  bool has_implied() const;
  void clear_implied() ;
  bool implied() const;
  void set_implied(bool value);

  private:
  bool _internal_implied() const;
  void _internal_set_implied(bool value);

  public:
  // optional bool queue_submit = 12;
  bool has_queue_submit() const;
  void clear_queue_submit() ;
  bool queue_submit() const;
  void set_queue_submit(bool value);

  private:
  bool _internal_queue_submit() const;
  void _internal_set_queue_submit(bool value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.orderrouting.OrderActivation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* submit_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* cancel_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* activation_cancel_time_;
    ::t4proto::v1::common::Price* price_;
    ::int64_t submit_delay_ms_;
    ::int64_t cancel_delay_ms_;
    ::int64_t activation_cancel_delay_ms_;
    int mode_;
    ::int32_t volume_;
    int bid_offer_;
    bool implied_;
    bool queue_submit_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto;
};// -------------------------------------------------------------------

class OrderSubmit_Order final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.orderrouting.OrderSubmit.Order) */ {
 public:
  inline OrderSubmit_Order() : OrderSubmit_Order(nullptr) {}
  ~OrderSubmit_Order() override;
  explicit PROTOBUF_CONSTEXPR OrderSubmit_Order(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderSubmit_Order(const OrderSubmit_Order& from);
  OrderSubmit_Order(OrderSubmit_Order&& from) noexcept
    : OrderSubmit_Order() {
    *this = ::std::move(from);
  }

  inline OrderSubmit_Order& operator=(const OrderSubmit_Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderSubmit_Order& operator=(OrderSubmit_Order&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderSubmit_Order& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderSubmit_Order* internal_default_instance() {
    return reinterpret_cast<const OrderSubmit_Order*>(
               &_OrderSubmit_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(OrderSubmit_Order& a, OrderSubmit_Order& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderSubmit_Order* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderSubmit_Order* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderSubmit_Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderSubmit_Order>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderSubmit_Order& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderSubmit_Order& from) {
    OrderSubmit_Order::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderSubmit_Order* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.orderrouting.OrderSubmit.Order";
  }
  protected:
  explicit OrderSubmit_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 10,
    kLimitPriceFieldNumber = 7,
    kStopPriceFieldNumber = 8,
    kTrailDistanceFieldNumber = 9,
    kActivationDataFieldNumber = 12,
    kBuySellFieldNumber = 1,
    kPriceTypeFieldNumber = 2,
    kTimeTypeFieldNumber = 3,
    kVolumeFieldNumber = 4,
    kMaxShowFieldNumber = 5,
    kMaxVolumeFieldNumber = 6,
    kActivationTypeFieldNumber = 11,
  };
  // optional string tag = 10;
  bool has_tag() const;
  void clear_tag() ;
  const std::string& tag() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag(Arg_&& arg, Args_... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* ptr);

  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(
      const std::string& value);
  std::string* _internal_mutable_tag();

  public:
  // optional .t4proto.v1.common.Price limit_price = 7;
  bool has_limit_price() const;
  void clear_limit_price() ;
  const ::t4proto::v1::common::Price& limit_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_limit_price();
  ::t4proto::v1::common::Price* mutable_limit_price();
  void set_allocated_limit_price(::t4proto::v1::common::Price* limit_price);
  private:
  const ::t4proto::v1::common::Price& _internal_limit_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_limit_price();
  public:
  void unsafe_arena_set_allocated_limit_price(
      ::t4proto::v1::common::Price* limit_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_limit_price();
  // optional .t4proto.v1.common.Price stop_price = 8;
  bool has_stop_price() const;
  void clear_stop_price() ;
  const ::t4proto::v1::common::Price& stop_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_stop_price();
  ::t4proto::v1::common::Price* mutable_stop_price();
  void set_allocated_stop_price(::t4proto::v1::common::Price* stop_price);
  private:
  const ::t4proto::v1::common::Price& _internal_stop_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_stop_price();
  public:
  void unsafe_arena_set_allocated_stop_price(
      ::t4proto::v1::common::Price* stop_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_stop_price();
  // optional .t4proto.v1.common.Price trail_distance = 9;
  bool has_trail_distance() const;
  void clear_trail_distance() ;
  const ::t4proto::v1::common::Price& trail_distance() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_trail_distance();
  ::t4proto::v1::common::Price* mutable_trail_distance();
  void set_allocated_trail_distance(::t4proto::v1::common::Price* trail_distance);
  private:
  const ::t4proto::v1::common::Price& _internal_trail_distance() const;
  ::t4proto::v1::common::Price* _internal_mutable_trail_distance();
  public:
  void unsafe_arena_set_allocated_trail_distance(
      ::t4proto::v1::common::Price* trail_distance);
  ::t4proto::v1::common::Price* unsafe_arena_release_trail_distance();
  // optional .t4proto.v1.orderrouting.OrderActivation activation_data = 12;
  bool has_activation_data() const;
  void clear_activation_data() ;
  const ::t4proto::v1::orderrouting::OrderActivation& activation_data() const;
  PROTOBUF_NODISCARD ::t4proto::v1::orderrouting::OrderActivation* release_activation_data();
  ::t4proto::v1::orderrouting::OrderActivation* mutable_activation_data();
  void set_allocated_activation_data(::t4proto::v1::orderrouting::OrderActivation* activation_data);
  private:
  const ::t4proto::v1::orderrouting::OrderActivation& _internal_activation_data() const;
  ::t4proto::v1::orderrouting::OrderActivation* _internal_mutable_activation_data();
  public:
  void unsafe_arena_set_allocated_activation_data(
      ::t4proto::v1::orderrouting::OrderActivation* activation_data);
  ::t4proto::v1::orderrouting::OrderActivation* unsafe_arena_release_activation_data();
  // .t4proto.v1.common.BuySell buy_sell = 1;
  void clear_buy_sell() ;
  ::t4proto::v1::common::BuySell buy_sell() const;
  void set_buy_sell(::t4proto::v1::common::BuySell value);

  private:
  ::t4proto::v1::common::BuySell _internal_buy_sell() const;
  void _internal_set_buy_sell(::t4proto::v1::common::BuySell value);

  public:
  // .t4proto.v1.common.PriceType price_type = 2;
  void clear_price_type() ;
  ::t4proto::v1::common::PriceType price_type() const;
  void set_price_type(::t4proto::v1::common::PriceType value);

  private:
  ::t4proto::v1::common::PriceType _internal_price_type() const;
  void _internal_set_price_type(::t4proto::v1::common::PriceType value);

  public:
  // .t4proto.v1.common.TimeType time_type = 3;
  void clear_time_type() ;
  ::t4proto::v1::common::TimeType time_type() const;
  void set_time_type(::t4proto::v1::common::TimeType value);

  private:
  ::t4proto::v1::common::TimeType _internal_time_type() const;
  void _internal_set_time_type(::t4proto::v1::common::TimeType value);

  public:
  // int32 volume = 4;
  void clear_volume() ;
  ::int32_t volume() const;
  void set_volume(::int32_t value);

  private:
  ::int32_t _internal_volume() const;
  void _internal_set_volume(::int32_t value);

  public:
  // optional int32 max_show = 5;
  bool has_max_show() const;
  void clear_max_show() ;
  ::int32_t max_show() const;
  void set_max_show(::int32_t value);

  private:
  ::int32_t _internal_max_show() const;
  void _internal_set_max_show(::int32_t value);

  public:
  // optional int32 max_volume = 6;
  bool has_max_volume() const;
  void clear_max_volume() ;
  ::int32_t max_volume() const;
  void set_max_volume(::int32_t value);

  private:
  ::int32_t _internal_max_volume() const;
  void _internal_set_max_volume(::int32_t value);

  public:
  // optional .t4proto.v1.common.ActivationType activation_type = 11;
  bool has_activation_type() const;
  void clear_activation_type() ;
  ::t4proto::v1::common::ActivationType activation_type() const;
  void set_activation_type(::t4proto::v1::common::ActivationType value);

  private:
  ::t4proto::v1::common::ActivationType _internal_activation_type() const;
  void _internal_set_activation_type(::t4proto::v1::common::ActivationType value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.orderrouting.OrderSubmit.Order)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    ::t4proto::v1::common::Price* limit_price_;
    ::t4proto::v1::common::Price* stop_price_;
    ::t4proto::v1::common::Price* trail_distance_;
    ::t4proto::v1::orderrouting::OrderActivation* activation_data_;
    int buy_sell_;
    int price_type_;
    int time_type_;
    ::int32_t volume_;
    ::int32_t max_show_;
    ::int32_t max_volume_;
    int activation_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto;
};// -------------------------------------------------------------------

class OrderSubmit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.orderrouting.OrderSubmit) */ {
 public:
  inline OrderSubmit() : OrderSubmit(nullptr) {}
  ~OrderSubmit() override;
  explicit PROTOBUF_CONSTEXPR OrderSubmit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderSubmit(const OrderSubmit& from);
  OrderSubmit(OrderSubmit&& from) noexcept
    : OrderSubmit() {
    *this = ::std::move(from);
  }

  inline OrderSubmit& operator=(const OrderSubmit& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderSubmit& operator=(OrderSubmit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderSubmit& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderSubmit* internal_default_instance() {
    return reinterpret_cast<const OrderSubmit*>(
               &_OrderSubmit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(OrderSubmit& a, OrderSubmit& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderSubmit* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderSubmit* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderSubmit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderSubmit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderSubmit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderSubmit& from) {
    OrderSubmit::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderSubmit* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.orderrouting.OrderSubmit";
  }
  protected:
  explicit OrderSubmit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OrderSubmit_Order Order;

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 6,
    kUserIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kMarketIdFieldNumber = 3,
    kOrderLinkFieldNumber = 4,
    kManualOrderIndicatorFieldNumber = 5,
  };
  // repeated .t4proto.v1.orderrouting.OrderSubmit.Order orders = 6;
  int orders_size() const;
  private:
  int _internal_orders_size() const;

  public:
  void clear_orders() ;
  ::t4proto::v1::orderrouting::OrderSubmit_Order* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderSubmit_Order >*
      mutable_orders();
  private:
  const ::t4proto::v1::orderrouting::OrderSubmit_Order& _internal_orders(int index) const;
  ::t4proto::v1::orderrouting::OrderSubmit_Order* _internal_add_orders();
  public:
  const ::t4proto::v1::orderrouting::OrderSubmit_Order& orders(int index) const;
  ::t4proto::v1::orderrouting::OrderSubmit_Order* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderSubmit_Order >&
      orders() const;
  // optional string user_id = 1;
  bool has_user_id() const;
  void clear_user_id() ;
  const std::string& user_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* ptr);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string account_id = 2;
  void clear_account_id() ;
  const std::string& account_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* ptr);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // string market_id = 3;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // .t4proto.v1.common.OrderLink order_link = 4;
  void clear_order_link() ;
  ::t4proto::v1::common::OrderLink order_link() const;
  void set_order_link(::t4proto::v1::common::OrderLink value);

  private:
  ::t4proto::v1::common::OrderLink _internal_order_link() const;
  void _internal_set_order_link(::t4proto::v1::common::OrderLink value);

  public:
  // bool manual_order_indicator = 5;
  void clear_manual_order_indicator() ;
  bool manual_order_indicator() const;
  void set_manual_order_indicator(bool value);

  private:
  bool _internal_manual_order_indicator() const;
  void _internal_set_manual_order_indicator(bool value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.orderrouting.OrderSubmit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderSubmit_Order > orders_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    int order_link_;
    bool manual_order_indicator_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto;
};// -------------------------------------------------------------------

class OrderRevise_Revise final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.orderrouting.OrderRevise.Revise) */ {
 public:
  inline OrderRevise_Revise() : OrderRevise_Revise(nullptr) {}
  ~OrderRevise_Revise() override;
  explicit PROTOBUF_CONSTEXPR OrderRevise_Revise(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderRevise_Revise(const OrderRevise_Revise& from);
  OrderRevise_Revise(OrderRevise_Revise&& from) noexcept
    : OrderRevise_Revise() {
    *this = ::std::move(from);
  }

  inline OrderRevise_Revise& operator=(const OrderRevise_Revise& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderRevise_Revise& operator=(OrderRevise_Revise&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderRevise_Revise& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderRevise_Revise* internal_default_instance() {
    return reinterpret_cast<const OrderRevise_Revise*>(
               &_OrderRevise_Revise_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(OrderRevise_Revise& a, OrderRevise_Revise& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderRevise_Revise* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderRevise_Revise* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderRevise_Revise* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderRevise_Revise>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderRevise_Revise& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderRevise_Revise& from) {
    OrderRevise_Revise::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderRevise_Revise* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.orderrouting.OrderRevise.Revise";
  }
  protected:
  explicit OrderRevise_Revise(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniqueIdFieldNumber = 1,
    kTagFieldNumber = 8,
    kLimitPriceFieldNumber = 5,
    kStopPriceFieldNumber = 6,
    kTrailPriceFieldNumber = 7,
    kActivationDataFieldNumber = 9,
    kVolumeFieldNumber = 2,
    kMaxShowFieldNumber = 3,
    kMaxVolumeFieldNumber = 4,
  };
  // string unique_id = 1;
  void clear_unique_id() ;
  const std::string& unique_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unique_id(Arg_&& arg, Args_... args);
  std::string* mutable_unique_id();
  PROTOBUF_NODISCARD std::string* release_unique_id();
  void set_allocated_unique_id(std::string* ptr);

  private:
  const std::string& _internal_unique_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unique_id(
      const std::string& value);
  std::string* _internal_mutable_unique_id();

  public:
  // optional string tag = 8;
  bool has_tag() const;
  void clear_tag() ;
  const std::string& tag() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag(Arg_&& arg, Args_... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* ptr);

  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(
      const std::string& value);
  std::string* _internal_mutable_tag();

  public:
  // optional .t4proto.v1.common.Price limit_price = 5;
  bool has_limit_price() const;
  void clear_limit_price() ;
  const ::t4proto::v1::common::Price& limit_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_limit_price();
  ::t4proto::v1::common::Price* mutable_limit_price();
  void set_allocated_limit_price(::t4proto::v1::common::Price* limit_price);
  private:
  const ::t4proto::v1::common::Price& _internal_limit_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_limit_price();
  public:
  void unsafe_arena_set_allocated_limit_price(
      ::t4proto::v1::common::Price* limit_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_limit_price();
  // optional .t4proto.v1.common.Price stop_price = 6;
  bool has_stop_price() const;
  void clear_stop_price() ;
  const ::t4proto::v1::common::Price& stop_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_stop_price();
  ::t4proto::v1::common::Price* mutable_stop_price();
  void set_allocated_stop_price(::t4proto::v1::common::Price* stop_price);
  private:
  const ::t4proto::v1::common::Price& _internal_stop_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_stop_price();
  public:
  void unsafe_arena_set_allocated_stop_price(
      ::t4proto::v1::common::Price* stop_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_stop_price();
  // optional .t4proto.v1.common.Price trail_price = 7;
  bool has_trail_price() const;
  void clear_trail_price() ;
  const ::t4proto::v1::common::Price& trail_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_trail_price();
  ::t4proto::v1::common::Price* mutable_trail_price();
  void set_allocated_trail_price(::t4proto::v1::common::Price* trail_price);
  private:
  const ::t4proto::v1::common::Price& _internal_trail_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_trail_price();
  public:
  void unsafe_arena_set_allocated_trail_price(
      ::t4proto::v1::common::Price* trail_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_trail_price();
  // optional .t4proto.v1.orderrouting.OrderActivation activation_data = 9;
  bool has_activation_data() const;
  void clear_activation_data() ;
  const ::t4proto::v1::orderrouting::OrderActivation& activation_data() const;
  PROTOBUF_NODISCARD ::t4proto::v1::orderrouting::OrderActivation* release_activation_data();
  ::t4proto::v1::orderrouting::OrderActivation* mutable_activation_data();
  void set_allocated_activation_data(::t4proto::v1::orderrouting::OrderActivation* activation_data);
  private:
  const ::t4proto::v1::orderrouting::OrderActivation& _internal_activation_data() const;
  ::t4proto::v1::orderrouting::OrderActivation* _internal_mutable_activation_data();
  public:
  void unsafe_arena_set_allocated_activation_data(
      ::t4proto::v1::orderrouting::OrderActivation* activation_data);
  ::t4proto::v1::orderrouting::OrderActivation* unsafe_arena_release_activation_data();
  // optional int32 volume = 2;
  bool has_volume() const;
  void clear_volume() ;
  ::int32_t volume() const;
  void set_volume(::int32_t value);

  private:
  ::int32_t _internal_volume() const;
  void _internal_set_volume(::int32_t value);

  public:
  // optional int32 max_show = 3;
  bool has_max_show() const;
  void clear_max_show() ;
  ::int32_t max_show() const;
  void set_max_show(::int32_t value);

  private:
  ::int32_t _internal_max_show() const;
  void _internal_set_max_show(::int32_t value);

  public:
  // optional int32 max_volume = 4;
  bool has_max_volume() const;
  void clear_max_volume() ;
  ::int32_t max_volume() const;
  void set_max_volume(::int32_t value);

  private:
  ::int32_t _internal_max_volume() const;
  void _internal_set_max_volume(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.orderrouting.OrderRevise.Revise)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    ::t4proto::v1::common::Price* limit_price_;
    ::t4proto::v1::common::Price* stop_price_;
    ::t4proto::v1::common::Price* trail_price_;
    ::t4proto::v1::orderrouting::OrderActivation* activation_data_;
    ::int32_t volume_;
    ::int32_t max_show_;
    ::int32_t max_volume_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto;
};// -------------------------------------------------------------------

class OrderRevise final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.orderrouting.OrderRevise) */ {
 public:
  inline OrderRevise() : OrderRevise(nullptr) {}
  ~OrderRevise() override;
  explicit PROTOBUF_CONSTEXPR OrderRevise(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderRevise(const OrderRevise& from);
  OrderRevise(OrderRevise&& from) noexcept
    : OrderRevise() {
    *this = ::std::move(from);
  }

  inline OrderRevise& operator=(const OrderRevise& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderRevise& operator=(OrderRevise&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderRevise& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderRevise* internal_default_instance() {
    return reinterpret_cast<const OrderRevise*>(
               &_OrderRevise_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OrderRevise& a, OrderRevise& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderRevise* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderRevise* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderRevise* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderRevise>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderRevise& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderRevise& from) {
    OrderRevise::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderRevise* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.orderrouting.OrderRevise";
  }
  protected:
  explicit OrderRevise(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OrderRevise_Revise Revise;

  // accessors -------------------------------------------------------

  enum : int {
    kRevisionsFieldNumber = 5,
    kUserIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kMarketIdFieldNumber = 3,
    kManualOrderIndicatorFieldNumber = 4,
  };
  // repeated .t4proto.v1.orderrouting.OrderRevise.Revise revisions = 5;
  int revisions_size() const;
  private:
  int _internal_revisions_size() const;

  public:
  void clear_revisions() ;
  ::t4proto::v1::orderrouting::OrderRevise_Revise* mutable_revisions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderRevise_Revise >*
      mutable_revisions();
  private:
  const ::t4proto::v1::orderrouting::OrderRevise_Revise& _internal_revisions(int index) const;
  ::t4proto::v1::orderrouting::OrderRevise_Revise* _internal_add_revisions();
  public:
  const ::t4proto::v1::orderrouting::OrderRevise_Revise& revisions(int index) const;
  ::t4proto::v1::orderrouting::OrderRevise_Revise* add_revisions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderRevise_Revise >&
      revisions() const;
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* ptr);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string account_id = 2;
  void clear_account_id() ;
  const std::string& account_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* ptr);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // string market_id = 3;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // bool manual_order_indicator = 4;
  void clear_manual_order_indicator() ;
  bool manual_order_indicator() const;
  void set_manual_order_indicator(bool value);

  private:
  bool _internal_manual_order_indicator() const;
  void _internal_set_manual_order_indicator(bool value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.orderrouting.OrderRevise)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderRevise_Revise > revisions_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    bool manual_order_indicator_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto;
};// -------------------------------------------------------------------

class OrderPull_Pull final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.orderrouting.OrderPull.Pull) */ {
 public:
  inline OrderPull_Pull() : OrderPull_Pull(nullptr) {}
  ~OrderPull_Pull() override;
  explicit PROTOBUF_CONSTEXPR OrderPull_Pull(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderPull_Pull(const OrderPull_Pull& from);
  OrderPull_Pull(OrderPull_Pull&& from) noexcept
    : OrderPull_Pull() {
    *this = ::std::move(from);
  }

  inline OrderPull_Pull& operator=(const OrderPull_Pull& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderPull_Pull& operator=(OrderPull_Pull&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderPull_Pull& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderPull_Pull* internal_default_instance() {
    return reinterpret_cast<const OrderPull_Pull*>(
               &_OrderPull_Pull_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(OrderPull_Pull& a, OrderPull_Pull& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderPull_Pull* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderPull_Pull* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderPull_Pull* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderPull_Pull>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderPull_Pull& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderPull_Pull& from) {
    OrderPull_Pull::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderPull_Pull* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.orderrouting.OrderPull.Pull";
  }
  protected:
  explicit OrderPull_Pull(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniqueIdFieldNumber = 1,
    kTagFieldNumber = 2,
  };
  // string unique_id = 1;
  void clear_unique_id() ;
  const std::string& unique_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unique_id(Arg_&& arg, Args_... args);
  std::string* mutable_unique_id();
  PROTOBUF_NODISCARD std::string* release_unique_id();
  void set_allocated_unique_id(std::string* ptr);

  private:
  const std::string& _internal_unique_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unique_id(
      const std::string& value);
  std::string* _internal_mutable_unique_id();

  public:
  // optional string tag = 2;
  bool has_tag() const;
  void clear_tag() ;
  const std::string& tag() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag(Arg_&& arg, Args_... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* ptr);

  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(
      const std::string& value);
  std::string* _internal_mutable_tag();

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.orderrouting.OrderPull.Pull)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto;
};// -------------------------------------------------------------------

class OrderPull final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.orderrouting.OrderPull) */ {
 public:
  inline OrderPull() : OrderPull(nullptr) {}
  ~OrderPull() override;
  explicit PROTOBUF_CONSTEXPR OrderPull(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderPull(const OrderPull& from);
  OrderPull(OrderPull&& from) noexcept
    : OrderPull() {
    *this = ::std::move(from);
  }

  inline OrderPull& operator=(const OrderPull& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderPull& operator=(OrderPull&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderPull& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderPull* internal_default_instance() {
    return reinterpret_cast<const OrderPull*>(
               &_OrderPull_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(OrderPull& a, OrderPull& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderPull* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderPull* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderPull* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderPull>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderPull& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderPull& from) {
    OrderPull::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderPull* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.orderrouting.OrderPull";
  }
  protected:
  explicit OrderPull(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OrderPull_Pull Pull;

  // accessors -------------------------------------------------------

  enum : int {
    kPullsFieldNumber = 5,
    kUserIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kMarketIdFieldNumber = 3,
    kManualOrderIndicatorFieldNumber = 4,
  };
  // repeated .t4proto.v1.orderrouting.OrderPull.Pull pulls = 5;
  int pulls_size() const;
  private:
  int _internal_pulls_size() const;

  public:
  void clear_pulls() ;
  ::t4proto::v1::orderrouting::OrderPull_Pull* mutable_pulls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderPull_Pull >*
      mutable_pulls();
  private:
  const ::t4proto::v1::orderrouting::OrderPull_Pull& _internal_pulls(int index) const;
  ::t4proto::v1::orderrouting::OrderPull_Pull* _internal_add_pulls();
  public:
  const ::t4proto::v1::orderrouting::OrderPull_Pull& pulls(int index) const;
  ::t4proto::v1::orderrouting::OrderPull_Pull* add_pulls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderPull_Pull >&
      pulls() const;
  // string user_id = 1;
  void clear_user_id() ;
  const std::string& user_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* ptr);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string account_id = 2;
  void clear_account_id() ;
  const std::string& account_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* ptr);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // string market_id = 3;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // bool manual_order_indicator = 4;
  void clear_manual_order_indicator() ;
  bool manual_order_indicator() const;
  void set_manual_order_indicator(bool value);

  private:
  bool _internal_manual_order_indicator() const;
  void _internal_set_manual_order_indicator(bool value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.orderrouting.OrderPull)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderPull_Pull > pulls_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    bool manual_order_indicator_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto;
};// -------------------------------------------------------------------

class CreateUDS_Leg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.orderrouting.CreateUDS.Leg) */ {
 public:
  inline CreateUDS_Leg() : CreateUDS_Leg(nullptr) {}
  ~CreateUDS_Leg() override;
  explicit PROTOBUF_CONSTEXPR CreateUDS_Leg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUDS_Leg(const CreateUDS_Leg& from);
  CreateUDS_Leg(CreateUDS_Leg&& from) noexcept
    : CreateUDS_Leg() {
    *this = ::std::move(from);
  }

  inline CreateUDS_Leg& operator=(const CreateUDS_Leg& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUDS_Leg& operator=(CreateUDS_Leg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUDS_Leg& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUDS_Leg* internal_default_instance() {
    return reinterpret_cast<const CreateUDS_Leg*>(
               &_CreateUDS_Leg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateUDS_Leg& a, CreateUDS_Leg& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUDS_Leg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUDS_Leg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateUDS_Leg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateUDS_Leg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateUDS_Leg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateUDS_Leg& from) {
    CreateUDS_Leg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUDS_Leg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.orderrouting.CreateUDS.Leg";
  }
  protected:
  explicit CreateUDS_Leg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeIdFieldNumber = 1,
    kContractIdFieldNumber = 2,
    kMarketIdFieldNumber = 3,
    kPriceFieldNumber = 6,
    kDeltaFieldNumber = 7,
    kBuySellFieldNumber = 4,
    kVolumeFieldNumber = 5,
  };
  // string exchange_id = 1;
  void clear_exchange_id() ;
  const std::string& exchange_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* ptr);

  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_id();

  public:
  // string contract_id = 2;
  void clear_contract_id() ;
  const std::string& contract_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contract_id(Arg_&& arg, Args_... args);
  std::string* mutable_contract_id();
  PROTOBUF_NODISCARD std::string* release_contract_id();
  void set_allocated_contract_id(std::string* ptr);

  private:
  const std::string& _internal_contract_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contract_id(
      const std::string& value);
  std::string* _internal_mutable_contract_id();

  public:
  // string market_id = 3;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // .t4proto.v1.common.Price price = 6;
  bool has_price() const;
  private:
  bool _internal_has_price() const;

  public:
  void clear_price() ;
  const ::t4proto::v1::common::Price& price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_price();
  ::t4proto::v1::common::Price* mutable_price();
  void set_allocated_price(::t4proto::v1::common::Price* price);
  private:
  const ::t4proto::v1::common::Price& _internal_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::t4proto::v1::common::Price* price);
  ::t4proto::v1::common::Price* unsafe_arena_release_price();
  // .t4proto.v1.common.Decimal delta = 7;
  bool has_delta() const;
  private:
  bool _internal_has_delta() const;

  public:
  void clear_delta() ;
  const ::t4proto::v1::common::Decimal& delta() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Decimal* release_delta();
  ::t4proto::v1::common::Decimal* mutable_delta();
  void set_allocated_delta(::t4proto::v1::common::Decimal* delta);
  private:
  const ::t4proto::v1::common::Decimal& _internal_delta() const;
  ::t4proto::v1::common::Decimal* _internal_mutable_delta();
  public:
  void unsafe_arena_set_allocated_delta(
      ::t4proto::v1::common::Decimal* delta);
  ::t4proto::v1::common::Decimal* unsafe_arena_release_delta();
  // .t4proto.v1.common.BuySell buy_sell = 4;
  void clear_buy_sell() ;
  ::t4proto::v1::common::BuySell buy_sell() const;
  void set_buy_sell(::t4proto::v1::common::BuySell value);

  private:
  ::t4proto::v1::common::BuySell _internal_buy_sell() const;
  void _internal_set_buy_sell(::t4proto::v1::common::BuySell value);

  public:
  // int32 volume = 5;
  void clear_volume() ;
  ::int32_t volume() const;
  void set_volume(::int32_t value);

  private:
  ::int32_t _internal_volume() const;
  void _internal_set_volume(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.orderrouting.CreateUDS.Leg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::t4proto::v1::common::Price* price_;
    ::t4proto::v1::common::Decimal* delta_;
    int buy_sell_;
    ::int32_t volume_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto;
};// -------------------------------------------------------------------

class CreateUDS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.orderrouting.CreateUDS) */ {
 public:
  inline CreateUDS() : CreateUDS(nullptr) {}
  ~CreateUDS() override;
  explicit PROTOBUF_CONSTEXPR CreateUDS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUDS(const CreateUDS& from);
  CreateUDS(CreateUDS&& from) noexcept
    : CreateUDS() {
    *this = ::std::move(from);
  }

  inline CreateUDS& operator=(const CreateUDS& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUDS& operator=(CreateUDS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUDS& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUDS* internal_default_instance() {
    return reinterpret_cast<const CreateUDS*>(
               &_CreateUDS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreateUDS& a, CreateUDS& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUDS* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUDS* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateUDS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateUDS>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateUDS& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateUDS& from) {
    CreateUDS::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUDS* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.orderrouting.CreateUDS";
  }
  protected:
  explicit CreateUDS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CreateUDS_Leg Leg;

  // accessors -------------------------------------------------------

  enum : int {
    kLegsFieldNumber = 5,
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kAccountIdFieldNumber = 3,
    kStrategyTypeFieldNumber = 4,
  };
  // repeated .t4proto.v1.orderrouting.CreateUDS.Leg legs = 5;
  int legs_size() const;
  private:
  int _internal_legs_size() const;

  public:
  void clear_legs() ;
  ::t4proto::v1::orderrouting::CreateUDS_Leg* mutable_legs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::CreateUDS_Leg >*
      mutable_legs();
  private:
  const ::t4proto::v1::orderrouting::CreateUDS_Leg& _internal_legs(int index) const;
  ::t4proto::v1::orderrouting::CreateUDS_Leg* _internal_add_legs();
  public:
  const ::t4proto::v1::orderrouting::CreateUDS_Leg& legs(int index) const;
  ::t4proto::v1::orderrouting::CreateUDS_Leg* add_legs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::CreateUDS_Leg >&
      legs() const;
  // string request_id = 1;
  void clear_request_id() ;
  const std::string& request_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_id(Arg_&& arg, Args_... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* ptr);

  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(
      const std::string& value);
  std::string* _internal_mutable_request_id();

  public:
  // string user_id = 2;
  void clear_user_id() ;
  const std::string& user_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* ptr);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string account_id = 3;
  void clear_account_id() ;
  const std::string& account_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* ptr);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // .t4proto.v1.common.StrategyType strategy_type = 4;
  void clear_strategy_type() ;
  ::t4proto::v1::common::StrategyType strategy_type() const;
  void set_strategy_type(::t4proto::v1::common::StrategyType value);

  private:
  ::t4proto::v1::common::StrategyType _internal_strategy_type() const;
  void _internal_set_strategy_type(::t4proto::v1::common::StrategyType value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.orderrouting.CreateUDS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::CreateUDS_Leg > legs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    int strategy_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto;
};// -------------------------------------------------------------------

class OrderUpdateFailed final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.orderrouting.OrderUpdateFailed) */ {
 public:
  inline OrderUpdateFailed() : OrderUpdateFailed(nullptr) {}
  ~OrderUpdateFailed() override;
  explicit PROTOBUF_CONSTEXPR OrderUpdateFailed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderUpdateFailed(const OrderUpdateFailed& from);
  OrderUpdateFailed(OrderUpdateFailed&& from) noexcept
    : OrderUpdateFailed() {
    *this = ::std::move(from);
  }

  inline OrderUpdateFailed& operator=(const OrderUpdateFailed& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderUpdateFailed& operator=(OrderUpdateFailed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderUpdateFailed& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderUpdateFailed* internal_default_instance() {
    return reinterpret_cast<const OrderUpdateFailed*>(
               &_OrderUpdateFailed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(OrderUpdateFailed& a, OrderUpdateFailed& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderUpdateFailed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderUpdateFailed* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderUpdateFailed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderUpdateFailed>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderUpdateFailed& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderUpdateFailed& from) {
    OrderUpdateFailed::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderUpdateFailed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.orderrouting.OrderUpdateFailed";
  }
  protected:
  explicit OrderUpdateFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniqueIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kMarketIdFieldNumber = 3,
    kStatusDetailFieldNumber = 8,
    kTagClOrdIdFieldNumber = 10,
    kTimeFieldNumber = 4,
    kExchangeTimeFieldNumber = 5,
    kChangeFieldNumber = 6,
    kStatusFieldNumber = 7,
    kResponsePendingFieldNumber = 9,
    kSequenceOrderFieldNumber = 11,
  };
  // string unique_id = 1;
  void clear_unique_id() ;
  const std::string& unique_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unique_id(Arg_&& arg, Args_... args);
  std::string* mutable_unique_id();
  PROTOBUF_NODISCARD std::string* release_unique_id();
  void set_allocated_unique_id(std::string* ptr);

  private:
  const std::string& _internal_unique_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unique_id(
      const std::string& value);
  std::string* _internal_mutable_unique_id();

  public:
  // string account_id = 2;
  void clear_account_id() ;
  const std::string& account_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* ptr);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // string market_id = 3;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // string status_detail = 8;
  void clear_status_detail() ;
  const std::string& status_detail() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status_detail(Arg_&& arg, Args_... args);
  std::string* mutable_status_detail();
  PROTOBUF_NODISCARD std::string* release_status_detail();
  void set_allocated_status_detail(std::string* ptr);

  private:
  const std::string& _internal_status_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_detail(
      const std::string& value);
  std::string* _internal_mutable_status_detail();

  public:
  // string tag_cl_ord_id = 10;
  void clear_tag_cl_ord_id() ;
  const std::string& tag_cl_ord_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag_cl_ord_id(Arg_&& arg, Args_... args);
  std::string* mutable_tag_cl_ord_id();
  PROTOBUF_NODISCARD std::string* release_tag_cl_ord_id();
  void set_allocated_tag_cl_ord_id(std::string* ptr);

  private:
  const std::string& _internal_tag_cl_ord_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag_cl_ord_id(
      const std::string& value);
  std::string* _internal_mutable_tag_cl_ord_id();

  public:
  // .google.protobuf.Timestamp time = 4;
  bool has_time() const;
  private:
  bool _internal_has_time() const;

  public:
  void clear_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();
  // .google.protobuf.Timestamp exchange_time = 5;
  bool has_exchange_time() const;
  private:
  bool _internal_has_exchange_time() const;

  public:
  void clear_exchange_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& exchange_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_exchange_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_exchange_time();
  void set_allocated_exchange_time(::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_exchange_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_exchange_time();
  public:
  void unsafe_arena_set_allocated_exchange_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_exchange_time();
  // .t4proto.v1.common.OrderChange change = 6;
  void clear_change() ;
  ::t4proto::v1::common::OrderChange change() const;
  void set_change(::t4proto::v1::common::OrderChange value);

  private:
  ::t4proto::v1::common::OrderChange _internal_change() const;
  void _internal_set_change(::t4proto::v1::common::OrderChange value);

  public:
  // .t4proto.v1.common.OrderStatus status = 7;
  void clear_status() ;
  ::t4proto::v1::common::OrderStatus status() const;
  void set_status(::t4proto::v1::common::OrderStatus value);

  private:
  ::t4proto::v1::common::OrderStatus _internal_status() const;
  void _internal_set_status(::t4proto::v1::common::OrderStatus value);

  public:
  // .t4proto.v1.common.ResponsePending response_pending = 9;
  void clear_response_pending() ;
  ::t4proto::v1::common::ResponsePending response_pending() const;
  void set_response_pending(::t4proto::v1::common::ResponsePending value);

  private:
  ::t4proto::v1::common::ResponsePending _internal_response_pending() const;
  void _internal_set_response_pending(::t4proto::v1::common::ResponsePending value);

  public:
  // int32 sequence_order = 11;
  void clear_sequence_order() ;
  ::int32_t sequence_order() const;
  void set_sequence_order(::int32_t value);

  private:
  ::int32_t _internal_sequence_order() const;
  void _internal_set_sequence_order(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.orderrouting.OrderUpdateFailed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_detail_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_cl_ord_id_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time_;
    int change_;
    int status_;
    int response_pending_;
    ::int32_t sequence_order_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto;
};// -------------------------------------------------------------------

class OrderUpdateStatus_InstructionExtraEntry_DoNotUse final : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OrderUpdateStatus_InstructionExtraEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OrderUpdateStatus_InstructionExtraEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  OrderUpdateStatus_InstructionExtraEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR OrderUpdateStatus_InstructionExtraEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit OrderUpdateStatus_InstructionExtraEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const OrderUpdateStatus_InstructionExtraEntry_DoNotUse& other);
  static const OrderUpdateStatus_InstructionExtraEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OrderUpdateStatus_InstructionExtraEntry_DoNotUse*>(&_OrderUpdateStatus_InstructionExtraEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "t4proto.v1.orderrouting.OrderUpdateStatus.InstructionExtraEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "t4proto.v1.orderrouting.OrderUpdateStatus.InstructionExtraEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto;
};
// -------------------------------------------------------------------

class OrderUpdateStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.orderrouting.OrderUpdateStatus) */ {
 public:
  inline OrderUpdateStatus() : OrderUpdateStatus(nullptr) {}
  ~OrderUpdateStatus() override;
  explicit PROTOBUF_CONSTEXPR OrderUpdateStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderUpdateStatus(const OrderUpdateStatus& from);
  OrderUpdateStatus(OrderUpdateStatus&& from) noexcept
    : OrderUpdateStatus() {
    *this = ::std::move(from);
  }

  inline OrderUpdateStatus& operator=(const OrderUpdateStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderUpdateStatus& operator=(OrderUpdateStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderUpdateStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderUpdateStatus* internal_default_instance() {
    return reinterpret_cast<const OrderUpdateStatus*>(
               &_OrderUpdateStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(OrderUpdateStatus& a, OrderUpdateStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderUpdateStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderUpdateStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderUpdateStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderUpdateStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderUpdateStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderUpdateStatus& from) {
    OrderUpdateStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderUpdateStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.orderrouting.OrderUpdateStatus";
  }
  protected:
  explicit OrderUpdateStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kInstructionExtraFieldNumber = 43,
    kUniqueIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kMarketIdFieldNumber = 3,
    kStatusDetailFieldNumber = 8,
    kExchangeOrderIdFieldNumber = 10,
    kExecutingLoginIdFieldNumber = 17,
    kUserIdFieldNumber = 21,
    kUserNameFieldNumber = 22,
    kUserAddressFieldNumber = 23,
    kSessionIdFieldNumber = 24,
    kAppIdFieldNumber = 25,
    kAppNameFieldNumber = 26,
    kRoutingUserIdFieldNumber = 27,
    kRoutingUserNameFieldNumber = 28,
    kTagFieldNumber = 33,
    kTagClOrdIdFieldNumber = 34,
    kTagOrigClOrdIdFieldNumber = 35,
    kSmpIdFieldNumber = 36,
    kExchangeLoginIdFieldNumber = 37,
    kExchangeLocationFieldNumber = 38,
    kAtsRegulatoryIdFieldNumber = 39,
    kAuthorizedTraderIdFieldNumber = 42,
    kActivationDetailsFieldNumber = 45,
    kTimeFieldNumber = 4,
    kExchangeTimeFieldNumber = 5,
    kCurrentLimitPriceFieldNumber = 12,
    kCurrentStopPriceFieldNumber = 13,
    kTrailPriceFieldNumber = 19,
    kNewLimitPriceFieldNumber = 30,
    kNewStopPriceFieldNumber = 31,
    kChangeFieldNumber = 6,
    kStatusFieldNumber = 7,
    kResponsePendingFieldNumber = 9,
    kCurrentVolumeFieldNumber = 11,
    kPriceTypeFieldNumber = 14,
    kTimeTypeFieldNumber = 15,
    kWorkingVolumeFieldNumber = 16,
    kActivationTypeFieldNumber = 18,
    kCurrentMaxShowFieldNumber = 20,
    kNewVolumeFieldNumber = 29,
    kNewMaxShowFieldNumber = 32,
    kMaxVolumeFieldNumber = 40,
    kSequenceOrderFieldNumber = 41,
    kAppTypeFieldNumber = 44,
  };
  // map<string, string> instruction_extra = 43;
  int instruction_extra_size() const;
  private:
  int _internal_instruction_extra_size() const;

  public:
  void clear_instruction_extra() ;
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_instruction_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_instruction_extra();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      instruction_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_instruction_extra();
  // string unique_id = 1;
  void clear_unique_id() ;
  const std::string& unique_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unique_id(Arg_&& arg, Args_... args);
  std::string* mutable_unique_id();
  PROTOBUF_NODISCARD std::string* release_unique_id();
  void set_allocated_unique_id(std::string* ptr);

  private:
  const std::string& _internal_unique_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unique_id(
      const std::string& value);
  std::string* _internal_mutable_unique_id();

  public:
  // string account_id = 2;
  void clear_account_id() ;
  const std::string& account_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* ptr);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // string market_id = 3;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // string status_detail = 8;
  void clear_status_detail() ;
  const std::string& status_detail() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status_detail(Arg_&& arg, Args_... args);
  std::string* mutable_status_detail();
  PROTOBUF_NODISCARD std::string* release_status_detail();
  void set_allocated_status_detail(std::string* ptr);

  private:
  const std::string& _internal_status_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_detail(
      const std::string& value);
  std::string* _internal_mutable_status_detail();

  public:
  // string exchange_order_id = 10;
  void clear_exchange_order_id() ;
  const std::string& exchange_order_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_order_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_order_id();
  PROTOBUF_NODISCARD std::string* release_exchange_order_id();
  void set_allocated_exchange_order_id(std::string* ptr);

  private:
  const std::string& _internal_exchange_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_order_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_order_id();

  public:
  // string executing_login_id = 17;
  void clear_executing_login_id() ;
  const std::string& executing_login_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_executing_login_id(Arg_&& arg, Args_... args);
  std::string* mutable_executing_login_id();
  PROTOBUF_NODISCARD std::string* release_executing_login_id();
  void set_allocated_executing_login_id(std::string* ptr);

  private:
  const std::string& _internal_executing_login_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_executing_login_id(
      const std::string& value);
  std::string* _internal_mutable_executing_login_id();

  public:
  // string user_id = 21;
  void clear_user_id() ;
  const std::string& user_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* ptr);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string user_name = 22;
  void clear_user_name() ;
  const std::string& user_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_name(Arg_&& arg, Args_... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* ptr);

  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(
      const std::string& value);
  std::string* _internal_mutable_user_name();

  public:
  // string user_address = 23;
  void clear_user_address() ;
  const std::string& user_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_address(Arg_&& arg, Args_... args);
  std::string* mutable_user_address();
  PROTOBUF_NODISCARD std::string* release_user_address();
  void set_allocated_user_address(std::string* ptr);

  private:
  const std::string& _internal_user_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_address(
      const std::string& value);
  std::string* _internal_mutable_user_address();

  public:
  // string session_id = 24;
  void clear_session_id() ;
  const std::string& session_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* ptr);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // string app_id = 25;
  void clear_app_id() ;
  const std::string& app_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string app_name = 26;
  void clear_app_name() ;
  const std::string& app_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_name(Arg_&& arg, Args_... args);
  std::string* mutable_app_name();
  PROTOBUF_NODISCARD std::string* release_app_name();
  void set_allocated_app_name(std::string* ptr);

  private:
  const std::string& _internal_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_name(
      const std::string& value);
  std::string* _internal_mutable_app_name();

  public:
  // string routing_user_id = 27;
  void clear_routing_user_id() ;
  const std::string& routing_user_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_routing_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_routing_user_id();
  PROTOBUF_NODISCARD std::string* release_routing_user_id();
  void set_allocated_routing_user_id(std::string* ptr);

  private:
  const std::string& _internal_routing_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_routing_user_id(
      const std::string& value);
  std::string* _internal_mutable_routing_user_id();

  public:
  // string routing_user_name = 28;
  void clear_routing_user_name() ;
  const std::string& routing_user_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_routing_user_name(Arg_&& arg, Args_... args);
  std::string* mutable_routing_user_name();
  PROTOBUF_NODISCARD std::string* release_routing_user_name();
  void set_allocated_routing_user_name(std::string* ptr);

  private:
  const std::string& _internal_routing_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_routing_user_name(
      const std::string& value);
  std::string* _internal_mutable_routing_user_name();

  public:
  // string tag = 33;
  void clear_tag() ;
  const std::string& tag() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag(Arg_&& arg, Args_... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* ptr);

  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(
      const std::string& value);
  std::string* _internal_mutable_tag();

  public:
  // string tag_cl_ord_id = 34;
  void clear_tag_cl_ord_id() ;
  const std::string& tag_cl_ord_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag_cl_ord_id(Arg_&& arg, Args_... args);
  std::string* mutable_tag_cl_ord_id();
  PROTOBUF_NODISCARD std::string* release_tag_cl_ord_id();
  void set_allocated_tag_cl_ord_id(std::string* ptr);

  private:
  const std::string& _internal_tag_cl_ord_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag_cl_ord_id(
      const std::string& value);
  std::string* _internal_mutable_tag_cl_ord_id();

  public:
  // string tag_orig_cl_ord_id = 35;
  void clear_tag_orig_cl_ord_id() ;
  const std::string& tag_orig_cl_ord_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag_orig_cl_ord_id(Arg_&& arg, Args_... args);
  std::string* mutable_tag_orig_cl_ord_id();
  PROTOBUF_NODISCARD std::string* release_tag_orig_cl_ord_id();
  void set_allocated_tag_orig_cl_ord_id(std::string* ptr);

  private:
  const std::string& _internal_tag_orig_cl_ord_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag_orig_cl_ord_id(
      const std::string& value);
  std::string* _internal_mutable_tag_orig_cl_ord_id();

  public:
  // string smp_id = 36;
  void clear_smp_id() ;
  const std::string& smp_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_smp_id(Arg_&& arg, Args_... args);
  std::string* mutable_smp_id();
  PROTOBUF_NODISCARD std::string* release_smp_id();
  void set_allocated_smp_id(std::string* ptr);

  private:
  const std::string& _internal_smp_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_smp_id(
      const std::string& value);
  std::string* _internal_mutable_smp_id();

  public:
  // string exchange_login_id = 37;
  void clear_exchange_login_id() ;
  const std::string& exchange_login_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_login_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_login_id();
  PROTOBUF_NODISCARD std::string* release_exchange_login_id();
  void set_allocated_exchange_login_id(std::string* ptr);

  private:
  const std::string& _internal_exchange_login_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_login_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_login_id();

  public:
  // string exchange_location = 38;
  void clear_exchange_location() ;
  const std::string& exchange_location() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_location(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_location();
  PROTOBUF_NODISCARD std::string* release_exchange_location();
  void set_allocated_exchange_location(std::string* ptr);

  private:
  const std::string& _internal_exchange_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_location(
      const std::string& value);
  std::string* _internal_mutable_exchange_location();

  public:
  // string ats_regulatory_id = 39;
  void clear_ats_regulatory_id() ;
  const std::string& ats_regulatory_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ats_regulatory_id(Arg_&& arg, Args_... args);
  std::string* mutable_ats_regulatory_id();
  PROTOBUF_NODISCARD std::string* release_ats_regulatory_id();
  void set_allocated_ats_regulatory_id(std::string* ptr);

  private:
  const std::string& _internal_ats_regulatory_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ats_regulatory_id(
      const std::string& value);
  std::string* _internal_mutable_ats_regulatory_id();

  public:
  // string authorized_trader_id = 42;
  void clear_authorized_trader_id() ;
  const std::string& authorized_trader_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authorized_trader_id(Arg_&& arg, Args_... args);
  std::string* mutable_authorized_trader_id();
  PROTOBUF_NODISCARD std::string* release_authorized_trader_id();
  void set_allocated_authorized_trader_id(std::string* ptr);

  private:
  const std::string& _internal_authorized_trader_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authorized_trader_id(
      const std::string& value);
  std::string* _internal_mutable_authorized_trader_id();

  public:
  // string activation_details = 45;
  void clear_activation_details() ;
  const std::string& activation_details() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_activation_details(Arg_&& arg, Args_... args);
  std::string* mutable_activation_details();
  PROTOBUF_NODISCARD std::string* release_activation_details();
  void set_allocated_activation_details(std::string* ptr);

  private:
  const std::string& _internal_activation_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_activation_details(
      const std::string& value);
  std::string* _internal_mutable_activation_details();

  public:
  // .google.protobuf.Timestamp time = 4;
  bool has_time() const;
  private:
  bool _internal_has_time() const;

  public:
  void clear_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();
  // .google.protobuf.Timestamp exchange_time = 5;
  bool has_exchange_time() const;
  private:
  bool _internal_has_exchange_time() const;

  public:
  void clear_exchange_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& exchange_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_exchange_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_exchange_time();
  void set_allocated_exchange_time(::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_exchange_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_exchange_time();
  public:
  void unsafe_arena_set_allocated_exchange_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_exchange_time();
  // .t4proto.v1.common.Price current_limit_price = 12;
  bool has_current_limit_price() const;
  private:
  bool _internal_has_current_limit_price() const;

  public:
  void clear_current_limit_price() ;
  const ::t4proto::v1::common::Price& current_limit_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_current_limit_price();
  ::t4proto::v1::common::Price* mutable_current_limit_price();
  void set_allocated_current_limit_price(::t4proto::v1::common::Price* current_limit_price);
  private:
  const ::t4proto::v1::common::Price& _internal_current_limit_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_current_limit_price();
  public:
  void unsafe_arena_set_allocated_current_limit_price(
      ::t4proto::v1::common::Price* current_limit_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_current_limit_price();
  // .t4proto.v1.common.Price current_stop_price = 13;
  bool has_current_stop_price() const;
  private:
  bool _internal_has_current_stop_price() const;

  public:
  void clear_current_stop_price() ;
  const ::t4proto::v1::common::Price& current_stop_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_current_stop_price();
  ::t4proto::v1::common::Price* mutable_current_stop_price();
  void set_allocated_current_stop_price(::t4proto::v1::common::Price* current_stop_price);
  private:
  const ::t4proto::v1::common::Price& _internal_current_stop_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_current_stop_price();
  public:
  void unsafe_arena_set_allocated_current_stop_price(
      ::t4proto::v1::common::Price* current_stop_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_current_stop_price();
  // .t4proto.v1.common.Price trail_price = 19;
  bool has_trail_price() const;
  private:
  bool _internal_has_trail_price() const;

  public:
  void clear_trail_price() ;
  const ::t4proto::v1::common::Price& trail_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_trail_price();
  ::t4proto::v1::common::Price* mutable_trail_price();
  void set_allocated_trail_price(::t4proto::v1::common::Price* trail_price);
  private:
  const ::t4proto::v1::common::Price& _internal_trail_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_trail_price();
  public:
  void unsafe_arena_set_allocated_trail_price(
      ::t4proto::v1::common::Price* trail_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_trail_price();
  // .t4proto.v1.common.Price new_limit_price = 30;
  bool has_new_limit_price() const;
  private:
  bool _internal_has_new_limit_price() const;

  public:
  void clear_new_limit_price() ;
  const ::t4proto::v1::common::Price& new_limit_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_new_limit_price();
  ::t4proto::v1::common::Price* mutable_new_limit_price();
  void set_allocated_new_limit_price(::t4proto::v1::common::Price* new_limit_price);
  private:
  const ::t4proto::v1::common::Price& _internal_new_limit_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_new_limit_price();
  public:
  void unsafe_arena_set_allocated_new_limit_price(
      ::t4proto::v1::common::Price* new_limit_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_new_limit_price();
  // .t4proto.v1.common.Price new_stop_price = 31;
  bool has_new_stop_price() const;
  private:
  bool _internal_has_new_stop_price() const;

  public:
  void clear_new_stop_price() ;
  const ::t4proto::v1::common::Price& new_stop_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_new_stop_price();
  ::t4proto::v1::common::Price* mutable_new_stop_price();
  void set_allocated_new_stop_price(::t4proto::v1::common::Price* new_stop_price);
  private:
  const ::t4proto::v1::common::Price& _internal_new_stop_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_new_stop_price();
  public:
  void unsafe_arena_set_allocated_new_stop_price(
      ::t4proto::v1::common::Price* new_stop_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_new_stop_price();
  // .t4proto.v1.common.OrderChange change = 6;
  void clear_change() ;
  ::t4proto::v1::common::OrderChange change() const;
  void set_change(::t4proto::v1::common::OrderChange value);

  private:
  ::t4proto::v1::common::OrderChange _internal_change() const;
  void _internal_set_change(::t4proto::v1::common::OrderChange value);

  public:
  // .t4proto.v1.common.OrderStatus status = 7;
  void clear_status() ;
  ::t4proto::v1::common::OrderStatus status() const;
  void set_status(::t4proto::v1::common::OrderStatus value);

  private:
  ::t4proto::v1::common::OrderStatus _internal_status() const;
  void _internal_set_status(::t4proto::v1::common::OrderStatus value);

  public:
  // .t4proto.v1.common.ResponsePending response_pending = 9;
  void clear_response_pending() ;
  ::t4proto::v1::common::ResponsePending response_pending() const;
  void set_response_pending(::t4proto::v1::common::ResponsePending value);

  private:
  ::t4proto::v1::common::ResponsePending _internal_response_pending() const;
  void _internal_set_response_pending(::t4proto::v1::common::ResponsePending value);

  public:
  // int32 current_volume = 11;
  void clear_current_volume() ;
  ::int32_t current_volume() const;
  void set_current_volume(::int32_t value);

  private:
  ::int32_t _internal_current_volume() const;
  void _internal_set_current_volume(::int32_t value);

  public:
  // .t4proto.v1.common.PriceType price_type = 14;
  void clear_price_type() ;
  ::t4proto::v1::common::PriceType price_type() const;
  void set_price_type(::t4proto::v1::common::PriceType value);

  private:
  ::t4proto::v1::common::PriceType _internal_price_type() const;
  void _internal_set_price_type(::t4proto::v1::common::PriceType value);

  public:
  // .t4proto.v1.common.TimeType time_type = 15;
  void clear_time_type() ;
  ::t4proto::v1::common::TimeType time_type() const;
  void set_time_type(::t4proto::v1::common::TimeType value);

  private:
  ::t4proto::v1::common::TimeType _internal_time_type() const;
  void _internal_set_time_type(::t4proto::v1::common::TimeType value);

  public:
  // int32 working_volume = 16;
  void clear_working_volume() ;
  ::int32_t working_volume() const;
  void set_working_volume(::int32_t value);

  private:
  ::int32_t _internal_working_volume() const;
  void _internal_set_working_volume(::int32_t value);

  public:
  // .t4proto.v1.common.ActivationType activation_type = 18;
  void clear_activation_type() ;
  ::t4proto::v1::common::ActivationType activation_type() const;
  void set_activation_type(::t4proto::v1::common::ActivationType value);

  private:
  ::t4proto::v1::common::ActivationType _internal_activation_type() const;
  void _internal_set_activation_type(::t4proto::v1::common::ActivationType value);

  public:
  // int32 current_max_show = 20;
  void clear_current_max_show() ;
  ::int32_t current_max_show() const;
  void set_current_max_show(::int32_t value);

  private:
  ::int32_t _internal_current_max_show() const;
  void _internal_set_current_max_show(::int32_t value);

  public:
  // int32 new_volume = 29;
  void clear_new_volume() ;
  ::int32_t new_volume() const;
  void set_new_volume(::int32_t value);

  private:
  ::int32_t _internal_new_volume() const;
  void _internal_set_new_volume(::int32_t value);

  public:
  // int32 new_max_show = 32;
  void clear_new_max_show() ;
  ::int32_t new_max_show() const;
  void set_new_max_show(::int32_t value);

  private:
  ::int32_t _internal_new_max_show() const;
  void _internal_set_new_max_show(::int32_t value);

  public:
  // int32 max_volume = 40;
  void clear_max_volume() ;
  ::int32_t max_volume() const;
  void set_max_volume(::int32_t value);

  private:
  ::int32_t _internal_max_volume() const;
  void _internal_set_max_volume(::int32_t value);

  public:
  // int32 sequence_order = 41;
  void clear_sequence_order() ;
  ::int32_t sequence_order() const;
  void set_sequence_order(::int32_t value);

  private:
  ::int32_t _internal_sequence_order() const;
  void _internal_set_sequence_order(::int32_t value);

  public:
  // .t4proto.v1.common.ApplicationType app_type = 44;
  void clear_app_type() ;
  ::t4proto::v1::common::ApplicationType app_type() const;
  void set_app_type(::t4proto::v1::common::ApplicationType value);

  private:
  ::t4proto::v1::common::ApplicationType _internal_app_type() const;
  void _internal_set_app_type(::t4proto::v1::common::ApplicationType value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.orderrouting.OrderUpdateStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        OrderUpdateStatus_InstructionExtraEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> instruction_extra_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_detail_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_order_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr executing_login_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr routing_user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr routing_user_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_cl_ord_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_orig_cl_ord_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smp_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_login_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_location_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ats_regulatory_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authorized_trader_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activation_details_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time_;
    ::t4proto::v1::common::Price* current_limit_price_;
    ::t4proto::v1::common::Price* current_stop_price_;
    ::t4proto::v1::common::Price* trail_price_;
    ::t4proto::v1::common::Price* new_limit_price_;
    ::t4proto::v1::common::Price* new_stop_price_;
    int change_;
    int status_;
    int response_pending_;
    ::int32_t current_volume_;
    int price_type_;
    int time_type_;
    ::int32_t working_volume_;
    int activation_type_;
    ::int32_t current_max_show_;
    ::int32_t new_volume_;
    ::int32_t new_max_show_;
    ::int32_t max_volume_;
    ::int32_t sequence_order_;
    int app_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto;
};// -------------------------------------------------------------------

class OrderUpdateTrade final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.orderrouting.OrderUpdateTrade) */ {
 public:
  inline OrderUpdateTrade() : OrderUpdateTrade(nullptr) {}
  ~OrderUpdateTrade() override;
  explicit PROTOBUF_CONSTEXPR OrderUpdateTrade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderUpdateTrade(const OrderUpdateTrade& from);
  OrderUpdateTrade(OrderUpdateTrade&& from) noexcept
    : OrderUpdateTrade() {
    *this = ::std::move(from);
  }

  inline OrderUpdateTrade& operator=(const OrderUpdateTrade& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderUpdateTrade& operator=(OrderUpdateTrade&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderUpdateTrade& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderUpdateTrade* internal_default_instance() {
    return reinterpret_cast<const OrderUpdateTrade*>(
               &_OrderUpdateTrade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(OrderUpdateTrade& a, OrderUpdateTrade& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderUpdateTrade* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderUpdateTrade* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderUpdateTrade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderUpdateTrade>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderUpdateTrade& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderUpdateTrade& from) {
    OrderUpdateTrade::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderUpdateTrade* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.orderrouting.OrderUpdateTrade";
  }
  protected:
  explicit OrderUpdateTrade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniqueIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kMarketIdFieldNumber = 3,
    kStatusDetailFieldNumber = 8,
    kExchangeTradeIdFieldNumber = 15,
    kContraTraderFieldNumber = 16,
    kContraBrokerFieldNumber = 17,
    kTimeFieldNumber = 4,
    kExchangeTimeFieldNumber = 5,
    kPriceFieldNumber = 13,
    kChangeFieldNumber = 6,
    kStatusFieldNumber = 7,
    kResponsePendingFieldNumber = 9,
    kTotalFillVolumeFieldNumber = 10,
    kWorkingVolumeFieldNumber = 11,
    kVolumeFieldNumber = 12,
    kResidualVolumeFieldNumber = 14,
    kSequenceOrderFieldNumber = 19,
    kTradeDateFieldNumber = 18,
  };
  // string unique_id = 1;
  void clear_unique_id() ;
  const std::string& unique_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unique_id(Arg_&& arg, Args_... args);
  std::string* mutable_unique_id();
  PROTOBUF_NODISCARD std::string* release_unique_id();
  void set_allocated_unique_id(std::string* ptr);

  private:
  const std::string& _internal_unique_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unique_id(
      const std::string& value);
  std::string* _internal_mutable_unique_id();

  public:
  // string account_id = 2;
  void clear_account_id() ;
  const std::string& account_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* ptr);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // string market_id = 3;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // string status_detail = 8;
  void clear_status_detail() ;
  const std::string& status_detail() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status_detail(Arg_&& arg, Args_... args);
  std::string* mutable_status_detail();
  PROTOBUF_NODISCARD std::string* release_status_detail();
  void set_allocated_status_detail(std::string* ptr);

  private:
  const std::string& _internal_status_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_detail(
      const std::string& value);
  std::string* _internal_mutable_status_detail();

  public:
  // string exchange_trade_id = 15;
  void clear_exchange_trade_id() ;
  const std::string& exchange_trade_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_trade_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_trade_id();
  PROTOBUF_NODISCARD std::string* release_exchange_trade_id();
  void set_allocated_exchange_trade_id(std::string* ptr);

  private:
  const std::string& _internal_exchange_trade_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_trade_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_trade_id();

  public:
  // string contra_trader = 16;
  void clear_contra_trader() ;
  const std::string& contra_trader() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contra_trader(Arg_&& arg, Args_... args);
  std::string* mutable_contra_trader();
  PROTOBUF_NODISCARD std::string* release_contra_trader();
  void set_allocated_contra_trader(std::string* ptr);

  private:
  const std::string& _internal_contra_trader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contra_trader(
      const std::string& value);
  std::string* _internal_mutable_contra_trader();

  public:
  // string contra_broker = 17;
  void clear_contra_broker() ;
  const std::string& contra_broker() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contra_broker(Arg_&& arg, Args_... args);
  std::string* mutable_contra_broker();
  PROTOBUF_NODISCARD std::string* release_contra_broker();
  void set_allocated_contra_broker(std::string* ptr);

  private:
  const std::string& _internal_contra_broker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contra_broker(
      const std::string& value);
  std::string* _internal_mutable_contra_broker();

  public:
  // .google.protobuf.Timestamp time = 4;
  bool has_time() const;
  private:
  bool _internal_has_time() const;

  public:
  void clear_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();
  // .google.protobuf.Timestamp exchange_time = 5;
  bool has_exchange_time() const;
  private:
  bool _internal_has_exchange_time() const;

  public:
  void clear_exchange_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& exchange_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_exchange_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_exchange_time();
  void set_allocated_exchange_time(::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_exchange_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_exchange_time();
  public:
  void unsafe_arena_set_allocated_exchange_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_exchange_time();
  // .t4proto.v1.common.Price price = 13;
  bool has_price() const;
  private:
  bool _internal_has_price() const;

  public:
  void clear_price() ;
  const ::t4proto::v1::common::Price& price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_price();
  ::t4proto::v1::common::Price* mutable_price();
  void set_allocated_price(::t4proto::v1::common::Price* price);
  private:
  const ::t4proto::v1::common::Price& _internal_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::t4proto::v1::common::Price* price);
  ::t4proto::v1::common::Price* unsafe_arena_release_price();
  // .t4proto.v1.common.OrderChange change = 6;
  void clear_change() ;
  ::t4proto::v1::common::OrderChange change() const;
  void set_change(::t4proto::v1::common::OrderChange value);

  private:
  ::t4proto::v1::common::OrderChange _internal_change() const;
  void _internal_set_change(::t4proto::v1::common::OrderChange value);

  public:
  // .t4proto.v1.common.OrderStatus status = 7;
  void clear_status() ;
  ::t4proto::v1::common::OrderStatus status() const;
  void set_status(::t4proto::v1::common::OrderStatus value);

  private:
  ::t4proto::v1::common::OrderStatus _internal_status() const;
  void _internal_set_status(::t4proto::v1::common::OrderStatus value);

  public:
  // .t4proto.v1.common.ResponsePending response_pending = 9;
  void clear_response_pending() ;
  ::t4proto::v1::common::ResponsePending response_pending() const;
  void set_response_pending(::t4proto::v1::common::ResponsePending value);

  private:
  ::t4proto::v1::common::ResponsePending _internal_response_pending() const;
  void _internal_set_response_pending(::t4proto::v1::common::ResponsePending value);

  public:
  // int32 total_fill_volume = 10;
  void clear_total_fill_volume() ;
  ::int32_t total_fill_volume() const;
  void set_total_fill_volume(::int32_t value);

  private:
  ::int32_t _internal_total_fill_volume() const;
  void _internal_set_total_fill_volume(::int32_t value);

  public:
  // int32 working_volume = 11;
  void clear_working_volume() ;
  ::int32_t working_volume() const;
  void set_working_volume(::int32_t value);

  private:
  ::int32_t _internal_working_volume() const;
  void _internal_set_working_volume(::int32_t value);

  public:
  // int32 volume = 12;
  void clear_volume() ;
  ::int32_t volume() const;
  void set_volume(::int32_t value);

  private:
  ::int32_t _internal_volume() const;
  void _internal_set_volume(::int32_t value);

  public:
  // int32 residual_volume = 14;
  void clear_residual_volume() ;
  ::int32_t residual_volume() const;
  void set_residual_volume(::int32_t value);

  private:
  ::int32_t _internal_residual_volume() const;
  void _internal_set_residual_volume(::int32_t value);

  public:
  // int32 sequence_order = 19;
  void clear_sequence_order() ;
  ::int32_t sequence_order() const;
  void set_sequence_order(::int32_t value);

  private:
  ::int32_t _internal_sequence_order() const;
  void _internal_set_sequence_order(::int32_t value);

  public:
  // int64 trade_date = 18;
  void clear_trade_date() ;
  ::int64_t trade_date() const;
  void set_trade_date(::int64_t value);

  private:
  ::int64_t _internal_trade_date() const;
  void _internal_set_trade_date(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.orderrouting.OrderUpdateTrade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_detail_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_trade_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contra_trader_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contra_broker_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time_;
    ::t4proto::v1::common::Price* price_;
    int change_;
    int status_;
    int response_pending_;
    ::int32_t total_fill_volume_;
    ::int32_t working_volume_;
    ::int32_t volume_;
    ::int32_t residual_volume_;
    ::int32_t sequence_order_;
    ::int64_t trade_date_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto;
};// -------------------------------------------------------------------

class OrderUpdateTradeLeg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.orderrouting.OrderUpdateTradeLeg) */ {
 public:
  inline OrderUpdateTradeLeg() : OrderUpdateTradeLeg(nullptr) {}
  ~OrderUpdateTradeLeg() override;
  explicit PROTOBUF_CONSTEXPR OrderUpdateTradeLeg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderUpdateTradeLeg(const OrderUpdateTradeLeg& from);
  OrderUpdateTradeLeg(OrderUpdateTradeLeg&& from) noexcept
    : OrderUpdateTradeLeg() {
    *this = ::std::move(from);
  }

  inline OrderUpdateTradeLeg& operator=(const OrderUpdateTradeLeg& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderUpdateTradeLeg& operator=(OrderUpdateTradeLeg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderUpdateTradeLeg& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderUpdateTradeLeg* internal_default_instance() {
    return reinterpret_cast<const OrderUpdateTradeLeg*>(
               &_OrderUpdateTradeLeg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(OrderUpdateTradeLeg& a, OrderUpdateTradeLeg& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderUpdateTradeLeg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderUpdateTradeLeg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderUpdateTradeLeg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderUpdateTradeLeg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderUpdateTradeLeg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderUpdateTradeLeg& from) {
    OrderUpdateTradeLeg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderUpdateTradeLeg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.orderrouting.OrderUpdateTradeLeg";
  }
  protected:
  explicit OrderUpdateTradeLeg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniqueIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kMarketIdFieldNumber = 3,
    kStatusDetailFieldNumber = 8,
    kExchangeTradeIdFieldNumber = 13,
    kContraTraderFieldNumber = 14,
    kContraBrokerFieldNumber = 15,
    kTimeFieldNumber = 4,
    kExchangeTimeFieldNumber = 5,
    kPriceFieldNumber = 12,
    kChangeFieldNumber = 6,
    kStatusFieldNumber = 7,
    kResponsePendingFieldNumber = 9,
    kLegIndexFieldNumber = 10,
    kVolumeFieldNumber = 11,
    kResidualVolumeFieldNumber = 16,
    kTradeDateFieldNumber = 17,
    kSequenceOrderFieldNumber = 18,
  };
  // string unique_id = 1;
  void clear_unique_id() ;
  const std::string& unique_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unique_id(Arg_&& arg, Args_... args);
  std::string* mutable_unique_id();
  PROTOBUF_NODISCARD std::string* release_unique_id();
  void set_allocated_unique_id(std::string* ptr);

  private:
  const std::string& _internal_unique_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unique_id(
      const std::string& value);
  std::string* _internal_mutable_unique_id();

  public:
  // string account_id = 2;
  void clear_account_id() ;
  const std::string& account_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* ptr);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // string market_id = 3;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // string status_detail = 8;
  void clear_status_detail() ;
  const std::string& status_detail() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status_detail(Arg_&& arg, Args_... args);
  std::string* mutable_status_detail();
  PROTOBUF_NODISCARD std::string* release_status_detail();
  void set_allocated_status_detail(std::string* ptr);

  private:
  const std::string& _internal_status_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_detail(
      const std::string& value);
  std::string* _internal_mutable_status_detail();

  public:
  // string exchange_trade_id = 13;
  void clear_exchange_trade_id() ;
  const std::string& exchange_trade_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_trade_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_trade_id();
  PROTOBUF_NODISCARD std::string* release_exchange_trade_id();
  void set_allocated_exchange_trade_id(std::string* ptr);

  private:
  const std::string& _internal_exchange_trade_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_trade_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_trade_id();

  public:
  // string contra_trader = 14;
  void clear_contra_trader() ;
  const std::string& contra_trader() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contra_trader(Arg_&& arg, Args_... args);
  std::string* mutable_contra_trader();
  PROTOBUF_NODISCARD std::string* release_contra_trader();
  void set_allocated_contra_trader(std::string* ptr);

  private:
  const std::string& _internal_contra_trader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contra_trader(
      const std::string& value);
  std::string* _internal_mutable_contra_trader();

  public:
  // string contra_broker = 15;
  void clear_contra_broker() ;
  const std::string& contra_broker() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contra_broker(Arg_&& arg, Args_... args);
  std::string* mutable_contra_broker();
  PROTOBUF_NODISCARD std::string* release_contra_broker();
  void set_allocated_contra_broker(std::string* ptr);

  private:
  const std::string& _internal_contra_broker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contra_broker(
      const std::string& value);
  std::string* _internal_mutable_contra_broker();

  public:
  // .google.protobuf.Timestamp time = 4;
  bool has_time() const;
  private:
  bool _internal_has_time() const;

  public:
  void clear_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();
  // .google.protobuf.Timestamp exchange_time = 5;
  bool has_exchange_time() const;
  private:
  bool _internal_has_exchange_time() const;

  public:
  void clear_exchange_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& exchange_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_exchange_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_exchange_time();
  void set_allocated_exchange_time(::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_exchange_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_exchange_time();
  public:
  void unsafe_arena_set_allocated_exchange_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_exchange_time();
  // .t4proto.v1.common.Price price = 12;
  bool has_price() const;
  private:
  bool _internal_has_price() const;

  public:
  void clear_price() ;
  const ::t4proto::v1::common::Price& price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_price();
  ::t4proto::v1::common::Price* mutable_price();
  void set_allocated_price(::t4proto::v1::common::Price* price);
  private:
  const ::t4proto::v1::common::Price& _internal_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::t4proto::v1::common::Price* price);
  ::t4proto::v1::common::Price* unsafe_arena_release_price();
  // .t4proto.v1.common.OrderChange change = 6;
  void clear_change() ;
  ::t4proto::v1::common::OrderChange change() const;
  void set_change(::t4proto::v1::common::OrderChange value);

  private:
  ::t4proto::v1::common::OrderChange _internal_change() const;
  void _internal_set_change(::t4proto::v1::common::OrderChange value);

  public:
  // .t4proto.v1.common.OrderStatus status = 7;
  void clear_status() ;
  ::t4proto::v1::common::OrderStatus status() const;
  void set_status(::t4proto::v1::common::OrderStatus value);

  private:
  ::t4proto::v1::common::OrderStatus _internal_status() const;
  void _internal_set_status(::t4proto::v1::common::OrderStatus value);

  public:
  // .t4proto.v1.common.ResponsePending response_pending = 9;
  void clear_response_pending() ;
  ::t4proto::v1::common::ResponsePending response_pending() const;
  void set_response_pending(::t4proto::v1::common::ResponsePending value);

  private:
  ::t4proto::v1::common::ResponsePending _internal_response_pending() const;
  void _internal_set_response_pending(::t4proto::v1::common::ResponsePending value);

  public:
  // int32 leg_index = 10;
  void clear_leg_index() ;
  ::int32_t leg_index() const;
  void set_leg_index(::int32_t value);

  private:
  ::int32_t _internal_leg_index() const;
  void _internal_set_leg_index(::int32_t value);

  public:
  // int32 volume = 11;
  void clear_volume() ;
  ::int32_t volume() const;
  void set_volume(::int32_t value);

  private:
  ::int32_t _internal_volume() const;
  void _internal_set_volume(::int32_t value);

  public:
  // int32 residual_volume = 16;
  void clear_residual_volume() ;
  ::int32_t residual_volume() const;
  void set_residual_volume(::int32_t value);

  private:
  ::int32_t _internal_residual_volume() const;
  void _internal_set_residual_volume(::int32_t value);

  public:
  // int64 trade_date = 17;
  void clear_trade_date() ;
  ::int64_t trade_date() const;
  void set_trade_date(::int64_t value);

  private:
  ::int64_t _internal_trade_date() const;
  void _internal_set_trade_date(::int64_t value);

  public:
  // int32 sequence_order = 18;
  void clear_sequence_order() ;
  ::int32_t sequence_order() const;
  void set_sequence_order(::int32_t value);

  private:
  ::int32_t _internal_sequence_order() const;
  void _internal_set_sequence_order(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.orderrouting.OrderUpdateTradeLeg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_detail_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_trade_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contra_trader_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contra_broker_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time_;
    ::t4proto::v1::common::Price* price_;
    int change_;
    int status_;
    int response_pending_;
    ::int32_t leg_index_;
    ::int32_t volume_;
    ::int32_t residual_volume_;
    ::int64_t trade_date_;
    ::int32_t sequence_order_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto;
};// -------------------------------------------------------------------

class OrderUpdate_Trade final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.orderrouting.OrderUpdate.Trade) */ {
 public:
  inline OrderUpdate_Trade() : OrderUpdate_Trade(nullptr) {}
  ~OrderUpdate_Trade() override;
  explicit PROTOBUF_CONSTEXPR OrderUpdate_Trade(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderUpdate_Trade(const OrderUpdate_Trade& from);
  OrderUpdate_Trade(OrderUpdate_Trade&& from) noexcept
    : OrderUpdate_Trade() {
    *this = ::std::move(from);
  }

  inline OrderUpdate_Trade& operator=(const OrderUpdate_Trade& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderUpdate_Trade& operator=(OrderUpdate_Trade&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderUpdate_Trade& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderUpdate_Trade* internal_default_instance() {
    return reinterpret_cast<const OrderUpdate_Trade*>(
               &_OrderUpdate_Trade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(OrderUpdate_Trade& a, OrderUpdate_Trade& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderUpdate_Trade* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderUpdate_Trade* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderUpdate_Trade* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderUpdate_Trade>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderUpdate_Trade& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderUpdate_Trade& from) {
    OrderUpdate_Trade::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderUpdate_Trade* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.orderrouting.OrderUpdate.Trade";
  }
  protected:
  explicit OrderUpdate_Trade(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeTradeIdFieldNumber = 6,
    kContraTraderFieldNumber = 8,
    kContraBrokerFieldNumber = 9,
    kPriceFieldNumber = 3,
    kTimeFieldNumber = 5,
    kExchangeTimeFieldNumber = 7,
    kSequenceOrderFieldNumber = 1,
    kVolumeFieldNumber = 2,
    kTradeDateFieldNumber = 10,
    kResidualVolumeFieldNumber = 4,
  };
  // string exchange_trade_id = 6;
  void clear_exchange_trade_id() ;
  const std::string& exchange_trade_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_trade_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_trade_id();
  PROTOBUF_NODISCARD std::string* release_exchange_trade_id();
  void set_allocated_exchange_trade_id(std::string* ptr);

  private:
  const std::string& _internal_exchange_trade_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_trade_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_trade_id();

  public:
  // string contra_trader = 8;
  void clear_contra_trader() ;
  const std::string& contra_trader() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contra_trader(Arg_&& arg, Args_... args);
  std::string* mutable_contra_trader();
  PROTOBUF_NODISCARD std::string* release_contra_trader();
  void set_allocated_contra_trader(std::string* ptr);

  private:
  const std::string& _internal_contra_trader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contra_trader(
      const std::string& value);
  std::string* _internal_mutable_contra_trader();

  public:
  // string contra_broker = 9;
  void clear_contra_broker() ;
  const std::string& contra_broker() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contra_broker(Arg_&& arg, Args_... args);
  std::string* mutable_contra_broker();
  PROTOBUF_NODISCARD std::string* release_contra_broker();
  void set_allocated_contra_broker(std::string* ptr);

  private:
  const std::string& _internal_contra_broker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contra_broker(
      const std::string& value);
  std::string* _internal_mutable_contra_broker();

  public:
  // .t4proto.v1.common.Price price = 3;
  bool has_price() const;
  private:
  bool _internal_has_price() const;

  public:
  void clear_price() ;
  const ::t4proto::v1::common::Price& price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_price();
  ::t4proto::v1::common::Price* mutable_price();
  void set_allocated_price(::t4proto::v1::common::Price* price);
  private:
  const ::t4proto::v1::common::Price& _internal_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::t4proto::v1::common::Price* price);
  ::t4proto::v1::common::Price* unsafe_arena_release_price();
  // .google.protobuf.Timestamp time = 5;
  bool has_time() const;
  private:
  bool _internal_has_time() const;

  public:
  void clear_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();
  // .google.protobuf.Timestamp exchange_time = 7;
  bool has_exchange_time() const;
  private:
  bool _internal_has_exchange_time() const;

  public:
  void clear_exchange_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& exchange_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_exchange_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_exchange_time();
  void set_allocated_exchange_time(::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_exchange_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_exchange_time();
  public:
  void unsafe_arena_set_allocated_exchange_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_exchange_time();
  // int32 sequence_order = 1;
  void clear_sequence_order() ;
  ::int32_t sequence_order() const;
  void set_sequence_order(::int32_t value);

  private:
  ::int32_t _internal_sequence_order() const;
  void _internal_set_sequence_order(::int32_t value);

  public:
  // int32 volume = 2;
  void clear_volume() ;
  ::int32_t volume() const;
  void set_volume(::int32_t value);

  private:
  ::int32_t _internal_volume() const;
  void _internal_set_volume(::int32_t value);

  public:
  // int64 trade_date = 10;
  void clear_trade_date() ;
  ::int64_t trade_date() const;
  void set_trade_date(::int64_t value);

  private:
  ::int64_t _internal_trade_date() const;
  void _internal_set_trade_date(::int64_t value);

  public:
  // int32 residual_volume = 4;
  void clear_residual_volume() ;
  ::int32_t residual_volume() const;
  void set_residual_volume(::int32_t value);

  private:
  ::int32_t _internal_residual_volume() const;
  void _internal_set_residual_volume(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.orderrouting.OrderUpdate.Trade)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_trade_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contra_trader_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contra_broker_;
    ::t4proto::v1::common::Price* price_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time_;
    ::int32_t sequence_order_;
    ::int32_t volume_;
    ::int64_t trade_date_;
    ::int32_t residual_volume_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto;
};// -------------------------------------------------------------------

class OrderUpdate_TradeLeg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.orderrouting.OrderUpdate.TradeLeg) */ {
 public:
  inline OrderUpdate_TradeLeg() : OrderUpdate_TradeLeg(nullptr) {}
  ~OrderUpdate_TradeLeg() override;
  explicit PROTOBUF_CONSTEXPR OrderUpdate_TradeLeg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderUpdate_TradeLeg(const OrderUpdate_TradeLeg& from);
  OrderUpdate_TradeLeg(OrderUpdate_TradeLeg&& from) noexcept
    : OrderUpdate_TradeLeg() {
    *this = ::std::move(from);
  }

  inline OrderUpdate_TradeLeg& operator=(const OrderUpdate_TradeLeg& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderUpdate_TradeLeg& operator=(OrderUpdate_TradeLeg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderUpdate_TradeLeg& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderUpdate_TradeLeg* internal_default_instance() {
    return reinterpret_cast<const OrderUpdate_TradeLeg*>(
               &_OrderUpdate_TradeLeg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(OrderUpdate_TradeLeg& a, OrderUpdate_TradeLeg& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderUpdate_TradeLeg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderUpdate_TradeLeg* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderUpdate_TradeLeg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderUpdate_TradeLeg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderUpdate_TradeLeg& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderUpdate_TradeLeg& from) {
    OrderUpdate_TradeLeg::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderUpdate_TradeLeg* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.orderrouting.OrderUpdate.TradeLeg";
  }
  protected:
  explicit OrderUpdate_TradeLeg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeTradeIdFieldNumber = 6,
    kContraTraderFieldNumber = 8,
    kContraBrokerFieldNumber = 9,
    kPriceFieldNumber = 4,
    kTimeFieldNumber = 5,
    kExchangeTimeFieldNumber = 7,
    kSequenceOrderFieldNumber = 1,
    kLegIndexFieldNumber = 2,
    kVolumeFieldNumber = 3,
    kResidualVolumeFieldNumber = 10,
    kTradeDateFieldNumber = 11,
  };
  // string exchange_trade_id = 6;
  void clear_exchange_trade_id() ;
  const std::string& exchange_trade_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_trade_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_trade_id();
  PROTOBUF_NODISCARD std::string* release_exchange_trade_id();
  void set_allocated_exchange_trade_id(std::string* ptr);

  private:
  const std::string& _internal_exchange_trade_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_trade_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_trade_id();

  public:
  // string contra_trader = 8;
  void clear_contra_trader() ;
  const std::string& contra_trader() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contra_trader(Arg_&& arg, Args_... args);
  std::string* mutable_contra_trader();
  PROTOBUF_NODISCARD std::string* release_contra_trader();
  void set_allocated_contra_trader(std::string* ptr);

  private:
  const std::string& _internal_contra_trader() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contra_trader(
      const std::string& value);
  std::string* _internal_mutable_contra_trader();

  public:
  // string contra_broker = 9;
  void clear_contra_broker() ;
  const std::string& contra_broker() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_contra_broker(Arg_&& arg, Args_... args);
  std::string* mutable_contra_broker();
  PROTOBUF_NODISCARD std::string* release_contra_broker();
  void set_allocated_contra_broker(std::string* ptr);

  private:
  const std::string& _internal_contra_broker() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_contra_broker(
      const std::string& value);
  std::string* _internal_mutable_contra_broker();

  public:
  // .t4proto.v1.common.Price price = 4;
  bool has_price() const;
  private:
  bool _internal_has_price() const;

  public:
  void clear_price() ;
  const ::t4proto::v1::common::Price& price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_price();
  ::t4proto::v1::common::Price* mutable_price();
  void set_allocated_price(::t4proto::v1::common::Price* price);
  private:
  const ::t4proto::v1::common::Price& _internal_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::t4proto::v1::common::Price* price);
  ::t4proto::v1::common::Price* unsafe_arena_release_price();
  // .google.protobuf.Timestamp time = 5;
  bool has_time() const;
  private:
  bool _internal_has_time() const;

  public:
  void clear_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();
  // .google.protobuf.Timestamp exchange_time = 7;
  bool has_exchange_time() const;
  private:
  bool _internal_has_exchange_time() const;

  public:
  void clear_exchange_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& exchange_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_exchange_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_exchange_time();
  void set_allocated_exchange_time(::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_exchange_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_exchange_time();
  public:
  void unsafe_arena_set_allocated_exchange_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_exchange_time();
  // int32 sequence_order = 1;
  void clear_sequence_order() ;
  ::int32_t sequence_order() const;
  void set_sequence_order(::int32_t value);

  private:
  ::int32_t _internal_sequence_order() const;
  void _internal_set_sequence_order(::int32_t value);

  public:
  // int32 leg_index = 2;
  void clear_leg_index() ;
  ::int32_t leg_index() const;
  void set_leg_index(::int32_t value);

  private:
  ::int32_t _internal_leg_index() const;
  void _internal_set_leg_index(::int32_t value);

  public:
  // int32 volume = 3;
  void clear_volume() ;
  ::int32_t volume() const;
  void set_volume(::int32_t value);

  private:
  ::int32_t _internal_volume() const;
  void _internal_set_volume(::int32_t value);

  public:
  // int32 residual_volume = 10;
  void clear_residual_volume() ;
  ::int32_t residual_volume() const;
  void set_residual_volume(::int32_t value);

  private:
  ::int32_t _internal_residual_volume() const;
  void _internal_set_residual_volume(::int32_t value);

  public:
  // int64 trade_date = 11;
  void clear_trade_date() ;
  ::int64_t trade_date() const;
  void set_trade_date(::int64_t value);

  private:
  ::int64_t _internal_trade_date() const;
  void _internal_set_trade_date(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.orderrouting.OrderUpdate.TradeLeg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_trade_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contra_trader_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contra_broker_;
    ::t4proto::v1::common::Price* price_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time_;
    ::int32_t sequence_order_;
    ::int32_t leg_index_;
    ::int32_t volume_;
    ::int32_t residual_volume_;
    ::int64_t trade_date_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto;
};// -------------------------------------------------------------------

class OrderUpdate_InstructionExtraEntry_DoNotUse final : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OrderUpdate_InstructionExtraEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<OrderUpdate_InstructionExtraEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  OrderUpdate_InstructionExtraEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR OrderUpdate_InstructionExtraEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit OrderUpdate_InstructionExtraEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const OrderUpdate_InstructionExtraEntry_DoNotUse& other);
  static const OrderUpdate_InstructionExtraEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OrderUpdate_InstructionExtraEntry_DoNotUse*>(&_OrderUpdate_InstructionExtraEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "t4proto.v1.orderrouting.OrderUpdate.InstructionExtraEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "t4proto.v1.orderrouting.OrderUpdate.InstructionExtraEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto;
};
// -------------------------------------------------------------------

class OrderUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.orderrouting.OrderUpdate) */ {
 public:
  inline OrderUpdate() : OrderUpdate(nullptr) {}
  ~OrderUpdate() override;
  explicit PROTOBUF_CONSTEXPR OrderUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderUpdate(const OrderUpdate& from);
  OrderUpdate(OrderUpdate&& from) noexcept
    : OrderUpdate() {
    *this = ::std::move(from);
  }

  inline OrderUpdate& operator=(const OrderUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderUpdate& operator=(OrderUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderUpdate* internal_default_instance() {
    return reinterpret_cast<const OrderUpdate*>(
               &_OrderUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(OrderUpdate& a, OrderUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderUpdate& from) {
    OrderUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.orderrouting.OrderUpdate";
  }
  protected:
  explicit OrderUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OrderUpdate_Trade Trade;
  typedef OrderUpdate_TradeLeg TradeLeg;

  // accessors -------------------------------------------------------

  enum : int {
    kInstructionExtraFieldNumber = 74,
    kTradesFieldNumber = 77,
    kTradeLegsFieldNumber = 78,
    kUniqueIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kMarketIdFieldNumber = 3,
    kStatusDetailFieldNumber = 8,
    kExchangeOrderIdFieldNumber = 10,
    kExchangeIdFieldNumber = 13,
    kExchangeLoginIdFieldNumber = 14,
    kExecutingLoginIdFieldNumber = 15,
    kExchangeLocationFieldNumber = 16,
    kUserIdFieldNumber = 17,
    kUserNameFieldNumber = 18,
    kUserAddressFieldNumber = 19,
    kSessionIdFieldNumber = 20,
    kAppIdFieldNumber = 21,
    kAppNameFieldNumber = 22,
    kAccountNumberFieldNumber = 33,
    kMemberAllocationFieldNumber = 37,
    kTraderAllocationFieldNumber = 38,
    kCustomerReferenceFieldNumber = 39,
    kAvgPriceGroupIdFieldNumber = 42,
    kOmnibusAccountFieldNumber = 45,
    kExecutingGroupIdFieldNumber = 46,
    kTagFieldNumber = 47,
    kOrdersLinkedFieldNumber = 55,
    kRoutingUserIdFieldNumber = 60,
    kRoutingUserNameFieldNumber = 61,
    kTagClOrdIdFieldNumber = 66,
    kTagOrigClOrdIdFieldNumber = 67,
    kTagRelationIdFieldNumber = 68,
    kSmpIdFieldNumber = 69,
    kAtsRegulatoryIdFieldNumber = 71,
    kAuthorizedTraderIdFieldNumber = 73,
    kActivationDetailsFieldNumber = 76,
    kTimeFieldNumber = 4,
    kExchangeTimeFieldNumber = 5,
    kSubmitTimeFieldNumber = 11,
    kCurrentLimitPriceFieldNumber = 27,
    kCurrentStopPriceFieldNumber = 28,
    kNewLimitPriceFieldNumber = 30,
    kNewStopPriceFieldNumber = 31,
    kTrailPriceFieldNumber = 51,
    kReceiveTimeFieldNumber = 75,
    kChangeFieldNumber = 6,
    kStatusFieldNumber = 7,
    kTradeDateFieldNumber = 12,
    kResponsePendingFieldNumber = 9,
    kBuySellFieldNumber = 23,
    kPriceTypeFieldNumber = 24,
    kTimeTypeFieldNumber = 25,
    kCurrentVolumeFieldNumber = 26,
    kNewVolumeFieldNumber = 29,
    kOpenCloseFieldNumber = 32,
    kCtiFieldNumber = 34,
    kOriginFieldNumber = 35,
    kAccountCodeFieldNumber = 36,
    kCustOrderHandlingInstFieldNumber = 40,
    kAvgPriceIndicatorFieldNumber = 41,
    kClearingTradePriceTypeFieldNumber = 43,
    kBillingFeeFieldNumber = 44,
    kTotalFillVolumeFieldNumber = 48,
    kWorkingVolumeFieldNumber = 49,
    kExchangeTotalFillVolumeFieldNumber = 50,
    kTrailRevisionIntervalFieldNumber = 52,
    kTrailRevisionChangeFieldNumber = 53,
    kOrderLinkFieldNumber = 54,
    kActivationTypeFieldNumber = 56,
    kPrimaryUserFieldNumber = 57,
    kCurrentMaxShowFieldNumber = 58,
    kNewMaxShowFieldNumber = 59,
    kOrderSourceFieldNumber = 62,
    kOrderSourceMethodFieldNumber = 63,
    kAppTypeFieldNumber = 64,
    kMasterTypeFieldNumber = 65,
    kSequenceOrderFieldNumber = 70,
    kMaxVolumeFieldNumber = 72,
  };
  // map<string, string> instruction_extra = 74;
  int instruction_extra_size() const;
  private:
  int _internal_instruction_extra_size() const;

  public:
  void clear_instruction_extra() ;
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_instruction_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_instruction_extra();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      instruction_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_instruction_extra();
  // repeated .t4proto.v1.orderrouting.OrderUpdate.Trade trades = 77;
  int trades_size() const;
  private:
  int _internal_trades_size() const;

  public:
  void clear_trades() ;
  ::t4proto::v1::orderrouting::OrderUpdate_Trade* mutable_trades(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderUpdate_Trade >*
      mutable_trades();
  private:
  const ::t4proto::v1::orderrouting::OrderUpdate_Trade& _internal_trades(int index) const;
  ::t4proto::v1::orderrouting::OrderUpdate_Trade* _internal_add_trades();
  public:
  const ::t4proto::v1::orderrouting::OrderUpdate_Trade& trades(int index) const;
  ::t4proto::v1::orderrouting::OrderUpdate_Trade* add_trades();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderUpdate_Trade >&
      trades() const;
  // repeated .t4proto.v1.orderrouting.OrderUpdate.TradeLeg trade_legs = 78;
  int trade_legs_size() const;
  private:
  int _internal_trade_legs_size() const;

  public:
  void clear_trade_legs() ;
  ::t4proto::v1::orderrouting::OrderUpdate_TradeLeg* mutable_trade_legs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderUpdate_TradeLeg >*
      mutable_trade_legs();
  private:
  const ::t4proto::v1::orderrouting::OrderUpdate_TradeLeg& _internal_trade_legs(int index) const;
  ::t4proto::v1::orderrouting::OrderUpdate_TradeLeg* _internal_add_trade_legs();
  public:
  const ::t4proto::v1::orderrouting::OrderUpdate_TradeLeg& trade_legs(int index) const;
  ::t4proto::v1::orderrouting::OrderUpdate_TradeLeg* add_trade_legs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderUpdate_TradeLeg >&
      trade_legs() const;
  // string unique_id = 1;
  void clear_unique_id() ;
  const std::string& unique_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_unique_id(Arg_&& arg, Args_... args);
  std::string* mutable_unique_id();
  PROTOBUF_NODISCARD std::string* release_unique_id();
  void set_allocated_unique_id(std::string* ptr);

  private:
  const std::string& _internal_unique_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unique_id(
      const std::string& value);
  std::string* _internal_mutable_unique_id();

  public:
  // string account_id = 2;
  void clear_account_id() ;
  const std::string& account_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* ptr);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // string market_id = 3;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // string status_detail = 8;
  void clear_status_detail() ;
  const std::string& status_detail() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status_detail(Arg_&& arg, Args_... args);
  std::string* mutable_status_detail();
  PROTOBUF_NODISCARD std::string* release_status_detail();
  void set_allocated_status_detail(std::string* ptr);

  private:
  const std::string& _internal_status_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_detail(
      const std::string& value);
  std::string* _internal_mutable_status_detail();

  public:
  // string exchange_order_id = 10;
  void clear_exchange_order_id() ;
  const std::string& exchange_order_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_order_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_order_id();
  PROTOBUF_NODISCARD std::string* release_exchange_order_id();
  void set_allocated_exchange_order_id(std::string* ptr);

  private:
  const std::string& _internal_exchange_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_order_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_order_id();

  public:
  // string exchange_id = 13;
  void clear_exchange_id() ;
  const std::string& exchange_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* ptr);

  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_id();

  public:
  // string exchange_login_id = 14;
  void clear_exchange_login_id() ;
  const std::string& exchange_login_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_login_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_login_id();
  PROTOBUF_NODISCARD std::string* release_exchange_login_id();
  void set_allocated_exchange_login_id(std::string* ptr);

  private:
  const std::string& _internal_exchange_login_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_login_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_login_id();

  public:
  // string executing_login_id = 15;
  void clear_executing_login_id() ;
  const std::string& executing_login_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_executing_login_id(Arg_&& arg, Args_... args);
  std::string* mutable_executing_login_id();
  PROTOBUF_NODISCARD std::string* release_executing_login_id();
  void set_allocated_executing_login_id(std::string* ptr);

  private:
  const std::string& _internal_executing_login_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_executing_login_id(
      const std::string& value);
  std::string* _internal_mutable_executing_login_id();

  public:
  // string exchange_location = 16;
  void clear_exchange_location() ;
  const std::string& exchange_location() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_location(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_location();
  PROTOBUF_NODISCARD std::string* release_exchange_location();
  void set_allocated_exchange_location(std::string* ptr);

  private:
  const std::string& _internal_exchange_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_location(
      const std::string& value);
  std::string* _internal_mutable_exchange_location();

  public:
  // string user_id = 17;
  void clear_user_id() ;
  const std::string& user_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* ptr);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string user_name = 18;
  void clear_user_name() ;
  const std::string& user_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_name(Arg_&& arg, Args_... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* ptr);

  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(
      const std::string& value);
  std::string* _internal_mutable_user_name();

  public:
  // string user_address = 19;
  void clear_user_address() ;
  const std::string& user_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_address(Arg_&& arg, Args_... args);
  std::string* mutable_user_address();
  PROTOBUF_NODISCARD std::string* release_user_address();
  void set_allocated_user_address(std::string* ptr);

  private:
  const std::string& _internal_user_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_address(
      const std::string& value);
  std::string* _internal_mutable_user_address();

  public:
  // string session_id = 20;
  void clear_session_id() ;
  const std::string& session_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* ptr);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // string app_id = 21;
  void clear_app_id() ;
  const std::string& app_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_id(Arg_&& arg, Args_... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* ptr);

  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(
      const std::string& value);
  std::string* _internal_mutable_app_id();

  public:
  // string app_name = 22;
  void clear_app_name() ;
  const std::string& app_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_name(Arg_&& arg, Args_... args);
  std::string* mutable_app_name();
  PROTOBUF_NODISCARD std::string* release_app_name();
  void set_allocated_app_name(std::string* ptr);

  private:
  const std::string& _internal_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_name(
      const std::string& value);
  std::string* _internal_mutable_app_name();

  public:
  // string account_number = 33;
  void clear_account_number() ;
  const std::string& account_number() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_number(Arg_&& arg, Args_... args);
  std::string* mutable_account_number();
  PROTOBUF_NODISCARD std::string* release_account_number();
  void set_allocated_account_number(std::string* ptr);

  private:
  const std::string& _internal_account_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_number(
      const std::string& value);
  std::string* _internal_mutable_account_number();

  public:
  // string member_allocation = 37;
  void clear_member_allocation() ;
  const std::string& member_allocation() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_member_allocation(Arg_&& arg, Args_... args);
  std::string* mutable_member_allocation();
  PROTOBUF_NODISCARD std::string* release_member_allocation();
  void set_allocated_member_allocation(std::string* ptr);

  private:
  const std::string& _internal_member_allocation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_member_allocation(
      const std::string& value);
  std::string* _internal_mutable_member_allocation();

  public:
  // string trader_allocation = 38;
  void clear_trader_allocation() ;
  const std::string& trader_allocation() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trader_allocation(Arg_&& arg, Args_... args);
  std::string* mutable_trader_allocation();
  PROTOBUF_NODISCARD std::string* release_trader_allocation();
  void set_allocated_trader_allocation(std::string* ptr);

  private:
  const std::string& _internal_trader_allocation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trader_allocation(
      const std::string& value);
  std::string* _internal_mutable_trader_allocation();

  public:
  // string customer_reference = 39;
  void clear_customer_reference() ;
  const std::string& customer_reference() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_customer_reference(Arg_&& arg, Args_... args);
  std::string* mutable_customer_reference();
  PROTOBUF_NODISCARD std::string* release_customer_reference();
  void set_allocated_customer_reference(std::string* ptr);

  private:
  const std::string& _internal_customer_reference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_customer_reference(
      const std::string& value);
  std::string* _internal_mutable_customer_reference();

  public:
  // string avg_price_group_id = 42;
  void clear_avg_price_group_id() ;
  const std::string& avg_price_group_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_avg_price_group_id(Arg_&& arg, Args_... args);
  std::string* mutable_avg_price_group_id();
  PROTOBUF_NODISCARD std::string* release_avg_price_group_id();
  void set_allocated_avg_price_group_id(std::string* ptr);

  private:
  const std::string& _internal_avg_price_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avg_price_group_id(
      const std::string& value);
  std::string* _internal_mutable_avg_price_group_id();

  public:
  // string omnibus_account = 45;
  void clear_omnibus_account() ;
  const std::string& omnibus_account() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_omnibus_account(Arg_&& arg, Args_... args);
  std::string* mutable_omnibus_account();
  PROTOBUF_NODISCARD std::string* release_omnibus_account();
  void set_allocated_omnibus_account(std::string* ptr);

  private:
  const std::string& _internal_omnibus_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_omnibus_account(
      const std::string& value);
  std::string* _internal_mutable_omnibus_account();

  public:
  // string executing_group_id = 46;
  void clear_executing_group_id() ;
  const std::string& executing_group_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_executing_group_id(Arg_&& arg, Args_... args);
  std::string* mutable_executing_group_id();
  PROTOBUF_NODISCARD std::string* release_executing_group_id();
  void set_allocated_executing_group_id(std::string* ptr);

  private:
  const std::string& _internal_executing_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_executing_group_id(
      const std::string& value);
  std::string* _internal_mutable_executing_group_id();

  public:
  // string tag = 47;
  void clear_tag() ;
  const std::string& tag() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag(Arg_&& arg, Args_... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* ptr);

  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(
      const std::string& value);
  std::string* _internal_mutable_tag();

  public:
  // string orders_linked = 55;
  void clear_orders_linked() ;
  const std::string& orders_linked() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_orders_linked(Arg_&& arg, Args_... args);
  std::string* mutable_orders_linked();
  PROTOBUF_NODISCARD std::string* release_orders_linked();
  void set_allocated_orders_linked(std::string* ptr);

  private:
  const std::string& _internal_orders_linked() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_orders_linked(
      const std::string& value);
  std::string* _internal_mutable_orders_linked();

  public:
  // string routing_user_id = 60;
  void clear_routing_user_id() ;
  const std::string& routing_user_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_routing_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_routing_user_id();
  PROTOBUF_NODISCARD std::string* release_routing_user_id();
  void set_allocated_routing_user_id(std::string* ptr);

  private:
  const std::string& _internal_routing_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_routing_user_id(
      const std::string& value);
  std::string* _internal_mutable_routing_user_id();

  public:
  // string routing_user_name = 61;
  void clear_routing_user_name() ;
  const std::string& routing_user_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_routing_user_name(Arg_&& arg, Args_... args);
  std::string* mutable_routing_user_name();
  PROTOBUF_NODISCARD std::string* release_routing_user_name();
  void set_allocated_routing_user_name(std::string* ptr);

  private:
  const std::string& _internal_routing_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_routing_user_name(
      const std::string& value);
  std::string* _internal_mutable_routing_user_name();

  public:
  // string tag_cl_ord_id = 66;
  void clear_tag_cl_ord_id() ;
  const std::string& tag_cl_ord_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag_cl_ord_id(Arg_&& arg, Args_... args);
  std::string* mutable_tag_cl_ord_id();
  PROTOBUF_NODISCARD std::string* release_tag_cl_ord_id();
  void set_allocated_tag_cl_ord_id(std::string* ptr);

  private:
  const std::string& _internal_tag_cl_ord_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag_cl_ord_id(
      const std::string& value);
  std::string* _internal_mutable_tag_cl_ord_id();

  public:
  // string tag_orig_cl_ord_id = 67;
  void clear_tag_orig_cl_ord_id() ;
  const std::string& tag_orig_cl_ord_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag_orig_cl_ord_id(Arg_&& arg, Args_... args);
  std::string* mutable_tag_orig_cl_ord_id();
  PROTOBUF_NODISCARD std::string* release_tag_orig_cl_ord_id();
  void set_allocated_tag_orig_cl_ord_id(std::string* ptr);

  private:
  const std::string& _internal_tag_orig_cl_ord_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag_orig_cl_ord_id(
      const std::string& value);
  std::string* _internal_mutable_tag_orig_cl_ord_id();

  public:
  // string tag_relation_id = 68;
  void clear_tag_relation_id() ;
  const std::string& tag_relation_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag_relation_id(Arg_&& arg, Args_... args);
  std::string* mutable_tag_relation_id();
  PROTOBUF_NODISCARD std::string* release_tag_relation_id();
  void set_allocated_tag_relation_id(std::string* ptr);

  private:
  const std::string& _internal_tag_relation_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag_relation_id(
      const std::string& value);
  std::string* _internal_mutable_tag_relation_id();

  public:
  // string smp_id = 69;
  void clear_smp_id() ;
  const std::string& smp_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_smp_id(Arg_&& arg, Args_... args);
  std::string* mutable_smp_id();
  PROTOBUF_NODISCARD std::string* release_smp_id();
  void set_allocated_smp_id(std::string* ptr);

  private:
  const std::string& _internal_smp_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_smp_id(
      const std::string& value);
  std::string* _internal_mutable_smp_id();

  public:
  // string ats_regulatory_id = 71;
  void clear_ats_regulatory_id() ;
  const std::string& ats_regulatory_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ats_regulatory_id(Arg_&& arg, Args_... args);
  std::string* mutable_ats_regulatory_id();
  PROTOBUF_NODISCARD std::string* release_ats_regulatory_id();
  void set_allocated_ats_regulatory_id(std::string* ptr);

  private:
  const std::string& _internal_ats_regulatory_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ats_regulatory_id(
      const std::string& value);
  std::string* _internal_mutable_ats_regulatory_id();

  public:
  // string authorized_trader_id = 73;
  void clear_authorized_trader_id() ;
  const std::string& authorized_trader_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_authorized_trader_id(Arg_&& arg, Args_... args);
  std::string* mutable_authorized_trader_id();
  PROTOBUF_NODISCARD std::string* release_authorized_trader_id();
  void set_allocated_authorized_trader_id(std::string* ptr);

  private:
  const std::string& _internal_authorized_trader_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authorized_trader_id(
      const std::string& value);
  std::string* _internal_mutable_authorized_trader_id();

  public:
  // string activation_details = 76;
  void clear_activation_details() ;
  const std::string& activation_details() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_activation_details(Arg_&& arg, Args_... args);
  std::string* mutable_activation_details();
  PROTOBUF_NODISCARD std::string* release_activation_details();
  void set_allocated_activation_details(std::string* ptr);

  private:
  const std::string& _internal_activation_details() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_activation_details(
      const std::string& value);
  std::string* _internal_mutable_activation_details();

  public:
  // .google.protobuf.Timestamp time = 4;
  bool has_time() const;
  private:
  bool _internal_has_time() const;

  public:
  void clear_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();
  // .google.protobuf.Timestamp exchange_time = 5;
  bool has_exchange_time() const;
  private:
  bool _internal_has_exchange_time() const;

  public:
  void clear_exchange_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& exchange_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_exchange_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_exchange_time();
  void set_allocated_exchange_time(::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_exchange_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_exchange_time();
  public:
  void unsafe_arena_set_allocated_exchange_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_exchange_time();
  // .google.protobuf.Timestamp submit_time = 11;
  bool has_submit_time() const;
  private:
  bool _internal_has_submit_time() const;

  public:
  void clear_submit_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& submit_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_submit_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_submit_time();
  void set_allocated_submit_time(::PROTOBUF_NAMESPACE_ID::Timestamp* submit_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_submit_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_submit_time();
  public:
  void unsafe_arena_set_allocated_submit_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* submit_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_submit_time();
  // .t4proto.v1.common.Price current_limit_price = 27;
  bool has_current_limit_price() const;
  private:
  bool _internal_has_current_limit_price() const;

  public:
  void clear_current_limit_price() ;
  const ::t4proto::v1::common::Price& current_limit_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_current_limit_price();
  ::t4proto::v1::common::Price* mutable_current_limit_price();
  void set_allocated_current_limit_price(::t4proto::v1::common::Price* current_limit_price);
  private:
  const ::t4proto::v1::common::Price& _internal_current_limit_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_current_limit_price();
  public:
  void unsafe_arena_set_allocated_current_limit_price(
      ::t4proto::v1::common::Price* current_limit_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_current_limit_price();
  // .t4proto.v1.common.Price current_stop_price = 28;
  bool has_current_stop_price() const;
  private:
  bool _internal_has_current_stop_price() const;

  public:
  void clear_current_stop_price() ;
  const ::t4proto::v1::common::Price& current_stop_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_current_stop_price();
  ::t4proto::v1::common::Price* mutable_current_stop_price();
  void set_allocated_current_stop_price(::t4proto::v1::common::Price* current_stop_price);
  private:
  const ::t4proto::v1::common::Price& _internal_current_stop_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_current_stop_price();
  public:
  void unsafe_arena_set_allocated_current_stop_price(
      ::t4proto::v1::common::Price* current_stop_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_current_stop_price();
  // .t4proto.v1.common.Price new_limit_price = 30;
  bool has_new_limit_price() const;
  private:
  bool _internal_has_new_limit_price() const;

  public:
  void clear_new_limit_price() ;
  const ::t4proto::v1::common::Price& new_limit_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_new_limit_price();
  ::t4proto::v1::common::Price* mutable_new_limit_price();
  void set_allocated_new_limit_price(::t4proto::v1::common::Price* new_limit_price);
  private:
  const ::t4proto::v1::common::Price& _internal_new_limit_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_new_limit_price();
  public:
  void unsafe_arena_set_allocated_new_limit_price(
      ::t4proto::v1::common::Price* new_limit_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_new_limit_price();
  // .t4proto.v1.common.Price new_stop_price = 31;
  bool has_new_stop_price() const;
  private:
  bool _internal_has_new_stop_price() const;

  public:
  void clear_new_stop_price() ;
  const ::t4proto::v1::common::Price& new_stop_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_new_stop_price();
  ::t4proto::v1::common::Price* mutable_new_stop_price();
  void set_allocated_new_stop_price(::t4proto::v1::common::Price* new_stop_price);
  private:
  const ::t4proto::v1::common::Price& _internal_new_stop_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_new_stop_price();
  public:
  void unsafe_arena_set_allocated_new_stop_price(
      ::t4proto::v1::common::Price* new_stop_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_new_stop_price();
  // .t4proto.v1.common.Price trail_price = 51;
  bool has_trail_price() const;
  private:
  bool _internal_has_trail_price() const;

  public:
  void clear_trail_price() ;
  const ::t4proto::v1::common::Price& trail_price() const;
  PROTOBUF_NODISCARD ::t4proto::v1::common::Price* release_trail_price();
  ::t4proto::v1::common::Price* mutable_trail_price();
  void set_allocated_trail_price(::t4proto::v1::common::Price* trail_price);
  private:
  const ::t4proto::v1::common::Price& _internal_trail_price() const;
  ::t4proto::v1::common::Price* _internal_mutable_trail_price();
  public:
  void unsafe_arena_set_allocated_trail_price(
      ::t4proto::v1::common::Price* trail_price);
  ::t4proto::v1::common::Price* unsafe_arena_release_trail_price();
  // .google.protobuf.Timestamp receive_time = 75;
  bool has_receive_time() const;
  private:
  bool _internal_has_receive_time() const;

  public:
  void clear_receive_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& receive_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_receive_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_receive_time();
  void set_allocated_receive_time(::PROTOBUF_NAMESPACE_ID::Timestamp* receive_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_receive_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_receive_time();
  public:
  void unsafe_arena_set_allocated_receive_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* receive_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_receive_time();
  // .t4proto.v1.common.OrderChange change = 6;
  void clear_change() ;
  ::t4proto::v1::common::OrderChange change() const;
  void set_change(::t4proto::v1::common::OrderChange value);

  private:
  ::t4proto::v1::common::OrderChange _internal_change() const;
  void _internal_set_change(::t4proto::v1::common::OrderChange value);

  public:
  // .t4proto.v1.common.OrderStatus status = 7;
  void clear_status() ;
  ::t4proto::v1::common::OrderStatus status() const;
  void set_status(::t4proto::v1::common::OrderStatus value);

  private:
  ::t4proto::v1::common::OrderStatus _internal_status() const;
  void _internal_set_status(::t4proto::v1::common::OrderStatus value);

  public:
  // int64 trade_date = 12;
  void clear_trade_date() ;
  ::int64_t trade_date() const;
  void set_trade_date(::int64_t value);

  private:
  ::int64_t _internal_trade_date() const;
  void _internal_set_trade_date(::int64_t value);

  public:
  // .t4proto.v1.common.ResponsePending response_pending = 9;
  void clear_response_pending() ;
  ::t4proto::v1::common::ResponsePending response_pending() const;
  void set_response_pending(::t4proto::v1::common::ResponsePending value);

  private:
  ::t4proto::v1::common::ResponsePending _internal_response_pending() const;
  void _internal_set_response_pending(::t4proto::v1::common::ResponsePending value);

  public:
  // .t4proto.v1.common.BuySell buy_sell = 23;
  void clear_buy_sell() ;
  ::t4proto::v1::common::BuySell buy_sell() const;
  void set_buy_sell(::t4proto::v1::common::BuySell value);

  private:
  ::t4proto::v1::common::BuySell _internal_buy_sell() const;
  void _internal_set_buy_sell(::t4proto::v1::common::BuySell value);

  public:
  // .t4proto.v1.common.PriceType price_type = 24;
  void clear_price_type() ;
  ::t4proto::v1::common::PriceType price_type() const;
  void set_price_type(::t4proto::v1::common::PriceType value);

  private:
  ::t4proto::v1::common::PriceType _internal_price_type() const;
  void _internal_set_price_type(::t4proto::v1::common::PriceType value);

  public:
  // .t4proto.v1.common.TimeType time_type = 25;
  void clear_time_type() ;
  ::t4proto::v1::common::TimeType time_type() const;
  void set_time_type(::t4proto::v1::common::TimeType value);

  private:
  ::t4proto::v1::common::TimeType _internal_time_type() const;
  void _internal_set_time_type(::t4proto::v1::common::TimeType value);

  public:
  // int32 current_volume = 26;
  void clear_current_volume() ;
  ::int32_t current_volume() const;
  void set_current_volume(::int32_t value);

  private:
  ::int32_t _internal_current_volume() const;
  void _internal_set_current_volume(::int32_t value);

  public:
  // int32 new_volume = 29;
  void clear_new_volume() ;
  ::int32_t new_volume() const;
  void set_new_volume(::int32_t value);

  private:
  ::int32_t _internal_new_volume() const;
  void _internal_set_new_volume(::int32_t value);

  public:
  // .t4proto.v1.common.OpenClose open_close = 32;
  void clear_open_close() ;
  ::t4proto::v1::common::OpenClose open_close() const;
  void set_open_close(::t4proto::v1::common::OpenClose value);

  private:
  ::t4proto::v1::common::OpenClose _internal_open_close() const;
  void _internal_set_open_close(::t4proto::v1::common::OpenClose value);

  public:
  // .t4proto.v1.common.CTI cti = 34;
  void clear_cti() ;
  ::t4proto::v1::common::CTI cti() const;
  void set_cti(::t4proto::v1::common::CTI value);

  private:
  ::t4proto::v1::common::CTI _internal_cti() const;
  void _internal_set_cti(::t4proto::v1::common::CTI value);

  public:
  // .t4proto.v1.common.Origin origin = 35;
  void clear_origin() ;
  ::t4proto::v1::common::Origin origin() const;
  void set_origin(::t4proto::v1::common::Origin value);

  private:
  ::t4proto::v1::common::Origin _internal_origin() const;
  void _internal_set_origin(::t4proto::v1::common::Origin value);

  public:
  // .t4proto.v1.common.AccountCode account_code = 36;
  void clear_account_code() ;
  ::t4proto::v1::common::AccountCode account_code() const;
  void set_account_code(::t4proto::v1::common::AccountCode value);

  private:
  ::t4proto::v1::common::AccountCode _internal_account_code() const;
  void _internal_set_account_code(::t4proto::v1::common::AccountCode value);

  public:
  // .t4proto.v1.common.CustOrderHandlingInstType cust_order_handling_inst = 40;
  void clear_cust_order_handling_inst() ;
  ::t4proto::v1::common::CustOrderHandlingInstType cust_order_handling_inst() const;
  void set_cust_order_handling_inst(::t4proto::v1::common::CustOrderHandlingInstType value);

  private:
  ::t4proto::v1::common::CustOrderHandlingInstType _internal_cust_order_handling_inst() const;
  void _internal_set_cust_order_handling_inst(::t4proto::v1::common::CustOrderHandlingInstType value);

  public:
  // .t4proto.v1.common.AvgPriceIndicatorType avg_price_indicator = 41;
  void clear_avg_price_indicator() ;
  ::t4proto::v1::common::AvgPriceIndicatorType avg_price_indicator() const;
  void set_avg_price_indicator(::t4proto::v1::common::AvgPriceIndicatorType value);

  private:
  ::t4proto::v1::common::AvgPriceIndicatorType _internal_avg_price_indicator() const;
  void _internal_set_avg_price_indicator(::t4proto::v1::common::AvgPriceIndicatorType value);

  public:
  // .t4proto.v1.common.ClearingTradePriceType clearing_trade_price_type = 43;
  void clear_clearing_trade_price_type() ;
  ::t4proto::v1::common::ClearingTradePriceType clearing_trade_price_type() const;
  void set_clearing_trade_price_type(::t4proto::v1::common::ClearingTradePriceType value);

  private:
  ::t4proto::v1::common::ClearingTradePriceType _internal_clearing_trade_price_type() const;
  void _internal_set_clearing_trade_price_type(::t4proto::v1::common::ClearingTradePriceType value);

  public:
  // .t4proto.v1.common.BillingFee billing_fee = 44;
  void clear_billing_fee() ;
  ::t4proto::v1::common::BillingFee billing_fee() const;
  void set_billing_fee(::t4proto::v1::common::BillingFee value);

  private:
  ::t4proto::v1::common::BillingFee _internal_billing_fee() const;
  void _internal_set_billing_fee(::t4proto::v1::common::BillingFee value);

  public:
  // int32 total_fill_volume = 48;
  void clear_total_fill_volume() ;
  ::int32_t total_fill_volume() const;
  void set_total_fill_volume(::int32_t value);

  private:
  ::int32_t _internal_total_fill_volume() const;
  void _internal_set_total_fill_volume(::int32_t value);

  public:
  // int32 working_volume = 49;
  void clear_working_volume() ;
  ::int32_t working_volume() const;
  void set_working_volume(::int32_t value);

  private:
  ::int32_t _internal_working_volume() const;
  void _internal_set_working_volume(::int32_t value);

  public:
  // int32 exchange_total_fill_volume = 50;
  void clear_exchange_total_fill_volume() ;
  ::int32_t exchange_total_fill_volume() const;
  void set_exchange_total_fill_volume(::int32_t value);

  private:
  ::int32_t _internal_exchange_total_fill_volume() const;
  void _internal_set_exchange_total_fill_volume(::int32_t value);

  public:
  // int32 trail_revision_interval = 52;
  void clear_trail_revision_interval() ;
  ::int32_t trail_revision_interval() const;
  void set_trail_revision_interval(::int32_t value);

  private:
  ::int32_t _internal_trail_revision_interval() const;
  void _internal_set_trail_revision_interval(::int32_t value);

  public:
  // int32 trail_revision_change = 53;
  void clear_trail_revision_change() ;
  ::int32_t trail_revision_change() const;
  void set_trail_revision_change(::int32_t value);

  private:
  ::int32_t _internal_trail_revision_change() const;
  void _internal_set_trail_revision_change(::int32_t value);

  public:
  // .t4proto.v1.common.OrderLink order_link = 54;
  void clear_order_link() ;
  ::t4proto::v1::common::OrderLink order_link() const;
  void set_order_link(::t4proto::v1::common::OrderLink value);

  private:
  ::t4proto::v1::common::OrderLink _internal_order_link() const;
  void _internal_set_order_link(::t4proto::v1::common::OrderLink value);

  public:
  // .t4proto.v1.common.ActivationType activation_type = 56;
  void clear_activation_type() ;
  ::t4proto::v1::common::ActivationType activation_type() const;
  void set_activation_type(::t4proto::v1::common::ActivationType value);

  private:
  ::t4proto::v1::common::ActivationType _internal_activation_type() const;
  void _internal_set_activation_type(::t4proto::v1::common::ActivationType value);

  public:
  // .t4proto.v1.common.PrimaryUserType primary_user = 57;
  void clear_primary_user() ;
  ::t4proto::v1::common::PrimaryUserType primary_user() const;
  void set_primary_user(::t4proto::v1::common::PrimaryUserType value);

  private:
  ::t4proto::v1::common::PrimaryUserType _internal_primary_user() const;
  void _internal_set_primary_user(::t4proto::v1::common::PrimaryUserType value);

  public:
  // int32 current_max_show = 58;
  void clear_current_max_show() ;
  ::int32_t current_max_show() const;
  void set_current_max_show(::int32_t value);

  private:
  ::int32_t _internal_current_max_show() const;
  void _internal_set_current_max_show(::int32_t value);

  public:
  // int32 new_max_show = 59;
  void clear_new_max_show() ;
  ::int32_t new_max_show() const;
  void set_new_max_show(::int32_t value);

  private:
  ::int32_t _internal_new_max_show() const;
  void _internal_set_new_max_show(::int32_t value);

  public:
  // .t4proto.v1.common.OrderSource order_source = 62;
  void clear_order_source() ;
  ::t4proto::v1::common::OrderSource order_source() const;
  void set_order_source(::t4proto::v1::common::OrderSource value);

  private:
  ::t4proto::v1::common::OrderSource _internal_order_source() const;
  void _internal_set_order_source(::t4proto::v1::common::OrderSource value);

  public:
  // .t4proto.v1.common.OrderSourceMethod order_source_method = 63;
  void clear_order_source_method() ;
  ::t4proto::v1::common::OrderSourceMethod order_source_method() const;
  void set_order_source_method(::t4proto::v1::common::OrderSourceMethod value);

  private:
  ::t4proto::v1::common::OrderSourceMethod _internal_order_source_method() const;
  void _internal_set_order_source_method(::t4proto::v1::common::OrderSourceMethod value);

  public:
  // .t4proto.v1.common.ApplicationType app_type = 64;
  void clear_app_type() ;
  ::t4proto::v1::common::ApplicationType app_type() const;
  void set_app_type(::t4proto::v1::common::ApplicationType value);

  private:
  ::t4proto::v1::common::ApplicationType _internal_app_type() const;
  void _internal_set_app_type(::t4proto::v1::common::ApplicationType value);

  public:
  // .t4proto.v1.common.MasterType master_type = 65;
  void clear_master_type() ;
  ::t4proto::v1::common::MasterType master_type() const;
  void set_master_type(::t4proto::v1::common::MasterType value);

  private:
  ::t4proto::v1::common::MasterType _internal_master_type() const;
  void _internal_set_master_type(::t4proto::v1::common::MasterType value);

  public:
  // int32 sequence_order = 70;
  void clear_sequence_order() ;
  ::int32_t sequence_order() const;
  void set_sequence_order(::int32_t value);

  private:
  ::int32_t _internal_sequence_order() const;
  void _internal_set_sequence_order(::int32_t value);

  public:
  // int32 max_volume = 72;
  void clear_max_volume() ;
  ::int32_t max_volume() const;
  void set_max_volume(::int32_t value);

  private:
  ::int32_t _internal_max_volume() const;
  void _internal_set_max_volume(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.orderrouting.OrderUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        OrderUpdate_InstructionExtraEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> instruction_extra_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderUpdate_Trade > trades_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderUpdate_TradeLeg > trade_legs_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unique_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_detail_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_order_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_login_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr executing_login_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_location_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr member_allocation_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trader_allocation_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_reference_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avg_price_group_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr omnibus_account_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr executing_group_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr orders_linked_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr routing_user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr routing_user_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_cl_ord_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_orig_cl_ord_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_relation_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smp_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ats_regulatory_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authorized_trader_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activation_details_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* submit_time_;
    ::t4proto::v1::common::Price* current_limit_price_;
    ::t4proto::v1::common::Price* current_stop_price_;
    ::t4proto::v1::common::Price* new_limit_price_;
    ::t4proto::v1::common::Price* new_stop_price_;
    ::t4proto::v1::common::Price* trail_price_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* receive_time_;
    int change_;
    int status_;
    ::int64_t trade_date_;
    int response_pending_;
    int buy_sell_;
    int price_type_;
    int time_type_;
    ::int32_t current_volume_;
    ::int32_t new_volume_;
    int open_close_;
    int cti_;
    int origin_;
    int account_code_;
    int cust_order_handling_inst_;
    int avg_price_indicator_;
    int clearing_trade_price_type_;
    int billing_fee_;
    ::int32_t total_fill_volume_;
    ::int32_t working_volume_;
    ::int32_t exchange_total_fill_volume_;
    ::int32_t trail_revision_interval_;
    ::int32_t trail_revision_change_;
    int order_link_;
    int activation_type_;
    int primary_user_;
    ::int32_t current_max_show_;
    ::int32_t new_max_show_;
    int order_source_;
    int order_source_method_;
    int app_type_;
    int master_type_;
    ::int32_t sequence_order_;
    ::int32_t max_volume_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto;
};// -------------------------------------------------------------------

class OrderUpdateMultiMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.orderrouting.OrderUpdateMultiMessage) */ {
 public:
  inline OrderUpdateMultiMessage() : OrderUpdateMultiMessage(nullptr) {}
  ~OrderUpdateMultiMessage() override;
  explicit PROTOBUF_CONSTEXPR OrderUpdateMultiMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderUpdateMultiMessage(const OrderUpdateMultiMessage& from);
  OrderUpdateMultiMessage(OrderUpdateMultiMessage&& from) noexcept
    : OrderUpdateMultiMessage() {
    *this = ::std::move(from);
  }

  inline OrderUpdateMultiMessage& operator=(const OrderUpdateMultiMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderUpdateMultiMessage& operator=(OrderUpdateMultiMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderUpdateMultiMessage& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kOrderUpdate = 3,
    kOrderUpdateFailed = 4,
    kOrderUpdateStatus = 5,
    kOrderUpdateTrade = 6,
    kOrderUpdateTradeLeg = 7,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const OrderUpdateMultiMessage* internal_default_instance() {
    return reinterpret_cast<const OrderUpdateMultiMessage*>(
               &_OrderUpdateMultiMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(OrderUpdateMultiMessage& a, OrderUpdateMultiMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderUpdateMultiMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderUpdateMultiMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderUpdateMultiMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderUpdateMultiMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderUpdateMultiMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderUpdateMultiMessage& from) {
    OrderUpdateMultiMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderUpdateMultiMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.orderrouting.OrderUpdateMultiMessage";
  }
  protected:
  explicit OrderUpdateMultiMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderUpdateFieldNumber = 3,
    kOrderUpdateFailedFieldNumber = 4,
    kOrderUpdateStatusFieldNumber = 5,
    kOrderUpdateTradeFieldNumber = 6,
    kOrderUpdateTradeLegFieldNumber = 7,
  };
  // .t4proto.v1.orderrouting.OrderUpdate order_update = 3;
  bool has_order_update() const;
  private:
  bool _internal_has_order_update() const;

  public:
  void clear_order_update() ;
  const ::t4proto::v1::orderrouting::OrderUpdate& order_update() const;
  PROTOBUF_NODISCARD ::t4proto::v1::orderrouting::OrderUpdate* release_order_update();
  ::t4proto::v1::orderrouting::OrderUpdate* mutable_order_update();
  void set_allocated_order_update(::t4proto::v1::orderrouting::OrderUpdate* order_update);
  private:
  const ::t4proto::v1::orderrouting::OrderUpdate& _internal_order_update() const;
  ::t4proto::v1::orderrouting::OrderUpdate* _internal_mutable_order_update();
  public:
  void unsafe_arena_set_allocated_order_update(
      ::t4proto::v1::orderrouting::OrderUpdate* order_update);
  ::t4proto::v1::orderrouting::OrderUpdate* unsafe_arena_release_order_update();
  // .t4proto.v1.orderrouting.OrderUpdateFailed order_update_failed = 4;
  bool has_order_update_failed() const;
  private:
  bool _internal_has_order_update_failed() const;

  public:
  void clear_order_update_failed() ;
  const ::t4proto::v1::orderrouting::OrderUpdateFailed& order_update_failed() const;
  PROTOBUF_NODISCARD ::t4proto::v1::orderrouting::OrderUpdateFailed* release_order_update_failed();
  ::t4proto::v1::orderrouting::OrderUpdateFailed* mutable_order_update_failed();
  void set_allocated_order_update_failed(::t4proto::v1::orderrouting::OrderUpdateFailed* order_update_failed);
  private:
  const ::t4proto::v1::orderrouting::OrderUpdateFailed& _internal_order_update_failed() const;
  ::t4proto::v1::orderrouting::OrderUpdateFailed* _internal_mutable_order_update_failed();
  public:
  void unsafe_arena_set_allocated_order_update_failed(
      ::t4proto::v1::orderrouting::OrderUpdateFailed* order_update_failed);
  ::t4proto::v1::orderrouting::OrderUpdateFailed* unsafe_arena_release_order_update_failed();
  // .t4proto.v1.orderrouting.OrderUpdateStatus order_update_status = 5;
  bool has_order_update_status() const;
  private:
  bool _internal_has_order_update_status() const;

  public:
  void clear_order_update_status() ;
  const ::t4proto::v1::orderrouting::OrderUpdateStatus& order_update_status() const;
  PROTOBUF_NODISCARD ::t4proto::v1::orderrouting::OrderUpdateStatus* release_order_update_status();
  ::t4proto::v1::orderrouting::OrderUpdateStatus* mutable_order_update_status();
  void set_allocated_order_update_status(::t4proto::v1::orderrouting::OrderUpdateStatus* order_update_status);
  private:
  const ::t4proto::v1::orderrouting::OrderUpdateStatus& _internal_order_update_status() const;
  ::t4proto::v1::orderrouting::OrderUpdateStatus* _internal_mutable_order_update_status();
  public:
  void unsafe_arena_set_allocated_order_update_status(
      ::t4proto::v1::orderrouting::OrderUpdateStatus* order_update_status);
  ::t4proto::v1::orderrouting::OrderUpdateStatus* unsafe_arena_release_order_update_status();
  // .t4proto.v1.orderrouting.OrderUpdateTrade order_update_trade = 6;
  bool has_order_update_trade() const;
  private:
  bool _internal_has_order_update_trade() const;

  public:
  void clear_order_update_trade() ;
  const ::t4proto::v1::orderrouting::OrderUpdateTrade& order_update_trade() const;
  PROTOBUF_NODISCARD ::t4proto::v1::orderrouting::OrderUpdateTrade* release_order_update_trade();
  ::t4proto::v1::orderrouting::OrderUpdateTrade* mutable_order_update_trade();
  void set_allocated_order_update_trade(::t4proto::v1::orderrouting::OrderUpdateTrade* order_update_trade);
  private:
  const ::t4proto::v1::orderrouting::OrderUpdateTrade& _internal_order_update_trade() const;
  ::t4proto::v1::orderrouting::OrderUpdateTrade* _internal_mutable_order_update_trade();
  public:
  void unsafe_arena_set_allocated_order_update_trade(
      ::t4proto::v1::orderrouting::OrderUpdateTrade* order_update_trade);
  ::t4proto::v1::orderrouting::OrderUpdateTrade* unsafe_arena_release_order_update_trade();
  // .t4proto.v1.orderrouting.OrderUpdateTradeLeg order_update_trade_leg = 7;
  bool has_order_update_trade_leg() const;
  private:
  bool _internal_has_order_update_trade_leg() const;

  public:
  void clear_order_update_trade_leg() ;
  const ::t4proto::v1::orderrouting::OrderUpdateTradeLeg& order_update_trade_leg() const;
  PROTOBUF_NODISCARD ::t4proto::v1::orderrouting::OrderUpdateTradeLeg* release_order_update_trade_leg();
  ::t4proto::v1::orderrouting::OrderUpdateTradeLeg* mutable_order_update_trade_leg();
  void set_allocated_order_update_trade_leg(::t4proto::v1::orderrouting::OrderUpdateTradeLeg* order_update_trade_leg);
  private:
  const ::t4proto::v1::orderrouting::OrderUpdateTradeLeg& _internal_order_update_trade_leg() const;
  ::t4proto::v1::orderrouting::OrderUpdateTradeLeg* _internal_mutable_order_update_trade_leg();
  public:
  void unsafe_arena_set_allocated_order_update_trade_leg(
      ::t4proto::v1::orderrouting::OrderUpdateTradeLeg* order_update_trade_leg);
  ::t4proto::v1::orderrouting::OrderUpdateTradeLeg* unsafe_arena_release_order_update_trade_leg();
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:t4proto.v1.orderrouting.OrderUpdateMultiMessage)
 private:
  class _Internal;
  void set_has_order_update();
  void set_has_order_update_failed();
  void set_has_order_update_status();
  void set_has_order_update_trade();
  void set_has_order_update_trade_leg();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::t4proto::v1::orderrouting::OrderUpdate* order_update_;
      ::t4proto::v1::orderrouting::OrderUpdateFailed* order_update_failed_;
      ::t4proto::v1::orderrouting::OrderUpdateStatus* order_update_status_;
      ::t4proto::v1::orderrouting::OrderUpdateTrade* order_update_trade_;
      ::t4proto::v1::orderrouting::OrderUpdateTradeLeg* order_update_trade_leg_;
    } payload_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto;
};// -------------------------------------------------------------------

class OrderUpdateMulti final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.orderrouting.OrderUpdateMulti) */ {
 public:
  inline OrderUpdateMulti() : OrderUpdateMulti(nullptr) {}
  ~OrderUpdateMulti() override;
  explicit PROTOBUF_CONSTEXPR OrderUpdateMulti(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrderUpdateMulti(const OrderUpdateMulti& from);
  OrderUpdateMulti(OrderUpdateMulti&& from) noexcept
    : OrderUpdateMulti() {
    *this = ::std::move(from);
  }

  inline OrderUpdateMulti& operator=(const OrderUpdateMulti& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderUpdateMulti& operator=(OrderUpdateMulti&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderUpdateMulti& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderUpdateMulti* internal_default_instance() {
    return reinterpret_cast<const OrderUpdateMulti*>(
               &_OrderUpdateMulti_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(OrderUpdateMulti& a, OrderUpdateMulti& b) {
    a.Swap(&b);
  }
  inline void Swap(OrderUpdateMulti* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderUpdateMulti* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderUpdateMulti* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrderUpdateMulti>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrderUpdateMulti& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const OrderUpdateMulti& from) {
    OrderUpdateMulti::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrderUpdateMulti* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.orderrouting.OrderUpdateMulti";
  }
  protected:
  explicit OrderUpdateMulti(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 4,
    kMarketIdFieldNumber = 1,
    kAccountIdFieldNumber = 2,
    kHistoricalFieldNumber = 3,
  };
  // repeated .t4proto.v1.orderrouting.OrderUpdateMultiMessage updates = 4;
  int updates_size() const;
  private:
  int _internal_updates_size() const;

  public:
  void clear_updates() ;
  ::t4proto::v1::orderrouting::OrderUpdateMultiMessage* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderUpdateMultiMessage >*
      mutable_updates();
  private:
  const ::t4proto::v1::orderrouting::OrderUpdateMultiMessage& _internal_updates(int index) const;
  ::t4proto::v1::orderrouting::OrderUpdateMultiMessage* _internal_add_updates();
  public:
  const ::t4proto::v1::orderrouting::OrderUpdateMultiMessage& updates(int index) const;
  ::t4proto::v1::orderrouting::OrderUpdateMultiMessage* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderUpdateMultiMessage >&
      updates() const;
  // string market_id = 1;
  void clear_market_id() ;
  const std::string& market_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_market_id(Arg_&& arg, Args_... args);
  std::string* mutable_market_id();
  PROTOBUF_NODISCARD std::string* release_market_id();
  void set_allocated_market_id(std::string* ptr);

  private:
  const std::string& _internal_market_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_market_id(
      const std::string& value);
  std::string* _internal_mutable_market_id();

  public:
  // string account_id = 2;
  void clear_account_id() ;
  const std::string& account_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* ptr);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // bool historical = 3;
  void clear_historical() ;
  bool historical() const;
  void set_historical(bool value);

  private:
  bool _internal_historical() const;
  void _internal_set_historical(bool value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.orderrouting.OrderUpdateMulti)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderUpdateMultiMessage > updates_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr market_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    bool historical_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto;
};// -------------------------------------------------------------------

class CreateUDSResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.orderrouting.CreateUDSResponse) */ {
 public:
  inline CreateUDSResponse() : CreateUDSResponse(nullptr) {}
  ~CreateUDSResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateUDSResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUDSResponse(const CreateUDSResponse& from);
  CreateUDSResponse(CreateUDSResponse&& from) noexcept
    : CreateUDSResponse() {
    *this = ::std::move(from);
  }

  inline CreateUDSResponse& operator=(const CreateUDSResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUDSResponse& operator=(CreateUDSResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUDSResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUDSResponse* internal_default_instance() {
    return reinterpret_cast<const CreateUDSResponse*>(
               &_CreateUDSResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CreateUDSResponse& a, CreateUDSResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUDSResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUDSResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateUDSResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateUDSResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateUDSResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateUDSResponse& from) {
    CreateUDSResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUDSResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.orderrouting.CreateUDSResponse";
  }
  protected:
  explicit CreateUDSResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kStatusDetailFieldNumber = 2,
    kMarketRefFieldNumber = 3,
    kUdsStatusFieldNumber = 4,
  };
  // string request_id = 1;
  void clear_request_id() ;
  const std::string& request_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_id(Arg_&& arg, Args_... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* ptr);

  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(
      const std::string& value);
  std::string* _internal_mutable_request_id();

  public:
  // string status_detail = 2;
  void clear_status_detail() ;
  const std::string& status_detail() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status_detail(Arg_&& arg, Args_... args);
  std::string* mutable_status_detail();
  PROTOBUF_NODISCARD std::string* release_status_detail();
  void set_allocated_status_detail(std::string* ptr);

  private:
  const std::string& _internal_status_detail() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_detail(
      const std::string& value);
  std::string* _internal_mutable_status_detail();

  public:
  // string MarketRef = 3;
  void clear_marketref() ;
  const std::string& marketref() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_marketref(Arg_&& arg, Args_... args);
  std::string* mutable_marketref();
  PROTOBUF_NODISCARD std::string* release_marketref();
  void set_allocated_marketref(std::string* ptr);

  private:
  const std::string& _internal_marketref() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_marketref(
      const std::string& value);
  std::string* _internal_mutable_marketref();

  public:
  // .t4proto.v1.common.UDSStatus uds_status = 4;
  void clear_uds_status() ;
  ::t4proto::v1::common::UDSStatus uds_status() const;
  void set_uds_status(::t4proto::v1::common::UDSStatus value);

  private:
  ::t4proto::v1::common::UDSStatus _internal_uds_status() const;
  void _internal_set_uds_status(::t4proto::v1::common::UDSStatus value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.orderrouting.CreateUDSResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_detail_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr marketref_;
    int uds_status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// OrderActivation

// optional .google.protobuf.Timestamp submit_time = 1;
inline bool OrderActivation::has_submit_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.submit_time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderActivation::_internal_submit_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.submit_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderActivation::submit_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderActivation.submit_time)
  return _internal_submit_time();
}
inline void OrderActivation::unsafe_arena_set_allocated_submit_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* submit_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submit_time_);
  }
  _impl_.submit_time_ = submit_time;
  if (submit_time) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderActivation.submit_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderActivation::release_submit_time() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.submit_time_;
  _impl_.submit_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderActivation::unsafe_arena_release_submit_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderActivation.submit_time)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.submit_time_;
  _impl_.submit_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderActivation::_internal_mutable_submit_time() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.submit_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.submit_time_ = p;
  }
  return _impl_.submit_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderActivation::mutable_submit_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_submit_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderActivation.submit_time)
  return _msg;
}
inline void OrderActivation::set_allocated_submit_time(::PROTOBUF_NAMESPACE_ID::Timestamp* submit_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submit_time_);
  }
  if (submit_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submit_time));
    if (message_arena != submessage_arena) {
      submit_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submit_time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.submit_time_ = submit_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderActivation.submit_time)
}

// optional int64 submit_delay_ms = 2;
inline bool OrderActivation::has_submit_delay_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void OrderActivation::clear_submit_delay_ms() {
  _impl_.submit_delay_ms_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t OrderActivation::submit_delay_ms() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderActivation.submit_delay_ms)
  return _internal_submit_delay_ms();
}
inline void OrderActivation::set_submit_delay_ms(::int64_t value) {
  _internal_set_submit_delay_ms(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderActivation.submit_delay_ms)
}
inline ::int64_t OrderActivation::_internal_submit_delay_ms() const {
  return _impl_.submit_delay_ms_;
}
inline void OrderActivation::_internal_set_submit_delay_ms(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.submit_delay_ms_ = value;
}

// optional .google.protobuf.Timestamp cancel_time = 3;
inline bool OrderActivation::has_cancel_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cancel_time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderActivation::_internal_cancel_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.cancel_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderActivation::cancel_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderActivation.cancel_time)
  return _internal_cancel_time();
}
inline void OrderActivation::unsafe_arena_set_allocated_cancel_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* cancel_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cancel_time_);
  }
  _impl_.cancel_time_ = cancel_time;
  if (cancel_time) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderActivation.cancel_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderActivation::release_cancel_time() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.cancel_time_;
  _impl_.cancel_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderActivation::unsafe_arena_release_cancel_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderActivation.cancel_time)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.cancel_time_;
  _impl_.cancel_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderActivation::_internal_mutable_cancel_time() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cancel_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.cancel_time_ = p;
  }
  return _impl_.cancel_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderActivation::mutable_cancel_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_cancel_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderActivation.cancel_time)
  return _msg;
}
inline void OrderActivation::set_allocated_cancel_time(::PROTOBUF_NAMESPACE_ID::Timestamp* cancel_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cancel_time_);
  }
  if (cancel_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cancel_time));
    if (message_arena != submessage_arena) {
      cancel_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cancel_time_ = cancel_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderActivation.cancel_time)
}

// optional int64 cancel_delay_ms = 4;
inline bool OrderActivation::has_cancel_delay_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void OrderActivation::clear_cancel_delay_ms() {
  _impl_.cancel_delay_ms_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t OrderActivation::cancel_delay_ms() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderActivation.cancel_delay_ms)
  return _internal_cancel_delay_ms();
}
inline void OrderActivation::set_cancel_delay_ms(::int64_t value) {
  _internal_set_cancel_delay_ms(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderActivation.cancel_delay_ms)
}
inline ::int64_t OrderActivation::_internal_cancel_delay_ms() const {
  return _impl_.cancel_delay_ms_;
}
inline void OrderActivation::_internal_set_cancel_delay_ms(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.cancel_delay_ms_ = value;
}

// optional .google.protobuf.Timestamp activation_cancel_time = 5;
inline bool OrderActivation::has_activation_cancel_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.activation_cancel_time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderActivation::_internal_activation_cancel_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.activation_cancel_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderActivation::activation_cancel_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderActivation.activation_cancel_time)
  return _internal_activation_cancel_time();
}
inline void OrderActivation::unsafe_arena_set_allocated_activation_cancel_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* activation_cancel_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activation_cancel_time_);
  }
  _impl_.activation_cancel_time_ = activation_cancel_time;
  if (activation_cancel_time) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderActivation.activation_cancel_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderActivation::release_activation_cancel_time() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.activation_cancel_time_;
  _impl_.activation_cancel_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderActivation::unsafe_arena_release_activation_cancel_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderActivation.activation_cancel_time)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.activation_cancel_time_;
  _impl_.activation_cancel_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderActivation::_internal_mutable_activation_cancel_time() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.activation_cancel_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.activation_cancel_time_ = p;
  }
  return _impl_.activation_cancel_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderActivation::mutable_activation_cancel_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_activation_cancel_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderActivation.activation_cancel_time)
  return _msg;
}
inline void OrderActivation::set_allocated_activation_cancel_time(::PROTOBUF_NAMESPACE_ID::Timestamp* activation_cancel_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activation_cancel_time_);
  }
  if (activation_cancel_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activation_cancel_time));
    if (message_arena != submessage_arena) {
      activation_cancel_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation_cancel_time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.activation_cancel_time_ = activation_cancel_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderActivation.activation_cancel_time)
}

// optional int64 activation_cancel_delay_ms = 6;
inline bool OrderActivation::has_activation_cancel_delay_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void OrderActivation::clear_activation_cancel_delay_ms() {
  _impl_.activation_cancel_delay_ms_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t OrderActivation::activation_cancel_delay_ms() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderActivation.activation_cancel_delay_ms)
  return _internal_activation_cancel_delay_ms();
}
inline void OrderActivation::set_activation_cancel_delay_ms(::int64_t value) {
  _internal_set_activation_cancel_delay_ms(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderActivation.activation_cancel_delay_ms)
}
inline ::int64_t OrderActivation::_internal_activation_cancel_delay_ms() const {
  return _impl_.activation_cancel_delay_ms_;
}
inline void OrderActivation::_internal_set_activation_cancel_delay_ms(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.activation_cancel_delay_ms_ = value;
}

// optional .t4proto.v1.common.MarketMode mode = 7;
inline bool OrderActivation::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void OrderActivation::clear_mode() {
  _impl_.mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::t4proto::v1::common::MarketMode OrderActivation::mode() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderActivation.mode)
  return _internal_mode();
}
inline void OrderActivation::set_mode(::t4proto::v1::common::MarketMode value) {
   _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderActivation.mode)
}
inline ::t4proto::v1::common::MarketMode OrderActivation::_internal_mode() const {
  return static_cast<::t4proto::v1::common::MarketMode>(_impl_.mode_);
}
inline void OrderActivation::_internal_set_mode(::t4proto::v1::common::MarketMode value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.mode_ = value;
}

// optional .t4proto.v1.common.Price price = 8;
inline bool OrderActivation::has_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.price_ != nullptr);
  return value;
}
inline const ::t4proto::v1::common::Price& OrderActivation::_internal_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& OrderActivation::price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderActivation.price)
  return _internal_price();
}
inline void OrderActivation::unsafe_arena_set_allocated_price(
    ::t4proto::v1::common::Price* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  if (price) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderActivation.price)
}
inline ::t4proto::v1::common::Price* OrderActivation::release_price() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::t4proto::v1::common::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* OrderActivation::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderActivation.price)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::t4proto::v1::common::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* OrderActivation::_internal_mutable_price() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::t4proto::v1::common::Price* OrderActivation::mutable_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderActivation.price)
  return _msg;
}
inline void OrderActivation::set_allocated_price(::t4proto::v1::common::Price* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderActivation.price)
}

// optional int32 volume = 9;
inline bool OrderActivation::has_volume() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void OrderActivation::clear_volume() {
  _impl_.volume_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t OrderActivation::volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderActivation.volume)
  return _internal_volume();
}
inline void OrderActivation::set_volume(::int32_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderActivation.volume)
}
inline ::int32_t OrderActivation::_internal_volume() const {
  return _impl_.volume_;
}
inline void OrderActivation::_internal_set_volume(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.volume_ = value;
}

// optional .t4proto.v1.common.BidOffer bid_offer = 10;
inline bool OrderActivation::has_bid_offer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void OrderActivation::clear_bid_offer() {
  _impl_.bid_offer_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::t4proto::v1::common::BidOffer OrderActivation::bid_offer() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderActivation.bid_offer)
  return _internal_bid_offer();
}
inline void OrderActivation::set_bid_offer(::t4proto::v1::common::BidOffer value) {
   _internal_set_bid_offer(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderActivation.bid_offer)
}
inline ::t4proto::v1::common::BidOffer OrderActivation::_internal_bid_offer() const {
  return static_cast<::t4proto::v1::common::BidOffer>(_impl_.bid_offer_);
}
inline void OrderActivation::_internal_set_bid_offer(::t4proto::v1::common::BidOffer value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.bid_offer_ = value;
}

// optional bool implied = 11;
inline bool OrderActivation::has_implied() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void OrderActivation::clear_implied() {
  _impl_.implied_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool OrderActivation::implied() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderActivation.implied)
  return _internal_implied();
}
inline void OrderActivation::set_implied(bool value) {
  _internal_set_implied(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderActivation.implied)
}
inline bool OrderActivation::_internal_implied() const {
  return _impl_.implied_;
}
inline void OrderActivation::_internal_set_implied(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.implied_ = value;
}

// optional bool queue_submit = 12;
inline bool OrderActivation::has_queue_submit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void OrderActivation::clear_queue_submit() {
  _impl_.queue_submit_ = false;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline bool OrderActivation::queue_submit() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderActivation.queue_submit)
  return _internal_queue_submit();
}
inline void OrderActivation::set_queue_submit(bool value) {
  _internal_set_queue_submit(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderActivation.queue_submit)
}
inline bool OrderActivation::_internal_queue_submit() const {
  return _impl_.queue_submit_;
}
inline void OrderActivation::_internal_set_queue_submit(bool value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.queue_submit_ = value;
}

// -------------------------------------------------------------------

// OrderSubmit_Order

// .t4proto.v1.common.BuySell buy_sell = 1;
inline void OrderSubmit_Order::clear_buy_sell() {
  _impl_.buy_sell_ = 0;
}
inline ::t4proto::v1::common::BuySell OrderSubmit_Order::buy_sell() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderSubmit.Order.buy_sell)
  return _internal_buy_sell();
}
inline void OrderSubmit_Order::set_buy_sell(::t4proto::v1::common::BuySell value) {
   _internal_set_buy_sell(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderSubmit.Order.buy_sell)
}
inline ::t4proto::v1::common::BuySell OrderSubmit_Order::_internal_buy_sell() const {
  return static_cast<::t4proto::v1::common::BuySell>(_impl_.buy_sell_);
}
inline void OrderSubmit_Order::_internal_set_buy_sell(::t4proto::v1::common::BuySell value) {
  ;
  _impl_.buy_sell_ = value;
}

// .t4proto.v1.common.PriceType price_type = 2;
inline void OrderSubmit_Order::clear_price_type() {
  _impl_.price_type_ = 0;
}
inline ::t4proto::v1::common::PriceType OrderSubmit_Order::price_type() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderSubmit.Order.price_type)
  return _internal_price_type();
}
inline void OrderSubmit_Order::set_price_type(::t4proto::v1::common::PriceType value) {
   _internal_set_price_type(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderSubmit.Order.price_type)
}
inline ::t4proto::v1::common::PriceType OrderSubmit_Order::_internal_price_type() const {
  return static_cast<::t4proto::v1::common::PriceType>(_impl_.price_type_);
}
inline void OrderSubmit_Order::_internal_set_price_type(::t4proto::v1::common::PriceType value) {
  ;
  _impl_.price_type_ = value;
}

// .t4proto.v1.common.TimeType time_type = 3;
inline void OrderSubmit_Order::clear_time_type() {
  _impl_.time_type_ = 0;
}
inline ::t4proto::v1::common::TimeType OrderSubmit_Order::time_type() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderSubmit.Order.time_type)
  return _internal_time_type();
}
inline void OrderSubmit_Order::set_time_type(::t4proto::v1::common::TimeType value) {
   _internal_set_time_type(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderSubmit.Order.time_type)
}
inline ::t4proto::v1::common::TimeType OrderSubmit_Order::_internal_time_type() const {
  return static_cast<::t4proto::v1::common::TimeType>(_impl_.time_type_);
}
inline void OrderSubmit_Order::_internal_set_time_type(::t4proto::v1::common::TimeType value) {
  ;
  _impl_.time_type_ = value;
}

// int32 volume = 4;
inline void OrderSubmit_Order::clear_volume() {
  _impl_.volume_ = 0;
}
inline ::int32_t OrderSubmit_Order::volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderSubmit.Order.volume)
  return _internal_volume();
}
inline void OrderSubmit_Order::set_volume(::int32_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderSubmit.Order.volume)
}
inline ::int32_t OrderSubmit_Order::_internal_volume() const {
  return _impl_.volume_;
}
inline void OrderSubmit_Order::_internal_set_volume(::int32_t value) {
  ;
  _impl_.volume_ = value;
}

// optional int32 max_show = 5;
inline bool OrderSubmit_Order::has_max_show() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void OrderSubmit_Order::clear_max_show() {
  _impl_.max_show_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t OrderSubmit_Order::max_show() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderSubmit.Order.max_show)
  return _internal_max_show();
}
inline void OrderSubmit_Order::set_max_show(::int32_t value) {
  _internal_set_max_show(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderSubmit.Order.max_show)
}
inline ::int32_t OrderSubmit_Order::_internal_max_show() const {
  return _impl_.max_show_;
}
inline void OrderSubmit_Order::_internal_set_max_show(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.max_show_ = value;
}

// optional int32 max_volume = 6;
inline bool OrderSubmit_Order::has_max_volume() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void OrderSubmit_Order::clear_max_volume() {
  _impl_.max_volume_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t OrderSubmit_Order::max_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderSubmit.Order.max_volume)
  return _internal_max_volume();
}
inline void OrderSubmit_Order::set_max_volume(::int32_t value) {
  _internal_set_max_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderSubmit.Order.max_volume)
}
inline ::int32_t OrderSubmit_Order::_internal_max_volume() const {
  return _impl_.max_volume_;
}
inline void OrderSubmit_Order::_internal_set_max_volume(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.max_volume_ = value;
}

// optional .t4proto.v1.common.Price limit_price = 7;
inline bool OrderSubmit_Order::has_limit_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.limit_price_ != nullptr);
  return value;
}
inline const ::t4proto::v1::common::Price& OrderSubmit_Order::_internal_limit_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.limit_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& OrderSubmit_Order::limit_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderSubmit.Order.limit_price)
  return _internal_limit_price();
}
inline void OrderSubmit_Order::unsafe_arena_set_allocated_limit_price(
    ::t4proto::v1::common::Price* limit_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.limit_price_);
  }
  _impl_.limit_price_ = limit_price;
  if (limit_price) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderSubmit.Order.limit_price)
}
inline ::t4proto::v1::common::Price* OrderSubmit_Order::release_limit_price() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::t4proto::v1::common::Price* temp = _impl_.limit_price_;
  _impl_.limit_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* OrderSubmit_Order::unsafe_arena_release_limit_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderSubmit.Order.limit_price)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::t4proto::v1::common::Price* temp = _impl_.limit_price_;
  _impl_.limit_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* OrderSubmit_Order::_internal_mutable_limit_price() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.limit_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.limit_price_ = p;
  }
  return _impl_.limit_price_;
}
inline ::t4proto::v1::common::Price* OrderSubmit_Order::mutable_limit_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_limit_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderSubmit.Order.limit_price)
  return _msg;
}
inline void OrderSubmit_Order::set_allocated_limit_price(::t4proto::v1::common::Price* limit_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.limit_price_);
  }
  if (limit_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_price));
    if (message_arena != submessage_arena) {
      limit_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit_price, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.limit_price_ = limit_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderSubmit.Order.limit_price)
}

// optional .t4proto.v1.common.Price stop_price = 8;
inline bool OrderSubmit_Order::has_stop_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stop_price_ != nullptr);
  return value;
}
inline const ::t4proto::v1::common::Price& OrderSubmit_Order::_internal_stop_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.stop_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& OrderSubmit_Order::stop_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderSubmit.Order.stop_price)
  return _internal_stop_price();
}
inline void OrderSubmit_Order::unsafe_arena_set_allocated_stop_price(
    ::t4proto::v1::common::Price* stop_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_price_);
  }
  _impl_.stop_price_ = stop_price;
  if (stop_price) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderSubmit.Order.stop_price)
}
inline ::t4proto::v1::common::Price* OrderSubmit_Order::release_stop_price() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::t4proto::v1::common::Price* temp = _impl_.stop_price_;
  _impl_.stop_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* OrderSubmit_Order::unsafe_arena_release_stop_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderSubmit.Order.stop_price)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::t4proto::v1::common::Price* temp = _impl_.stop_price_;
  _impl_.stop_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* OrderSubmit_Order::_internal_mutable_stop_price() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.stop_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.stop_price_ = p;
  }
  return _impl_.stop_price_;
}
inline ::t4proto::v1::common::Price* OrderSubmit_Order::mutable_stop_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_stop_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderSubmit.Order.stop_price)
  return _msg;
}
inline void OrderSubmit_Order::set_allocated_stop_price(::t4proto::v1::common::Price* stop_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_price_);
  }
  if (stop_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_price));
    if (message_arena != submessage_arena) {
      stop_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_price, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.stop_price_ = stop_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderSubmit.Order.stop_price)
}

// optional .t4proto.v1.common.Price trail_distance = 9;
inline bool OrderSubmit_Order::has_trail_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trail_distance_ != nullptr);
  return value;
}
inline const ::t4proto::v1::common::Price& OrderSubmit_Order::_internal_trail_distance() const {
  const ::t4proto::v1::common::Price* p = _impl_.trail_distance_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& OrderSubmit_Order::trail_distance() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderSubmit.Order.trail_distance)
  return _internal_trail_distance();
}
inline void OrderSubmit_Order::unsafe_arena_set_allocated_trail_distance(
    ::t4proto::v1::common::Price* trail_distance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trail_distance_);
  }
  _impl_.trail_distance_ = trail_distance;
  if (trail_distance) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderSubmit.Order.trail_distance)
}
inline ::t4proto::v1::common::Price* OrderSubmit_Order::release_trail_distance() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::t4proto::v1::common::Price* temp = _impl_.trail_distance_;
  _impl_.trail_distance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* OrderSubmit_Order::unsafe_arena_release_trail_distance() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderSubmit.Order.trail_distance)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::t4proto::v1::common::Price* temp = _impl_.trail_distance_;
  _impl_.trail_distance_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* OrderSubmit_Order::_internal_mutable_trail_distance() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.trail_distance_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.trail_distance_ = p;
  }
  return _impl_.trail_distance_;
}
inline ::t4proto::v1::common::Price* OrderSubmit_Order::mutable_trail_distance() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_trail_distance();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderSubmit.Order.trail_distance)
  return _msg;
}
inline void OrderSubmit_Order::set_allocated_trail_distance(::t4proto::v1::common::Price* trail_distance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trail_distance_);
  }
  if (trail_distance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trail_distance));
    if (message_arena != submessage_arena) {
      trail_distance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trail_distance, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.trail_distance_ = trail_distance;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderSubmit.Order.trail_distance)
}

// optional string tag = 10;
inline bool OrderSubmit_Order::has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void OrderSubmit_Order::clear_tag() {
  _impl_.tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OrderSubmit_Order::tag() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderSubmit.Order.tag)
  return _internal_tag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderSubmit_Order::set_tag(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tag_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderSubmit.Order.tag)
}
inline std::string* OrderSubmit_Order::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderSubmit.Order.tag)
  return _s;
}
inline const std::string& OrderSubmit_Order::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void OrderSubmit_Order::_internal_set_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderSubmit_Order::_internal_mutable_tag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tag_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderSubmit_Order::release_tag() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderSubmit.Order.tag)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.tag_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void OrderSubmit_Order::set_allocated_tag(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tag_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tag_.IsDefault()) {
          _impl_.tag_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderSubmit.Order.tag)
}

// optional .t4proto.v1.common.ActivationType activation_type = 11;
inline bool OrderSubmit_Order::has_activation_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void OrderSubmit_Order::clear_activation_type() {
  _impl_.activation_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::t4proto::v1::common::ActivationType OrderSubmit_Order::activation_type() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderSubmit.Order.activation_type)
  return _internal_activation_type();
}
inline void OrderSubmit_Order::set_activation_type(::t4proto::v1::common::ActivationType value) {
   _internal_set_activation_type(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderSubmit.Order.activation_type)
}
inline ::t4proto::v1::common::ActivationType OrderSubmit_Order::_internal_activation_type() const {
  return static_cast<::t4proto::v1::common::ActivationType>(_impl_.activation_type_);
}
inline void OrderSubmit_Order::_internal_set_activation_type(::t4proto::v1::common::ActivationType value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.activation_type_ = value;
}

// optional .t4proto.v1.orderrouting.OrderActivation activation_data = 12;
inline bool OrderSubmit_Order::has_activation_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.activation_data_ != nullptr);
  return value;
}
inline void OrderSubmit_Order::clear_activation_data() {
  if (_impl_.activation_data_ != nullptr) _impl_.activation_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::t4proto::v1::orderrouting::OrderActivation& OrderSubmit_Order::_internal_activation_data() const {
  const ::t4proto::v1::orderrouting::OrderActivation* p = _impl_.activation_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::orderrouting::OrderActivation&>(
      ::t4proto::v1::orderrouting::_OrderActivation_default_instance_);
}
inline const ::t4proto::v1::orderrouting::OrderActivation& OrderSubmit_Order::activation_data() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderSubmit.Order.activation_data)
  return _internal_activation_data();
}
inline void OrderSubmit_Order::unsafe_arena_set_allocated_activation_data(
    ::t4proto::v1::orderrouting::OrderActivation* activation_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activation_data_);
  }
  _impl_.activation_data_ = activation_data;
  if (activation_data) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderSubmit.Order.activation_data)
}
inline ::t4proto::v1::orderrouting::OrderActivation* OrderSubmit_Order::release_activation_data() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::t4proto::v1::orderrouting::OrderActivation* temp = _impl_.activation_data_;
  _impl_.activation_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::orderrouting::OrderActivation* OrderSubmit_Order::unsafe_arena_release_activation_data() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderSubmit.Order.activation_data)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::t4proto::v1::orderrouting::OrderActivation* temp = _impl_.activation_data_;
  _impl_.activation_data_ = nullptr;
  return temp;
}
inline ::t4proto::v1::orderrouting::OrderActivation* OrderSubmit_Order::_internal_mutable_activation_data() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.activation_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::orderrouting::OrderActivation>(GetArenaForAllocation());
    _impl_.activation_data_ = p;
  }
  return _impl_.activation_data_;
}
inline ::t4proto::v1::orderrouting::OrderActivation* OrderSubmit_Order::mutable_activation_data() {
  ::t4proto::v1::orderrouting::OrderActivation* _msg = _internal_mutable_activation_data();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderSubmit.Order.activation_data)
  return _msg;
}
inline void OrderSubmit_Order::set_allocated_activation_data(::t4proto::v1::orderrouting::OrderActivation* activation_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.activation_data_;
  }
  if (activation_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(activation_data);
    if (message_arena != submessage_arena) {
      activation_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.activation_data_ = activation_data;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderSubmit.Order.activation_data)
}

// -------------------------------------------------------------------

// OrderSubmit

// optional string user_id = 1;
inline bool OrderSubmit::has_user_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void OrderSubmit::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OrderSubmit::user_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderSubmit.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderSubmit::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderSubmit.user_id)
}
inline std::string* OrderSubmit::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderSubmit.user_id)
  return _s;
}
inline const std::string& OrderSubmit::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void OrderSubmit::_internal_set_user_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderSubmit::_internal_mutable_user_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.user_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderSubmit::release_user_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderSubmit.user_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.user_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void OrderSubmit::set_allocated_user_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_id_.IsDefault()) {
          _impl_.user_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderSubmit.user_id)
}

// string account_id = 2;
inline void OrderSubmit::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& OrderSubmit::account_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderSubmit.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderSubmit::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderSubmit.account_id)
}
inline std::string* OrderSubmit::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderSubmit.account_id)
  return _s;
}
inline const std::string& OrderSubmit::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void OrderSubmit::_internal_set_account_id(const std::string& value) {
  ;


  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderSubmit::_internal_mutable_account_id() {
  ;
  return _impl_.account_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderSubmit::release_account_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderSubmit.account_id)
  return _impl_.account_id_.Release();
}
inline void OrderSubmit::set_allocated_account_id(std::string* value) {
  _impl_.account_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderSubmit.account_id)
}

// string market_id = 3;
inline void OrderSubmit::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& OrderSubmit::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderSubmit.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderSubmit::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderSubmit.market_id)
}
inline std::string* OrderSubmit::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderSubmit.market_id)
  return _s;
}
inline const std::string& OrderSubmit::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void OrderSubmit::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderSubmit::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderSubmit::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderSubmit.market_id)
  return _impl_.market_id_.Release();
}
inline void OrderSubmit::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderSubmit.market_id)
}

// .t4proto.v1.common.OrderLink order_link = 4;
inline void OrderSubmit::clear_order_link() {
  _impl_.order_link_ = 0;
}
inline ::t4proto::v1::common::OrderLink OrderSubmit::order_link() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderSubmit.order_link)
  return _internal_order_link();
}
inline void OrderSubmit::set_order_link(::t4proto::v1::common::OrderLink value) {
   _internal_set_order_link(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderSubmit.order_link)
}
inline ::t4proto::v1::common::OrderLink OrderSubmit::_internal_order_link() const {
  return static_cast<::t4proto::v1::common::OrderLink>(_impl_.order_link_);
}
inline void OrderSubmit::_internal_set_order_link(::t4proto::v1::common::OrderLink value) {
  ;
  _impl_.order_link_ = value;
}

// bool manual_order_indicator = 5;
inline void OrderSubmit::clear_manual_order_indicator() {
  _impl_.manual_order_indicator_ = false;
}
inline bool OrderSubmit::manual_order_indicator() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderSubmit.manual_order_indicator)
  return _internal_manual_order_indicator();
}
inline void OrderSubmit::set_manual_order_indicator(bool value) {
  _internal_set_manual_order_indicator(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderSubmit.manual_order_indicator)
}
inline bool OrderSubmit::_internal_manual_order_indicator() const {
  return _impl_.manual_order_indicator_;
}
inline void OrderSubmit::_internal_set_manual_order_indicator(bool value) {
  ;
  _impl_.manual_order_indicator_ = value;
}

// repeated .t4proto.v1.orderrouting.OrderSubmit.Order orders = 6;
inline int OrderSubmit::_internal_orders_size() const {
  return _impl_.orders_.size();
}
inline int OrderSubmit::orders_size() const {
  return _internal_orders_size();
}
inline void OrderSubmit::clear_orders() {
  _impl_.orders_.Clear();
}
inline ::t4proto::v1::orderrouting::OrderSubmit_Order* OrderSubmit::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderSubmit.orders)
  return _impl_.orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderSubmit_Order >*
OrderSubmit::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.orderrouting.OrderSubmit.orders)
  return &_impl_.orders_;
}
inline const ::t4proto::v1::orderrouting::OrderSubmit_Order& OrderSubmit::_internal_orders(int index) const {
  return _impl_.orders_.Get(index);
}
inline const ::t4proto::v1::orderrouting::OrderSubmit_Order& OrderSubmit::orders(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderSubmit.orders)
  return _internal_orders(index);
}
inline ::t4proto::v1::orderrouting::OrderSubmit_Order* OrderSubmit::_internal_add_orders() {
  return _impl_.orders_.Add();
}
inline ::t4proto::v1::orderrouting::OrderSubmit_Order* OrderSubmit::add_orders() {
  ::t4proto::v1::orderrouting::OrderSubmit_Order* _add = _internal_add_orders();
  // @@protoc_insertion_point(field_add:t4proto.v1.orderrouting.OrderSubmit.orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderSubmit_Order >&
OrderSubmit::orders() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.orderrouting.OrderSubmit.orders)
  return _impl_.orders_;
}

// -------------------------------------------------------------------

// OrderRevise_Revise

// string unique_id = 1;
inline void OrderRevise_Revise::clear_unique_id() {
  _impl_.unique_id_.ClearToEmpty();
}
inline const std::string& OrderRevise_Revise::unique_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderRevise.Revise.unique_id)
  return _internal_unique_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderRevise_Revise::set_unique_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.unique_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderRevise.Revise.unique_id)
}
inline std::string* OrderRevise_Revise::mutable_unique_id() {
  std::string* _s = _internal_mutable_unique_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderRevise.Revise.unique_id)
  return _s;
}
inline const std::string& OrderRevise_Revise::_internal_unique_id() const {
  return _impl_.unique_id_.Get();
}
inline void OrderRevise_Revise::_internal_set_unique_id(const std::string& value) {
  ;


  _impl_.unique_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderRevise_Revise::_internal_mutable_unique_id() {
  ;
  return _impl_.unique_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderRevise_Revise::release_unique_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderRevise.Revise.unique_id)
  return _impl_.unique_id_.Release();
}
inline void OrderRevise_Revise::set_allocated_unique_id(std::string* value) {
  _impl_.unique_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.unique_id_.IsDefault()) {
          _impl_.unique_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderRevise.Revise.unique_id)
}

// optional int32 volume = 2;
inline bool OrderRevise_Revise::has_volume() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void OrderRevise_Revise::clear_volume() {
  _impl_.volume_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t OrderRevise_Revise::volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderRevise.Revise.volume)
  return _internal_volume();
}
inline void OrderRevise_Revise::set_volume(::int32_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderRevise.Revise.volume)
}
inline ::int32_t OrderRevise_Revise::_internal_volume() const {
  return _impl_.volume_;
}
inline void OrderRevise_Revise::_internal_set_volume(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.volume_ = value;
}

// optional int32 max_show = 3;
inline bool OrderRevise_Revise::has_max_show() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void OrderRevise_Revise::clear_max_show() {
  _impl_.max_show_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t OrderRevise_Revise::max_show() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderRevise.Revise.max_show)
  return _internal_max_show();
}
inline void OrderRevise_Revise::set_max_show(::int32_t value) {
  _internal_set_max_show(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderRevise.Revise.max_show)
}
inline ::int32_t OrderRevise_Revise::_internal_max_show() const {
  return _impl_.max_show_;
}
inline void OrderRevise_Revise::_internal_set_max_show(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.max_show_ = value;
}

// optional int32 max_volume = 4;
inline bool OrderRevise_Revise::has_max_volume() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void OrderRevise_Revise::clear_max_volume() {
  _impl_.max_volume_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t OrderRevise_Revise::max_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderRevise.Revise.max_volume)
  return _internal_max_volume();
}
inline void OrderRevise_Revise::set_max_volume(::int32_t value) {
  _internal_set_max_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderRevise.Revise.max_volume)
}
inline ::int32_t OrderRevise_Revise::_internal_max_volume() const {
  return _impl_.max_volume_;
}
inline void OrderRevise_Revise::_internal_set_max_volume(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.max_volume_ = value;
}

// optional .t4proto.v1.common.Price limit_price = 5;
inline bool OrderRevise_Revise::has_limit_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.limit_price_ != nullptr);
  return value;
}
inline const ::t4proto::v1::common::Price& OrderRevise_Revise::_internal_limit_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.limit_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& OrderRevise_Revise::limit_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderRevise.Revise.limit_price)
  return _internal_limit_price();
}
inline void OrderRevise_Revise::unsafe_arena_set_allocated_limit_price(
    ::t4proto::v1::common::Price* limit_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.limit_price_);
  }
  _impl_.limit_price_ = limit_price;
  if (limit_price) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderRevise.Revise.limit_price)
}
inline ::t4proto::v1::common::Price* OrderRevise_Revise::release_limit_price() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::t4proto::v1::common::Price* temp = _impl_.limit_price_;
  _impl_.limit_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* OrderRevise_Revise::unsafe_arena_release_limit_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderRevise.Revise.limit_price)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::t4proto::v1::common::Price* temp = _impl_.limit_price_;
  _impl_.limit_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* OrderRevise_Revise::_internal_mutable_limit_price() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.limit_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.limit_price_ = p;
  }
  return _impl_.limit_price_;
}
inline ::t4proto::v1::common::Price* OrderRevise_Revise::mutable_limit_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_limit_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderRevise.Revise.limit_price)
  return _msg;
}
inline void OrderRevise_Revise::set_allocated_limit_price(::t4proto::v1::common::Price* limit_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.limit_price_);
  }
  if (limit_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(limit_price));
    if (message_arena != submessage_arena) {
      limit_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, limit_price, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.limit_price_ = limit_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderRevise.Revise.limit_price)
}

// optional .t4proto.v1.common.Price stop_price = 6;
inline bool OrderRevise_Revise::has_stop_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stop_price_ != nullptr);
  return value;
}
inline const ::t4proto::v1::common::Price& OrderRevise_Revise::_internal_stop_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.stop_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& OrderRevise_Revise::stop_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderRevise.Revise.stop_price)
  return _internal_stop_price();
}
inline void OrderRevise_Revise::unsafe_arena_set_allocated_stop_price(
    ::t4proto::v1::common::Price* stop_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_price_);
  }
  _impl_.stop_price_ = stop_price;
  if (stop_price) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderRevise.Revise.stop_price)
}
inline ::t4proto::v1::common::Price* OrderRevise_Revise::release_stop_price() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::t4proto::v1::common::Price* temp = _impl_.stop_price_;
  _impl_.stop_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* OrderRevise_Revise::unsafe_arena_release_stop_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderRevise.Revise.stop_price)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::t4proto::v1::common::Price* temp = _impl_.stop_price_;
  _impl_.stop_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* OrderRevise_Revise::_internal_mutable_stop_price() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.stop_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.stop_price_ = p;
  }
  return _impl_.stop_price_;
}
inline ::t4proto::v1::common::Price* OrderRevise_Revise::mutable_stop_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_stop_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderRevise.Revise.stop_price)
  return _msg;
}
inline void OrderRevise_Revise::set_allocated_stop_price(::t4proto::v1::common::Price* stop_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stop_price_);
  }
  if (stop_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_price));
    if (message_arena != submessage_arena) {
      stop_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_price, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.stop_price_ = stop_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderRevise.Revise.stop_price)
}

// optional .t4proto.v1.common.Price trail_price = 7;
inline bool OrderRevise_Revise::has_trail_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trail_price_ != nullptr);
  return value;
}
inline const ::t4proto::v1::common::Price& OrderRevise_Revise::_internal_trail_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.trail_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& OrderRevise_Revise::trail_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderRevise.Revise.trail_price)
  return _internal_trail_price();
}
inline void OrderRevise_Revise::unsafe_arena_set_allocated_trail_price(
    ::t4proto::v1::common::Price* trail_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trail_price_);
  }
  _impl_.trail_price_ = trail_price;
  if (trail_price) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderRevise.Revise.trail_price)
}
inline ::t4proto::v1::common::Price* OrderRevise_Revise::release_trail_price() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::t4proto::v1::common::Price* temp = _impl_.trail_price_;
  _impl_.trail_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* OrderRevise_Revise::unsafe_arena_release_trail_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderRevise.Revise.trail_price)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::t4proto::v1::common::Price* temp = _impl_.trail_price_;
  _impl_.trail_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* OrderRevise_Revise::_internal_mutable_trail_price() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.trail_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.trail_price_ = p;
  }
  return _impl_.trail_price_;
}
inline ::t4proto::v1::common::Price* OrderRevise_Revise::mutable_trail_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_trail_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderRevise.Revise.trail_price)
  return _msg;
}
inline void OrderRevise_Revise::set_allocated_trail_price(::t4proto::v1::common::Price* trail_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trail_price_);
  }
  if (trail_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trail_price));
    if (message_arena != submessage_arena) {
      trail_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trail_price, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.trail_price_ = trail_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderRevise.Revise.trail_price)
}

// optional string tag = 8;
inline bool OrderRevise_Revise::has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void OrderRevise_Revise::clear_tag() {
  _impl_.tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OrderRevise_Revise::tag() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderRevise.Revise.tag)
  return _internal_tag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderRevise_Revise::set_tag(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tag_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderRevise.Revise.tag)
}
inline std::string* OrderRevise_Revise::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderRevise.Revise.tag)
  return _s;
}
inline const std::string& OrderRevise_Revise::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void OrderRevise_Revise::_internal_set_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderRevise_Revise::_internal_mutable_tag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tag_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderRevise_Revise::release_tag() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderRevise.Revise.tag)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.tag_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void OrderRevise_Revise::set_allocated_tag(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tag_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tag_.IsDefault()) {
          _impl_.tag_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderRevise.Revise.tag)
}

// optional .t4proto.v1.orderrouting.OrderActivation activation_data = 9;
inline bool OrderRevise_Revise::has_activation_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.activation_data_ != nullptr);
  return value;
}
inline void OrderRevise_Revise::clear_activation_data() {
  if (_impl_.activation_data_ != nullptr) _impl_.activation_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::t4proto::v1::orderrouting::OrderActivation& OrderRevise_Revise::_internal_activation_data() const {
  const ::t4proto::v1::orderrouting::OrderActivation* p = _impl_.activation_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::orderrouting::OrderActivation&>(
      ::t4proto::v1::orderrouting::_OrderActivation_default_instance_);
}
inline const ::t4proto::v1::orderrouting::OrderActivation& OrderRevise_Revise::activation_data() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderRevise.Revise.activation_data)
  return _internal_activation_data();
}
inline void OrderRevise_Revise::unsafe_arena_set_allocated_activation_data(
    ::t4proto::v1::orderrouting::OrderActivation* activation_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.activation_data_);
  }
  _impl_.activation_data_ = activation_data;
  if (activation_data) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderRevise.Revise.activation_data)
}
inline ::t4proto::v1::orderrouting::OrderActivation* OrderRevise_Revise::release_activation_data() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::t4proto::v1::orderrouting::OrderActivation* temp = _impl_.activation_data_;
  _impl_.activation_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::orderrouting::OrderActivation* OrderRevise_Revise::unsafe_arena_release_activation_data() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderRevise.Revise.activation_data)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::t4proto::v1::orderrouting::OrderActivation* temp = _impl_.activation_data_;
  _impl_.activation_data_ = nullptr;
  return temp;
}
inline ::t4proto::v1::orderrouting::OrderActivation* OrderRevise_Revise::_internal_mutable_activation_data() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.activation_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::orderrouting::OrderActivation>(GetArenaForAllocation());
    _impl_.activation_data_ = p;
  }
  return _impl_.activation_data_;
}
inline ::t4proto::v1::orderrouting::OrderActivation* OrderRevise_Revise::mutable_activation_data() {
  ::t4proto::v1::orderrouting::OrderActivation* _msg = _internal_mutable_activation_data();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderRevise.Revise.activation_data)
  return _msg;
}
inline void OrderRevise_Revise::set_allocated_activation_data(::t4proto::v1::orderrouting::OrderActivation* activation_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.activation_data_;
  }
  if (activation_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(activation_data);
    if (message_arena != submessage_arena) {
      activation_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activation_data, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.activation_data_ = activation_data;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderRevise.Revise.activation_data)
}

// -------------------------------------------------------------------

// OrderRevise

// string user_id = 1;
inline void OrderRevise::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& OrderRevise::user_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderRevise.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderRevise::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderRevise.user_id)
}
inline std::string* OrderRevise::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderRevise.user_id)
  return _s;
}
inline const std::string& OrderRevise::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void OrderRevise::_internal_set_user_id(const std::string& value) {
  ;


  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderRevise::_internal_mutable_user_id() {
  ;
  return _impl_.user_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderRevise::release_user_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderRevise.user_id)
  return _impl_.user_id_.Release();
}
inline void OrderRevise::set_allocated_user_id(std::string* value) {
  _impl_.user_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_id_.IsDefault()) {
          _impl_.user_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderRevise.user_id)
}

// string account_id = 2;
inline void OrderRevise::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& OrderRevise::account_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderRevise.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderRevise::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderRevise.account_id)
}
inline std::string* OrderRevise::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderRevise.account_id)
  return _s;
}
inline const std::string& OrderRevise::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void OrderRevise::_internal_set_account_id(const std::string& value) {
  ;


  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderRevise::_internal_mutable_account_id() {
  ;
  return _impl_.account_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderRevise::release_account_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderRevise.account_id)
  return _impl_.account_id_.Release();
}
inline void OrderRevise::set_allocated_account_id(std::string* value) {
  _impl_.account_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderRevise.account_id)
}

// string market_id = 3;
inline void OrderRevise::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& OrderRevise::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderRevise.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderRevise::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderRevise.market_id)
}
inline std::string* OrderRevise::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderRevise.market_id)
  return _s;
}
inline const std::string& OrderRevise::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void OrderRevise::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderRevise::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderRevise::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderRevise.market_id)
  return _impl_.market_id_.Release();
}
inline void OrderRevise::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderRevise.market_id)
}

// bool manual_order_indicator = 4;
inline void OrderRevise::clear_manual_order_indicator() {
  _impl_.manual_order_indicator_ = false;
}
inline bool OrderRevise::manual_order_indicator() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderRevise.manual_order_indicator)
  return _internal_manual_order_indicator();
}
inline void OrderRevise::set_manual_order_indicator(bool value) {
  _internal_set_manual_order_indicator(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderRevise.manual_order_indicator)
}
inline bool OrderRevise::_internal_manual_order_indicator() const {
  return _impl_.manual_order_indicator_;
}
inline void OrderRevise::_internal_set_manual_order_indicator(bool value) {
  ;
  _impl_.manual_order_indicator_ = value;
}

// repeated .t4proto.v1.orderrouting.OrderRevise.Revise revisions = 5;
inline int OrderRevise::_internal_revisions_size() const {
  return _impl_.revisions_.size();
}
inline int OrderRevise::revisions_size() const {
  return _internal_revisions_size();
}
inline void OrderRevise::clear_revisions() {
  _impl_.revisions_.Clear();
}
inline ::t4proto::v1::orderrouting::OrderRevise_Revise* OrderRevise::mutable_revisions(int index) {
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderRevise.revisions)
  return _impl_.revisions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderRevise_Revise >*
OrderRevise::mutable_revisions() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.orderrouting.OrderRevise.revisions)
  return &_impl_.revisions_;
}
inline const ::t4proto::v1::orderrouting::OrderRevise_Revise& OrderRevise::_internal_revisions(int index) const {
  return _impl_.revisions_.Get(index);
}
inline const ::t4proto::v1::orderrouting::OrderRevise_Revise& OrderRevise::revisions(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderRevise.revisions)
  return _internal_revisions(index);
}
inline ::t4proto::v1::orderrouting::OrderRevise_Revise* OrderRevise::_internal_add_revisions() {
  return _impl_.revisions_.Add();
}
inline ::t4proto::v1::orderrouting::OrderRevise_Revise* OrderRevise::add_revisions() {
  ::t4proto::v1::orderrouting::OrderRevise_Revise* _add = _internal_add_revisions();
  // @@protoc_insertion_point(field_add:t4proto.v1.orderrouting.OrderRevise.revisions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderRevise_Revise >&
OrderRevise::revisions() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.orderrouting.OrderRevise.revisions)
  return _impl_.revisions_;
}

// -------------------------------------------------------------------

// OrderPull_Pull

// string unique_id = 1;
inline void OrderPull_Pull::clear_unique_id() {
  _impl_.unique_id_.ClearToEmpty();
}
inline const std::string& OrderPull_Pull::unique_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderPull.Pull.unique_id)
  return _internal_unique_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderPull_Pull::set_unique_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.unique_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderPull.Pull.unique_id)
}
inline std::string* OrderPull_Pull::mutable_unique_id() {
  std::string* _s = _internal_mutable_unique_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderPull.Pull.unique_id)
  return _s;
}
inline const std::string& OrderPull_Pull::_internal_unique_id() const {
  return _impl_.unique_id_.Get();
}
inline void OrderPull_Pull::_internal_set_unique_id(const std::string& value) {
  ;


  _impl_.unique_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderPull_Pull::_internal_mutable_unique_id() {
  ;
  return _impl_.unique_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderPull_Pull::release_unique_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderPull.Pull.unique_id)
  return _impl_.unique_id_.Release();
}
inline void OrderPull_Pull::set_allocated_unique_id(std::string* value) {
  _impl_.unique_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.unique_id_.IsDefault()) {
          _impl_.unique_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderPull.Pull.unique_id)
}

// optional string tag = 2;
inline bool OrderPull_Pull::has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void OrderPull_Pull::clear_tag() {
  _impl_.tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OrderPull_Pull::tag() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderPull.Pull.tag)
  return _internal_tag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderPull_Pull::set_tag(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tag_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderPull.Pull.tag)
}
inline std::string* OrderPull_Pull::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderPull.Pull.tag)
  return _s;
}
inline const std::string& OrderPull_Pull::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void OrderPull_Pull::_internal_set_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderPull_Pull::_internal_mutable_tag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tag_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderPull_Pull::release_tag() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderPull.Pull.tag)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.tag_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void OrderPull_Pull::set_allocated_tag(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tag_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tag_.IsDefault()) {
          _impl_.tag_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderPull.Pull.tag)
}

// -------------------------------------------------------------------

// OrderPull

// string user_id = 1;
inline void OrderPull::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& OrderPull::user_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderPull.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderPull::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderPull.user_id)
}
inline std::string* OrderPull::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderPull.user_id)
  return _s;
}
inline const std::string& OrderPull::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void OrderPull::_internal_set_user_id(const std::string& value) {
  ;


  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderPull::_internal_mutable_user_id() {
  ;
  return _impl_.user_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderPull::release_user_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderPull.user_id)
  return _impl_.user_id_.Release();
}
inline void OrderPull::set_allocated_user_id(std::string* value) {
  _impl_.user_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_id_.IsDefault()) {
          _impl_.user_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderPull.user_id)
}

// string account_id = 2;
inline void OrderPull::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& OrderPull::account_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderPull.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderPull::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderPull.account_id)
}
inline std::string* OrderPull::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderPull.account_id)
  return _s;
}
inline const std::string& OrderPull::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void OrderPull::_internal_set_account_id(const std::string& value) {
  ;


  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderPull::_internal_mutable_account_id() {
  ;
  return _impl_.account_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderPull::release_account_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderPull.account_id)
  return _impl_.account_id_.Release();
}
inline void OrderPull::set_allocated_account_id(std::string* value) {
  _impl_.account_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderPull.account_id)
}

// string market_id = 3;
inline void OrderPull::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& OrderPull::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderPull.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderPull::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderPull.market_id)
}
inline std::string* OrderPull::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderPull.market_id)
  return _s;
}
inline const std::string& OrderPull::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void OrderPull::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderPull::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderPull::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderPull.market_id)
  return _impl_.market_id_.Release();
}
inline void OrderPull::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderPull.market_id)
}

// bool manual_order_indicator = 4;
inline void OrderPull::clear_manual_order_indicator() {
  _impl_.manual_order_indicator_ = false;
}
inline bool OrderPull::manual_order_indicator() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderPull.manual_order_indicator)
  return _internal_manual_order_indicator();
}
inline void OrderPull::set_manual_order_indicator(bool value) {
  _internal_set_manual_order_indicator(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderPull.manual_order_indicator)
}
inline bool OrderPull::_internal_manual_order_indicator() const {
  return _impl_.manual_order_indicator_;
}
inline void OrderPull::_internal_set_manual_order_indicator(bool value) {
  ;
  _impl_.manual_order_indicator_ = value;
}

// repeated .t4proto.v1.orderrouting.OrderPull.Pull pulls = 5;
inline int OrderPull::_internal_pulls_size() const {
  return _impl_.pulls_.size();
}
inline int OrderPull::pulls_size() const {
  return _internal_pulls_size();
}
inline void OrderPull::clear_pulls() {
  _impl_.pulls_.Clear();
}
inline ::t4proto::v1::orderrouting::OrderPull_Pull* OrderPull::mutable_pulls(int index) {
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderPull.pulls)
  return _impl_.pulls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderPull_Pull >*
OrderPull::mutable_pulls() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.orderrouting.OrderPull.pulls)
  return &_impl_.pulls_;
}
inline const ::t4proto::v1::orderrouting::OrderPull_Pull& OrderPull::_internal_pulls(int index) const {
  return _impl_.pulls_.Get(index);
}
inline const ::t4proto::v1::orderrouting::OrderPull_Pull& OrderPull::pulls(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderPull.pulls)
  return _internal_pulls(index);
}
inline ::t4proto::v1::orderrouting::OrderPull_Pull* OrderPull::_internal_add_pulls() {
  return _impl_.pulls_.Add();
}
inline ::t4proto::v1::orderrouting::OrderPull_Pull* OrderPull::add_pulls() {
  ::t4proto::v1::orderrouting::OrderPull_Pull* _add = _internal_add_pulls();
  // @@protoc_insertion_point(field_add:t4proto.v1.orderrouting.OrderPull.pulls)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderPull_Pull >&
OrderPull::pulls() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.orderrouting.OrderPull.pulls)
  return _impl_.pulls_;
}

// -------------------------------------------------------------------

// CreateUDS_Leg

// string exchange_id = 1;
inline void CreateUDS_Leg::clear_exchange_id() {
  _impl_.exchange_id_.ClearToEmpty();
}
inline const std::string& CreateUDS_Leg::exchange_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.CreateUDS.Leg.exchange_id)
  return _internal_exchange_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateUDS_Leg::set_exchange_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.exchange_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.CreateUDS.Leg.exchange_id)
}
inline std::string* CreateUDS_Leg::mutable_exchange_id() {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.CreateUDS.Leg.exchange_id)
  return _s;
}
inline const std::string& CreateUDS_Leg::_internal_exchange_id() const {
  return _impl_.exchange_id_.Get();
}
inline void CreateUDS_Leg::_internal_set_exchange_id(const std::string& value) {
  ;


  _impl_.exchange_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateUDS_Leg::_internal_mutable_exchange_id() {
  ;
  return _impl_.exchange_id_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateUDS_Leg::release_exchange_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.CreateUDS.Leg.exchange_id)
  return _impl_.exchange_id_.Release();
}
inline void CreateUDS_Leg::set_allocated_exchange_id(std::string* value) {
  _impl_.exchange_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_id_.IsDefault()) {
          _impl_.exchange_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.CreateUDS.Leg.exchange_id)
}

// string contract_id = 2;
inline void CreateUDS_Leg::clear_contract_id() {
  _impl_.contract_id_.ClearToEmpty();
}
inline const std::string& CreateUDS_Leg::contract_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.CreateUDS.Leg.contract_id)
  return _internal_contract_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateUDS_Leg::set_contract_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.contract_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.CreateUDS.Leg.contract_id)
}
inline std::string* CreateUDS_Leg::mutable_contract_id() {
  std::string* _s = _internal_mutable_contract_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.CreateUDS.Leg.contract_id)
  return _s;
}
inline const std::string& CreateUDS_Leg::_internal_contract_id() const {
  return _impl_.contract_id_.Get();
}
inline void CreateUDS_Leg::_internal_set_contract_id(const std::string& value) {
  ;


  _impl_.contract_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateUDS_Leg::_internal_mutable_contract_id() {
  ;
  return _impl_.contract_id_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateUDS_Leg::release_contract_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.CreateUDS.Leg.contract_id)
  return _impl_.contract_id_.Release();
}
inline void CreateUDS_Leg::set_allocated_contract_id(std::string* value) {
  _impl_.contract_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contract_id_.IsDefault()) {
          _impl_.contract_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.CreateUDS.Leg.contract_id)
}

// string market_id = 3;
inline void CreateUDS_Leg::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& CreateUDS_Leg::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.CreateUDS.Leg.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateUDS_Leg::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.CreateUDS.Leg.market_id)
}
inline std::string* CreateUDS_Leg::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.CreateUDS.Leg.market_id)
  return _s;
}
inline const std::string& CreateUDS_Leg::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void CreateUDS_Leg::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateUDS_Leg::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateUDS_Leg::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.CreateUDS.Leg.market_id)
  return _impl_.market_id_.Release();
}
inline void CreateUDS_Leg::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.CreateUDS.Leg.market_id)
}

// .t4proto.v1.common.BuySell buy_sell = 4;
inline void CreateUDS_Leg::clear_buy_sell() {
  _impl_.buy_sell_ = 0;
}
inline ::t4proto::v1::common::BuySell CreateUDS_Leg::buy_sell() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.CreateUDS.Leg.buy_sell)
  return _internal_buy_sell();
}
inline void CreateUDS_Leg::set_buy_sell(::t4proto::v1::common::BuySell value) {
   _internal_set_buy_sell(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.CreateUDS.Leg.buy_sell)
}
inline ::t4proto::v1::common::BuySell CreateUDS_Leg::_internal_buy_sell() const {
  return static_cast<::t4proto::v1::common::BuySell>(_impl_.buy_sell_);
}
inline void CreateUDS_Leg::_internal_set_buy_sell(::t4proto::v1::common::BuySell value) {
  ;
  _impl_.buy_sell_ = value;
}

// int32 volume = 5;
inline void CreateUDS_Leg::clear_volume() {
  _impl_.volume_ = 0;
}
inline ::int32_t CreateUDS_Leg::volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.CreateUDS.Leg.volume)
  return _internal_volume();
}
inline void CreateUDS_Leg::set_volume(::int32_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.CreateUDS.Leg.volume)
}
inline ::int32_t CreateUDS_Leg::_internal_volume() const {
  return _impl_.volume_;
}
inline void CreateUDS_Leg::_internal_set_volume(::int32_t value) {
  ;
  _impl_.volume_ = value;
}

// .t4proto.v1.common.Price price = 6;
inline bool CreateUDS_Leg::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool CreateUDS_Leg::has_price() const {
  return _internal_has_price();
}
inline const ::t4proto::v1::common::Price& CreateUDS_Leg::_internal_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& CreateUDS_Leg::price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.CreateUDS.Leg.price)
  return _internal_price();
}
inline void CreateUDS_Leg::unsafe_arena_set_allocated_price(
    ::t4proto::v1::common::Price* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.CreateUDS.Leg.price)
}
inline ::t4proto::v1::common::Price* CreateUDS_Leg::release_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* CreateUDS_Leg::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.CreateUDS.Leg.price)
  
  ::t4proto::v1::common::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* CreateUDS_Leg::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::t4proto::v1::common::Price* CreateUDS_Leg::mutable_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.CreateUDS.Leg.price)
  return _msg;
}
inline void CreateUDS_Leg::set_allocated_price(::t4proto::v1::common::Price* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }

  } else {

  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.CreateUDS.Leg.price)
}

// .t4proto.v1.common.Decimal delta = 7;
inline bool CreateUDS_Leg::_internal_has_delta() const {
  return this != internal_default_instance() && _impl_.delta_ != nullptr;
}
inline bool CreateUDS_Leg::has_delta() const {
  return _internal_has_delta();
}
inline const ::t4proto::v1::common::Decimal& CreateUDS_Leg::_internal_delta() const {
  const ::t4proto::v1::common::Decimal* p = _impl_.delta_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Decimal&>(
      ::t4proto::v1::common::_Decimal_default_instance_);
}
inline const ::t4proto::v1::common::Decimal& CreateUDS_Leg::delta() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.CreateUDS.Leg.delta)
  return _internal_delta();
}
inline void CreateUDS_Leg::unsafe_arena_set_allocated_delta(
    ::t4proto::v1::common::Decimal* delta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delta_);
  }
  _impl_.delta_ = delta;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.CreateUDS.Leg.delta)
}
inline ::t4proto::v1::common::Decimal* CreateUDS_Leg::release_delta() {
  
  ::t4proto::v1::common::Decimal* temp = _impl_.delta_;
  _impl_.delta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Decimal* CreateUDS_Leg::unsafe_arena_release_delta() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.CreateUDS.Leg.delta)
  
  ::t4proto::v1::common::Decimal* temp = _impl_.delta_;
  _impl_.delta_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Decimal* CreateUDS_Leg::_internal_mutable_delta() {
  
  if (_impl_.delta_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Decimal>(GetArenaForAllocation());
    _impl_.delta_ = p;
  }
  return _impl_.delta_;
}
inline ::t4proto::v1::common::Decimal* CreateUDS_Leg::mutable_delta() {
  ::t4proto::v1::common::Decimal* _msg = _internal_mutable_delta();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.CreateUDS.Leg.delta)
  return _msg;
}
inline void CreateUDS_Leg::set_allocated_delta(::t4proto::v1::common::Decimal* delta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.delta_);
  }
  if (delta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delta));
    if (message_arena != submessage_arena) {
      delta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delta, submessage_arena);
    }

  } else {

  }
  _impl_.delta_ = delta;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.CreateUDS.Leg.delta)
}

// -------------------------------------------------------------------

// CreateUDS

// string request_id = 1;
inline void CreateUDS::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& CreateUDS::request_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.CreateUDS.request_id)
  return _internal_request_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateUDS::set_request_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.request_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.CreateUDS.request_id)
}
inline std::string* CreateUDS::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.CreateUDS.request_id)
  return _s;
}
inline const std::string& CreateUDS::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void CreateUDS::_internal_set_request_id(const std::string& value) {
  ;


  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateUDS::_internal_mutable_request_id() {
  ;
  return _impl_.request_id_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateUDS::release_request_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.CreateUDS.request_id)
  return _impl_.request_id_.Release();
}
inline void CreateUDS::set_allocated_request_id(std::string* value) {
  _impl_.request_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.request_id_.IsDefault()) {
          _impl_.request_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.CreateUDS.request_id)
}

// string user_id = 2;
inline void CreateUDS::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& CreateUDS::user_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.CreateUDS.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateUDS::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.CreateUDS.user_id)
}
inline std::string* CreateUDS::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.CreateUDS.user_id)
  return _s;
}
inline const std::string& CreateUDS::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void CreateUDS::_internal_set_user_id(const std::string& value) {
  ;


  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateUDS::_internal_mutable_user_id() {
  ;
  return _impl_.user_id_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateUDS::release_user_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.CreateUDS.user_id)
  return _impl_.user_id_.Release();
}
inline void CreateUDS::set_allocated_user_id(std::string* value) {
  _impl_.user_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_id_.IsDefault()) {
          _impl_.user_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.CreateUDS.user_id)
}

// string account_id = 3;
inline void CreateUDS::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& CreateUDS::account_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.CreateUDS.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateUDS::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.CreateUDS.account_id)
}
inline std::string* CreateUDS::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.CreateUDS.account_id)
  return _s;
}
inline const std::string& CreateUDS::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void CreateUDS::_internal_set_account_id(const std::string& value) {
  ;


  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateUDS::_internal_mutable_account_id() {
  ;
  return _impl_.account_id_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateUDS::release_account_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.CreateUDS.account_id)
  return _impl_.account_id_.Release();
}
inline void CreateUDS::set_allocated_account_id(std::string* value) {
  _impl_.account_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.CreateUDS.account_id)
}

// .t4proto.v1.common.StrategyType strategy_type = 4;
inline void CreateUDS::clear_strategy_type() {
  _impl_.strategy_type_ = 0;
}
inline ::t4proto::v1::common::StrategyType CreateUDS::strategy_type() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.CreateUDS.strategy_type)
  return _internal_strategy_type();
}
inline void CreateUDS::set_strategy_type(::t4proto::v1::common::StrategyType value) {
   _internal_set_strategy_type(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.CreateUDS.strategy_type)
}
inline ::t4proto::v1::common::StrategyType CreateUDS::_internal_strategy_type() const {
  return static_cast<::t4proto::v1::common::StrategyType>(_impl_.strategy_type_);
}
inline void CreateUDS::_internal_set_strategy_type(::t4proto::v1::common::StrategyType value) {
  ;
  _impl_.strategy_type_ = value;
}

// repeated .t4proto.v1.orderrouting.CreateUDS.Leg legs = 5;
inline int CreateUDS::_internal_legs_size() const {
  return _impl_.legs_.size();
}
inline int CreateUDS::legs_size() const {
  return _internal_legs_size();
}
inline void CreateUDS::clear_legs() {
  _impl_.legs_.Clear();
}
inline ::t4proto::v1::orderrouting::CreateUDS_Leg* CreateUDS::mutable_legs(int index) {
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.CreateUDS.legs)
  return _impl_.legs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::CreateUDS_Leg >*
CreateUDS::mutable_legs() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.orderrouting.CreateUDS.legs)
  return &_impl_.legs_;
}
inline const ::t4proto::v1::orderrouting::CreateUDS_Leg& CreateUDS::_internal_legs(int index) const {
  return _impl_.legs_.Get(index);
}
inline const ::t4proto::v1::orderrouting::CreateUDS_Leg& CreateUDS::legs(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.CreateUDS.legs)
  return _internal_legs(index);
}
inline ::t4proto::v1::orderrouting::CreateUDS_Leg* CreateUDS::_internal_add_legs() {
  return _impl_.legs_.Add();
}
inline ::t4proto::v1::orderrouting::CreateUDS_Leg* CreateUDS::add_legs() {
  ::t4proto::v1::orderrouting::CreateUDS_Leg* _add = _internal_add_legs();
  // @@protoc_insertion_point(field_add:t4proto.v1.orderrouting.CreateUDS.legs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::CreateUDS_Leg >&
CreateUDS::legs() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.orderrouting.CreateUDS.legs)
  return _impl_.legs_;
}

// -------------------------------------------------------------------

// OrderUpdateFailed

// string unique_id = 1;
inline void OrderUpdateFailed::clear_unique_id() {
  _impl_.unique_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateFailed::unique_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateFailed.unique_id)
  return _internal_unique_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateFailed::set_unique_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.unique_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateFailed.unique_id)
}
inline std::string* OrderUpdateFailed::mutable_unique_id() {
  std::string* _s = _internal_mutable_unique_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateFailed.unique_id)
  return _s;
}
inline const std::string& OrderUpdateFailed::_internal_unique_id() const {
  return _impl_.unique_id_.Get();
}
inline void OrderUpdateFailed::_internal_set_unique_id(const std::string& value) {
  ;


  _impl_.unique_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateFailed::_internal_mutable_unique_id() {
  ;
  return _impl_.unique_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateFailed::release_unique_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateFailed.unique_id)
  return _impl_.unique_id_.Release();
}
inline void OrderUpdateFailed::set_allocated_unique_id(std::string* value) {
  _impl_.unique_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.unique_id_.IsDefault()) {
          _impl_.unique_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateFailed.unique_id)
}

// string account_id = 2;
inline void OrderUpdateFailed::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateFailed::account_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateFailed.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateFailed::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateFailed.account_id)
}
inline std::string* OrderUpdateFailed::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateFailed.account_id)
  return _s;
}
inline const std::string& OrderUpdateFailed::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void OrderUpdateFailed::_internal_set_account_id(const std::string& value) {
  ;


  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateFailed::_internal_mutable_account_id() {
  ;
  return _impl_.account_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateFailed::release_account_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateFailed.account_id)
  return _impl_.account_id_.Release();
}
inline void OrderUpdateFailed::set_allocated_account_id(std::string* value) {
  _impl_.account_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateFailed.account_id)
}

// string market_id = 3;
inline void OrderUpdateFailed::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateFailed::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateFailed.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateFailed::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateFailed.market_id)
}
inline std::string* OrderUpdateFailed::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateFailed.market_id)
  return _s;
}
inline const std::string& OrderUpdateFailed::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void OrderUpdateFailed::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateFailed::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateFailed::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateFailed.market_id)
  return _impl_.market_id_.Release();
}
inline void OrderUpdateFailed::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateFailed.market_id)
}

// .google.protobuf.Timestamp time = 4;
inline bool OrderUpdateFailed::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool OrderUpdateFailed::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdateFailed::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdateFailed::time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateFailed.time)
  return _internal_time();
}
inline void OrderUpdateFailed::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdateFailed.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateFailed::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateFailed::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateFailed.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateFailed::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateFailed::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateFailed.time)
  return _msg;
}
inline void OrderUpdateFailed::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }

  } else {

  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateFailed.time)
}

// .google.protobuf.Timestamp exchange_time = 5;
inline bool OrderUpdateFailed::_internal_has_exchange_time() const {
  return this != internal_default_instance() && _impl_.exchange_time_ != nullptr;
}
inline bool OrderUpdateFailed::has_exchange_time() const {
  return _internal_has_exchange_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdateFailed::_internal_exchange_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.exchange_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdateFailed::exchange_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateFailed.exchange_time)
  return _internal_exchange_time();
}
inline void OrderUpdateFailed::unsafe_arena_set_allocated_exchange_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchange_time_);
  }
  _impl_.exchange_time_ = exchange_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdateFailed.exchange_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateFailed::release_exchange_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.exchange_time_;
  _impl_.exchange_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateFailed::unsafe_arena_release_exchange_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateFailed.exchange_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.exchange_time_;
  _impl_.exchange_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateFailed::_internal_mutable_exchange_time() {
  
  if (_impl_.exchange_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.exchange_time_ = p;
  }
  return _impl_.exchange_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateFailed::mutable_exchange_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_exchange_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateFailed.exchange_time)
  return _msg;
}
inline void OrderUpdateFailed::set_allocated_exchange_time(::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchange_time_);
  }
  if (exchange_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exchange_time));
    if (message_arena != submessage_arena) {
      exchange_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exchange_time, submessage_arena);
    }

  } else {

  }
  _impl_.exchange_time_ = exchange_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateFailed.exchange_time)
}

// .t4proto.v1.common.OrderChange change = 6;
inline void OrderUpdateFailed::clear_change() {
  _impl_.change_ = 0;
}
inline ::t4proto::v1::common::OrderChange OrderUpdateFailed::change() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateFailed.change)
  return _internal_change();
}
inline void OrderUpdateFailed::set_change(::t4proto::v1::common::OrderChange value) {
   _internal_set_change(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateFailed.change)
}
inline ::t4proto::v1::common::OrderChange OrderUpdateFailed::_internal_change() const {
  return static_cast<::t4proto::v1::common::OrderChange>(_impl_.change_);
}
inline void OrderUpdateFailed::_internal_set_change(::t4proto::v1::common::OrderChange value) {
  ;
  _impl_.change_ = value;
}

// .t4proto.v1.common.OrderStatus status = 7;
inline void OrderUpdateFailed::clear_status() {
  _impl_.status_ = 0;
}
inline ::t4proto::v1::common::OrderStatus OrderUpdateFailed::status() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateFailed.status)
  return _internal_status();
}
inline void OrderUpdateFailed::set_status(::t4proto::v1::common::OrderStatus value) {
   _internal_set_status(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateFailed.status)
}
inline ::t4proto::v1::common::OrderStatus OrderUpdateFailed::_internal_status() const {
  return static_cast<::t4proto::v1::common::OrderStatus>(_impl_.status_);
}
inline void OrderUpdateFailed::_internal_set_status(::t4proto::v1::common::OrderStatus value) {
  ;
  _impl_.status_ = value;
}

// string status_detail = 8;
inline void OrderUpdateFailed::clear_status_detail() {
  _impl_.status_detail_.ClearToEmpty();
}
inline const std::string& OrderUpdateFailed::status_detail() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateFailed.status_detail)
  return _internal_status_detail();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateFailed::set_status_detail(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.status_detail_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateFailed.status_detail)
}
inline std::string* OrderUpdateFailed::mutable_status_detail() {
  std::string* _s = _internal_mutable_status_detail();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateFailed.status_detail)
  return _s;
}
inline const std::string& OrderUpdateFailed::_internal_status_detail() const {
  return _impl_.status_detail_.Get();
}
inline void OrderUpdateFailed::_internal_set_status_detail(const std::string& value) {
  ;


  _impl_.status_detail_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateFailed::_internal_mutable_status_detail() {
  ;
  return _impl_.status_detail_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateFailed::release_status_detail() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateFailed.status_detail)
  return _impl_.status_detail_.Release();
}
inline void OrderUpdateFailed::set_allocated_status_detail(std::string* value) {
  _impl_.status_detail_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_detail_.IsDefault()) {
          _impl_.status_detail_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateFailed.status_detail)
}

// .t4proto.v1.common.ResponsePending response_pending = 9;
inline void OrderUpdateFailed::clear_response_pending() {
  _impl_.response_pending_ = 0;
}
inline ::t4proto::v1::common::ResponsePending OrderUpdateFailed::response_pending() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateFailed.response_pending)
  return _internal_response_pending();
}
inline void OrderUpdateFailed::set_response_pending(::t4proto::v1::common::ResponsePending value) {
   _internal_set_response_pending(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateFailed.response_pending)
}
inline ::t4proto::v1::common::ResponsePending OrderUpdateFailed::_internal_response_pending() const {
  return static_cast<::t4proto::v1::common::ResponsePending>(_impl_.response_pending_);
}
inline void OrderUpdateFailed::_internal_set_response_pending(::t4proto::v1::common::ResponsePending value) {
  ;
  _impl_.response_pending_ = value;
}

// string tag_cl_ord_id = 10;
inline void OrderUpdateFailed::clear_tag_cl_ord_id() {
  _impl_.tag_cl_ord_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateFailed::tag_cl_ord_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateFailed.tag_cl_ord_id)
  return _internal_tag_cl_ord_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateFailed::set_tag_cl_ord_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.tag_cl_ord_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateFailed.tag_cl_ord_id)
}
inline std::string* OrderUpdateFailed::mutable_tag_cl_ord_id() {
  std::string* _s = _internal_mutable_tag_cl_ord_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateFailed.tag_cl_ord_id)
  return _s;
}
inline const std::string& OrderUpdateFailed::_internal_tag_cl_ord_id() const {
  return _impl_.tag_cl_ord_id_.Get();
}
inline void OrderUpdateFailed::_internal_set_tag_cl_ord_id(const std::string& value) {
  ;


  _impl_.tag_cl_ord_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateFailed::_internal_mutable_tag_cl_ord_id() {
  ;
  return _impl_.tag_cl_ord_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateFailed::release_tag_cl_ord_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateFailed.tag_cl_ord_id)
  return _impl_.tag_cl_ord_id_.Release();
}
inline void OrderUpdateFailed::set_allocated_tag_cl_ord_id(std::string* value) {
  _impl_.tag_cl_ord_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tag_cl_ord_id_.IsDefault()) {
          _impl_.tag_cl_ord_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateFailed.tag_cl_ord_id)
}

// int32 sequence_order = 11;
inline void OrderUpdateFailed::clear_sequence_order() {
  _impl_.sequence_order_ = 0;
}
inline ::int32_t OrderUpdateFailed::sequence_order() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateFailed.sequence_order)
  return _internal_sequence_order();
}
inline void OrderUpdateFailed::set_sequence_order(::int32_t value) {
  _internal_set_sequence_order(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateFailed.sequence_order)
}
inline ::int32_t OrderUpdateFailed::_internal_sequence_order() const {
  return _impl_.sequence_order_;
}
inline void OrderUpdateFailed::_internal_set_sequence_order(::int32_t value) {
  ;
  _impl_.sequence_order_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OrderUpdateStatus

// string unique_id = 1;
inline void OrderUpdateStatus::clear_unique_id() {
  _impl_.unique_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::unique_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.unique_id)
  return _internal_unique_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_unique_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.unique_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.unique_id)
}
inline std::string* OrderUpdateStatus::mutable_unique_id() {
  std::string* _s = _internal_mutable_unique_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.unique_id)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_unique_id() const {
  return _impl_.unique_id_.Get();
}
inline void OrderUpdateStatus::_internal_set_unique_id(const std::string& value) {
  ;


  _impl_.unique_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_unique_id() {
  ;
  return _impl_.unique_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_unique_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.unique_id)
  return _impl_.unique_id_.Release();
}
inline void OrderUpdateStatus::set_allocated_unique_id(std::string* value) {
  _impl_.unique_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.unique_id_.IsDefault()) {
          _impl_.unique_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.unique_id)
}

// string account_id = 2;
inline void OrderUpdateStatus::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::account_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.account_id)
}
inline std::string* OrderUpdateStatus::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.account_id)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void OrderUpdateStatus::_internal_set_account_id(const std::string& value) {
  ;


  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_account_id() {
  ;
  return _impl_.account_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_account_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.account_id)
  return _impl_.account_id_.Release();
}
inline void OrderUpdateStatus::set_allocated_account_id(std::string* value) {
  _impl_.account_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.account_id)
}

// string market_id = 3;
inline void OrderUpdateStatus::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.market_id)
}
inline std::string* OrderUpdateStatus::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.market_id)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void OrderUpdateStatus::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.market_id)
  return _impl_.market_id_.Release();
}
inline void OrderUpdateStatus::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.market_id)
}

// .google.protobuf.Timestamp time = 4;
inline bool OrderUpdateStatus::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool OrderUpdateStatus::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdateStatus::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdateStatus::time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.time)
  return _internal_time();
}
inline void OrderUpdateStatus::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateStatus::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateStatus::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateStatus::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateStatus::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.time)
  return _msg;
}
inline void OrderUpdateStatus::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }

  } else {

  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.time)
}

// .google.protobuf.Timestamp exchange_time = 5;
inline bool OrderUpdateStatus::_internal_has_exchange_time() const {
  return this != internal_default_instance() && _impl_.exchange_time_ != nullptr;
}
inline bool OrderUpdateStatus::has_exchange_time() const {
  return _internal_has_exchange_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdateStatus::_internal_exchange_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.exchange_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdateStatus::exchange_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.exchange_time)
  return _internal_exchange_time();
}
inline void OrderUpdateStatus::unsafe_arena_set_allocated_exchange_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchange_time_);
  }
  _impl_.exchange_time_ = exchange_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.exchange_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateStatus::release_exchange_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.exchange_time_;
  _impl_.exchange_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateStatus::unsafe_arena_release_exchange_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.exchange_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.exchange_time_;
  _impl_.exchange_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateStatus::_internal_mutable_exchange_time() {
  
  if (_impl_.exchange_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.exchange_time_ = p;
  }
  return _impl_.exchange_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateStatus::mutable_exchange_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_exchange_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.exchange_time)
  return _msg;
}
inline void OrderUpdateStatus::set_allocated_exchange_time(::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchange_time_);
  }
  if (exchange_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exchange_time));
    if (message_arena != submessage_arena) {
      exchange_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exchange_time, submessage_arena);
    }

  } else {

  }
  _impl_.exchange_time_ = exchange_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.exchange_time)
}

// .t4proto.v1.common.OrderChange change = 6;
inline void OrderUpdateStatus::clear_change() {
  _impl_.change_ = 0;
}
inline ::t4proto::v1::common::OrderChange OrderUpdateStatus::change() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.change)
  return _internal_change();
}
inline void OrderUpdateStatus::set_change(::t4proto::v1::common::OrderChange value) {
   _internal_set_change(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.change)
}
inline ::t4proto::v1::common::OrderChange OrderUpdateStatus::_internal_change() const {
  return static_cast<::t4proto::v1::common::OrderChange>(_impl_.change_);
}
inline void OrderUpdateStatus::_internal_set_change(::t4proto::v1::common::OrderChange value) {
  ;
  _impl_.change_ = value;
}

// .t4proto.v1.common.OrderStatus status = 7;
inline void OrderUpdateStatus::clear_status() {
  _impl_.status_ = 0;
}
inline ::t4proto::v1::common::OrderStatus OrderUpdateStatus::status() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.status)
  return _internal_status();
}
inline void OrderUpdateStatus::set_status(::t4proto::v1::common::OrderStatus value) {
   _internal_set_status(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.status)
}
inline ::t4proto::v1::common::OrderStatus OrderUpdateStatus::_internal_status() const {
  return static_cast<::t4proto::v1::common::OrderStatus>(_impl_.status_);
}
inline void OrderUpdateStatus::_internal_set_status(::t4proto::v1::common::OrderStatus value) {
  ;
  _impl_.status_ = value;
}

// string status_detail = 8;
inline void OrderUpdateStatus::clear_status_detail() {
  _impl_.status_detail_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::status_detail() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.status_detail)
  return _internal_status_detail();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_status_detail(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.status_detail_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.status_detail)
}
inline std::string* OrderUpdateStatus::mutable_status_detail() {
  std::string* _s = _internal_mutable_status_detail();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.status_detail)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_status_detail() const {
  return _impl_.status_detail_.Get();
}
inline void OrderUpdateStatus::_internal_set_status_detail(const std::string& value) {
  ;


  _impl_.status_detail_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_status_detail() {
  ;
  return _impl_.status_detail_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_status_detail() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.status_detail)
  return _impl_.status_detail_.Release();
}
inline void OrderUpdateStatus::set_allocated_status_detail(std::string* value) {
  _impl_.status_detail_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_detail_.IsDefault()) {
          _impl_.status_detail_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.status_detail)
}

// .t4proto.v1.common.ResponsePending response_pending = 9;
inline void OrderUpdateStatus::clear_response_pending() {
  _impl_.response_pending_ = 0;
}
inline ::t4proto::v1::common::ResponsePending OrderUpdateStatus::response_pending() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.response_pending)
  return _internal_response_pending();
}
inline void OrderUpdateStatus::set_response_pending(::t4proto::v1::common::ResponsePending value) {
   _internal_set_response_pending(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.response_pending)
}
inline ::t4proto::v1::common::ResponsePending OrderUpdateStatus::_internal_response_pending() const {
  return static_cast<::t4proto::v1::common::ResponsePending>(_impl_.response_pending_);
}
inline void OrderUpdateStatus::_internal_set_response_pending(::t4proto::v1::common::ResponsePending value) {
  ;
  _impl_.response_pending_ = value;
}

// string exchange_order_id = 10;
inline void OrderUpdateStatus::clear_exchange_order_id() {
  _impl_.exchange_order_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::exchange_order_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.exchange_order_id)
  return _internal_exchange_order_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_exchange_order_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.exchange_order_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.exchange_order_id)
}
inline std::string* OrderUpdateStatus::mutable_exchange_order_id() {
  std::string* _s = _internal_mutable_exchange_order_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.exchange_order_id)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_exchange_order_id() const {
  return _impl_.exchange_order_id_.Get();
}
inline void OrderUpdateStatus::_internal_set_exchange_order_id(const std::string& value) {
  ;


  _impl_.exchange_order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_exchange_order_id() {
  ;
  return _impl_.exchange_order_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_exchange_order_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.exchange_order_id)
  return _impl_.exchange_order_id_.Release();
}
inline void OrderUpdateStatus::set_allocated_exchange_order_id(std::string* value) {
  _impl_.exchange_order_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_order_id_.IsDefault()) {
          _impl_.exchange_order_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.exchange_order_id)
}

// int32 current_volume = 11;
inline void OrderUpdateStatus::clear_current_volume() {
  _impl_.current_volume_ = 0;
}
inline ::int32_t OrderUpdateStatus::current_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.current_volume)
  return _internal_current_volume();
}
inline void OrderUpdateStatus::set_current_volume(::int32_t value) {
  _internal_set_current_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.current_volume)
}
inline ::int32_t OrderUpdateStatus::_internal_current_volume() const {
  return _impl_.current_volume_;
}
inline void OrderUpdateStatus::_internal_set_current_volume(::int32_t value) {
  ;
  _impl_.current_volume_ = value;
}

// .t4proto.v1.common.Price current_limit_price = 12;
inline bool OrderUpdateStatus::_internal_has_current_limit_price() const {
  return this != internal_default_instance() && _impl_.current_limit_price_ != nullptr;
}
inline bool OrderUpdateStatus::has_current_limit_price() const {
  return _internal_has_current_limit_price();
}
inline const ::t4proto::v1::common::Price& OrderUpdateStatus::_internal_current_limit_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.current_limit_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& OrderUpdateStatus::current_limit_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.current_limit_price)
  return _internal_current_limit_price();
}
inline void OrderUpdateStatus::unsafe_arena_set_allocated_current_limit_price(
    ::t4proto::v1::common::Price* current_limit_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_limit_price_);
  }
  _impl_.current_limit_price_ = current_limit_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.current_limit_price)
}
inline ::t4proto::v1::common::Price* OrderUpdateStatus::release_current_limit_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.current_limit_price_;
  _impl_.current_limit_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdateStatus::unsafe_arena_release_current_limit_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.current_limit_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.current_limit_price_;
  _impl_.current_limit_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdateStatus::_internal_mutable_current_limit_price() {
  
  if (_impl_.current_limit_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.current_limit_price_ = p;
  }
  return _impl_.current_limit_price_;
}
inline ::t4proto::v1::common::Price* OrderUpdateStatus::mutable_current_limit_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_current_limit_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.current_limit_price)
  return _msg;
}
inline void OrderUpdateStatus::set_allocated_current_limit_price(::t4proto::v1::common::Price* current_limit_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_limit_price_);
  }
  if (current_limit_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_limit_price));
    if (message_arena != submessage_arena) {
      current_limit_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_limit_price, submessage_arena);
    }

  } else {

  }
  _impl_.current_limit_price_ = current_limit_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.current_limit_price)
}

// .t4proto.v1.common.Price current_stop_price = 13;
inline bool OrderUpdateStatus::_internal_has_current_stop_price() const {
  return this != internal_default_instance() && _impl_.current_stop_price_ != nullptr;
}
inline bool OrderUpdateStatus::has_current_stop_price() const {
  return _internal_has_current_stop_price();
}
inline const ::t4proto::v1::common::Price& OrderUpdateStatus::_internal_current_stop_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.current_stop_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& OrderUpdateStatus::current_stop_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.current_stop_price)
  return _internal_current_stop_price();
}
inline void OrderUpdateStatus::unsafe_arena_set_allocated_current_stop_price(
    ::t4proto::v1::common::Price* current_stop_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_stop_price_);
  }
  _impl_.current_stop_price_ = current_stop_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.current_stop_price)
}
inline ::t4proto::v1::common::Price* OrderUpdateStatus::release_current_stop_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.current_stop_price_;
  _impl_.current_stop_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdateStatus::unsafe_arena_release_current_stop_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.current_stop_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.current_stop_price_;
  _impl_.current_stop_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdateStatus::_internal_mutable_current_stop_price() {
  
  if (_impl_.current_stop_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.current_stop_price_ = p;
  }
  return _impl_.current_stop_price_;
}
inline ::t4proto::v1::common::Price* OrderUpdateStatus::mutable_current_stop_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_current_stop_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.current_stop_price)
  return _msg;
}
inline void OrderUpdateStatus::set_allocated_current_stop_price(::t4proto::v1::common::Price* current_stop_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_stop_price_);
  }
  if (current_stop_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_stop_price));
    if (message_arena != submessage_arena) {
      current_stop_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_stop_price, submessage_arena);
    }

  } else {

  }
  _impl_.current_stop_price_ = current_stop_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.current_stop_price)
}

// .t4proto.v1.common.PriceType price_type = 14;
inline void OrderUpdateStatus::clear_price_type() {
  _impl_.price_type_ = 0;
}
inline ::t4proto::v1::common::PriceType OrderUpdateStatus::price_type() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.price_type)
  return _internal_price_type();
}
inline void OrderUpdateStatus::set_price_type(::t4proto::v1::common::PriceType value) {
   _internal_set_price_type(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.price_type)
}
inline ::t4proto::v1::common::PriceType OrderUpdateStatus::_internal_price_type() const {
  return static_cast<::t4proto::v1::common::PriceType>(_impl_.price_type_);
}
inline void OrderUpdateStatus::_internal_set_price_type(::t4proto::v1::common::PriceType value) {
  ;
  _impl_.price_type_ = value;
}

// .t4proto.v1.common.TimeType time_type = 15;
inline void OrderUpdateStatus::clear_time_type() {
  _impl_.time_type_ = 0;
}
inline ::t4proto::v1::common::TimeType OrderUpdateStatus::time_type() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.time_type)
  return _internal_time_type();
}
inline void OrderUpdateStatus::set_time_type(::t4proto::v1::common::TimeType value) {
   _internal_set_time_type(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.time_type)
}
inline ::t4proto::v1::common::TimeType OrderUpdateStatus::_internal_time_type() const {
  return static_cast<::t4proto::v1::common::TimeType>(_impl_.time_type_);
}
inline void OrderUpdateStatus::_internal_set_time_type(::t4proto::v1::common::TimeType value) {
  ;
  _impl_.time_type_ = value;
}

// int32 working_volume = 16;
inline void OrderUpdateStatus::clear_working_volume() {
  _impl_.working_volume_ = 0;
}
inline ::int32_t OrderUpdateStatus::working_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.working_volume)
  return _internal_working_volume();
}
inline void OrderUpdateStatus::set_working_volume(::int32_t value) {
  _internal_set_working_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.working_volume)
}
inline ::int32_t OrderUpdateStatus::_internal_working_volume() const {
  return _impl_.working_volume_;
}
inline void OrderUpdateStatus::_internal_set_working_volume(::int32_t value) {
  ;
  _impl_.working_volume_ = value;
}

// string executing_login_id = 17;
inline void OrderUpdateStatus::clear_executing_login_id() {
  _impl_.executing_login_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::executing_login_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.executing_login_id)
  return _internal_executing_login_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_executing_login_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.executing_login_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.executing_login_id)
}
inline std::string* OrderUpdateStatus::mutable_executing_login_id() {
  std::string* _s = _internal_mutable_executing_login_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.executing_login_id)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_executing_login_id() const {
  return _impl_.executing_login_id_.Get();
}
inline void OrderUpdateStatus::_internal_set_executing_login_id(const std::string& value) {
  ;


  _impl_.executing_login_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_executing_login_id() {
  ;
  return _impl_.executing_login_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_executing_login_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.executing_login_id)
  return _impl_.executing_login_id_.Release();
}
inline void OrderUpdateStatus::set_allocated_executing_login_id(std::string* value) {
  _impl_.executing_login_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.executing_login_id_.IsDefault()) {
          _impl_.executing_login_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.executing_login_id)
}

// .t4proto.v1.common.ActivationType activation_type = 18;
inline void OrderUpdateStatus::clear_activation_type() {
  _impl_.activation_type_ = 0;
}
inline ::t4proto::v1::common::ActivationType OrderUpdateStatus::activation_type() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.activation_type)
  return _internal_activation_type();
}
inline void OrderUpdateStatus::set_activation_type(::t4proto::v1::common::ActivationType value) {
   _internal_set_activation_type(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.activation_type)
}
inline ::t4proto::v1::common::ActivationType OrderUpdateStatus::_internal_activation_type() const {
  return static_cast<::t4proto::v1::common::ActivationType>(_impl_.activation_type_);
}
inline void OrderUpdateStatus::_internal_set_activation_type(::t4proto::v1::common::ActivationType value) {
  ;
  _impl_.activation_type_ = value;
}

// .t4proto.v1.common.Price trail_price = 19;
inline bool OrderUpdateStatus::_internal_has_trail_price() const {
  return this != internal_default_instance() && _impl_.trail_price_ != nullptr;
}
inline bool OrderUpdateStatus::has_trail_price() const {
  return _internal_has_trail_price();
}
inline const ::t4proto::v1::common::Price& OrderUpdateStatus::_internal_trail_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.trail_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& OrderUpdateStatus::trail_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.trail_price)
  return _internal_trail_price();
}
inline void OrderUpdateStatus::unsafe_arena_set_allocated_trail_price(
    ::t4proto::v1::common::Price* trail_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trail_price_);
  }
  _impl_.trail_price_ = trail_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.trail_price)
}
inline ::t4proto::v1::common::Price* OrderUpdateStatus::release_trail_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.trail_price_;
  _impl_.trail_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdateStatus::unsafe_arena_release_trail_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.trail_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.trail_price_;
  _impl_.trail_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdateStatus::_internal_mutable_trail_price() {
  
  if (_impl_.trail_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.trail_price_ = p;
  }
  return _impl_.trail_price_;
}
inline ::t4proto::v1::common::Price* OrderUpdateStatus::mutable_trail_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_trail_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.trail_price)
  return _msg;
}
inline void OrderUpdateStatus::set_allocated_trail_price(::t4proto::v1::common::Price* trail_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trail_price_);
  }
  if (trail_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trail_price));
    if (message_arena != submessage_arena) {
      trail_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trail_price, submessage_arena);
    }

  } else {

  }
  _impl_.trail_price_ = trail_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.trail_price)
}

// int32 current_max_show = 20;
inline void OrderUpdateStatus::clear_current_max_show() {
  _impl_.current_max_show_ = 0;
}
inline ::int32_t OrderUpdateStatus::current_max_show() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.current_max_show)
  return _internal_current_max_show();
}
inline void OrderUpdateStatus::set_current_max_show(::int32_t value) {
  _internal_set_current_max_show(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.current_max_show)
}
inline ::int32_t OrderUpdateStatus::_internal_current_max_show() const {
  return _impl_.current_max_show_;
}
inline void OrderUpdateStatus::_internal_set_current_max_show(::int32_t value) {
  ;
  _impl_.current_max_show_ = value;
}

// string user_id = 21;
inline void OrderUpdateStatus::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::user_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.user_id)
}
inline std::string* OrderUpdateStatus::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.user_id)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void OrderUpdateStatus::_internal_set_user_id(const std::string& value) {
  ;


  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_user_id() {
  ;
  return _impl_.user_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_user_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.user_id)
  return _impl_.user_id_.Release();
}
inline void OrderUpdateStatus::set_allocated_user_id(std::string* value) {
  _impl_.user_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_id_.IsDefault()) {
          _impl_.user_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.user_id)
}

// string user_name = 22;
inline void OrderUpdateStatus::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::user_name() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.user_name)
  return _internal_user_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_user_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.user_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.user_name)
}
inline std::string* OrderUpdateStatus::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.user_name)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void OrderUpdateStatus::_internal_set_user_name(const std::string& value) {
  ;


  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_user_name() {
  ;
  return _impl_.user_name_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_user_name() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.user_name)
  return _impl_.user_name_.Release();
}
inline void OrderUpdateStatus::set_allocated_user_name(std::string* value) {
  _impl_.user_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_name_.IsDefault()) {
          _impl_.user_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.user_name)
}

// string user_address = 23;
inline void OrderUpdateStatus::clear_user_address() {
  _impl_.user_address_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::user_address() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.user_address)
  return _internal_user_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_user_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.user_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.user_address)
}
inline std::string* OrderUpdateStatus::mutable_user_address() {
  std::string* _s = _internal_mutable_user_address();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.user_address)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_user_address() const {
  return _impl_.user_address_.Get();
}
inline void OrderUpdateStatus::_internal_set_user_address(const std::string& value) {
  ;


  _impl_.user_address_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_user_address() {
  ;
  return _impl_.user_address_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_user_address() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.user_address)
  return _impl_.user_address_.Release();
}
inline void OrderUpdateStatus::set_allocated_user_address(std::string* value) {
  _impl_.user_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_address_.IsDefault()) {
          _impl_.user_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.user_address)
}

// string session_id = 24;
inline void OrderUpdateStatus::clear_session_id() {
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::session_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.session_id)
}
inline std::string* OrderUpdateStatus::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.session_id)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_session_id() const {
  return _impl_.session_id_.Get();
}
inline void OrderUpdateStatus::_internal_set_session_id(const std::string& value) {
  ;


  _impl_.session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_session_id() {
  ;
  return _impl_.session_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_session_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.session_id)
  return _impl_.session_id_.Release();
}
inline void OrderUpdateStatus::set_allocated_session_id(std::string* value) {
  _impl_.session_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.session_id_.IsDefault()) {
          _impl_.session_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.session_id)
}

// string app_id = 25;
inline void OrderUpdateStatus::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::app_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.app_id)
}
inline std::string* OrderUpdateStatus::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.app_id)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_app_id() const {
  return _impl_.app_id_.Get();
}
inline void OrderUpdateStatus::_internal_set_app_id(const std::string& value) {
  ;


  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_app_id() {
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_app_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.app_id)
  return _impl_.app_id_.Release();
}
inline void OrderUpdateStatus::set_allocated_app_id(std::string* value) {
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.app_id)
}

// string app_name = 26;
inline void OrderUpdateStatus::clear_app_name() {
  _impl_.app_name_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::app_name() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.app_name)
  return _internal_app_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_app_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.app_name)
}
inline std::string* OrderUpdateStatus::mutable_app_name() {
  std::string* _s = _internal_mutable_app_name();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.app_name)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_app_name() const {
  return _impl_.app_name_.Get();
}
inline void OrderUpdateStatus::_internal_set_app_name(const std::string& value) {
  ;


  _impl_.app_name_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_app_name() {
  ;
  return _impl_.app_name_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_app_name() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.app_name)
  return _impl_.app_name_.Release();
}
inline void OrderUpdateStatus::set_allocated_app_name(std::string* value) {
  _impl_.app_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_name_.IsDefault()) {
          _impl_.app_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.app_name)
}

// string routing_user_id = 27;
inline void OrderUpdateStatus::clear_routing_user_id() {
  _impl_.routing_user_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::routing_user_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.routing_user_id)
  return _internal_routing_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_routing_user_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.routing_user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.routing_user_id)
}
inline std::string* OrderUpdateStatus::mutable_routing_user_id() {
  std::string* _s = _internal_mutable_routing_user_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.routing_user_id)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_routing_user_id() const {
  return _impl_.routing_user_id_.Get();
}
inline void OrderUpdateStatus::_internal_set_routing_user_id(const std::string& value) {
  ;


  _impl_.routing_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_routing_user_id() {
  ;
  return _impl_.routing_user_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_routing_user_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.routing_user_id)
  return _impl_.routing_user_id_.Release();
}
inline void OrderUpdateStatus::set_allocated_routing_user_id(std::string* value) {
  _impl_.routing_user_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.routing_user_id_.IsDefault()) {
          _impl_.routing_user_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.routing_user_id)
}

// string routing_user_name = 28;
inline void OrderUpdateStatus::clear_routing_user_name() {
  _impl_.routing_user_name_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::routing_user_name() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.routing_user_name)
  return _internal_routing_user_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_routing_user_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.routing_user_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.routing_user_name)
}
inline std::string* OrderUpdateStatus::mutable_routing_user_name() {
  std::string* _s = _internal_mutable_routing_user_name();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.routing_user_name)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_routing_user_name() const {
  return _impl_.routing_user_name_.Get();
}
inline void OrderUpdateStatus::_internal_set_routing_user_name(const std::string& value) {
  ;


  _impl_.routing_user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_routing_user_name() {
  ;
  return _impl_.routing_user_name_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_routing_user_name() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.routing_user_name)
  return _impl_.routing_user_name_.Release();
}
inline void OrderUpdateStatus::set_allocated_routing_user_name(std::string* value) {
  _impl_.routing_user_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.routing_user_name_.IsDefault()) {
          _impl_.routing_user_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.routing_user_name)
}

// int32 new_volume = 29;
inline void OrderUpdateStatus::clear_new_volume() {
  _impl_.new_volume_ = 0;
}
inline ::int32_t OrderUpdateStatus::new_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.new_volume)
  return _internal_new_volume();
}
inline void OrderUpdateStatus::set_new_volume(::int32_t value) {
  _internal_set_new_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.new_volume)
}
inline ::int32_t OrderUpdateStatus::_internal_new_volume() const {
  return _impl_.new_volume_;
}
inline void OrderUpdateStatus::_internal_set_new_volume(::int32_t value) {
  ;
  _impl_.new_volume_ = value;
}

// .t4proto.v1.common.Price new_limit_price = 30;
inline bool OrderUpdateStatus::_internal_has_new_limit_price() const {
  return this != internal_default_instance() && _impl_.new_limit_price_ != nullptr;
}
inline bool OrderUpdateStatus::has_new_limit_price() const {
  return _internal_has_new_limit_price();
}
inline const ::t4proto::v1::common::Price& OrderUpdateStatus::_internal_new_limit_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.new_limit_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& OrderUpdateStatus::new_limit_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.new_limit_price)
  return _internal_new_limit_price();
}
inline void OrderUpdateStatus::unsafe_arena_set_allocated_new_limit_price(
    ::t4proto::v1::common::Price* new_limit_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_limit_price_);
  }
  _impl_.new_limit_price_ = new_limit_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.new_limit_price)
}
inline ::t4proto::v1::common::Price* OrderUpdateStatus::release_new_limit_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.new_limit_price_;
  _impl_.new_limit_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdateStatus::unsafe_arena_release_new_limit_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.new_limit_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.new_limit_price_;
  _impl_.new_limit_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdateStatus::_internal_mutable_new_limit_price() {
  
  if (_impl_.new_limit_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.new_limit_price_ = p;
  }
  return _impl_.new_limit_price_;
}
inline ::t4proto::v1::common::Price* OrderUpdateStatus::mutable_new_limit_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_new_limit_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.new_limit_price)
  return _msg;
}
inline void OrderUpdateStatus::set_allocated_new_limit_price(::t4proto::v1::common::Price* new_limit_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_limit_price_);
  }
  if (new_limit_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_limit_price));
    if (message_arena != submessage_arena) {
      new_limit_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_limit_price, submessage_arena);
    }

  } else {

  }
  _impl_.new_limit_price_ = new_limit_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.new_limit_price)
}

// .t4proto.v1.common.Price new_stop_price = 31;
inline bool OrderUpdateStatus::_internal_has_new_stop_price() const {
  return this != internal_default_instance() && _impl_.new_stop_price_ != nullptr;
}
inline bool OrderUpdateStatus::has_new_stop_price() const {
  return _internal_has_new_stop_price();
}
inline const ::t4proto::v1::common::Price& OrderUpdateStatus::_internal_new_stop_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.new_stop_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& OrderUpdateStatus::new_stop_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.new_stop_price)
  return _internal_new_stop_price();
}
inline void OrderUpdateStatus::unsafe_arena_set_allocated_new_stop_price(
    ::t4proto::v1::common::Price* new_stop_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_stop_price_);
  }
  _impl_.new_stop_price_ = new_stop_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.new_stop_price)
}
inline ::t4proto::v1::common::Price* OrderUpdateStatus::release_new_stop_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.new_stop_price_;
  _impl_.new_stop_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdateStatus::unsafe_arena_release_new_stop_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.new_stop_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.new_stop_price_;
  _impl_.new_stop_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdateStatus::_internal_mutable_new_stop_price() {
  
  if (_impl_.new_stop_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.new_stop_price_ = p;
  }
  return _impl_.new_stop_price_;
}
inline ::t4proto::v1::common::Price* OrderUpdateStatus::mutable_new_stop_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_new_stop_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.new_stop_price)
  return _msg;
}
inline void OrderUpdateStatus::set_allocated_new_stop_price(::t4proto::v1::common::Price* new_stop_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_stop_price_);
  }
  if (new_stop_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_stop_price));
    if (message_arena != submessage_arena) {
      new_stop_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_stop_price, submessage_arena);
    }

  } else {

  }
  _impl_.new_stop_price_ = new_stop_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.new_stop_price)
}

// int32 new_max_show = 32;
inline void OrderUpdateStatus::clear_new_max_show() {
  _impl_.new_max_show_ = 0;
}
inline ::int32_t OrderUpdateStatus::new_max_show() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.new_max_show)
  return _internal_new_max_show();
}
inline void OrderUpdateStatus::set_new_max_show(::int32_t value) {
  _internal_set_new_max_show(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.new_max_show)
}
inline ::int32_t OrderUpdateStatus::_internal_new_max_show() const {
  return _impl_.new_max_show_;
}
inline void OrderUpdateStatus::_internal_set_new_max_show(::int32_t value) {
  ;
  _impl_.new_max_show_ = value;
}

// string tag = 33;
inline void OrderUpdateStatus::clear_tag() {
  _impl_.tag_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::tag() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.tag)
  return _internal_tag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_tag(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.tag_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.tag)
}
inline std::string* OrderUpdateStatus::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.tag)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void OrderUpdateStatus::_internal_set_tag(const std::string& value) {
  ;


  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_tag() {
  ;
  return _impl_.tag_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_tag() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.tag)
  return _impl_.tag_.Release();
}
inline void OrderUpdateStatus::set_allocated_tag(std::string* value) {
  _impl_.tag_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tag_.IsDefault()) {
          _impl_.tag_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.tag)
}

// string tag_cl_ord_id = 34;
inline void OrderUpdateStatus::clear_tag_cl_ord_id() {
  _impl_.tag_cl_ord_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::tag_cl_ord_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.tag_cl_ord_id)
  return _internal_tag_cl_ord_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_tag_cl_ord_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.tag_cl_ord_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.tag_cl_ord_id)
}
inline std::string* OrderUpdateStatus::mutable_tag_cl_ord_id() {
  std::string* _s = _internal_mutable_tag_cl_ord_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.tag_cl_ord_id)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_tag_cl_ord_id() const {
  return _impl_.tag_cl_ord_id_.Get();
}
inline void OrderUpdateStatus::_internal_set_tag_cl_ord_id(const std::string& value) {
  ;


  _impl_.tag_cl_ord_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_tag_cl_ord_id() {
  ;
  return _impl_.tag_cl_ord_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_tag_cl_ord_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.tag_cl_ord_id)
  return _impl_.tag_cl_ord_id_.Release();
}
inline void OrderUpdateStatus::set_allocated_tag_cl_ord_id(std::string* value) {
  _impl_.tag_cl_ord_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tag_cl_ord_id_.IsDefault()) {
          _impl_.tag_cl_ord_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.tag_cl_ord_id)
}

// string tag_orig_cl_ord_id = 35;
inline void OrderUpdateStatus::clear_tag_orig_cl_ord_id() {
  _impl_.tag_orig_cl_ord_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::tag_orig_cl_ord_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.tag_orig_cl_ord_id)
  return _internal_tag_orig_cl_ord_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_tag_orig_cl_ord_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.tag_orig_cl_ord_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.tag_orig_cl_ord_id)
}
inline std::string* OrderUpdateStatus::mutable_tag_orig_cl_ord_id() {
  std::string* _s = _internal_mutable_tag_orig_cl_ord_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.tag_orig_cl_ord_id)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_tag_orig_cl_ord_id() const {
  return _impl_.tag_orig_cl_ord_id_.Get();
}
inline void OrderUpdateStatus::_internal_set_tag_orig_cl_ord_id(const std::string& value) {
  ;


  _impl_.tag_orig_cl_ord_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_tag_orig_cl_ord_id() {
  ;
  return _impl_.tag_orig_cl_ord_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_tag_orig_cl_ord_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.tag_orig_cl_ord_id)
  return _impl_.tag_orig_cl_ord_id_.Release();
}
inline void OrderUpdateStatus::set_allocated_tag_orig_cl_ord_id(std::string* value) {
  _impl_.tag_orig_cl_ord_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tag_orig_cl_ord_id_.IsDefault()) {
          _impl_.tag_orig_cl_ord_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.tag_orig_cl_ord_id)
}

// string smp_id = 36;
inline void OrderUpdateStatus::clear_smp_id() {
  _impl_.smp_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::smp_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.smp_id)
  return _internal_smp_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_smp_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.smp_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.smp_id)
}
inline std::string* OrderUpdateStatus::mutable_smp_id() {
  std::string* _s = _internal_mutable_smp_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.smp_id)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_smp_id() const {
  return _impl_.smp_id_.Get();
}
inline void OrderUpdateStatus::_internal_set_smp_id(const std::string& value) {
  ;


  _impl_.smp_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_smp_id() {
  ;
  return _impl_.smp_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_smp_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.smp_id)
  return _impl_.smp_id_.Release();
}
inline void OrderUpdateStatus::set_allocated_smp_id(std::string* value) {
  _impl_.smp_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.smp_id_.IsDefault()) {
          _impl_.smp_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.smp_id)
}

// string exchange_login_id = 37;
inline void OrderUpdateStatus::clear_exchange_login_id() {
  _impl_.exchange_login_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::exchange_login_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.exchange_login_id)
  return _internal_exchange_login_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_exchange_login_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.exchange_login_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.exchange_login_id)
}
inline std::string* OrderUpdateStatus::mutable_exchange_login_id() {
  std::string* _s = _internal_mutable_exchange_login_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.exchange_login_id)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_exchange_login_id() const {
  return _impl_.exchange_login_id_.Get();
}
inline void OrderUpdateStatus::_internal_set_exchange_login_id(const std::string& value) {
  ;


  _impl_.exchange_login_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_exchange_login_id() {
  ;
  return _impl_.exchange_login_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_exchange_login_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.exchange_login_id)
  return _impl_.exchange_login_id_.Release();
}
inline void OrderUpdateStatus::set_allocated_exchange_login_id(std::string* value) {
  _impl_.exchange_login_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_login_id_.IsDefault()) {
          _impl_.exchange_login_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.exchange_login_id)
}

// string exchange_location = 38;
inline void OrderUpdateStatus::clear_exchange_location() {
  _impl_.exchange_location_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::exchange_location() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.exchange_location)
  return _internal_exchange_location();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_exchange_location(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.exchange_location_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.exchange_location)
}
inline std::string* OrderUpdateStatus::mutable_exchange_location() {
  std::string* _s = _internal_mutable_exchange_location();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.exchange_location)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_exchange_location() const {
  return _impl_.exchange_location_.Get();
}
inline void OrderUpdateStatus::_internal_set_exchange_location(const std::string& value) {
  ;


  _impl_.exchange_location_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_exchange_location() {
  ;
  return _impl_.exchange_location_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_exchange_location() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.exchange_location)
  return _impl_.exchange_location_.Release();
}
inline void OrderUpdateStatus::set_allocated_exchange_location(std::string* value) {
  _impl_.exchange_location_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_location_.IsDefault()) {
          _impl_.exchange_location_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.exchange_location)
}

// string ats_regulatory_id = 39;
inline void OrderUpdateStatus::clear_ats_regulatory_id() {
  _impl_.ats_regulatory_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::ats_regulatory_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.ats_regulatory_id)
  return _internal_ats_regulatory_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_ats_regulatory_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.ats_regulatory_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.ats_regulatory_id)
}
inline std::string* OrderUpdateStatus::mutable_ats_regulatory_id() {
  std::string* _s = _internal_mutable_ats_regulatory_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.ats_regulatory_id)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_ats_regulatory_id() const {
  return _impl_.ats_regulatory_id_.Get();
}
inline void OrderUpdateStatus::_internal_set_ats_regulatory_id(const std::string& value) {
  ;


  _impl_.ats_regulatory_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_ats_regulatory_id() {
  ;
  return _impl_.ats_regulatory_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_ats_regulatory_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.ats_regulatory_id)
  return _impl_.ats_regulatory_id_.Release();
}
inline void OrderUpdateStatus::set_allocated_ats_regulatory_id(std::string* value) {
  _impl_.ats_regulatory_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ats_regulatory_id_.IsDefault()) {
          _impl_.ats_regulatory_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.ats_regulatory_id)
}

// int32 max_volume = 40;
inline void OrderUpdateStatus::clear_max_volume() {
  _impl_.max_volume_ = 0;
}
inline ::int32_t OrderUpdateStatus::max_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.max_volume)
  return _internal_max_volume();
}
inline void OrderUpdateStatus::set_max_volume(::int32_t value) {
  _internal_set_max_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.max_volume)
}
inline ::int32_t OrderUpdateStatus::_internal_max_volume() const {
  return _impl_.max_volume_;
}
inline void OrderUpdateStatus::_internal_set_max_volume(::int32_t value) {
  ;
  _impl_.max_volume_ = value;
}

// int32 sequence_order = 41;
inline void OrderUpdateStatus::clear_sequence_order() {
  _impl_.sequence_order_ = 0;
}
inline ::int32_t OrderUpdateStatus::sequence_order() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.sequence_order)
  return _internal_sequence_order();
}
inline void OrderUpdateStatus::set_sequence_order(::int32_t value) {
  _internal_set_sequence_order(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.sequence_order)
}
inline ::int32_t OrderUpdateStatus::_internal_sequence_order() const {
  return _impl_.sequence_order_;
}
inline void OrderUpdateStatus::_internal_set_sequence_order(::int32_t value) {
  ;
  _impl_.sequence_order_ = value;
}

// string authorized_trader_id = 42;
inline void OrderUpdateStatus::clear_authorized_trader_id() {
  _impl_.authorized_trader_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::authorized_trader_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.authorized_trader_id)
  return _internal_authorized_trader_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_authorized_trader_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.authorized_trader_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.authorized_trader_id)
}
inline std::string* OrderUpdateStatus::mutable_authorized_trader_id() {
  std::string* _s = _internal_mutable_authorized_trader_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.authorized_trader_id)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_authorized_trader_id() const {
  return _impl_.authorized_trader_id_.Get();
}
inline void OrderUpdateStatus::_internal_set_authorized_trader_id(const std::string& value) {
  ;


  _impl_.authorized_trader_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_authorized_trader_id() {
  ;
  return _impl_.authorized_trader_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_authorized_trader_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.authorized_trader_id)
  return _impl_.authorized_trader_id_.Release();
}
inline void OrderUpdateStatus::set_allocated_authorized_trader_id(std::string* value) {
  _impl_.authorized_trader_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authorized_trader_id_.IsDefault()) {
          _impl_.authorized_trader_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.authorized_trader_id)
}

// map<string, string> instruction_extra = 43;
inline int OrderUpdateStatus::_internal_instruction_extra_size() const {
  return _impl_.instruction_extra_.size();
}
inline int OrderUpdateStatus::instruction_extra_size() const {
  return _internal_instruction_extra_size();
}
inline void OrderUpdateStatus::clear_instruction_extra() {
  _impl_.instruction_extra_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
OrderUpdateStatus::_internal_instruction_extra() const {
  return _impl_.instruction_extra_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
OrderUpdateStatus::instruction_extra() const {
  // @@protoc_insertion_point(field_map:t4proto.v1.orderrouting.OrderUpdateStatus.instruction_extra)
  return _internal_instruction_extra();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
OrderUpdateStatus::_internal_mutable_instruction_extra() {
  return _impl_.instruction_extra_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
OrderUpdateStatus::mutable_instruction_extra() {
  // @@protoc_insertion_point(field_mutable_map:t4proto.v1.orderrouting.OrderUpdateStatus.instruction_extra)
  return _internal_mutable_instruction_extra();
}

// .t4proto.v1.common.ApplicationType app_type = 44;
inline void OrderUpdateStatus::clear_app_type() {
  _impl_.app_type_ = 0;
}
inline ::t4proto::v1::common::ApplicationType OrderUpdateStatus::app_type() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.app_type)
  return _internal_app_type();
}
inline void OrderUpdateStatus::set_app_type(::t4proto::v1::common::ApplicationType value) {
   _internal_set_app_type(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.app_type)
}
inline ::t4proto::v1::common::ApplicationType OrderUpdateStatus::_internal_app_type() const {
  return static_cast<::t4proto::v1::common::ApplicationType>(_impl_.app_type_);
}
inline void OrderUpdateStatus::_internal_set_app_type(::t4proto::v1::common::ApplicationType value) {
  ;
  _impl_.app_type_ = value;
}

// string activation_details = 45;
inline void OrderUpdateStatus::clear_activation_details() {
  _impl_.activation_details_.ClearToEmpty();
}
inline const std::string& OrderUpdateStatus::activation_details() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateStatus.activation_details)
  return _internal_activation_details();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateStatus::set_activation_details(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.activation_details_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateStatus.activation_details)
}
inline std::string* OrderUpdateStatus::mutable_activation_details() {
  std::string* _s = _internal_mutable_activation_details();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateStatus.activation_details)
  return _s;
}
inline const std::string& OrderUpdateStatus::_internal_activation_details() const {
  return _impl_.activation_details_.Get();
}
inline void OrderUpdateStatus::_internal_set_activation_details(const std::string& value) {
  ;


  _impl_.activation_details_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::_internal_mutable_activation_details() {
  ;
  return _impl_.activation_details_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateStatus::release_activation_details() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateStatus.activation_details)
  return _impl_.activation_details_.Release();
}
inline void OrderUpdateStatus::set_allocated_activation_details(std::string* value) {
  _impl_.activation_details_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.activation_details_.IsDefault()) {
          _impl_.activation_details_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateStatus.activation_details)
}

// -------------------------------------------------------------------

// OrderUpdateTrade

// string unique_id = 1;
inline void OrderUpdateTrade::clear_unique_id() {
  _impl_.unique_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateTrade::unique_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTrade.unique_id)
  return _internal_unique_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateTrade::set_unique_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.unique_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTrade.unique_id)
}
inline std::string* OrderUpdateTrade::mutable_unique_id() {
  std::string* _s = _internal_mutable_unique_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateTrade.unique_id)
  return _s;
}
inline const std::string& OrderUpdateTrade::_internal_unique_id() const {
  return _impl_.unique_id_.Get();
}
inline void OrderUpdateTrade::_internal_set_unique_id(const std::string& value) {
  ;


  _impl_.unique_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateTrade::_internal_mutable_unique_id() {
  ;
  return _impl_.unique_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateTrade::release_unique_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateTrade.unique_id)
  return _impl_.unique_id_.Release();
}
inline void OrderUpdateTrade::set_allocated_unique_id(std::string* value) {
  _impl_.unique_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.unique_id_.IsDefault()) {
          _impl_.unique_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateTrade.unique_id)
}

// string account_id = 2;
inline void OrderUpdateTrade::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateTrade::account_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTrade.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateTrade::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTrade.account_id)
}
inline std::string* OrderUpdateTrade::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateTrade.account_id)
  return _s;
}
inline const std::string& OrderUpdateTrade::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void OrderUpdateTrade::_internal_set_account_id(const std::string& value) {
  ;


  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateTrade::_internal_mutable_account_id() {
  ;
  return _impl_.account_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateTrade::release_account_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateTrade.account_id)
  return _impl_.account_id_.Release();
}
inline void OrderUpdateTrade::set_allocated_account_id(std::string* value) {
  _impl_.account_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateTrade.account_id)
}

// string market_id = 3;
inline void OrderUpdateTrade::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateTrade::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTrade.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateTrade::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTrade.market_id)
}
inline std::string* OrderUpdateTrade::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateTrade.market_id)
  return _s;
}
inline const std::string& OrderUpdateTrade::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void OrderUpdateTrade::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateTrade::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateTrade::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateTrade.market_id)
  return _impl_.market_id_.Release();
}
inline void OrderUpdateTrade::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateTrade.market_id)
}

// .google.protobuf.Timestamp time = 4;
inline bool OrderUpdateTrade::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool OrderUpdateTrade::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdateTrade::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdateTrade::time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTrade.time)
  return _internal_time();
}
inline void OrderUpdateTrade::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdateTrade.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateTrade::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateTrade::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateTrade.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateTrade::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateTrade::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateTrade.time)
  return _msg;
}
inline void OrderUpdateTrade::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }

  } else {

  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateTrade.time)
}

// .google.protobuf.Timestamp exchange_time = 5;
inline bool OrderUpdateTrade::_internal_has_exchange_time() const {
  return this != internal_default_instance() && _impl_.exchange_time_ != nullptr;
}
inline bool OrderUpdateTrade::has_exchange_time() const {
  return _internal_has_exchange_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdateTrade::_internal_exchange_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.exchange_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdateTrade::exchange_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTrade.exchange_time)
  return _internal_exchange_time();
}
inline void OrderUpdateTrade::unsafe_arena_set_allocated_exchange_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchange_time_);
  }
  _impl_.exchange_time_ = exchange_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdateTrade.exchange_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateTrade::release_exchange_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.exchange_time_;
  _impl_.exchange_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateTrade::unsafe_arena_release_exchange_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateTrade.exchange_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.exchange_time_;
  _impl_.exchange_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateTrade::_internal_mutable_exchange_time() {
  
  if (_impl_.exchange_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.exchange_time_ = p;
  }
  return _impl_.exchange_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateTrade::mutable_exchange_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_exchange_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateTrade.exchange_time)
  return _msg;
}
inline void OrderUpdateTrade::set_allocated_exchange_time(::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchange_time_);
  }
  if (exchange_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exchange_time));
    if (message_arena != submessage_arena) {
      exchange_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exchange_time, submessage_arena);
    }

  } else {

  }
  _impl_.exchange_time_ = exchange_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateTrade.exchange_time)
}

// .t4proto.v1.common.OrderChange change = 6;
inline void OrderUpdateTrade::clear_change() {
  _impl_.change_ = 0;
}
inline ::t4proto::v1::common::OrderChange OrderUpdateTrade::change() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTrade.change)
  return _internal_change();
}
inline void OrderUpdateTrade::set_change(::t4proto::v1::common::OrderChange value) {
   _internal_set_change(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTrade.change)
}
inline ::t4proto::v1::common::OrderChange OrderUpdateTrade::_internal_change() const {
  return static_cast<::t4proto::v1::common::OrderChange>(_impl_.change_);
}
inline void OrderUpdateTrade::_internal_set_change(::t4proto::v1::common::OrderChange value) {
  ;
  _impl_.change_ = value;
}

// .t4proto.v1.common.OrderStatus status = 7;
inline void OrderUpdateTrade::clear_status() {
  _impl_.status_ = 0;
}
inline ::t4proto::v1::common::OrderStatus OrderUpdateTrade::status() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTrade.status)
  return _internal_status();
}
inline void OrderUpdateTrade::set_status(::t4proto::v1::common::OrderStatus value) {
   _internal_set_status(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTrade.status)
}
inline ::t4proto::v1::common::OrderStatus OrderUpdateTrade::_internal_status() const {
  return static_cast<::t4proto::v1::common::OrderStatus>(_impl_.status_);
}
inline void OrderUpdateTrade::_internal_set_status(::t4proto::v1::common::OrderStatus value) {
  ;
  _impl_.status_ = value;
}

// string status_detail = 8;
inline void OrderUpdateTrade::clear_status_detail() {
  _impl_.status_detail_.ClearToEmpty();
}
inline const std::string& OrderUpdateTrade::status_detail() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTrade.status_detail)
  return _internal_status_detail();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateTrade::set_status_detail(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.status_detail_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTrade.status_detail)
}
inline std::string* OrderUpdateTrade::mutable_status_detail() {
  std::string* _s = _internal_mutable_status_detail();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateTrade.status_detail)
  return _s;
}
inline const std::string& OrderUpdateTrade::_internal_status_detail() const {
  return _impl_.status_detail_.Get();
}
inline void OrderUpdateTrade::_internal_set_status_detail(const std::string& value) {
  ;


  _impl_.status_detail_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateTrade::_internal_mutable_status_detail() {
  ;
  return _impl_.status_detail_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateTrade::release_status_detail() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateTrade.status_detail)
  return _impl_.status_detail_.Release();
}
inline void OrderUpdateTrade::set_allocated_status_detail(std::string* value) {
  _impl_.status_detail_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_detail_.IsDefault()) {
          _impl_.status_detail_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateTrade.status_detail)
}

// .t4proto.v1.common.ResponsePending response_pending = 9;
inline void OrderUpdateTrade::clear_response_pending() {
  _impl_.response_pending_ = 0;
}
inline ::t4proto::v1::common::ResponsePending OrderUpdateTrade::response_pending() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTrade.response_pending)
  return _internal_response_pending();
}
inline void OrderUpdateTrade::set_response_pending(::t4proto::v1::common::ResponsePending value) {
   _internal_set_response_pending(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTrade.response_pending)
}
inline ::t4proto::v1::common::ResponsePending OrderUpdateTrade::_internal_response_pending() const {
  return static_cast<::t4proto::v1::common::ResponsePending>(_impl_.response_pending_);
}
inline void OrderUpdateTrade::_internal_set_response_pending(::t4proto::v1::common::ResponsePending value) {
  ;
  _impl_.response_pending_ = value;
}

// int32 total_fill_volume = 10;
inline void OrderUpdateTrade::clear_total_fill_volume() {
  _impl_.total_fill_volume_ = 0;
}
inline ::int32_t OrderUpdateTrade::total_fill_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTrade.total_fill_volume)
  return _internal_total_fill_volume();
}
inline void OrderUpdateTrade::set_total_fill_volume(::int32_t value) {
  _internal_set_total_fill_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTrade.total_fill_volume)
}
inline ::int32_t OrderUpdateTrade::_internal_total_fill_volume() const {
  return _impl_.total_fill_volume_;
}
inline void OrderUpdateTrade::_internal_set_total_fill_volume(::int32_t value) {
  ;
  _impl_.total_fill_volume_ = value;
}

// int32 working_volume = 11;
inline void OrderUpdateTrade::clear_working_volume() {
  _impl_.working_volume_ = 0;
}
inline ::int32_t OrderUpdateTrade::working_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTrade.working_volume)
  return _internal_working_volume();
}
inline void OrderUpdateTrade::set_working_volume(::int32_t value) {
  _internal_set_working_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTrade.working_volume)
}
inline ::int32_t OrderUpdateTrade::_internal_working_volume() const {
  return _impl_.working_volume_;
}
inline void OrderUpdateTrade::_internal_set_working_volume(::int32_t value) {
  ;
  _impl_.working_volume_ = value;
}

// int32 volume = 12;
inline void OrderUpdateTrade::clear_volume() {
  _impl_.volume_ = 0;
}
inline ::int32_t OrderUpdateTrade::volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTrade.volume)
  return _internal_volume();
}
inline void OrderUpdateTrade::set_volume(::int32_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTrade.volume)
}
inline ::int32_t OrderUpdateTrade::_internal_volume() const {
  return _impl_.volume_;
}
inline void OrderUpdateTrade::_internal_set_volume(::int32_t value) {
  ;
  _impl_.volume_ = value;
}

// .t4proto.v1.common.Price price = 13;
inline bool OrderUpdateTrade::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool OrderUpdateTrade::has_price() const {
  return _internal_has_price();
}
inline const ::t4proto::v1::common::Price& OrderUpdateTrade::_internal_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& OrderUpdateTrade::price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTrade.price)
  return _internal_price();
}
inline void OrderUpdateTrade::unsafe_arena_set_allocated_price(
    ::t4proto::v1::common::Price* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdateTrade.price)
}
inline ::t4proto::v1::common::Price* OrderUpdateTrade::release_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdateTrade::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateTrade.price)
  
  ::t4proto::v1::common::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdateTrade::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::t4proto::v1::common::Price* OrderUpdateTrade::mutable_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateTrade.price)
  return _msg;
}
inline void OrderUpdateTrade::set_allocated_price(::t4proto::v1::common::Price* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }

  } else {

  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateTrade.price)
}

// int32 residual_volume = 14;
inline void OrderUpdateTrade::clear_residual_volume() {
  _impl_.residual_volume_ = 0;
}
inline ::int32_t OrderUpdateTrade::residual_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTrade.residual_volume)
  return _internal_residual_volume();
}
inline void OrderUpdateTrade::set_residual_volume(::int32_t value) {
  _internal_set_residual_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTrade.residual_volume)
}
inline ::int32_t OrderUpdateTrade::_internal_residual_volume() const {
  return _impl_.residual_volume_;
}
inline void OrderUpdateTrade::_internal_set_residual_volume(::int32_t value) {
  ;
  _impl_.residual_volume_ = value;
}

// string exchange_trade_id = 15;
inline void OrderUpdateTrade::clear_exchange_trade_id() {
  _impl_.exchange_trade_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateTrade::exchange_trade_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTrade.exchange_trade_id)
  return _internal_exchange_trade_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateTrade::set_exchange_trade_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.exchange_trade_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTrade.exchange_trade_id)
}
inline std::string* OrderUpdateTrade::mutable_exchange_trade_id() {
  std::string* _s = _internal_mutable_exchange_trade_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateTrade.exchange_trade_id)
  return _s;
}
inline const std::string& OrderUpdateTrade::_internal_exchange_trade_id() const {
  return _impl_.exchange_trade_id_.Get();
}
inline void OrderUpdateTrade::_internal_set_exchange_trade_id(const std::string& value) {
  ;


  _impl_.exchange_trade_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateTrade::_internal_mutable_exchange_trade_id() {
  ;
  return _impl_.exchange_trade_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateTrade::release_exchange_trade_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateTrade.exchange_trade_id)
  return _impl_.exchange_trade_id_.Release();
}
inline void OrderUpdateTrade::set_allocated_exchange_trade_id(std::string* value) {
  _impl_.exchange_trade_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_trade_id_.IsDefault()) {
          _impl_.exchange_trade_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateTrade.exchange_trade_id)
}

// string contra_trader = 16;
inline void OrderUpdateTrade::clear_contra_trader() {
  _impl_.contra_trader_.ClearToEmpty();
}
inline const std::string& OrderUpdateTrade::contra_trader() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTrade.contra_trader)
  return _internal_contra_trader();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateTrade::set_contra_trader(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.contra_trader_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTrade.contra_trader)
}
inline std::string* OrderUpdateTrade::mutable_contra_trader() {
  std::string* _s = _internal_mutable_contra_trader();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateTrade.contra_trader)
  return _s;
}
inline const std::string& OrderUpdateTrade::_internal_contra_trader() const {
  return _impl_.contra_trader_.Get();
}
inline void OrderUpdateTrade::_internal_set_contra_trader(const std::string& value) {
  ;


  _impl_.contra_trader_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateTrade::_internal_mutable_contra_trader() {
  ;
  return _impl_.contra_trader_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateTrade::release_contra_trader() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateTrade.contra_trader)
  return _impl_.contra_trader_.Release();
}
inline void OrderUpdateTrade::set_allocated_contra_trader(std::string* value) {
  _impl_.contra_trader_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contra_trader_.IsDefault()) {
          _impl_.contra_trader_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateTrade.contra_trader)
}

// string contra_broker = 17;
inline void OrderUpdateTrade::clear_contra_broker() {
  _impl_.contra_broker_.ClearToEmpty();
}
inline const std::string& OrderUpdateTrade::contra_broker() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTrade.contra_broker)
  return _internal_contra_broker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateTrade::set_contra_broker(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.contra_broker_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTrade.contra_broker)
}
inline std::string* OrderUpdateTrade::mutable_contra_broker() {
  std::string* _s = _internal_mutable_contra_broker();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateTrade.contra_broker)
  return _s;
}
inline const std::string& OrderUpdateTrade::_internal_contra_broker() const {
  return _impl_.contra_broker_.Get();
}
inline void OrderUpdateTrade::_internal_set_contra_broker(const std::string& value) {
  ;


  _impl_.contra_broker_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateTrade::_internal_mutable_contra_broker() {
  ;
  return _impl_.contra_broker_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateTrade::release_contra_broker() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateTrade.contra_broker)
  return _impl_.contra_broker_.Release();
}
inline void OrderUpdateTrade::set_allocated_contra_broker(std::string* value) {
  _impl_.contra_broker_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contra_broker_.IsDefault()) {
          _impl_.contra_broker_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateTrade.contra_broker)
}

// int64 trade_date = 18;
inline void OrderUpdateTrade::clear_trade_date() {
  _impl_.trade_date_ = ::int64_t{0};
}
inline ::int64_t OrderUpdateTrade::trade_date() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTrade.trade_date)
  return _internal_trade_date();
}
inline void OrderUpdateTrade::set_trade_date(::int64_t value) {
  _internal_set_trade_date(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTrade.trade_date)
}
inline ::int64_t OrderUpdateTrade::_internal_trade_date() const {
  return _impl_.trade_date_;
}
inline void OrderUpdateTrade::_internal_set_trade_date(::int64_t value) {
  ;
  _impl_.trade_date_ = value;
}

// int32 sequence_order = 19;
inline void OrderUpdateTrade::clear_sequence_order() {
  _impl_.sequence_order_ = 0;
}
inline ::int32_t OrderUpdateTrade::sequence_order() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTrade.sequence_order)
  return _internal_sequence_order();
}
inline void OrderUpdateTrade::set_sequence_order(::int32_t value) {
  _internal_set_sequence_order(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTrade.sequence_order)
}
inline ::int32_t OrderUpdateTrade::_internal_sequence_order() const {
  return _impl_.sequence_order_;
}
inline void OrderUpdateTrade::_internal_set_sequence_order(::int32_t value) {
  ;
  _impl_.sequence_order_ = value;
}

// -------------------------------------------------------------------

// OrderUpdateTradeLeg

// string unique_id = 1;
inline void OrderUpdateTradeLeg::clear_unique_id() {
  _impl_.unique_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateTradeLeg::unique_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTradeLeg.unique_id)
  return _internal_unique_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateTradeLeg::set_unique_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.unique_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTradeLeg.unique_id)
}
inline std::string* OrderUpdateTradeLeg::mutable_unique_id() {
  std::string* _s = _internal_mutable_unique_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateTradeLeg.unique_id)
  return _s;
}
inline const std::string& OrderUpdateTradeLeg::_internal_unique_id() const {
  return _impl_.unique_id_.Get();
}
inline void OrderUpdateTradeLeg::_internal_set_unique_id(const std::string& value) {
  ;


  _impl_.unique_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateTradeLeg::_internal_mutable_unique_id() {
  ;
  return _impl_.unique_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateTradeLeg::release_unique_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateTradeLeg.unique_id)
  return _impl_.unique_id_.Release();
}
inline void OrderUpdateTradeLeg::set_allocated_unique_id(std::string* value) {
  _impl_.unique_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.unique_id_.IsDefault()) {
          _impl_.unique_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateTradeLeg.unique_id)
}

// string account_id = 2;
inline void OrderUpdateTradeLeg::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateTradeLeg::account_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTradeLeg.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateTradeLeg::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTradeLeg.account_id)
}
inline std::string* OrderUpdateTradeLeg::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateTradeLeg.account_id)
  return _s;
}
inline const std::string& OrderUpdateTradeLeg::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void OrderUpdateTradeLeg::_internal_set_account_id(const std::string& value) {
  ;


  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateTradeLeg::_internal_mutable_account_id() {
  ;
  return _impl_.account_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateTradeLeg::release_account_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateTradeLeg.account_id)
  return _impl_.account_id_.Release();
}
inline void OrderUpdateTradeLeg::set_allocated_account_id(std::string* value) {
  _impl_.account_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateTradeLeg.account_id)
}

// string market_id = 3;
inline void OrderUpdateTradeLeg::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateTradeLeg::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTradeLeg.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateTradeLeg::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTradeLeg.market_id)
}
inline std::string* OrderUpdateTradeLeg::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateTradeLeg.market_id)
  return _s;
}
inline const std::string& OrderUpdateTradeLeg::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void OrderUpdateTradeLeg::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateTradeLeg::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateTradeLeg::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateTradeLeg.market_id)
  return _impl_.market_id_.Release();
}
inline void OrderUpdateTradeLeg::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateTradeLeg.market_id)
}

// .google.protobuf.Timestamp time = 4;
inline bool OrderUpdateTradeLeg::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool OrderUpdateTradeLeg::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdateTradeLeg::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdateTradeLeg::time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTradeLeg.time)
  return _internal_time();
}
inline void OrderUpdateTradeLeg::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdateTradeLeg.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateTradeLeg::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateTradeLeg::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateTradeLeg.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateTradeLeg::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateTradeLeg::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateTradeLeg.time)
  return _msg;
}
inline void OrderUpdateTradeLeg::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }

  } else {

  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateTradeLeg.time)
}

// .google.protobuf.Timestamp exchange_time = 5;
inline bool OrderUpdateTradeLeg::_internal_has_exchange_time() const {
  return this != internal_default_instance() && _impl_.exchange_time_ != nullptr;
}
inline bool OrderUpdateTradeLeg::has_exchange_time() const {
  return _internal_has_exchange_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdateTradeLeg::_internal_exchange_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.exchange_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdateTradeLeg::exchange_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTradeLeg.exchange_time)
  return _internal_exchange_time();
}
inline void OrderUpdateTradeLeg::unsafe_arena_set_allocated_exchange_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchange_time_);
  }
  _impl_.exchange_time_ = exchange_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdateTradeLeg.exchange_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateTradeLeg::release_exchange_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.exchange_time_;
  _impl_.exchange_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateTradeLeg::unsafe_arena_release_exchange_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateTradeLeg.exchange_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.exchange_time_;
  _impl_.exchange_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateTradeLeg::_internal_mutable_exchange_time() {
  
  if (_impl_.exchange_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.exchange_time_ = p;
  }
  return _impl_.exchange_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdateTradeLeg::mutable_exchange_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_exchange_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateTradeLeg.exchange_time)
  return _msg;
}
inline void OrderUpdateTradeLeg::set_allocated_exchange_time(::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchange_time_);
  }
  if (exchange_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exchange_time));
    if (message_arena != submessage_arena) {
      exchange_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exchange_time, submessage_arena);
    }

  } else {

  }
  _impl_.exchange_time_ = exchange_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateTradeLeg.exchange_time)
}

// .t4proto.v1.common.OrderChange change = 6;
inline void OrderUpdateTradeLeg::clear_change() {
  _impl_.change_ = 0;
}
inline ::t4proto::v1::common::OrderChange OrderUpdateTradeLeg::change() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTradeLeg.change)
  return _internal_change();
}
inline void OrderUpdateTradeLeg::set_change(::t4proto::v1::common::OrderChange value) {
   _internal_set_change(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTradeLeg.change)
}
inline ::t4proto::v1::common::OrderChange OrderUpdateTradeLeg::_internal_change() const {
  return static_cast<::t4proto::v1::common::OrderChange>(_impl_.change_);
}
inline void OrderUpdateTradeLeg::_internal_set_change(::t4proto::v1::common::OrderChange value) {
  ;
  _impl_.change_ = value;
}

// .t4proto.v1.common.OrderStatus status = 7;
inline void OrderUpdateTradeLeg::clear_status() {
  _impl_.status_ = 0;
}
inline ::t4proto::v1::common::OrderStatus OrderUpdateTradeLeg::status() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTradeLeg.status)
  return _internal_status();
}
inline void OrderUpdateTradeLeg::set_status(::t4proto::v1::common::OrderStatus value) {
   _internal_set_status(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTradeLeg.status)
}
inline ::t4proto::v1::common::OrderStatus OrderUpdateTradeLeg::_internal_status() const {
  return static_cast<::t4proto::v1::common::OrderStatus>(_impl_.status_);
}
inline void OrderUpdateTradeLeg::_internal_set_status(::t4proto::v1::common::OrderStatus value) {
  ;
  _impl_.status_ = value;
}

// string status_detail = 8;
inline void OrderUpdateTradeLeg::clear_status_detail() {
  _impl_.status_detail_.ClearToEmpty();
}
inline const std::string& OrderUpdateTradeLeg::status_detail() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTradeLeg.status_detail)
  return _internal_status_detail();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateTradeLeg::set_status_detail(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.status_detail_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTradeLeg.status_detail)
}
inline std::string* OrderUpdateTradeLeg::mutable_status_detail() {
  std::string* _s = _internal_mutable_status_detail();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateTradeLeg.status_detail)
  return _s;
}
inline const std::string& OrderUpdateTradeLeg::_internal_status_detail() const {
  return _impl_.status_detail_.Get();
}
inline void OrderUpdateTradeLeg::_internal_set_status_detail(const std::string& value) {
  ;


  _impl_.status_detail_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateTradeLeg::_internal_mutable_status_detail() {
  ;
  return _impl_.status_detail_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateTradeLeg::release_status_detail() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateTradeLeg.status_detail)
  return _impl_.status_detail_.Release();
}
inline void OrderUpdateTradeLeg::set_allocated_status_detail(std::string* value) {
  _impl_.status_detail_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_detail_.IsDefault()) {
          _impl_.status_detail_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateTradeLeg.status_detail)
}

// .t4proto.v1.common.ResponsePending response_pending = 9;
inline void OrderUpdateTradeLeg::clear_response_pending() {
  _impl_.response_pending_ = 0;
}
inline ::t4proto::v1::common::ResponsePending OrderUpdateTradeLeg::response_pending() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTradeLeg.response_pending)
  return _internal_response_pending();
}
inline void OrderUpdateTradeLeg::set_response_pending(::t4proto::v1::common::ResponsePending value) {
   _internal_set_response_pending(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTradeLeg.response_pending)
}
inline ::t4proto::v1::common::ResponsePending OrderUpdateTradeLeg::_internal_response_pending() const {
  return static_cast<::t4proto::v1::common::ResponsePending>(_impl_.response_pending_);
}
inline void OrderUpdateTradeLeg::_internal_set_response_pending(::t4proto::v1::common::ResponsePending value) {
  ;
  _impl_.response_pending_ = value;
}

// int32 leg_index = 10;
inline void OrderUpdateTradeLeg::clear_leg_index() {
  _impl_.leg_index_ = 0;
}
inline ::int32_t OrderUpdateTradeLeg::leg_index() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTradeLeg.leg_index)
  return _internal_leg_index();
}
inline void OrderUpdateTradeLeg::set_leg_index(::int32_t value) {
  _internal_set_leg_index(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTradeLeg.leg_index)
}
inline ::int32_t OrderUpdateTradeLeg::_internal_leg_index() const {
  return _impl_.leg_index_;
}
inline void OrderUpdateTradeLeg::_internal_set_leg_index(::int32_t value) {
  ;
  _impl_.leg_index_ = value;
}

// int32 volume = 11;
inline void OrderUpdateTradeLeg::clear_volume() {
  _impl_.volume_ = 0;
}
inline ::int32_t OrderUpdateTradeLeg::volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTradeLeg.volume)
  return _internal_volume();
}
inline void OrderUpdateTradeLeg::set_volume(::int32_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTradeLeg.volume)
}
inline ::int32_t OrderUpdateTradeLeg::_internal_volume() const {
  return _impl_.volume_;
}
inline void OrderUpdateTradeLeg::_internal_set_volume(::int32_t value) {
  ;
  _impl_.volume_ = value;
}

// .t4proto.v1.common.Price price = 12;
inline bool OrderUpdateTradeLeg::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool OrderUpdateTradeLeg::has_price() const {
  return _internal_has_price();
}
inline const ::t4proto::v1::common::Price& OrderUpdateTradeLeg::_internal_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& OrderUpdateTradeLeg::price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTradeLeg.price)
  return _internal_price();
}
inline void OrderUpdateTradeLeg::unsafe_arena_set_allocated_price(
    ::t4proto::v1::common::Price* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdateTradeLeg.price)
}
inline ::t4proto::v1::common::Price* OrderUpdateTradeLeg::release_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdateTradeLeg::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateTradeLeg.price)
  
  ::t4proto::v1::common::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdateTradeLeg::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::t4proto::v1::common::Price* OrderUpdateTradeLeg::mutable_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateTradeLeg.price)
  return _msg;
}
inline void OrderUpdateTradeLeg::set_allocated_price(::t4proto::v1::common::Price* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }

  } else {

  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateTradeLeg.price)
}

// string exchange_trade_id = 13;
inline void OrderUpdateTradeLeg::clear_exchange_trade_id() {
  _impl_.exchange_trade_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateTradeLeg::exchange_trade_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTradeLeg.exchange_trade_id)
  return _internal_exchange_trade_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateTradeLeg::set_exchange_trade_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.exchange_trade_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTradeLeg.exchange_trade_id)
}
inline std::string* OrderUpdateTradeLeg::mutable_exchange_trade_id() {
  std::string* _s = _internal_mutable_exchange_trade_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateTradeLeg.exchange_trade_id)
  return _s;
}
inline const std::string& OrderUpdateTradeLeg::_internal_exchange_trade_id() const {
  return _impl_.exchange_trade_id_.Get();
}
inline void OrderUpdateTradeLeg::_internal_set_exchange_trade_id(const std::string& value) {
  ;


  _impl_.exchange_trade_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateTradeLeg::_internal_mutable_exchange_trade_id() {
  ;
  return _impl_.exchange_trade_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateTradeLeg::release_exchange_trade_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateTradeLeg.exchange_trade_id)
  return _impl_.exchange_trade_id_.Release();
}
inline void OrderUpdateTradeLeg::set_allocated_exchange_trade_id(std::string* value) {
  _impl_.exchange_trade_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_trade_id_.IsDefault()) {
          _impl_.exchange_trade_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateTradeLeg.exchange_trade_id)
}

// string contra_trader = 14;
inline void OrderUpdateTradeLeg::clear_contra_trader() {
  _impl_.contra_trader_.ClearToEmpty();
}
inline const std::string& OrderUpdateTradeLeg::contra_trader() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTradeLeg.contra_trader)
  return _internal_contra_trader();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateTradeLeg::set_contra_trader(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.contra_trader_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTradeLeg.contra_trader)
}
inline std::string* OrderUpdateTradeLeg::mutable_contra_trader() {
  std::string* _s = _internal_mutable_contra_trader();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateTradeLeg.contra_trader)
  return _s;
}
inline const std::string& OrderUpdateTradeLeg::_internal_contra_trader() const {
  return _impl_.contra_trader_.Get();
}
inline void OrderUpdateTradeLeg::_internal_set_contra_trader(const std::string& value) {
  ;


  _impl_.contra_trader_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateTradeLeg::_internal_mutable_contra_trader() {
  ;
  return _impl_.contra_trader_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateTradeLeg::release_contra_trader() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateTradeLeg.contra_trader)
  return _impl_.contra_trader_.Release();
}
inline void OrderUpdateTradeLeg::set_allocated_contra_trader(std::string* value) {
  _impl_.contra_trader_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contra_trader_.IsDefault()) {
          _impl_.contra_trader_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateTradeLeg.contra_trader)
}

// string contra_broker = 15;
inline void OrderUpdateTradeLeg::clear_contra_broker() {
  _impl_.contra_broker_.ClearToEmpty();
}
inline const std::string& OrderUpdateTradeLeg::contra_broker() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTradeLeg.contra_broker)
  return _internal_contra_broker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateTradeLeg::set_contra_broker(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.contra_broker_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTradeLeg.contra_broker)
}
inline std::string* OrderUpdateTradeLeg::mutable_contra_broker() {
  std::string* _s = _internal_mutable_contra_broker();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateTradeLeg.contra_broker)
  return _s;
}
inline const std::string& OrderUpdateTradeLeg::_internal_contra_broker() const {
  return _impl_.contra_broker_.Get();
}
inline void OrderUpdateTradeLeg::_internal_set_contra_broker(const std::string& value) {
  ;


  _impl_.contra_broker_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateTradeLeg::_internal_mutable_contra_broker() {
  ;
  return _impl_.contra_broker_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateTradeLeg::release_contra_broker() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateTradeLeg.contra_broker)
  return _impl_.contra_broker_.Release();
}
inline void OrderUpdateTradeLeg::set_allocated_contra_broker(std::string* value) {
  _impl_.contra_broker_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contra_broker_.IsDefault()) {
          _impl_.contra_broker_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateTradeLeg.contra_broker)
}

// int32 residual_volume = 16;
inline void OrderUpdateTradeLeg::clear_residual_volume() {
  _impl_.residual_volume_ = 0;
}
inline ::int32_t OrderUpdateTradeLeg::residual_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTradeLeg.residual_volume)
  return _internal_residual_volume();
}
inline void OrderUpdateTradeLeg::set_residual_volume(::int32_t value) {
  _internal_set_residual_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTradeLeg.residual_volume)
}
inline ::int32_t OrderUpdateTradeLeg::_internal_residual_volume() const {
  return _impl_.residual_volume_;
}
inline void OrderUpdateTradeLeg::_internal_set_residual_volume(::int32_t value) {
  ;
  _impl_.residual_volume_ = value;
}

// int64 trade_date = 17;
inline void OrderUpdateTradeLeg::clear_trade_date() {
  _impl_.trade_date_ = ::int64_t{0};
}
inline ::int64_t OrderUpdateTradeLeg::trade_date() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTradeLeg.trade_date)
  return _internal_trade_date();
}
inline void OrderUpdateTradeLeg::set_trade_date(::int64_t value) {
  _internal_set_trade_date(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTradeLeg.trade_date)
}
inline ::int64_t OrderUpdateTradeLeg::_internal_trade_date() const {
  return _impl_.trade_date_;
}
inline void OrderUpdateTradeLeg::_internal_set_trade_date(::int64_t value) {
  ;
  _impl_.trade_date_ = value;
}

// int32 sequence_order = 18;
inline void OrderUpdateTradeLeg::clear_sequence_order() {
  _impl_.sequence_order_ = 0;
}
inline ::int32_t OrderUpdateTradeLeg::sequence_order() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateTradeLeg.sequence_order)
  return _internal_sequence_order();
}
inline void OrderUpdateTradeLeg::set_sequence_order(::int32_t value) {
  _internal_set_sequence_order(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateTradeLeg.sequence_order)
}
inline ::int32_t OrderUpdateTradeLeg::_internal_sequence_order() const {
  return _impl_.sequence_order_;
}
inline void OrderUpdateTradeLeg::_internal_set_sequence_order(::int32_t value) {
  ;
  _impl_.sequence_order_ = value;
}

// -------------------------------------------------------------------

// OrderUpdate_Trade

// int32 sequence_order = 1;
inline void OrderUpdate_Trade::clear_sequence_order() {
  _impl_.sequence_order_ = 0;
}
inline ::int32_t OrderUpdate_Trade::sequence_order() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.Trade.sequence_order)
  return _internal_sequence_order();
}
inline void OrderUpdate_Trade::set_sequence_order(::int32_t value) {
  _internal_set_sequence_order(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.Trade.sequence_order)
}
inline ::int32_t OrderUpdate_Trade::_internal_sequence_order() const {
  return _impl_.sequence_order_;
}
inline void OrderUpdate_Trade::_internal_set_sequence_order(::int32_t value) {
  ;
  _impl_.sequence_order_ = value;
}

// int32 volume = 2;
inline void OrderUpdate_Trade::clear_volume() {
  _impl_.volume_ = 0;
}
inline ::int32_t OrderUpdate_Trade::volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.Trade.volume)
  return _internal_volume();
}
inline void OrderUpdate_Trade::set_volume(::int32_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.Trade.volume)
}
inline ::int32_t OrderUpdate_Trade::_internal_volume() const {
  return _impl_.volume_;
}
inline void OrderUpdate_Trade::_internal_set_volume(::int32_t value) {
  ;
  _impl_.volume_ = value;
}

// .t4proto.v1.common.Price price = 3;
inline bool OrderUpdate_Trade::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool OrderUpdate_Trade::has_price() const {
  return _internal_has_price();
}
inline const ::t4proto::v1::common::Price& OrderUpdate_Trade::_internal_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& OrderUpdate_Trade::price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.Trade.price)
  return _internal_price();
}
inline void OrderUpdate_Trade::unsafe_arena_set_allocated_price(
    ::t4proto::v1::common::Price* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdate.Trade.price)
}
inline ::t4proto::v1::common::Price* OrderUpdate_Trade::release_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdate_Trade::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.Trade.price)
  
  ::t4proto::v1::common::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdate_Trade::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::t4proto::v1::common::Price* OrderUpdate_Trade::mutable_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.Trade.price)
  return _msg;
}
inline void OrderUpdate_Trade::set_allocated_price(::t4proto::v1::common::Price* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }

  } else {

  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.Trade.price)
}

// int32 residual_volume = 4;
inline void OrderUpdate_Trade::clear_residual_volume() {
  _impl_.residual_volume_ = 0;
}
inline ::int32_t OrderUpdate_Trade::residual_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.Trade.residual_volume)
  return _internal_residual_volume();
}
inline void OrderUpdate_Trade::set_residual_volume(::int32_t value) {
  _internal_set_residual_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.Trade.residual_volume)
}
inline ::int32_t OrderUpdate_Trade::_internal_residual_volume() const {
  return _impl_.residual_volume_;
}
inline void OrderUpdate_Trade::_internal_set_residual_volume(::int32_t value) {
  ;
  _impl_.residual_volume_ = value;
}

// .google.protobuf.Timestamp time = 5;
inline bool OrderUpdate_Trade::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool OrderUpdate_Trade::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdate_Trade::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdate_Trade::time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.Trade.time)
  return _internal_time();
}
inline void OrderUpdate_Trade::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdate.Trade.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate_Trade::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate_Trade::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.Trade.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate_Trade::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate_Trade::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.Trade.time)
  return _msg;
}
inline void OrderUpdate_Trade::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }

  } else {

  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.Trade.time)
}

// string exchange_trade_id = 6;
inline void OrderUpdate_Trade::clear_exchange_trade_id() {
  _impl_.exchange_trade_id_.ClearToEmpty();
}
inline const std::string& OrderUpdate_Trade::exchange_trade_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.Trade.exchange_trade_id)
  return _internal_exchange_trade_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate_Trade::set_exchange_trade_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.exchange_trade_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.Trade.exchange_trade_id)
}
inline std::string* OrderUpdate_Trade::mutable_exchange_trade_id() {
  std::string* _s = _internal_mutable_exchange_trade_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.Trade.exchange_trade_id)
  return _s;
}
inline const std::string& OrderUpdate_Trade::_internal_exchange_trade_id() const {
  return _impl_.exchange_trade_id_.Get();
}
inline void OrderUpdate_Trade::_internal_set_exchange_trade_id(const std::string& value) {
  ;


  _impl_.exchange_trade_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate_Trade::_internal_mutable_exchange_trade_id() {
  ;
  return _impl_.exchange_trade_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate_Trade::release_exchange_trade_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.Trade.exchange_trade_id)
  return _impl_.exchange_trade_id_.Release();
}
inline void OrderUpdate_Trade::set_allocated_exchange_trade_id(std::string* value) {
  _impl_.exchange_trade_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_trade_id_.IsDefault()) {
          _impl_.exchange_trade_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.Trade.exchange_trade_id)
}

// .google.protobuf.Timestamp exchange_time = 7;
inline bool OrderUpdate_Trade::_internal_has_exchange_time() const {
  return this != internal_default_instance() && _impl_.exchange_time_ != nullptr;
}
inline bool OrderUpdate_Trade::has_exchange_time() const {
  return _internal_has_exchange_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdate_Trade::_internal_exchange_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.exchange_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdate_Trade::exchange_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.Trade.exchange_time)
  return _internal_exchange_time();
}
inline void OrderUpdate_Trade::unsafe_arena_set_allocated_exchange_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchange_time_);
  }
  _impl_.exchange_time_ = exchange_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdate.Trade.exchange_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate_Trade::release_exchange_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.exchange_time_;
  _impl_.exchange_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate_Trade::unsafe_arena_release_exchange_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.Trade.exchange_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.exchange_time_;
  _impl_.exchange_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate_Trade::_internal_mutable_exchange_time() {
  
  if (_impl_.exchange_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.exchange_time_ = p;
  }
  return _impl_.exchange_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate_Trade::mutable_exchange_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_exchange_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.Trade.exchange_time)
  return _msg;
}
inline void OrderUpdate_Trade::set_allocated_exchange_time(::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchange_time_);
  }
  if (exchange_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exchange_time));
    if (message_arena != submessage_arena) {
      exchange_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exchange_time, submessage_arena);
    }

  } else {

  }
  _impl_.exchange_time_ = exchange_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.Trade.exchange_time)
}

// string contra_trader = 8;
inline void OrderUpdate_Trade::clear_contra_trader() {
  _impl_.contra_trader_.ClearToEmpty();
}
inline const std::string& OrderUpdate_Trade::contra_trader() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.Trade.contra_trader)
  return _internal_contra_trader();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate_Trade::set_contra_trader(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.contra_trader_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.Trade.contra_trader)
}
inline std::string* OrderUpdate_Trade::mutable_contra_trader() {
  std::string* _s = _internal_mutable_contra_trader();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.Trade.contra_trader)
  return _s;
}
inline const std::string& OrderUpdate_Trade::_internal_contra_trader() const {
  return _impl_.contra_trader_.Get();
}
inline void OrderUpdate_Trade::_internal_set_contra_trader(const std::string& value) {
  ;


  _impl_.contra_trader_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate_Trade::_internal_mutable_contra_trader() {
  ;
  return _impl_.contra_trader_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate_Trade::release_contra_trader() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.Trade.contra_trader)
  return _impl_.contra_trader_.Release();
}
inline void OrderUpdate_Trade::set_allocated_contra_trader(std::string* value) {
  _impl_.contra_trader_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contra_trader_.IsDefault()) {
          _impl_.contra_trader_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.Trade.contra_trader)
}

// string contra_broker = 9;
inline void OrderUpdate_Trade::clear_contra_broker() {
  _impl_.contra_broker_.ClearToEmpty();
}
inline const std::string& OrderUpdate_Trade::contra_broker() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.Trade.contra_broker)
  return _internal_contra_broker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate_Trade::set_contra_broker(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.contra_broker_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.Trade.contra_broker)
}
inline std::string* OrderUpdate_Trade::mutable_contra_broker() {
  std::string* _s = _internal_mutable_contra_broker();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.Trade.contra_broker)
  return _s;
}
inline const std::string& OrderUpdate_Trade::_internal_contra_broker() const {
  return _impl_.contra_broker_.Get();
}
inline void OrderUpdate_Trade::_internal_set_contra_broker(const std::string& value) {
  ;


  _impl_.contra_broker_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate_Trade::_internal_mutable_contra_broker() {
  ;
  return _impl_.contra_broker_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate_Trade::release_contra_broker() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.Trade.contra_broker)
  return _impl_.contra_broker_.Release();
}
inline void OrderUpdate_Trade::set_allocated_contra_broker(std::string* value) {
  _impl_.contra_broker_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contra_broker_.IsDefault()) {
          _impl_.contra_broker_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.Trade.contra_broker)
}

// int64 trade_date = 10;
inline void OrderUpdate_Trade::clear_trade_date() {
  _impl_.trade_date_ = ::int64_t{0};
}
inline ::int64_t OrderUpdate_Trade::trade_date() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.Trade.trade_date)
  return _internal_trade_date();
}
inline void OrderUpdate_Trade::set_trade_date(::int64_t value) {
  _internal_set_trade_date(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.Trade.trade_date)
}
inline ::int64_t OrderUpdate_Trade::_internal_trade_date() const {
  return _impl_.trade_date_;
}
inline void OrderUpdate_Trade::_internal_set_trade_date(::int64_t value) {
  ;
  _impl_.trade_date_ = value;
}

// -------------------------------------------------------------------

// OrderUpdate_TradeLeg

// int32 sequence_order = 1;
inline void OrderUpdate_TradeLeg::clear_sequence_order() {
  _impl_.sequence_order_ = 0;
}
inline ::int32_t OrderUpdate_TradeLeg::sequence_order() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.sequence_order)
  return _internal_sequence_order();
}
inline void OrderUpdate_TradeLeg::set_sequence_order(::int32_t value) {
  _internal_set_sequence_order(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.sequence_order)
}
inline ::int32_t OrderUpdate_TradeLeg::_internal_sequence_order() const {
  return _impl_.sequence_order_;
}
inline void OrderUpdate_TradeLeg::_internal_set_sequence_order(::int32_t value) {
  ;
  _impl_.sequence_order_ = value;
}

// int32 leg_index = 2;
inline void OrderUpdate_TradeLeg::clear_leg_index() {
  _impl_.leg_index_ = 0;
}
inline ::int32_t OrderUpdate_TradeLeg::leg_index() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.leg_index)
  return _internal_leg_index();
}
inline void OrderUpdate_TradeLeg::set_leg_index(::int32_t value) {
  _internal_set_leg_index(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.leg_index)
}
inline ::int32_t OrderUpdate_TradeLeg::_internal_leg_index() const {
  return _impl_.leg_index_;
}
inline void OrderUpdate_TradeLeg::_internal_set_leg_index(::int32_t value) {
  ;
  _impl_.leg_index_ = value;
}

// int32 volume = 3;
inline void OrderUpdate_TradeLeg::clear_volume() {
  _impl_.volume_ = 0;
}
inline ::int32_t OrderUpdate_TradeLeg::volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.volume)
  return _internal_volume();
}
inline void OrderUpdate_TradeLeg::set_volume(::int32_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.volume)
}
inline ::int32_t OrderUpdate_TradeLeg::_internal_volume() const {
  return _impl_.volume_;
}
inline void OrderUpdate_TradeLeg::_internal_set_volume(::int32_t value) {
  ;
  _impl_.volume_ = value;
}

// .t4proto.v1.common.Price price = 4;
inline bool OrderUpdate_TradeLeg::_internal_has_price() const {
  return this != internal_default_instance() && _impl_.price_ != nullptr;
}
inline bool OrderUpdate_TradeLeg::has_price() const {
  return _internal_has_price();
}
inline const ::t4proto::v1::common::Price& OrderUpdate_TradeLeg::_internal_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& OrderUpdate_TradeLeg::price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.price)
  return _internal_price();
}
inline void OrderUpdate_TradeLeg::unsafe_arena_set_allocated_price(
    ::t4proto::v1::common::Price* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.price)
}
inline ::t4proto::v1::common::Price* OrderUpdate_TradeLeg::release_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdate_TradeLeg::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.price)
  
  ::t4proto::v1::common::Price* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdate_TradeLeg::_internal_mutable_price() {
  
  if (_impl_.price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.price_ = p;
  }
  return _impl_.price_;
}
inline ::t4proto::v1::common::Price* OrderUpdate_TradeLeg::mutable_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.price)
  return _msg;
}
inline void OrderUpdate_TradeLeg::set_allocated_price(::t4proto::v1::common::Price* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.price_);
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price));
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }

  } else {

  }
  _impl_.price_ = price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.price)
}

// .google.protobuf.Timestamp time = 5;
inline bool OrderUpdate_TradeLeg::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool OrderUpdate_TradeLeg::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdate_TradeLeg::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdate_TradeLeg::time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.time)
  return _internal_time();
}
inline void OrderUpdate_TradeLeg::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate_TradeLeg::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate_TradeLeg::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate_TradeLeg::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate_TradeLeg::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.time)
  return _msg;
}
inline void OrderUpdate_TradeLeg::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }

  } else {

  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.time)
}

// string exchange_trade_id = 6;
inline void OrderUpdate_TradeLeg::clear_exchange_trade_id() {
  _impl_.exchange_trade_id_.ClearToEmpty();
}
inline const std::string& OrderUpdate_TradeLeg::exchange_trade_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.exchange_trade_id)
  return _internal_exchange_trade_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate_TradeLeg::set_exchange_trade_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.exchange_trade_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.exchange_trade_id)
}
inline std::string* OrderUpdate_TradeLeg::mutable_exchange_trade_id() {
  std::string* _s = _internal_mutable_exchange_trade_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.exchange_trade_id)
  return _s;
}
inline const std::string& OrderUpdate_TradeLeg::_internal_exchange_trade_id() const {
  return _impl_.exchange_trade_id_.Get();
}
inline void OrderUpdate_TradeLeg::_internal_set_exchange_trade_id(const std::string& value) {
  ;


  _impl_.exchange_trade_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate_TradeLeg::_internal_mutable_exchange_trade_id() {
  ;
  return _impl_.exchange_trade_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate_TradeLeg::release_exchange_trade_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.exchange_trade_id)
  return _impl_.exchange_trade_id_.Release();
}
inline void OrderUpdate_TradeLeg::set_allocated_exchange_trade_id(std::string* value) {
  _impl_.exchange_trade_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_trade_id_.IsDefault()) {
          _impl_.exchange_trade_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.exchange_trade_id)
}

// .google.protobuf.Timestamp exchange_time = 7;
inline bool OrderUpdate_TradeLeg::_internal_has_exchange_time() const {
  return this != internal_default_instance() && _impl_.exchange_time_ != nullptr;
}
inline bool OrderUpdate_TradeLeg::has_exchange_time() const {
  return _internal_has_exchange_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdate_TradeLeg::_internal_exchange_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.exchange_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdate_TradeLeg::exchange_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.exchange_time)
  return _internal_exchange_time();
}
inline void OrderUpdate_TradeLeg::unsafe_arena_set_allocated_exchange_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchange_time_);
  }
  _impl_.exchange_time_ = exchange_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.exchange_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate_TradeLeg::release_exchange_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.exchange_time_;
  _impl_.exchange_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate_TradeLeg::unsafe_arena_release_exchange_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.exchange_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.exchange_time_;
  _impl_.exchange_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate_TradeLeg::_internal_mutable_exchange_time() {
  
  if (_impl_.exchange_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.exchange_time_ = p;
  }
  return _impl_.exchange_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate_TradeLeg::mutable_exchange_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_exchange_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.exchange_time)
  return _msg;
}
inline void OrderUpdate_TradeLeg::set_allocated_exchange_time(::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchange_time_);
  }
  if (exchange_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exchange_time));
    if (message_arena != submessage_arena) {
      exchange_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exchange_time, submessage_arena);
    }

  } else {

  }
  _impl_.exchange_time_ = exchange_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.exchange_time)
}

// string contra_trader = 8;
inline void OrderUpdate_TradeLeg::clear_contra_trader() {
  _impl_.contra_trader_.ClearToEmpty();
}
inline const std::string& OrderUpdate_TradeLeg::contra_trader() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.contra_trader)
  return _internal_contra_trader();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate_TradeLeg::set_contra_trader(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.contra_trader_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.contra_trader)
}
inline std::string* OrderUpdate_TradeLeg::mutable_contra_trader() {
  std::string* _s = _internal_mutable_contra_trader();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.contra_trader)
  return _s;
}
inline const std::string& OrderUpdate_TradeLeg::_internal_contra_trader() const {
  return _impl_.contra_trader_.Get();
}
inline void OrderUpdate_TradeLeg::_internal_set_contra_trader(const std::string& value) {
  ;


  _impl_.contra_trader_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate_TradeLeg::_internal_mutable_contra_trader() {
  ;
  return _impl_.contra_trader_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate_TradeLeg::release_contra_trader() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.contra_trader)
  return _impl_.contra_trader_.Release();
}
inline void OrderUpdate_TradeLeg::set_allocated_contra_trader(std::string* value) {
  _impl_.contra_trader_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contra_trader_.IsDefault()) {
          _impl_.contra_trader_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.contra_trader)
}

// string contra_broker = 9;
inline void OrderUpdate_TradeLeg::clear_contra_broker() {
  _impl_.contra_broker_.ClearToEmpty();
}
inline const std::string& OrderUpdate_TradeLeg::contra_broker() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.contra_broker)
  return _internal_contra_broker();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate_TradeLeg::set_contra_broker(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.contra_broker_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.contra_broker)
}
inline std::string* OrderUpdate_TradeLeg::mutable_contra_broker() {
  std::string* _s = _internal_mutable_contra_broker();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.contra_broker)
  return _s;
}
inline const std::string& OrderUpdate_TradeLeg::_internal_contra_broker() const {
  return _impl_.contra_broker_.Get();
}
inline void OrderUpdate_TradeLeg::_internal_set_contra_broker(const std::string& value) {
  ;


  _impl_.contra_broker_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate_TradeLeg::_internal_mutable_contra_broker() {
  ;
  return _impl_.contra_broker_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate_TradeLeg::release_contra_broker() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.contra_broker)
  return _impl_.contra_broker_.Release();
}
inline void OrderUpdate_TradeLeg::set_allocated_contra_broker(std::string* value) {
  _impl_.contra_broker_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.contra_broker_.IsDefault()) {
          _impl_.contra_broker_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.contra_broker)
}

// int32 residual_volume = 10;
inline void OrderUpdate_TradeLeg::clear_residual_volume() {
  _impl_.residual_volume_ = 0;
}
inline ::int32_t OrderUpdate_TradeLeg::residual_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.residual_volume)
  return _internal_residual_volume();
}
inline void OrderUpdate_TradeLeg::set_residual_volume(::int32_t value) {
  _internal_set_residual_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.residual_volume)
}
inline ::int32_t OrderUpdate_TradeLeg::_internal_residual_volume() const {
  return _impl_.residual_volume_;
}
inline void OrderUpdate_TradeLeg::_internal_set_residual_volume(::int32_t value) {
  ;
  _impl_.residual_volume_ = value;
}

// int64 trade_date = 11;
inline void OrderUpdate_TradeLeg::clear_trade_date() {
  _impl_.trade_date_ = ::int64_t{0};
}
inline ::int64_t OrderUpdate_TradeLeg::trade_date() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.trade_date)
  return _internal_trade_date();
}
inline void OrderUpdate_TradeLeg::set_trade_date(::int64_t value) {
  _internal_set_trade_date(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.TradeLeg.trade_date)
}
inline ::int64_t OrderUpdate_TradeLeg::_internal_trade_date() const {
  return _impl_.trade_date_;
}
inline void OrderUpdate_TradeLeg::_internal_set_trade_date(::int64_t value) {
  ;
  _impl_.trade_date_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OrderUpdate

// string unique_id = 1;
inline void OrderUpdate::clear_unique_id() {
  _impl_.unique_id_.ClearToEmpty();
}
inline const std::string& OrderUpdate::unique_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.unique_id)
  return _internal_unique_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_unique_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.unique_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.unique_id)
}
inline std::string* OrderUpdate::mutable_unique_id() {
  std::string* _s = _internal_mutable_unique_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.unique_id)
  return _s;
}
inline const std::string& OrderUpdate::_internal_unique_id() const {
  return _impl_.unique_id_.Get();
}
inline void OrderUpdate::_internal_set_unique_id(const std::string& value) {
  ;


  _impl_.unique_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_unique_id() {
  ;
  return _impl_.unique_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_unique_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.unique_id)
  return _impl_.unique_id_.Release();
}
inline void OrderUpdate::set_allocated_unique_id(std::string* value) {
  _impl_.unique_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.unique_id_.IsDefault()) {
          _impl_.unique_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.unique_id)
}

// string account_id = 2;
inline void OrderUpdate::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& OrderUpdate::account_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.account_id)
}
inline std::string* OrderUpdate::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.account_id)
  return _s;
}
inline const std::string& OrderUpdate::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void OrderUpdate::_internal_set_account_id(const std::string& value) {
  ;


  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_account_id() {
  ;
  return _impl_.account_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_account_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.account_id)
  return _impl_.account_id_.Release();
}
inline void OrderUpdate::set_allocated_account_id(std::string* value) {
  _impl_.account_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.account_id)
}

// string market_id = 3;
inline void OrderUpdate::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& OrderUpdate::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.market_id)
}
inline std::string* OrderUpdate::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.market_id)
  return _s;
}
inline const std::string& OrderUpdate::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void OrderUpdate::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.market_id)
  return _impl_.market_id_.Release();
}
inline void OrderUpdate::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.market_id)
}

// .google.protobuf.Timestamp time = 4;
inline bool OrderUpdate::_internal_has_time() const {
  return this != internal_default_instance() && _impl_.time_ != nullptr;
}
inline bool OrderUpdate::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdate::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdate::time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.time)
  return _internal_time();
}
inline void OrderUpdate::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdate.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate::_internal_mutable_time() {
  
  if (_impl_.time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.time_ = p;
  }
  return _impl_.time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.time)
  return _msg;
}
inline void OrderUpdate::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }

  } else {

  }
  _impl_.time_ = time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.time)
}

// .google.protobuf.Timestamp exchange_time = 5;
inline bool OrderUpdate::_internal_has_exchange_time() const {
  return this != internal_default_instance() && _impl_.exchange_time_ != nullptr;
}
inline bool OrderUpdate::has_exchange_time() const {
  return _internal_has_exchange_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdate::_internal_exchange_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.exchange_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdate::exchange_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.exchange_time)
  return _internal_exchange_time();
}
inline void OrderUpdate::unsafe_arena_set_allocated_exchange_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchange_time_);
  }
  _impl_.exchange_time_ = exchange_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdate.exchange_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate::release_exchange_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.exchange_time_;
  _impl_.exchange_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate::unsafe_arena_release_exchange_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.exchange_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.exchange_time_;
  _impl_.exchange_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate::_internal_mutable_exchange_time() {
  
  if (_impl_.exchange_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.exchange_time_ = p;
  }
  return _impl_.exchange_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate::mutable_exchange_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_exchange_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.exchange_time)
  return _msg;
}
inline void OrderUpdate::set_allocated_exchange_time(::PROTOBUF_NAMESPACE_ID::Timestamp* exchange_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.exchange_time_);
  }
  if (exchange_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(exchange_time));
    if (message_arena != submessage_arena) {
      exchange_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exchange_time, submessage_arena);
    }

  } else {

  }
  _impl_.exchange_time_ = exchange_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.exchange_time)
}

// .t4proto.v1.common.OrderChange change = 6;
inline void OrderUpdate::clear_change() {
  _impl_.change_ = 0;
}
inline ::t4proto::v1::common::OrderChange OrderUpdate::change() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.change)
  return _internal_change();
}
inline void OrderUpdate::set_change(::t4proto::v1::common::OrderChange value) {
   _internal_set_change(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.change)
}
inline ::t4proto::v1::common::OrderChange OrderUpdate::_internal_change() const {
  return static_cast<::t4proto::v1::common::OrderChange>(_impl_.change_);
}
inline void OrderUpdate::_internal_set_change(::t4proto::v1::common::OrderChange value) {
  ;
  _impl_.change_ = value;
}

// .t4proto.v1.common.OrderStatus status = 7;
inline void OrderUpdate::clear_status() {
  _impl_.status_ = 0;
}
inline ::t4proto::v1::common::OrderStatus OrderUpdate::status() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.status)
  return _internal_status();
}
inline void OrderUpdate::set_status(::t4proto::v1::common::OrderStatus value) {
   _internal_set_status(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.status)
}
inline ::t4proto::v1::common::OrderStatus OrderUpdate::_internal_status() const {
  return static_cast<::t4proto::v1::common::OrderStatus>(_impl_.status_);
}
inline void OrderUpdate::_internal_set_status(::t4proto::v1::common::OrderStatus value) {
  ;
  _impl_.status_ = value;
}

// string status_detail = 8;
inline void OrderUpdate::clear_status_detail() {
  _impl_.status_detail_.ClearToEmpty();
}
inline const std::string& OrderUpdate::status_detail() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.status_detail)
  return _internal_status_detail();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_status_detail(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.status_detail_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.status_detail)
}
inline std::string* OrderUpdate::mutable_status_detail() {
  std::string* _s = _internal_mutable_status_detail();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.status_detail)
  return _s;
}
inline const std::string& OrderUpdate::_internal_status_detail() const {
  return _impl_.status_detail_.Get();
}
inline void OrderUpdate::_internal_set_status_detail(const std::string& value) {
  ;


  _impl_.status_detail_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_status_detail() {
  ;
  return _impl_.status_detail_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_status_detail() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.status_detail)
  return _impl_.status_detail_.Release();
}
inline void OrderUpdate::set_allocated_status_detail(std::string* value) {
  _impl_.status_detail_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_detail_.IsDefault()) {
          _impl_.status_detail_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.status_detail)
}

// .t4proto.v1.common.ResponsePending response_pending = 9;
inline void OrderUpdate::clear_response_pending() {
  _impl_.response_pending_ = 0;
}
inline ::t4proto::v1::common::ResponsePending OrderUpdate::response_pending() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.response_pending)
  return _internal_response_pending();
}
inline void OrderUpdate::set_response_pending(::t4proto::v1::common::ResponsePending value) {
   _internal_set_response_pending(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.response_pending)
}
inline ::t4proto::v1::common::ResponsePending OrderUpdate::_internal_response_pending() const {
  return static_cast<::t4proto::v1::common::ResponsePending>(_impl_.response_pending_);
}
inline void OrderUpdate::_internal_set_response_pending(::t4proto::v1::common::ResponsePending value) {
  ;
  _impl_.response_pending_ = value;
}

// string exchange_order_id = 10;
inline void OrderUpdate::clear_exchange_order_id() {
  _impl_.exchange_order_id_.ClearToEmpty();
}
inline const std::string& OrderUpdate::exchange_order_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.exchange_order_id)
  return _internal_exchange_order_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_exchange_order_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.exchange_order_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.exchange_order_id)
}
inline std::string* OrderUpdate::mutable_exchange_order_id() {
  std::string* _s = _internal_mutable_exchange_order_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.exchange_order_id)
  return _s;
}
inline const std::string& OrderUpdate::_internal_exchange_order_id() const {
  return _impl_.exchange_order_id_.Get();
}
inline void OrderUpdate::_internal_set_exchange_order_id(const std::string& value) {
  ;


  _impl_.exchange_order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_exchange_order_id() {
  ;
  return _impl_.exchange_order_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_exchange_order_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.exchange_order_id)
  return _impl_.exchange_order_id_.Release();
}
inline void OrderUpdate::set_allocated_exchange_order_id(std::string* value) {
  _impl_.exchange_order_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_order_id_.IsDefault()) {
          _impl_.exchange_order_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.exchange_order_id)
}

// .google.protobuf.Timestamp submit_time = 11;
inline bool OrderUpdate::_internal_has_submit_time() const {
  return this != internal_default_instance() && _impl_.submit_time_ != nullptr;
}
inline bool OrderUpdate::has_submit_time() const {
  return _internal_has_submit_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdate::_internal_submit_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.submit_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdate::submit_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.submit_time)
  return _internal_submit_time();
}
inline void OrderUpdate::unsafe_arena_set_allocated_submit_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* submit_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submit_time_);
  }
  _impl_.submit_time_ = submit_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdate.submit_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate::release_submit_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.submit_time_;
  _impl_.submit_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate::unsafe_arena_release_submit_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.submit_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.submit_time_;
  _impl_.submit_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate::_internal_mutable_submit_time() {
  
  if (_impl_.submit_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.submit_time_ = p;
  }
  return _impl_.submit_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate::mutable_submit_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_submit_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.submit_time)
  return _msg;
}
inline void OrderUpdate::set_allocated_submit_time(::PROTOBUF_NAMESPACE_ID::Timestamp* submit_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.submit_time_);
  }
  if (submit_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submit_time));
    if (message_arena != submessage_arena) {
      submit_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submit_time, submessage_arena);
    }

  } else {

  }
  _impl_.submit_time_ = submit_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.submit_time)
}

// int64 trade_date = 12;
inline void OrderUpdate::clear_trade_date() {
  _impl_.trade_date_ = ::int64_t{0};
}
inline ::int64_t OrderUpdate::trade_date() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.trade_date)
  return _internal_trade_date();
}
inline void OrderUpdate::set_trade_date(::int64_t value) {
  _internal_set_trade_date(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.trade_date)
}
inline ::int64_t OrderUpdate::_internal_trade_date() const {
  return _impl_.trade_date_;
}
inline void OrderUpdate::_internal_set_trade_date(::int64_t value) {
  ;
  _impl_.trade_date_ = value;
}

// string exchange_id = 13;
inline void OrderUpdate::clear_exchange_id() {
  _impl_.exchange_id_.ClearToEmpty();
}
inline const std::string& OrderUpdate::exchange_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.exchange_id)
  return _internal_exchange_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_exchange_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.exchange_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.exchange_id)
}
inline std::string* OrderUpdate::mutable_exchange_id() {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.exchange_id)
  return _s;
}
inline const std::string& OrderUpdate::_internal_exchange_id() const {
  return _impl_.exchange_id_.Get();
}
inline void OrderUpdate::_internal_set_exchange_id(const std::string& value) {
  ;


  _impl_.exchange_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_exchange_id() {
  ;
  return _impl_.exchange_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_exchange_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.exchange_id)
  return _impl_.exchange_id_.Release();
}
inline void OrderUpdate::set_allocated_exchange_id(std::string* value) {
  _impl_.exchange_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_id_.IsDefault()) {
          _impl_.exchange_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.exchange_id)
}

// string exchange_login_id = 14;
inline void OrderUpdate::clear_exchange_login_id() {
  _impl_.exchange_login_id_.ClearToEmpty();
}
inline const std::string& OrderUpdate::exchange_login_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.exchange_login_id)
  return _internal_exchange_login_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_exchange_login_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.exchange_login_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.exchange_login_id)
}
inline std::string* OrderUpdate::mutable_exchange_login_id() {
  std::string* _s = _internal_mutable_exchange_login_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.exchange_login_id)
  return _s;
}
inline const std::string& OrderUpdate::_internal_exchange_login_id() const {
  return _impl_.exchange_login_id_.Get();
}
inline void OrderUpdate::_internal_set_exchange_login_id(const std::string& value) {
  ;


  _impl_.exchange_login_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_exchange_login_id() {
  ;
  return _impl_.exchange_login_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_exchange_login_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.exchange_login_id)
  return _impl_.exchange_login_id_.Release();
}
inline void OrderUpdate::set_allocated_exchange_login_id(std::string* value) {
  _impl_.exchange_login_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_login_id_.IsDefault()) {
          _impl_.exchange_login_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.exchange_login_id)
}

// string executing_login_id = 15;
inline void OrderUpdate::clear_executing_login_id() {
  _impl_.executing_login_id_.ClearToEmpty();
}
inline const std::string& OrderUpdate::executing_login_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.executing_login_id)
  return _internal_executing_login_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_executing_login_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.executing_login_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.executing_login_id)
}
inline std::string* OrderUpdate::mutable_executing_login_id() {
  std::string* _s = _internal_mutable_executing_login_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.executing_login_id)
  return _s;
}
inline const std::string& OrderUpdate::_internal_executing_login_id() const {
  return _impl_.executing_login_id_.Get();
}
inline void OrderUpdate::_internal_set_executing_login_id(const std::string& value) {
  ;


  _impl_.executing_login_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_executing_login_id() {
  ;
  return _impl_.executing_login_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_executing_login_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.executing_login_id)
  return _impl_.executing_login_id_.Release();
}
inline void OrderUpdate::set_allocated_executing_login_id(std::string* value) {
  _impl_.executing_login_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.executing_login_id_.IsDefault()) {
          _impl_.executing_login_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.executing_login_id)
}

// string exchange_location = 16;
inline void OrderUpdate::clear_exchange_location() {
  _impl_.exchange_location_.ClearToEmpty();
}
inline const std::string& OrderUpdate::exchange_location() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.exchange_location)
  return _internal_exchange_location();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_exchange_location(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.exchange_location_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.exchange_location)
}
inline std::string* OrderUpdate::mutable_exchange_location() {
  std::string* _s = _internal_mutable_exchange_location();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.exchange_location)
  return _s;
}
inline const std::string& OrderUpdate::_internal_exchange_location() const {
  return _impl_.exchange_location_.Get();
}
inline void OrderUpdate::_internal_set_exchange_location(const std::string& value) {
  ;


  _impl_.exchange_location_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_exchange_location() {
  ;
  return _impl_.exchange_location_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_exchange_location() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.exchange_location)
  return _impl_.exchange_location_.Release();
}
inline void OrderUpdate::set_allocated_exchange_location(std::string* value) {
  _impl_.exchange_location_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_location_.IsDefault()) {
          _impl_.exchange_location_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.exchange_location)
}

// string user_id = 17;
inline void OrderUpdate::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& OrderUpdate::user_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.user_id)
}
inline std::string* OrderUpdate::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.user_id)
  return _s;
}
inline const std::string& OrderUpdate::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void OrderUpdate::_internal_set_user_id(const std::string& value) {
  ;


  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_user_id() {
  ;
  return _impl_.user_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_user_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.user_id)
  return _impl_.user_id_.Release();
}
inline void OrderUpdate::set_allocated_user_id(std::string* value) {
  _impl_.user_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_id_.IsDefault()) {
          _impl_.user_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.user_id)
}

// string user_name = 18;
inline void OrderUpdate::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& OrderUpdate::user_name() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.user_name)
  return _internal_user_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_user_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.user_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.user_name)
}
inline std::string* OrderUpdate::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.user_name)
  return _s;
}
inline const std::string& OrderUpdate::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void OrderUpdate::_internal_set_user_name(const std::string& value) {
  ;


  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_user_name() {
  ;
  return _impl_.user_name_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_user_name() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.user_name)
  return _impl_.user_name_.Release();
}
inline void OrderUpdate::set_allocated_user_name(std::string* value) {
  _impl_.user_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_name_.IsDefault()) {
          _impl_.user_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.user_name)
}

// string user_address = 19;
inline void OrderUpdate::clear_user_address() {
  _impl_.user_address_.ClearToEmpty();
}
inline const std::string& OrderUpdate::user_address() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.user_address)
  return _internal_user_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_user_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.user_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.user_address)
}
inline std::string* OrderUpdate::mutable_user_address() {
  std::string* _s = _internal_mutable_user_address();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.user_address)
  return _s;
}
inline const std::string& OrderUpdate::_internal_user_address() const {
  return _impl_.user_address_.Get();
}
inline void OrderUpdate::_internal_set_user_address(const std::string& value) {
  ;


  _impl_.user_address_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_user_address() {
  ;
  return _impl_.user_address_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_user_address() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.user_address)
  return _impl_.user_address_.Release();
}
inline void OrderUpdate::set_allocated_user_address(std::string* value) {
  _impl_.user_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_address_.IsDefault()) {
          _impl_.user_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.user_address)
}

// string session_id = 20;
inline void OrderUpdate::clear_session_id() {
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& OrderUpdate::session_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.session_id)
}
inline std::string* OrderUpdate::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.session_id)
  return _s;
}
inline const std::string& OrderUpdate::_internal_session_id() const {
  return _impl_.session_id_.Get();
}
inline void OrderUpdate::_internal_set_session_id(const std::string& value) {
  ;


  _impl_.session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_session_id() {
  ;
  return _impl_.session_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_session_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.session_id)
  return _impl_.session_id_.Release();
}
inline void OrderUpdate::set_allocated_session_id(std::string* value) {
  _impl_.session_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.session_id_.IsDefault()) {
          _impl_.session_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.session_id)
}

// string app_id = 21;
inline void OrderUpdate::clear_app_id() {
  _impl_.app_id_.ClearToEmpty();
}
inline const std::string& OrderUpdate::app_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.app_id)
  return _internal_app_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_app_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.app_id)
}
inline std::string* OrderUpdate::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.app_id)
  return _s;
}
inline const std::string& OrderUpdate::_internal_app_id() const {
  return _impl_.app_id_.Get();
}
inline void OrderUpdate::_internal_set_app_id(const std::string& value) {
  ;


  _impl_.app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_app_id() {
  ;
  return _impl_.app_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_app_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.app_id)
  return _impl_.app_id_.Release();
}
inline void OrderUpdate::set_allocated_app_id(std::string* value) {
  _impl_.app_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_id_.IsDefault()) {
          _impl_.app_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.app_id)
}

// string app_name = 22;
inline void OrderUpdate::clear_app_name() {
  _impl_.app_name_.ClearToEmpty();
}
inline const std::string& OrderUpdate::app_name() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.app_name)
  return _internal_app_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_app_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.app_name)
}
inline std::string* OrderUpdate::mutable_app_name() {
  std::string* _s = _internal_mutable_app_name();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.app_name)
  return _s;
}
inline const std::string& OrderUpdate::_internal_app_name() const {
  return _impl_.app_name_.Get();
}
inline void OrderUpdate::_internal_set_app_name(const std::string& value) {
  ;


  _impl_.app_name_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_app_name() {
  ;
  return _impl_.app_name_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_app_name() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.app_name)
  return _impl_.app_name_.Release();
}
inline void OrderUpdate::set_allocated_app_name(std::string* value) {
  _impl_.app_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_name_.IsDefault()) {
          _impl_.app_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.app_name)
}

// .t4proto.v1.common.BuySell buy_sell = 23;
inline void OrderUpdate::clear_buy_sell() {
  _impl_.buy_sell_ = 0;
}
inline ::t4proto::v1::common::BuySell OrderUpdate::buy_sell() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.buy_sell)
  return _internal_buy_sell();
}
inline void OrderUpdate::set_buy_sell(::t4proto::v1::common::BuySell value) {
   _internal_set_buy_sell(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.buy_sell)
}
inline ::t4proto::v1::common::BuySell OrderUpdate::_internal_buy_sell() const {
  return static_cast<::t4proto::v1::common::BuySell>(_impl_.buy_sell_);
}
inline void OrderUpdate::_internal_set_buy_sell(::t4proto::v1::common::BuySell value) {
  ;
  _impl_.buy_sell_ = value;
}

// .t4proto.v1.common.PriceType price_type = 24;
inline void OrderUpdate::clear_price_type() {
  _impl_.price_type_ = 0;
}
inline ::t4proto::v1::common::PriceType OrderUpdate::price_type() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.price_type)
  return _internal_price_type();
}
inline void OrderUpdate::set_price_type(::t4proto::v1::common::PriceType value) {
   _internal_set_price_type(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.price_type)
}
inline ::t4proto::v1::common::PriceType OrderUpdate::_internal_price_type() const {
  return static_cast<::t4proto::v1::common::PriceType>(_impl_.price_type_);
}
inline void OrderUpdate::_internal_set_price_type(::t4proto::v1::common::PriceType value) {
  ;
  _impl_.price_type_ = value;
}

// .t4proto.v1.common.TimeType time_type = 25;
inline void OrderUpdate::clear_time_type() {
  _impl_.time_type_ = 0;
}
inline ::t4proto::v1::common::TimeType OrderUpdate::time_type() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.time_type)
  return _internal_time_type();
}
inline void OrderUpdate::set_time_type(::t4proto::v1::common::TimeType value) {
   _internal_set_time_type(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.time_type)
}
inline ::t4proto::v1::common::TimeType OrderUpdate::_internal_time_type() const {
  return static_cast<::t4proto::v1::common::TimeType>(_impl_.time_type_);
}
inline void OrderUpdate::_internal_set_time_type(::t4proto::v1::common::TimeType value) {
  ;
  _impl_.time_type_ = value;
}

// int32 current_volume = 26;
inline void OrderUpdate::clear_current_volume() {
  _impl_.current_volume_ = 0;
}
inline ::int32_t OrderUpdate::current_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.current_volume)
  return _internal_current_volume();
}
inline void OrderUpdate::set_current_volume(::int32_t value) {
  _internal_set_current_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.current_volume)
}
inline ::int32_t OrderUpdate::_internal_current_volume() const {
  return _impl_.current_volume_;
}
inline void OrderUpdate::_internal_set_current_volume(::int32_t value) {
  ;
  _impl_.current_volume_ = value;
}

// .t4proto.v1.common.Price current_limit_price = 27;
inline bool OrderUpdate::_internal_has_current_limit_price() const {
  return this != internal_default_instance() && _impl_.current_limit_price_ != nullptr;
}
inline bool OrderUpdate::has_current_limit_price() const {
  return _internal_has_current_limit_price();
}
inline const ::t4proto::v1::common::Price& OrderUpdate::_internal_current_limit_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.current_limit_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& OrderUpdate::current_limit_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.current_limit_price)
  return _internal_current_limit_price();
}
inline void OrderUpdate::unsafe_arena_set_allocated_current_limit_price(
    ::t4proto::v1::common::Price* current_limit_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_limit_price_);
  }
  _impl_.current_limit_price_ = current_limit_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdate.current_limit_price)
}
inline ::t4proto::v1::common::Price* OrderUpdate::release_current_limit_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.current_limit_price_;
  _impl_.current_limit_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdate::unsafe_arena_release_current_limit_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.current_limit_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.current_limit_price_;
  _impl_.current_limit_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdate::_internal_mutable_current_limit_price() {
  
  if (_impl_.current_limit_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.current_limit_price_ = p;
  }
  return _impl_.current_limit_price_;
}
inline ::t4proto::v1::common::Price* OrderUpdate::mutable_current_limit_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_current_limit_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.current_limit_price)
  return _msg;
}
inline void OrderUpdate::set_allocated_current_limit_price(::t4proto::v1::common::Price* current_limit_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_limit_price_);
  }
  if (current_limit_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_limit_price));
    if (message_arena != submessage_arena) {
      current_limit_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_limit_price, submessage_arena);
    }

  } else {

  }
  _impl_.current_limit_price_ = current_limit_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.current_limit_price)
}

// .t4proto.v1.common.Price current_stop_price = 28;
inline bool OrderUpdate::_internal_has_current_stop_price() const {
  return this != internal_default_instance() && _impl_.current_stop_price_ != nullptr;
}
inline bool OrderUpdate::has_current_stop_price() const {
  return _internal_has_current_stop_price();
}
inline const ::t4proto::v1::common::Price& OrderUpdate::_internal_current_stop_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.current_stop_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& OrderUpdate::current_stop_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.current_stop_price)
  return _internal_current_stop_price();
}
inline void OrderUpdate::unsafe_arena_set_allocated_current_stop_price(
    ::t4proto::v1::common::Price* current_stop_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_stop_price_);
  }
  _impl_.current_stop_price_ = current_stop_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdate.current_stop_price)
}
inline ::t4proto::v1::common::Price* OrderUpdate::release_current_stop_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.current_stop_price_;
  _impl_.current_stop_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdate::unsafe_arena_release_current_stop_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.current_stop_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.current_stop_price_;
  _impl_.current_stop_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdate::_internal_mutable_current_stop_price() {
  
  if (_impl_.current_stop_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.current_stop_price_ = p;
  }
  return _impl_.current_stop_price_;
}
inline ::t4proto::v1::common::Price* OrderUpdate::mutable_current_stop_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_current_stop_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.current_stop_price)
  return _msg;
}
inline void OrderUpdate::set_allocated_current_stop_price(::t4proto::v1::common::Price* current_stop_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.current_stop_price_);
  }
  if (current_stop_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(current_stop_price));
    if (message_arena != submessage_arena) {
      current_stop_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, current_stop_price, submessage_arena);
    }

  } else {

  }
  _impl_.current_stop_price_ = current_stop_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.current_stop_price)
}

// int32 new_volume = 29;
inline void OrderUpdate::clear_new_volume() {
  _impl_.new_volume_ = 0;
}
inline ::int32_t OrderUpdate::new_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.new_volume)
  return _internal_new_volume();
}
inline void OrderUpdate::set_new_volume(::int32_t value) {
  _internal_set_new_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.new_volume)
}
inline ::int32_t OrderUpdate::_internal_new_volume() const {
  return _impl_.new_volume_;
}
inline void OrderUpdate::_internal_set_new_volume(::int32_t value) {
  ;
  _impl_.new_volume_ = value;
}

// .t4proto.v1.common.Price new_limit_price = 30;
inline bool OrderUpdate::_internal_has_new_limit_price() const {
  return this != internal_default_instance() && _impl_.new_limit_price_ != nullptr;
}
inline bool OrderUpdate::has_new_limit_price() const {
  return _internal_has_new_limit_price();
}
inline const ::t4proto::v1::common::Price& OrderUpdate::_internal_new_limit_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.new_limit_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& OrderUpdate::new_limit_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.new_limit_price)
  return _internal_new_limit_price();
}
inline void OrderUpdate::unsafe_arena_set_allocated_new_limit_price(
    ::t4proto::v1::common::Price* new_limit_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_limit_price_);
  }
  _impl_.new_limit_price_ = new_limit_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdate.new_limit_price)
}
inline ::t4proto::v1::common::Price* OrderUpdate::release_new_limit_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.new_limit_price_;
  _impl_.new_limit_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdate::unsafe_arena_release_new_limit_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.new_limit_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.new_limit_price_;
  _impl_.new_limit_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdate::_internal_mutable_new_limit_price() {
  
  if (_impl_.new_limit_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.new_limit_price_ = p;
  }
  return _impl_.new_limit_price_;
}
inline ::t4proto::v1::common::Price* OrderUpdate::mutable_new_limit_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_new_limit_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.new_limit_price)
  return _msg;
}
inline void OrderUpdate::set_allocated_new_limit_price(::t4proto::v1::common::Price* new_limit_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_limit_price_);
  }
  if (new_limit_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_limit_price));
    if (message_arena != submessage_arena) {
      new_limit_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_limit_price, submessage_arena);
    }

  } else {

  }
  _impl_.new_limit_price_ = new_limit_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.new_limit_price)
}

// .t4proto.v1.common.Price new_stop_price = 31;
inline bool OrderUpdate::_internal_has_new_stop_price() const {
  return this != internal_default_instance() && _impl_.new_stop_price_ != nullptr;
}
inline bool OrderUpdate::has_new_stop_price() const {
  return _internal_has_new_stop_price();
}
inline const ::t4proto::v1::common::Price& OrderUpdate::_internal_new_stop_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.new_stop_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& OrderUpdate::new_stop_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.new_stop_price)
  return _internal_new_stop_price();
}
inline void OrderUpdate::unsafe_arena_set_allocated_new_stop_price(
    ::t4proto::v1::common::Price* new_stop_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_stop_price_);
  }
  _impl_.new_stop_price_ = new_stop_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdate.new_stop_price)
}
inline ::t4proto::v1::common::Price* OrderUpdate::release_new_stop_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.new_stop_price_;
  _impl_.new_stop_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdate::unsafe_arena_release_new_stop_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.new_stop_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.new_stop_price_;
  _impl_.new_stop_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdate::_internal_mutable_new_stop_price() {
  
  if (_impl_.new_stop_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.new_stop_price_ = p;
  }
  return _impl_.new_stop_price_;
}
inline ::t4proto::v1::common::Price* OrderUpdate::mutable_new_stop_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_new_stop_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.new_stop_price)
  return _msg;
}
inline void OrderUpdate::set_allocated_new_stop_price(::t4proto::v1::common::Price* new_stop_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.new_stop_price_);
  }
  if (new_stop_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(new_stop_price));
    if (message_arena != submessage_arena) {
      new_stop_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_stop_price, submessage_arena);
    }

  } else {

  }
  _impl_.new_stop_price_ = new_stop_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.new_stop_price)
}

// .t4proto.v1.common.OpenClose open_close = 32;
inline void OrderUpdate::clear_open_close() {
  _impl_.open_close_ = 0;
}
inline ::t4proto::v1::common::OpenClose OrderUpdate::open_close() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.open_close)
  return _internal_open_close();
}
inline void OrderUpdate::set_open_close(::t4proto::v1::common::OpenClose value) {
   _internal_set_open_close(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.open_close)
}
inline ::t4proto::v1::common::OpenClose OrderUpdate::_internal_open_close() const {
  return static_cast<::t4proto::v1::common::OpenClose>(_impl_.open_close_);
}
inline void OrderUpdate::_internal_set_open_close(::t4proto::v1::common::OpenClose value) {
  ;
  _impl_.open_close_ = value;
}

// string account_number = 33;
inline void OrderUpdate::clear_account_number() {
  _impl_.account_number_.ClearToEmpty();
}
inline const std::string& OrderUpdate::account_number() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.account_number)
  return _internal_account_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_account_number(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_number_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.account_number)
}
inline std::string* OrderUpdate::mutable_account_number() {
  std::string* _s = _internal_mutable_account_number();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.account_number)
  return _s;
}
inline const std::string& OrderUpdate::_internal_account_number() const {
  return _impl_.account_number_.Get();
}
inline void OrderUpdate::_internal_set_account_number(const std::string& value) {
  ;


  _impl_.account_number_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_account_number() {
  ;
  return _impl_.account_number_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_account_number() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.account_number)
  return _impl_.account_number_.Release();
}
inline void OrderUpdate::set_allocated_account_number(std::string* value) {
  _impl_.account_number_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_number_.IsDefault()) {
          _impl_.account_number_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.account_number)
}

// .t4proto.v1.common.CTI cti = 34;
inline void OrderUpdate::clear_cti() {
  _impl_.cti_ = 0;
}
inline ::t4proto::v1::common::CTI OrderUpdate::cti() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.cti)
  return _internal_cti();
}
inline void OrderUpdate::set_cti(::t4proto::v1::common::CTI value) {
   _internal_set_cti(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.cti)
}
inline ::t4proto::v1::common::CTI OrderUpdate::_internal_cti() const {
  return static_cast<::t4proto::v1::common::CTI>(_impl_.cti_);
}
inline void OrderUpdate::_internal_set_cti(::t4proto::v1::common::CTI value) {
  ;
  _impl_.cti_ = value;
}

// .t4proto.v1.common.Origin origin = 35;
inline void OrderUpdate::clear_origin() {
  _impl_.origin_ = 0;
}
inline ::t4proto::v1::common::Origin OrderUpdate::origin() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.origin)
  return _internal_origin();
}
inline void OrderUpdate::set_origin(::t4proto::v1::common::Origin value) {
   _internal_set_origin(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.origin)
}
inline ::t4proto::v1::common::Origin OrderUpdate::_internal_origin() const {
  return static_cast<::t4proto::v1::common::Origin>(_impl_.origin_);
}
inline void OrderUpdate::_internal_set_origin(::t4proto::v1::common::Origin value) {
  ;
  _impl_.origin_ = value;
}

// .t4proto.v1.common.AccountCode account_code = 36;
inline void OrderUpdate::clear_account_code() {
  _impl_.account_code_ = 0;
}
inline ::t4proto::v1::common::AccountCode OrderUpdate::account_code() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.account_code)
  return _internal_account_code();
}
inline void OrderUpdate::set_account_code(::t4proto::v1::common::AccountCode value) {
   _internal_set_account_code(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.account_code)
}
inline ::t4proto::v1::common::AccountCode OrderUpdate::_internal_account_code() const {
  return static_cast<::t4proto::v1::common::AccountCode>(_impl_.account_code_);
}
inline void OrderUpdate::_internal_set_account_code(::t4proto::v1::common::AccountCode value) {
  ;
  _impl_.account_code_ = value;
}

// string member_allocation = 37;
inline void OrderUpdate::clear_member_allocation() {
  _impl_.member_allocation_.ClearToEmpty();
}
inline const std::string& OrderUpdate::member_allocation() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.member_allocation)
  return _internal_member_allocation();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_member_allocation(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.member_allocation_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.member_allocation)
}
inline std::string* OrderUpdate::mutable_member_allocation() {
  std::string* _s = _internal_mutable_member_allocation();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.member_allocation)
  return _s;
}
inline const std::string& OrderUpdate::_internal_member_allocation() const {
  return _impl_.member_allocation_.Get();
}
inline void OrderUpdate::_internal_set_member_allocation(const std::string& value) {
  ;


  _impl_.member_allocation_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_member_allocation() {
  ;
  return _impl_.member_allocation_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_member_allocation() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.member_allocation)
  return _impl_.member_allocation_.Release();
}
inline void OrderUpdate::set_allocated_member_allocation(std::string* value) {
  _impl_.member_allocation_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.member_allocation_.IsDefault()) {
          _impl_.member_allocation_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.member_allocation)
}

// string trader_allocation = 38;
inline void OrderUpdate::clear_trader_allocation() {
  _impl_.trader_allocation_.ClearToEmpty();
}
inline const std::string& OrderUpdate::trader_allocation() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.trader_allocation)
  return _internal_trader_allocation();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_trader_allocation(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.trader_allocation_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.trader_allocation)
}
inline std::string* OrderUpdate::mutable_trader_allocation() {
  std::string* _s = _internal_mutable_trader_allocation();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.trader_allocation)
  return _s;
}
inline const std::string& OrderUpdate::_internal_trader_allocation() const {
  return _impl_.trader_allocation_.Get();
}
inline void OrderUpdate::_internal_set_trader_allocation(const std::string& value) {
  ;


  _impl_.trader_allocation_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_trader_allocation() {
  ;
  return _impl_.trader_allocation_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_trader_allocation() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.trader_allocation)
  return _impl_.trader_allocation_.Release();
}
inline void OrderUpdate::set_allocated_trader_allocation(std::string* value) {
  _impl_.trader_allocation_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trader_allocation_.IsDefault()) {
          _impl_.trader_allocation_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.trader_allocation)
}

// string customer_reference = 39;
inline void OrderUpdate::clear_customer_reference() {
  _impl_.customer_reference_.ClearToEmpty();
}
inline const std::string& OrderUpdate::customer_reference() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.customer_reference)
  return _internal_customer_reference();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_customer_reference(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.customer_reference_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.customer_reference)
}
inline std::string* OrderUpdate::mutable_customer_reference() {
  std::string* _s = _internal_mutable_customer_reference();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.customer_reference)
  return _s;
}
inline const std::string& OrderUpdate::_internal_customer_reference() const {
  return _impl_.customer_reference_.Get();
}
inline void OrderUpdate::_internal_set_customer_reference(const std::string& value) {
  ;


  _impl_.customer_reference_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_customer_reference() {
  ;
  return _impl_.customer_reference_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_customer_reference() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.customer_reference)
  return _impl_.customer_reference_.Release();
}
inline void OrderUpdate::set_allocated_customer_reference(std::string* value) {
  _impl_.customer_reference_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.customer_reference_.IsDefault()) {
          _impl_.customer_reference_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.customer_reference)
}

// .t4proto.v1.common.CustOrderHandlingInstType cust_order_handling_inst = 40;
inline void OrderUpdate::clear_cust_order_handling_inst() {
  _impl_.cust_order_handling_inst_ = 0;
}
inline ::t4proto::v1::common::CustOrderHandlingInstType OrderUpdate::cust_order_handling_inst() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.cust_order_handling_inst)
  return _internal_cust_order_handling_inst();
}
inline void OrderUpdate::set_cust_order_handling_inst(::t4proto::v1::common::CustOrderHandlingInstType value) {
   _internal_set_cust_order_handling_inst(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.cust_order_handling_inst)
}
inline ::t4proto::v1::common::CustOrderHandlingInstType OrderUpdate::_internal_cust_order_handling_inst() const {
  return static_cast<::t4proto::v1::common::CustOrderHandlingInstType>(_impl_.cust_order_handling_inst_);
}
inline void OrderUpdate::_internal_set_cust_order_handling_inst(::t4proto::v1::common::CustOrderHandlingInstType value) {
  ;
  _impl_.cust_order_handling_inst_ = value;
}

// .t4proto.v1.common.AvgPriceIndicatorType avg_price_indicator = 41;
inline void OrderUpdate::clear_avg_price_indicator() {
  _impl_.avg_price_indicator_ = 0;
}
inline ::t4proto::v1::common::AvgPriceIndicatorType OrderUpdate::avg_price_indicator() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.avg_price_indicator)
  return _internal_avg_price_indicator();
}
inline void OrderUpdate::set_avg_price_indicator(::t4proto::v1::common::AvgPriceIndicatorType value) {
   _internal_set_avg_price_indicator(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.avg_price_indicator)
}
inline ::t4proto::v1::common::AvgPriceIndicatorType OrderUpdate::_internal_avg_price_indicator() const {
  return static_cast<::t4proto::v1::common::AvgPriceIndicatorType>(_impl_.avg_price_indicator_);
}
inline void OrderUpdate::_internal_set_avg_price_indicator(::t4proto::v1::common::AvgPriceIndicatorType value) {
  ;
  _impl_.avg_price_indicator_ = value;
}

// string avg_price_group_id = 42;
inline void OrderUpdate::clear_avg_price_group_id() {
  _impl_.avg_price_group_id_.ClearToEmpty();
}
inline const std::string& OrderUpdate::avg_price_group_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.avg_price_group_id)
  return _internal_avg_price_group_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_avg_price_group_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.avg_price_group_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.avg_price_group_id)
}
inline std::string* OrderUpdate::mutable_avg_price_group_id() {
  std::string* _s = _internal_mutable_avg_price_group_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.avg_price_group_id)
  return _s;
}
inline const std::string& OrderUpdate::_internal_avg_price_group_id() const {
  return _impl_.avg_price_group_id_.Get();
}
inline void OrderUpdate::_internal_set_avg_price_group_id(const std::string& value) {
  ;


  _impl_.avg_price_group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_avg_price_group_id() {
  ;
  return _impl_.avg_price_group_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_avg_price_group_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.avg_price_group_id)
  return _impl_.avg_price_group_id_.Release();
}
inline void OrderUpdate::set_allocated_avg_price_group_id(std::string* value) {
  _impl_.avg_price_group_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.avg_price_group_id_.IsDefault()) {
          _impl_.avg_price_group_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.avg_price_group_id)
}

// .t4proto.v1.common.ClearingTradePriceType clearing_trade_price_type = 43;
inline void OrderUpdate::clear_clearing_trade_price_type() {
  _impl_.clearing_trade_price_type_ = 0;
}
inline ::t4proto::v1::common::ClearingTradePriceType OrderUpdate::clearing_trade_price_type() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.clearing_trade_price_type)
  return _internal_clearing_trade_price_type();
}
inline void OrderUpdate::set_clearing_trade_price_type(::t4proto::v1::common::ClearingTradePriceType value) {
   _internal_set_clearing_trade_price_type(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.clearing_trade_price_type)
}
inline ::t4proto::v1::common::ClearingTradePriceType OrderUpdate::_internal_clearing_trade_price_type() const {
  return static_cast<::t4proto::v1::common::ClearingTradePriceType>(_impl_.clearing_trade_price_type_);
}
inline void OrderUpdate::_internal_set_clearing_trade_price_type(::t4proto::v1::common::ClearingTradePriceType value) {
  ;
  _impl_.clearing_trade_price_type_ = value;
}

// .t4proto.v1.common.BillingFee billing_fee = 44;
inline void OrderUpdate::clear_billing_fee() {
  _impl_.billing_fee_ = 0;
}
inline ::t4proto::v1::common::BillingFee OrderUpdate::billing_fee() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.billing_fee)
  return _internal_billing_fee();
}
inline void OrderUpdate::set_billing_fee(::t4proto::v1::common::BillingFee value) {
   _internal_set_billing_fee(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.billing_fee)
}
inline ::t4proto::v1::common::BillingFee OrderUpdate::_internal_billing_fee() const {
  return static_cast<::t4proto::v1::common::BillingFee>(_impl_.billing_fee_);
}
inline void OrderUpdate::_internal_set_billing_fee(::t4proto::v1::common::BillingFee value) {
  ;
  _impl_.billing_fee_ = value;
}

// string omnibus_account = 45;
inline void OrderUpdate::clear_omnibus_account() {
  _impl_.omnibus_account_.ClearToEmpty();
}
inline const std::string& OrderUpdate::omnibus_account() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.omnibus_account)
  return _internal_omnibus_account();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_omnibus_account(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.omnibus_account_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.omnibus_account)
}
inline std::string* OrderUpdate::mutable_omnibus_account() {
  std::string* _s = _internal_mutable_omnibus_account();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.omnibus_account)
  return _s;
}
inline const std::string& OrderUpdate::_internal_omnibus_account() const {
  return _impl_.omnibus_account_.Get();
}
inline void OrderUpdate::_internal_set_omnibus_account(const std::string& value) {
  ;


  _impl_.omnibus_account_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_omnibus_account() {
  ;
  return _impl_.omnibus_account_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_omnibus_account() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.omnibus_account)
  return _impl_.omnibus_account_.Release();
}
inline void OrderUpdate::set_allocated_omnibus_account(std::string* value) {
  _impl_.omnibus_account_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.omnibus_account_.IsDefault()) {
          _impl_.omnibus_account_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.omnibus_account)
}

// string executing_group_id = 46;
inline void OrderUpdate::clear_executing_group_id() {
  _impl_.executing_group_id_.ClearToEmpty();
}
inline const std::string& OrderUpdate::executing_group_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.executing_group_id)
  return _internal_executing_group_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_executing_group_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.executing_group_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.executing_group_id)
}
inline std::string* OrderUpdate::mutable_executing_group_id() {
  std::string* _s = _internal_mutable_executing_group_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.executing_group_id)
  return _s;
}
inline const std::string& OrderUpdate::_internal_executing_group_id() const {
  return _impl_.executing_group_id_.Get();
}
inline void OrderUpdate::_internal_set_executing_group_id(const std::string& value) {
  ;


  _impl_.executing_group_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_executing_group_id() {
  ;
  return _impl_.executing_group_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_executing_group_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.executing_group_id)
  return _impl_.executing_group_id_.Release();
}
inline void OrderUpdate::set_allocated_executing_group_id(std::string* value) {
  _impl_.executing_group_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.executing_group_id_.IsDefault()) {
          _impl_.executing_group_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.executing_group_id)
}

// string tag = 47;
inline void OrderUpdate::clear_tag() {
  _impl_.tag_.ClearToEmpty();
}
inline const std::string& OrderUpdate::tag() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.tag)
  return _internal_tag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_tag(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.tag_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.tag)
}
inline std::string* OrderUpdate::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.tag)
  return _s;
}
inline const std::string& OrderUpdate::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void OrderUpdate::_internal_set_tag(const std::string& value) {
  ;


  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_tag() {
  ;
  return _impl_.tag_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_tag() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.tag)
  return _impl_.tag_.Release();
}
inline void OrderUpdate::set_allocated_tag(std::string* value) {
  _impl_.tag_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tag_.IsDefault()) {
          _impl_.tag_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.tag)
}

// int32 total_fill_volume = 48;
inline void OrderUpdate::clear_total_fill_volume() {
  _impl_.total_fill_volume_ = 0;
}
inline ::int32_t OrderUpdate::total_fill_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.total_fill_volume)
  return _internal_total_fill_volume();
}
inline void OrderUpdate::set_total_fill_volume(::int32_t value) {
  _internal_set_total_fill_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.total_fill_volume)
}
inline ::int32_t OrderUpdate::_internal_total_fill_volume() const {
  return _impl_.total_fill_volume_;
}
inline void OrderUpdate::_internal_set_total_fill_volume(::int32_t value) {
  ;
  _impl_.total_fill_volume_ = value;
}

// int32 working_volume = 49;
inline void OrderUpdate::clear_working_volume() {
  _impl_.working_volume_ = 0;
}
inline ::int32_t OrderUpdate::working_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.working_volume)
  return _internal_working_volume();
}
inline void OrderUpdate::set_working_volume(::int32_t value) {
  _internal_set_working_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.working_volume)
}
inline ::int32_t OrderUpdate::_internal_working_volume() const {
  return _impl_.working_volume_;
}
inline void OrderUpdate::_internal_set_working_volume(::int32_t value) {
  ;
  _impl_.working_volume_ = value;
}

// int32 exchange_total_fill_volume = 50;
inline void OrderUpdate::clear_exchange_total_fill_volume() {
  _impl_.exchange_total_fill_volume_ = 0;
}
inline ::int32_t OrderUpdate::exchange_total_fill_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.exchange_total_fill_volume)
  return _internal_exchange_total_fill_volume();
}
inline void OrderUpdate::set_exchange_total_fill_volume(::int32_t value) {
  _internal_set_exchange_total_fill_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.exchange_total_fill_volume)
}
inline ::int32_t OrderUpdate::_internal_exchange_total_fill_volume() const {
  return _impl_.exchange_total_fill_volume_;
}
inline void OrderUpdate::_internal_set_exchange_total_fill_volume(::int32_t value) {
  ;
  _impl_.exchange_total_fill_volume_ = value;
}

// .t4proto.v1.common.Price trail_price = 51;
inline bool OrderUpdate::_internal_has_trail_price() const {
  return this != internal_default_instance() && _impl_.trail_price_ != nullptr;
}
inline bool OrderUpdate::has_trail_price() const {
  return _internal_has_trail_price();
}
inline const ::t4proto::v1::common::Price& OrderUpdate::_internal_trail_price() const {
  const ::t4proto::v1::common::Price* p = _impl_.trail_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::common::Price&>(
      ::t4proto::v1::common::_Price_default_instance_);
}
inline const ::t4proto::v1::common::Price& OrderUpdate::trail_price() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.trail_price)
  return _internal_trail_price();
}
inline void OrderUpdate::unsafe_arena_set_allocated_trail_price(
    ::t4proto::v1::common::Price* trail_price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trail_price_);
  }
  _impl_.trail_price_ = trail_price;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdate.trail_price)
}
inline ::t4proto::v1::common::Price* OrderUpdate::release_trail_price() {
  
  ::t4proto::v1::common::Price* temp = _impl_.trail_price_;
  _impl_.trail_price_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdate::unsafe_arena_release_trail_price() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.trail_price)
  
  ::t4proto::v1::common::Price* temp = _impl_.trail_price_;
  _impl_.trail_price_ = nullptr;
  return temp;
}
inline ::t4proto::v1::common::Price* OrderUpdate::_internal_mutable_trail_price() {
  
  if (_impl_.trail_price_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::common::Price>(GetArenaForAllocation());
    _impl_.trail_price_ = p;
  }
  return _impl_.trail_price_;
}
inline ::t4proto::v1::common::Price* OrderUpdate::mutable_trail_price() {
  ::t4proto::v1::common::Price* _msg = _internal_mutable_trail_price();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.trail_price)
  return _msg;
}
inline void OrderUpdate::set_allocated_trail_price(::t4proto::v1::common::Price* trail_price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.trail_price_);
  }
  if (trail_price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(trail_price));
    if (message_arena != submessage_arena) {
      trail_price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trail_price, submessage_arena);
    }

  } else {

  }
  _impl_.trail_price_ = trail_price;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.trail_price)
}

// int32 trail_revision_interval = 52;
inline void OrderUpdate::clear_trail_revision_interval() {
  _impl_.trail_revision_interval_ = 0;
}
inline ::int32_t OrderUpdate::trail_revision_interval() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.trail_revision_interval)
  return _internal_trail_revision_interval();
}
inline void OrderUpdate::set_trail_revision_interval(::int32_t value) {
  _internal_set_trail_revision_interval(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.trail_revision_interval)
}
inline ::int32_t OrderUpdate::_internal_trail_revision_interval() const {
  return _impl_.trail_revision_interval_;
}
inline void OrderUpdate::_internal_set_trail_revision_interval(::int32_t value) {
  ;
  _impl_.trail_revision_interval_ = value;
}

// int32 trail_revision_change = 53;
inline void OrderUpdate::clear_trail_revision_change() {
  _impl_.trail_revision_change_ = 0;
}
inline ::int32_t OrderUpdate::trail_revision_change() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.trail_revision_change)
  return _internal_trail_revision_change();
}
inline void OrderUpdate::set_trail_revision_change(::int32_t value) {
  _internal_set_trail_revision_change(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.trail_revision_change)
}
inline ::int32_t OrderUpdate::_internal_trail_revision_change() const {
  return _impl_.trail_revision_change_;
}
inline void OrderUpdate::_internal_set_trail_revision_change(::int32_t value) {
  ;
  _impl_.trail_revision_change_ = value;
}

// .t4proto.v1.common.OrderLink order_link = 54;
inline void OrderUpdate::clear_order_link() {
  _impl_.order_link_ = 0;
}
inline ::t4proto::v1::common::OrderLink OrderUpdate::order_link() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.order_link)
  return _internal_order_link();
}
inline void OrderUpdate::set_order_link(::t4proto::v1::common::OrderLink value) {
   _internal_set_order_link(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.order_link)
}
inline ::t4proto::v1::common::OrderLink OrderUpdate::_internal_order_link() const {
  return static_cast<::t4proto::v1::common::OrderLink>(_impl_.order_link_);
}
inline void OrderUpdate::_internal_set_order_link(::t4proto::v1::common::OrderLink value) {
  ;
  _impl_.order_link_ = value;
}

// string orders_linked = 55;
inline void OrderUpdate::clear_orders_linked() {
  _impl_.orders_linked_.ClearToEmpty();
}
inline const std::string& OrderUpdate::orders_linked() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.orders_linked)
  return _internal_orders_linked();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_orders_linked(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.orders_linked_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.orders_linked)
}
inline std::string* OrderUpdate::mutable_orders_linked() {
  std::string* _s = _internal_mutable_orders_linked();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.orders_linked)
  return _s;
}
inline const std::string& OrderUpdate::_internal_orders_linked() const {
  return _impl_.orders_linked_.Get();
}
inline void OrderUpdate::_internal_set_orders_linked(const std::string& value) {
  ;


  _impl_.orders_linked_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_orders_linked() {
  ;
  return _impl_.orders_linked_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_orders_linked() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.orders_linked)
  return _impl_.orders_linked_.Release();
}
inline void OrderUpdate::set_allocated_orders_linked(std::string* value) {
  _impl_.orders_linked_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.orders_linked_.IsDefault()) {
          _impl_.orders_linked_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.orders_linked)
}

// .t4proto.v1.common.ActivationType activation_type = 56;
inline void OrderUpdate::clear_activation_type() {
  _impl_.activation_type_ = 0;
}
inline ::t4proto::v1::common::ActivationType OrderUpdate::activation_type() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.activation_type)
  return _internal_activation_type();
}
inline void OrderUpdate::set_activation_type(::t4proto::v1::common::ActivationType value) {
   _internal_set_activation_type(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.activation_type)
}
inline ::t4proto::v1::common::ActivationType OrderUpdate::_internal_activation_type() const {
  return static_cast<::t4proto::v1::common::ActivationType>(_impl_.activation_type_);
}
inline void OrderUpdate::_internal_set_activation_type(::t4proto::v1::common::ActivationType value) {
  ;
  _impl_.activation_type_ = value;
}

// .t4proto.v1.common.PrimaryUserType primary_user = 57;
inline void OrderUpdate::clear_primary_user() {
  _impl_.primary_user_ = 0;
}
inline ::t4proto::v1::common::PrimaryUserType OrderUpdate::primary_user() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.primary_user)
  return _internal_primary_user();
}
inline void OrderUpdate::set_primary_user(::t4proto::v1::common::PrimaryUserType value) {
   _internal_set_primary_user(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.primary_user)
}
inline ::t4proto::v1::common::PrimaryUserType OrderUpdate::_internal_primary_user() const {
  return static_cast<::t4proto::v1::common::PrimaryUserType>(_impl_.primary_user_);
}
inline void OrderUpdate::_internal_set_primary_user(::t4proto::v1::common::PrimaryUserType value) {
  ;
  _impl_.primary_user_ = value;
}

// int32 current_max_show = 58;
inline void OrderUpdate::clear_current_max_show() {
  _impl_.current_max_show_ = 0;
}
inline ::int32_t OrderUpdate::current_max_show() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.current_max_show)
  return _internal_current_max_show();
}
inline void OrderUpdate::set_current_max_show(::int32_t value) {
  _internal_set_current_max_show(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.current_max_show)
}
inline ::int32_t OrderUpdate::_internal_current_max_show() const {
  return _impl_.current_max_show_;
}
inline void OrderUpdate::_internal_set_current_max_show(::int32_t value) {
  ;
  _impl_.current_max_show_ = value;
}

// int32 new_max_show = 59;
inline void OrderUpdate::clear_new_max_show() {
  _impl_.new_max_show_ = 0;
}
inline ::int32_t OrderUpdate::new_max_show() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.new_max_show)
  return _internal_new_max_show();
}
inline void OrderUpdate::set_new_max_show(::int32_t value) {
  _internal_set_new_max_show(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.new_max_show)
}
inline ::int32_t OrderUpdate::_internal_new_max_show() const {
  return _impl_.new_max_show_;
}
inline void OrderUpdate::_internal_set_new_max_show(::int32_t value) {
  ;
  _impl_.new_max_show_ = value;
}

// string routing_user_id = 60;
inline void OrderUpdate::clear_routing_user_id() {
  _impl_.routing_user_id_.ClearToEmpty();
}
inline const std::string& OrderUpdate::routing_user_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.routing_user_id)
  return _internal_routing_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_routing_user_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.routing_user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.routing_user_id)
}
inline std::string* OrderUpdate::mutable_routing_user_id() {
  std::string* _s = _internal_mutable_routing_user_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.routing_user_id)
  return _s;
}
inline const std::string& OrderUpdate::_internal_routing_user_id() const {
  return _impl_.routing_user_id_.Get();
}
inline void OrderUpdate::_internal_set_routing_user_id(const std::string& value) {
  ;


  _impl_.routing_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_routing_user_id() {
  ;
  return _impl_.routing_user_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_routing_user_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.routing_user_id)
  return _impl_.routing_user_id_.Release();
}
inline void OrderUpdate::set_allocated_routing_user_id(std::string* value) {
  _impl_.routing_user_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.routing_user_id_.IsDefault()) {
          _impl_.routing_user_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.routing_user_id)
}

// string routing_user_name = 61;
inline void OrderUpdate::clear_routing_user_name() {
  _impl_.routing_user_name_.ClearToEmpty();
}
inline const std::string& OrderUpdate::routing_user_name() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.routing_user_name)
  return _internal_routing_user_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_routing_user_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.routing_user_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.routing_user_name)
}
inline std::string* OrderUpdate::mutable_routing_user_name() {
  std::string* _s = _internal_mutable_routing_user_name();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.routing_user_name)
  return _s;
}
inline const std::string& OrderUpdate::_internal_routing_user_name() const {
  return _impl_.routing_user_name_.Get();
}
inline void OrderUpdate::_internal_set_routing_user_name(const std::string& value) {
  ;


  _impl_.routing_user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_routing_user_name() {
  ;
  return _impl_.routing_user_name_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_routing_user_name() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.routing_user_name)
  return _impl_.routing_user_name_.Release();
}
inline void OrderUpdate::set_allocated_routing_user_name(std::string* value) {
  _impl_.routing_user_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.routing_user_name_.IsDefault()) {
          _impl_.routing_user_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.routing_user_name)
}

// .t4proto.v1.common.OrderSource order_source = 62;
inline void OrderUpdate::clear_order_source() {
  _impl_.order_source_ = 0;
}
inline ::t4proto::v1::common::OrderSource OrderUpdate::order_source() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.order_source)
  return _internal_order_source();
}
inline void OrderUpdate::set_order_source(::t4proto::v1::common::OrderSource value) {
   _internal_set_order_source(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.order_source)
}
inline ::t4proto::v1::common::OrderSource OrderUpdate::_internal_order_source() const {
  return static_cast<::t4proto::v1::common::OrderSource>(_impl_.order_source_);
}
inline void OrderUpdate::_internal_set_order_source(::t4proto::v1::common::OrderSource value) {
  ;
  _impl_.order_source_ = value;
}

// .t4proto.v1.common.OrderSourceMethod order_source_method = 63;
inline void OrderUpdate::clear_order_source_method() {
  _impl_.order_source_method_ = 0;
}
inline ::t4proto::v1::common::OrderSourceMethod OrderUpdate::order_source_method() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.order_source_method)
  return _internal_order_source_method();
}
inline void OrderUpdate::set_order_source_method(::t4proto::v1::common::OrderSourceMethod value) {
   _internal_set_order_source_method(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.order_source_method)
}
inline ::t4proto::v1::common::OrderSourceMethod OrderUpdate::_internal_order_source_method() const {
  return static_cast<::t4proto::v1::common::OrderSourceMethod>(_impl_.order_source_method_);
}
inline void OrderUpdate::_internal_set_order_source_method(::t4proto::v1::common::OrderSourceMethod value) {
  ;
  _impl_.order_source_method_ = value;
}

// .t4proto.v1.common.ApplicationType app_type = 64;
inline void OrderUpdate::clear_app_type() {
  _impl_.app_type_ = 0;
}
inline ::t4proto::v1::common::ApplicationType OrderUpdate::app_type() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.app_type)
  return _internal_app_type();
}
inline void OrderUpdate::set_app_type(::t4proto::v1::common::ApplicationType value) {
   _internal_set_app_type(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.app_type)
}
inline ::t4proto::v1::common::ApplicationType OrderUpdate::_internal_app_type() const {
  return static_cast<::t4proto::v1::common::ApplicationType>(_impl_.app_type_);
}
inline void OrderUpdate::_internal_set_app_type(::t4proto::v1::common::ApplicationType value) {
  ;
  _impl_.app_type_ = value;
}

// .t4proto.v1.common.MasterType master_type = 65;
inline void OrderUpdate::clear_master_type() {
  _impl_.master_type_ = 0;
}
inline ::t4proto::v1::common::MasterType OrderUpdate::master_type() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.master_type)
  return _internal_master_type();
}
inline void OrderUpdate::set_master_type(::t4proto::v1::common::MasterType value) {
   _internal_set_master_type(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.master_type)
}
inline ::t4proto::v1::common::MasterType OrderUpdate::_internal_master_type() const {
  return static_cast<::t4proto::v1::common::MasterType>(_impl_.master_type_);
}
inline void OrderUpdate::_internal_set_master_type(::t4proto::v1::common::MasterType value) {
  ;
  _impl_.master_type_ = value;
}

// string tag_cl_ord_id = 66;
inline void OrderUpdate::clear_tag_cl_ord_id() {
  _impl_.tag_cl_ord_id_.ClearToEmpty();
}
inline const std::string& OrderUpdate::tag_cl_ord_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.tag_cl_ord_id)
  return _internal_tag_cl_ord_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_tag_cl_ord_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.tag_cl_ord_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.tag_cl_ord_id)
}
inline std::string* OrderUpdate::mutable_tag_cl_ord_id() {
  std::string* _s = _internal_mutable_tag_cl_ord_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.tag_cl_ord_id)
  return _s;
}
inline const std::string& OrderUpdate::_internal_tag_cl_ord_id() const {
  return _impl_.tag_cl_ord_id_.Get();
}
inline void OrderUpdate::_internal_set_tag_cl_ord_id(const std::string& value) {
  ;


  _impl_.tag_cl_ord_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_tag_cl_ord_id() {
  ;
  return _impl_.tag_cl_ord_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_tag_cl_ord_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.tag_cl_ord_id)
  return _impl_.tag_cl_ord_id_.Release();
}
inline void OrderUpdate::set_allocated_tag_cl_ord_id(std::string* value) {
  _impl_.tag_cl_ord_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tag_cl_ord_id_.IsDefault()) {
          _impl_.tag_cl_ord_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.tag_cl_ord_id)
}

// string tag_orig_cl_ord_id = 67;
inline void OrderUpdate::clear_tag_orig_cl_ord_id() {
  _impl_.tag_orig_cl_ord_id_.ClearToEmpty();
}
inline const std::string& OrderUpdate::tag_orig_cl_ord_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.tag_orig_cl_ord_id)
  return _internal_tag_orig_cl_ord_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_tag_orig_cl_ord_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.tag_orig_cl_ord_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.tag_orig_cl_ord_id)
}
inline std::string* OrderUpdate::mutable_tag_orig_cl_ord_id() {
  std::string* _s = _internal_mutable_tag_orig_cl_ord_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.tag_orig_cl_ord_id)
  return _s;
}
inline const std::string& OrderUpdate::_internal_tag_orig_cl_ord_id() const {
  return _impl_.tag_orig_cl_ord_id_.Get();
}
inline void OrderUpdate::_internal_set_tag_orig_cl_ord_id(const std::string& value) {
  ;


  _impl_.tag_orig_cl_ord_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_tag_orig_cl_ord_id() {
  ;
  return _impl_.tag_orig_cl_ord_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_tag_orig_cl_ord_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.tag_orig_cl_ord_id)
  return _impl_.tag_orig_cl_ord_id_.Release();
}
inline void OrderUpdate::set_allocated_tag_orig_cl_ord_id(std::string* value) {
  _impl_.tag_orig_cl_ord_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tag_orig_cl_ord_id_.IsDefault()) {
          _impl_.tag_orig_cl_ord_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.tag_orig_cl_ord_id)
}

// string tag_relation_id = 68;
inline void OrderUpdate::clear_tag_relation_id() {
  _impl_.tag_relation_id_.ClearToEmpty();
}
inline const std::string& OrderUpdate::tag_relation_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.tag_relation_id)
  return _internal_tag_relation_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_tag_relation_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.tag_relation_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.tag_relation_id)
}
inline std::string* OrderUpdate::mutable_tag_relation_id() {
  std::string* _s = _internal_mutable_tag_relation_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.tag_relation_id)
  return _s;
}
inline const std::string& OrderUpdate::_internal_tag_relation_id() const {
  return _impl_.tag_relation_id_.Get();
}
inline void OrderUpdate::_internal_set_tag_relation_id(const std::string& value) {
  ;


  _impl_.tag_relation_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_tag_relation_id() {
  ;
  return _impl_.tag_relation_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_tag_relation_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.tag_relation_id)
  return _impl_.tag_relation_id_.Release();
}
inline void OrderUpdate::set_allocated_tag_relation_id(std::string* value) {
  _impl_.tag_relation_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tag_relation_id_.IsDefault()) {
          _impl_.tag_relation_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.tag_relation_id)
}

// string smp_id = 69;
inline void OrderUpdate::clear_smp_id() {
  _impl_.smp_id_.ClearToEmpty();
}
inline const std::string& OrderUpdate::smp_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.smp_id)
  return _internal_smp_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_smp_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.smp_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.smp_id)
}
inline std::string* OrderUpdate::mutable_smp_id() {
  std::string* _s = _internal_mutable_smp_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.smp_id)
  return _s;
}
inline const std::string& OrderUpdate::_internal_smp_id() const {
  return _impl_.smp_id_.Get();
}
inline void OrderUpdate::_internal_set_smp_id(const std::string& value) {
  ;


  _impl_.smp_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_smp_id() {
  ;
  return _impl_.smp_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_smp_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.smp_id)
  return _impl_.smp_id_.Release();
}
inline void OrderUpdate::set_allocated_smp_id(std::string* value) {
  _impl_.smp_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.smp_id_.IsDefault()) {
          _impl_.smp_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.smp_id)
}

// int32 sequence_order = 70;
inline void OrderUpdate::clear_sequence_order() {
  _impl_.sequence_order_ = 0;
}
inline ::int32_t OrderUpdate::sequence_order() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.sequence_order)
  return _internal_sequence_order();
}
inline void OrderUpdate::set_sequence_order(::int32_t value) {
  _internal_set_sequence_order(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.sequence_order)
}
inline ::int32_t OrderUpdate::_internal_sequence_order() const {
  return _impl_.sequence_order_;
}
inline void OrderUpdate::_internal_set_sequence_order(::int32_t value) {
  ;
  _impl_.sequence_order_ = value;
}

// string ats_regulatory_id = 71;
inline void OrderUpdate::clear_ats_regulatory_id() {
  _impl_.ats_regulatory_id_.ClearToEmpty();
}
inline const std::string& OrderUpdate::ats_regulatory_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.ats_regulatory_id)
  return _internal_ats_regulatory_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_ats_regulatory_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.ats_regulatory_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.ats_regulatory_id)
}
inline std::string* OrderUpdate::mutable_ats_regulatory_id() {
  std::string* _s = _internal_mutable_ats_regulatory_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.ats_regulatory_id)
  return _s;
}
inline const std::string& OrderUpdate::_internal_ats_regulatory_id() const {
  return _impl_.ats_regulatory_id_.Get();
}
inline void OrderUpdate::_internal_set_ats_regulatory_id(const std::string& value) {
  ;


  _impl_.ats_regulatory_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_ats_regulatory_id() {
  ;
  return _impl_.ats_regulatory_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_ats_regulatory_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.ats_regulatory_id)
  return _impl_.ats_regulatory_id_.Release();
}
inline void OrderUpdate::set_allocated_ats_regulatory_id(std::string* value) {
  _impl_.ats_regulatory_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ats_regulatory_id_.IsDefault()) {
          _impl_.ats_regulatory_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.ats_regulatory_id)
}

// int32 max_volume = 72;
inline void OrderUpdate::clear_max_volume() {
  _impl_.max_volume_ = 0;
}
inline ::int32_t OrderUpdate::max_volume() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.max_volume)
  return _internal_max_volume();
}
inline void OrderUpdate::set_max_volume(::int32_t value) {
  _internal_set_max_volume(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.max_volume)
}
inline ::int32_t OrderUpdate::_internal_max_volume() const {
  return _impl_.max_volume_;
}
inline void OrderUpdate::_internal_set_max_volume(::int32_t value) {
  ;
  _impl_.max_volume_ = value;
}

// string authorized_trader_id = 73;
inline void OrderUpdate::clear_authorized_trader_id() {
  _impl_.authorized_trader_id_.ClearToEmpty();
}
inline const std::string& OrderUpdate::authorized_trader_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.authorized_trader_id)
  return _internal_authorized_trader_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_authorized_trader_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.authorized_trader_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.authorized_trader_id)
}
inline std::string* OrderUpdate::mutable_authorized_trader_id() {
  std::string* _s = _internal_mutable_authorized_trader_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.authorized_trader_id)
  return _s;
}
inline const std::string& OrderUpdate::_internal_authorized_trader_id() const {
  return _impl_.authorized_trader_id_.Get();
}
inline void OrderUpdate::_internal_set_authorized_trader_id(const std::string& value) {
  ;


  _impl_.authorized_trader_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_authorized_trader_id() {
  ;
  return _impl_.authorized_trader_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_authorized_trader_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.authorized_trader_id)
  return _impl_.authorized_trader_id_.Release();
}
inline void OrderUpdate::set_allocated_authorized_trader_id(std::string* value) {
  _impl_.authorized_trader_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.authorized_trader_id_.IsDefault()) {
          _impl_.authorized_trader_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.authorized_trader_id)
}

// map<string, string> instruction_extra = 74;
inline int OrderUpdate::_internal_instruction_extra_size() const {
  return _impl_.instruction_extra_.size();
}
inline int OrderUpdate::instruction_extra_size() const {
  return _internal_instruction_extra_size();
}
inline void OrderUpdate::clear_instruction_extra() {
  _impl_.instruction_extra_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
OrderUpdate::_internal_instruction_extra() const {
  return _impl_.instruction_extra_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
OrderUpdate::instruction_extra() const {
  // @@protoc_insertion_point(field_map:t4proto.v1.orderrouting.OrderUpdate.instruction_extra)
  return _internal_instruction_extra();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
OrderUpdate::_internal_mutable_instruction_extra() {
  return _impl_.instruction_extra_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
OrderUpdate::mutable_instruction_extra() {
  // @@protoc_insertion_point(field_mutable_map:t4proto.v1.orderrouting.OrderUpdate.instruction_extra)
  return _internal_mutable_instruction_extra();
}

// .google.protobuf.Timestamp receive_time = 75;
inline bool OrderUpdate::_internal_has_receive_time() const {
  return this != internal_default_instance() && _impl_.receive_time_ != nullptr;
}
inline bool OrderUpdate::has_receive_time() const {
  return _internal_has_receive_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdate::_internal_receive_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.receive_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrderUpdate::receive_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.receive_time)
  return _internal_receive_time();
}
inline void OrderUpdate::unsafe_arena_set_allocated_receive_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* receive_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.receive_time_);
  }
  _impl_.receive_time_ = receive_time;
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdate.receive_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate::release_receive_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.receive_time_;
  _impl_.receive_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate::unsafe_arena_release_receive_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.receive_time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.receive_time_;
  _impl_.receive_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate::_internal_mutable_receive_time() {
  
  if (_impl_.receive_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.receive_time_ = p;
  }
  return _impl_.receive_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrderUpdate::mutable_receive_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_receive_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.receive_time)
  return _msg;
}
inline void OrderUpdate::set_allocated_receive_time(::PROTOBUF_NAMESPACE_ID::Timestamp* receive_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.receive_time_);
  }
  if (receive_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receive_time));
    if (message_arena != submessage_arena) {
      receive_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receive_time, submessage_arena);
    }

  } else {

  }
  _impl_.receive_time_ = receive_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.receive_time)
}

// string activation_details = 76;
inline void OrderUpdate::clear_activation_details() {
  _impl_.activation_details_.ClearToEmpty();
}
inline const std::string& OrderUpdate::activation_details() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.activation_details)
  return _internal_activation_details();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdate::set_activation_details(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.activation_details_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdate.activation_details)
}
inline std::string* OrderUpdate::mutable_activation_details() {
  std::string* _s = _internal_mutable_activation_details();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.activation_details)
  return _s;
}
inline const std::string& OrderUpdate::_internal_activation_details() const {
  return _impl_.activation_details_.Get();
}
inline void OrderUpdate::_internal_set_activation_details(const std::string& value) {
  ;


  _impl_.activation_details_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdate::_internal_mutable_activation_details() {
  ;
  return _impl_.activation_details_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdate::release_activation_details() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdate.activation_details)
  return _impl_.activation_details_.Release();
}
inline void OrderUpdate::set_allocated_activation_details(std::string* value) {
  _impl_.activation_details_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.activation_details_.IsDefault()) {
          _impl_.activation_details_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdate.activation_details)
}

// repeated .t4proto.v1.orderrouting.OrderUpdate.Trade trades = 77;
inline int OrderUpdate::_internal_trades_size() const {
  return _impl_.trades_.size();
}
inline int OrderUpdate::trades_size() const {
  return _internal_trades_size();
}
inline void OrderUpdate::clear_trades() {
  _impl_.trades_.Clear();
}
inline ::t4proto::v1::orderrouting::OrderUpdate_Trade* OrderUpdate::mutable_trades(int index) {
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.trades)
  return _impl_.trades_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderUpdate_Trade >*
OrderUpdate::mutable_trades() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.orderrouting.OrderUpdate.trades)
  return &_impl_.trades_;
}
inline const ::t4proto::v1::orderrouting::OrderUpdate_Trade& OrderUpdate::_internal_trades(int index) const {
  return _impl_.trades_.Get(index);
}
inline const ::t4proto::v1::orderrouting::OrderUpdate_Trade& OrderUpdate::trades(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.trades)
  return _internal_trades(index);
}
inline ::t4proto::v1::orderrouting::OrderUpdate_Trade* OrderUpdate::_internal_add_trades() {
  return _impl_.trades_.Add();
}
inline ::t4proto::v1::orderrouting::OrderUpdate_Trade* OrderUpdate::add_trades() {
  ::t4proto::v1::orderrouting::OrderUpdate_Trade* _add = _internal_add_trades();
  // @@protoc_insertion_point(field_add:t4proto.v1.orderrouting.OrderUpdate.trades)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderUpdate_Trade >&
OrderUpdate::trades() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.orderrouting.OrderUpdate.trades)
  return _impl_.trades_;
}

// repeated .t4proto.v1.orderrouting.OrderUpdate.TradeLeg trade_legs = 78;
inline int OrderUpdate::_internal_trade_legs_size() const {
  return _impl_.trade_legs_.size();
}
inline int OrderUpdate::trade_legs_size() const {
  return _internal_trade_legs_size();
}
inline void OrderUpdate::clear_trade_legs() {
  _impl_.trade_legs_.Clear();
}
inline ::t4proto::v1::orderrouting::OrderUpdate_TradeLeg* OrderUpdate::mutable_trade_legs(int index) {
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdate.trade_legs)
  return _impl_.trade_legs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderUpdate_TradeLeg >*
OrderUpdate::mutable_trade_legs() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.orderrouting.OrderUpdate.trade_legs)
  return &_impl_.trade_legs_;
}
inline const ::t4proto::v1::orderrouting::OrderUpdate_TradeLeg& OrderUpdate::_internal_trade_legs(int index) const {
  return _impl_.trade_legs_.Get(index);
}
inline const ::t4proto::v1::orderrouting::OrderUpdate_TradeLeg& OrderUpdate::trade_legs(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdate.trade_legs)
  return _internal_trade_legs(index);
}
inline ::t4proto::v1::orderrouting::OrderUpdate_TradeLeg* OrderUpdate::_internal_add_trade_legs() {
  return _impl_.trade_legs_.Add();
}
inline ::t4proto::v1::orderrouting::OrderUpdate_TradeLeg* OrderUpdate::add_trade_legs() {
  ::t4proto::v1::orderrouting::OrderUpdate_TradeLeg* _add = _internal_add_trade_legs();
  // @@protoc_insertion_point(field_add:t4proto.v1.orderrouting.OrderUpdate.trade_legs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderUpdate_TradeLeg >&
OrderUpdate::trade_legs() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.orderrouting.OrderUpdate.trade_legs)
  return _impl_.trade_legs_;
}

// -------------------------------------------------------------------

// OrderUpdateMultiMessage

// .t4proto.v1.orderrouting.OrderUpdate order_update = 3;
inline bool OrderUpdateMultiMessage::has_order_update() const {
  return payload_case() == kOrderUpdate;
}
inline bool OrderUpdateMultiMessage::_internal_has_order_update() const {
  return payload_case() == kOrderUpdate;
}
inline void OrderUpdateMultiMessage::set_has_order_update() {
  _impl_._oneof_case_[0] = kOrderUpdate;
}
inline void OrderUpdateMultiMessage::clear_order_update() {
  if (payload_case() == kOrderUpdate) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.order_update_;
    }
    clear_has_payload();
  }
}
inline ::t4proto::v1::orderrouting::OrderUpdate* OrderUpdateMultiMessage::release_order_update() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update)
  if (payload_case() == kOrderUpdate) {
    clear_has_payload();
    ::t4proto::v1::orderrouting::OrderUpdate* temp = _impl_.payload_.order_update_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.order_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::t4proto::v1::orderrouting::OrderUpdate& OrderUpdateMultiMessage::_internal_order_update() const {
  return payload_case() == kOrderUpdate
      ? *_impl_.payload_.order_update_
      : reinterpret_cast< ::t4proto::v1::orderrouting::OrderUpdate&>(::t4proto::v1::orderrouting::_OrderUpdate_default_instance_);
}
inline const ::t4proto::v1::orderrouting::OrderUpdate& OrderUpdateMultiMessage::order_update() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update)
  return _internal_order_update();
}
inline ::t4proto::v1::orderrouting::OrderUpdate* OrderUpdateMultiMessage::unsafe_arena_release_order_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update)
  if (payload_case() == kOrderUpdate) {
    clear_has_payload();
    ::t4proto::v1::orderrouting::OrderUpdate* temp = _impl_.payload_.order_update_;
    _impl_.payload_.order_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderUpdateMultiMessage::unsafe_arena_set_allocated_order_update(::t4proto::v1::orderrouting::OrderUpdate* order_update) {
  clear_payload();
  if (order_update) {
    set_has_order_update();
    _impl_.payload_.order_update_ = order_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update)
}
inline ::t4proto::v1::orderrouting::OrderUpdate* OrderUpdateMultiMessage::_internal_mutable_order_update() {
  if (payload_case() != kOrderUpdate) {
    clear_payload();
    set_has_order_update();
    _impl_.payload_.order_update_ = CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderUpdate >(GetArenaForAllocation());
  }
  return _impl_.payload_.order_update_;
}
inline ::t4proto::v1::orderrouting::OrderUpdate* OrderUpdateMultiMessage::mutable_order_update() {
  ::t4proto::v1::orderrouting::OrderUpdate* _msg = _internal_mutable_order_update();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update)
  return _msg;
}

// .t4proto.v1.orderrouting.OrderUpdateFailed order_update_failed = 4;
inline bool OrderUpdateMultiMessage::has_order_update_failed() const {
  return payload_case() == kOrderUpdateFailed;
}
inline bool OrderUpdateMultiMessage::_internal_has_order_update_failed() const {
  return payload_case() == kOrderUpdateFailed;
}
inline void OrderUpdateMultiMessage::set_has_order_update_failed() {
  _impl_._oneof_case_[0] = kOrderUpdateFailed;
}
inline void OrderUpdateMultiMessage::clear_order_update_failed() {
  if (payload_case() == kOrderUpdateFailed) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.order_update_failed_;
    }
    clear_has_payload();
  }
}
inline ::t4proto::v1::orderrouting::OrderUpdateFailed* OrderUpdateMultiMessage::release_order_update_failed() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_failed)
  if (payload_case() == kOrderUpdateFailed) {
    clear_has_payload();
    ::t4proto::v1::orderrouting::OrderUpdateFailed* temp = _impl_.payload_.order_update_failed_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.order_update_failed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::t4proto::v1::orderrouting::OrderUpdateFailed& OrderUpdateMultiMessage::_internal_order_update_failed() const {
  return payload_case() == kOrderUpdateFailed
      ? *_impl_.payload_.order_update_failed_
      : reinterpret_cast< ::t4proto::v1::orderrouting::OrderUpdateFailed&>(::t4proto::v1::orderrouting::_OrderUpdateFailed_default_instance_);
}
inline const ::t4proto::v1::orderrouting::OrderUpdateFailed& OrderUpdateMultiMessage::order_update_failed() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_failed)
  return _internal_order_update_failed();
}
inline ::t4proto::v1::orderrouting::OrderUpdateFailed* OrderUpdateMultiMessage::unsafe_arena_release_order_update_failed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_failed)
  if (payload_case() == kOrderUpdateFailed) {
    clear_has_payload();
    ::t4proto::v1::orderrouting::OrderUpdateFailed* temp = _impl_.payload_.order_update_failed_;
    _impl_.payload_.order_update_failed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderUpdateMultiMessage::unsafe_arena_set_allocated_order_update_failed(::t4proto::v1::orderrouting::OrderUpdateFailed* order_update_failed) {
  clear_payload();
  if (order_update_failed) {
    set_has_order_update_failed();
    _impl_.payload_.order_update_failed_ = order_update_failed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_failed)
}
inline ::t4proto::v1::orderrouting::OrderUpdateFailed* OrderUpdateMultiMessage::_internal_mutable_order_update_failed() {
  if (payload_case() != kOrderUpdateFailed) {
    clear_payload();
    set_has_order_update_failed();
    _impl_.payload_.order_update_failed_ = CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderUpdateFailed >(GetArenaForAllocation());
  }
  return _impl_.payload_.order_update_failed_;
}
inline ::t4proto::v1::orderrouting::OrderUpdateFailed* OrderUpdateMultiMessage::mutable_order_update_failed() {
  ::t4proto::v1::orderrouting::OrderUpdateFailed* _msg = _internal_mutable_order_update_failed();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_failed)
  return _msg;
}

// .t4proto.v1.orderrouting.OrderUpdateStatus order_update_status = 5;
inline bool OrderUpdateMultiMessage::has_order_update_status() const {
  return payload_case() == kOrderUpdateStatus;
}
inline bool OrderUpdateMultiMessage::_internal_has_order_update_status() const {
  return payload_case() == kOrderUpdateStatus;
}
inline void OrderUpdateMultiMessage::set_has_order_update_status() {
  _impl_._oneof_case_[0] = kOrderUpdateStatus;
}
inline void OrderUpdateMultiMessage::clear_order_update_status() {
  if (payload_case() == kOrderUpdateStatus) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.order_update_status_;
    }
    clear_has_payload();
  }
}
inline ::t4proto::v1::orderrouting::OrderUpdateStatus* OrderUpdateMultiMessage::release_order_update_status() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_status)
  if (payload_case() == kOrderUpdateStatus) {
    clear_has_payload();
    ::t4proto::v1::orderrouting::OrderUpdateStatus* temp = _impl_.payload_.order_update_status_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.order_update_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::t4proto::v1::orderrouting::OrderUpdateStatus& OrderUpdateMultiMessage::_internal_order_update_status() const {
  return payload_case() == kOrderUpdateStatus
      ? *_impl_.payload_.order_update_status_
      : reinterpret_cast< ::t4proto::v1::orderrouting::OrderUpdateStatus&>(::t4proto::v1::orderrouting::_OrderUpdateStatus_default_instance_);
}
inline const ::t4proto::v1::orderrouting::OrderUpdateStatus& OrderUpdateMultiMessage::order_update_status() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_status)
  return _internal_order_update_status();
}
inline ::t4proto::v1::orderrouting::OrderUpdateStatus* OrderUpdateMultiMessage::unsafe_arena_release_order_update_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_status)
  if (payload_case() == kOrderUpdateStatus) {
    clear_has_payload();
    ::t4proto::v1::orderrouting::OrderUpdateStatus* temp = _impl_.payload_.order_update_status_;
    _impl_.payload_.order_update_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderUpdateMultiMessage::unsafe_arena_set_allocated_order_update_status(::t4proto::v1::orderrouting::OrderUpdateStatus* order_update_status) {
  clear_payload();
  if (order_update_status) {
    set_has_order_update_status();
    _impl_.payload_.order_update_status_ = order_update_status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_status)
}
inline ::t4proto::v1::orderrouting::OrderUpdateStatus* OrderUpdateMultiMessage::_internal_mutable_order_update_status() {
  if (payload_case() != kOrderUpdateStatus) {
    clear_payload();
    set_has_order_update_status();
    _impl_.payload_.order_update_status_ = CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderUpdateStatus >(GetArenaForAllocation());
  }
  return _impl_.payload_.order_update_status_;
}
inline ::t4proto::v1::orderrouting::OrderUpdateStatus* OrderUpdateMultiMessage::mutable_order_update_status() {
  ::t4proto::v1::orderrouting::OrderUpdateStatus* _msg = _internal_mutable_order_update_status();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_status)
  return _msg;
}

// .t4proto.v1.orderrouting.OrderUpdateTrade order_update_trade = 6;
inline bool OrderUpdateMultiMessage::has_order_update_trade() const {
  return payload_case() == kOrderUpdateTrade;
}
inline bool OrderUpdateMultiMessage::_internal_has_order_update_trade() const {
  return payload_case() == kOrderUpdateTrade;
}
inline void OrderUpdateMultiMessage::set_has_order_update_trade() {
  _impl_._oneof_case_[0] = kOrderUpdateTrade;
}
inline void OrderUpdateMultiMessage::clear_order_update_trade() {
  if (payload_case() == kOrderUpdateTrade) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.order_update_trade_;
    }
    clear_has_payload();
  }
}
inline ::t4proto::v1::orderrouting::OrderUpdateTrade* OrderUpdateMultiMessage::release_order_update_trade() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_trade)
  if (payload_case() == kOrderUpdateTrade) {
    clear_has_payload();
    ::t4proto::v1::orderrouting::OrderUpdateTrade* temp = _impl_.payload_.order_update_trade_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.order_update_trade_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::t4proto::v1::orderrouting::OrderUpdateTrade& OrderUpdateMultiMessage::_internal_order_update_trade() const {
  return payload_case() == kOrderUpdateTrade
      ? *_impl_.payload_.order_update_trade_
      : reinterpret_cast< ::t4proto::v1::orderrouting::OrderUpdateTrade&>(::t4proto::v1::orderrouting::_OrderUpdateTrade_default_instance_);
}
inline const ::t4proto::v1::orderrouting::OrderUpdateTrade& OrderUpdateMultiMessage::order_update_trade() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_trade)
  return _internal_order_update_trade();
}
inline ::t4proto::v1::orderrouting::OrderUpdateTrade* OrderUpdateMultiMessage::unsafe_arena_release_order_update_trade() {
  // @@protoc_insertion_point(field_unsafe_arena_release:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_trade)
  if (payload_case() == kOrderUpdateTrade) {
    clear_has_payload();
    ::t4proto::v1::orderrouting::OrderUpdateTrade* temp = _impl_.payload_.order_update_trade_;
    _impl_.payload_.order_update_trade_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderUpdateMultiMessage::unsafe_arena_set_allocated_order_update_trade(::t4proto::v1::orderrouting::OrderUpdateTrade* order_update_trade) {
  clear_payload();
  if (order_update_trade) {
    set_has_order_update_trade();
    _impl_.payload_.order_update_trade_ = order_update_trade;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_trade)
}
inline ::t4proto::v1::orderrouting::OrderUpdateTrade* OrderUpdateMultiMessage::_internal_mutable_order_update_trade() {
  if (payload_case() != kOrderUpdateTrade) {
    clear_payload();
    set_has_order_update_trade();
    _impl_.payload_.order_update_trade_ = CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderUpdateTrade >(GetArenaForAllocation());
  }
  return _impl_.payload_.order_update_trade_;
}
inline ::t4proto::v1::orderrouting::OrderUpdateTrade* OrderUpdateMultiMessage::mutable_order_update_trade() {
  ::t4proto::v1::orderrouting::OrderUpdateTrade* _msg = _internal_mutable_order_update_trade();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_trade)
  return _msg;
}

// .t4proto.v1.orderrouting.OrderUpdateTradeLeg order_update_trade_leg = 7;
inline bool OrderUpdateMultiMessage::has_order_update_trade_leg() const {
  return payload_case() == kOrderUpdateTradeLeg;
}
inline bool OrderUpdateMultiMessage::_internal_has_order_update_trade_leg() const {
  return payload_case() == kOrderUpdateTradeLeg;
}
inline void OrderUpdateMultiMessage::set_has_order_update_trade_leg() {
  _impl_._oneof_case_[0] = kOrderUpdateTradeLeg;
}
inline void OrderUpdateMultiMessage::clear_order_update_trade_leg() {
  if (payload_case() == kOrderUpdateTradeLeg) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.payload_.order_update_trade_leg_;
    }
    clear_has_payload();
  }
}
inline ::t4proto::v1::orderrouting::OrderUpdateTradeLeg* OrderUpdateMultiMessage::release_order_update_trade_leg() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_trade_leg)
  if (payload_case() == kOrderUpdateTradeLeg) {
    clear_has_payload();
    ::t4proto::v1::orderrouting::OrderUpdateTradeLeg* temp = _impl_.payload_.order_update_trade_leg_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.order_update_trade_leg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::t4proto::v1::orderrouting::OrderUpdateTradeLeg& OrderUpdateMultiMessage::_internal_order_update_trade_leg() const {
  return payload_case() == kOrderUpdateTradeLeg
      ? *_impl_.payload_.order_update_trade_leg_
      : reinterpret_cast< ::t4proto::v1::orderrouting::OrderUpdateTradeLeg&>(::t4proto::v1::orderrouting::_OrderUpdateTradeLeg_default_instance_);
}
inline const ::t4proto::v1::orderrouting::OrderUpdateTradeLeg& OrderUpdateMultiMessage::order_update_trade_leg() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_trade_leg)
  return _internal_order_update_trade_leg();
}
inline ::t4proto::v1::orderrouting::OrderUpdateTradeLeg* OrderUpdateMultiMessage::unsafe_arena_release_order_update_trade_leg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_trade_leg)
  if (payload_case() == kOrderUpdateTradeLeg) {
    clear_has_payload();
    ::t4proto::v1::orderrouting::OrderUpdateTradeLeg* temp = _impl_.payload_.order_update_trade_leg_;
    _impl_.payload_.order_update_trade_leg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void OrderUpdateMultiMessage::unsafe_arena_set_allocated_order_update_trade_leg(::t4proto::v1::orderrouting::OrderUpdateTradeLeg* order_update_trade_leg) {
  clear_payload();
  if (order_update_trade_leg) {
    set_has_order_update_trade_leg();
    _impl_.payload_.order_update_trade_leg_ = order_update_trade_leg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_trade_leg)
}
inline ::t4proto::v1::orderrouting::OrderUpdateTradeLeg* OrderUpdateMultiMessage::_internal_mutable_order_update_trade_leg() {
  if (payload_case() != kOrderUpdateTradeLeg) {
    clear_payload();
    set_has_order_update_trade_leg();
    _impl_.payload_.order_update_trade_leg_ = CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderUpdateTradeLeg >(GetArenaForAllocation());
  }
  return _impl_.payload_.order_update_trade_leg_;
}
inline ::t4proto::v1::orderrouting::OrderUpdateTradeLeg* OrderUpdateMultiMessage::mutable_order_update_trade_leg() {
  ::t4proto::v1::orderrouting::OrderUpdateTradeLeg* _msg = _internal_mutable_order_update_trade_leg();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_trade_leg)
  return _msg;
}

inline bool OrderUpdateMultiMessage::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void OrderUpdateMultiMessage::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline OrderUpdateMultiMessage::PayloadCase OrderUpdateMultiMessage::payload_case() const {
  return OrderUpdateMultiMessage::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// OrderUpdateMulti

// string market_id = 1;
inline void OrderUpdateMulti::clear_market_id() {
  _impl_.market_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateMulti::market_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateMulti.market_id)
  return _internal_market_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateMulti::set_market_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.market_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateMulti.market_id)
}
inline std::string* OrderUpdateMulti::mutable_market_id() {
  std::string* _s = _internal_mutable_market_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateMulti.market_id)
  return _s;
}
inline const std::string& OrderUpdateMulti::_internal_market_id() const {
  return _impl_.market_id_.Get();
}
inline void OrderUpdateMulti::_internal_set_market_id(const std::string& value) {
  ;


  _impl_.market_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateMulti::_internal_mutable_market_id() {
  ;
  return _impl_.market_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateMulti::release_market_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateMulti.market_id)
  return _impl_.market_id_.Release();
}
inline void OrderUpdateMulti::set_allocated_market_id(std::string* value) {
  _impl_.market_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.market_id_.IsDefault()) {
          _impl_.market_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateMulti.market_id)
}

// string account_id = 2;
inline void OrderUpdateMulti::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& OrderUpdateMulti::account_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateMulti.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderUpdateMulti::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateMulti.account_id)
}
inline std::string* OrderUpdateMulti::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateMulti.account_id)
  return _s;
}
inline const std::string& OrderUpdateMulti::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void OrderUpdateMulti::_internal_set_account_id(const std::string& value) {
  ;


  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* OrderUpdateMulti::_internal_mutable_account_id() {
  ;
  return _impl_.account_id_.Mutable( GetArenaForAllocation());
}
inline std::string* OrderUpdateMulti::release_account_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.OrderUpdateMulti.account_id)
  return _impl_.account_id_.Release();
}
inline void OrderUpdateMulti::set_allocated_account_id(std::string* value) {
  _impl_.account_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateMulti.account_id)
}

// bool historical = 3;
inline void OrderUpdateMulti::clear_historical() {
  _impl_.historical_ = false;
}
inline bool OrderUpdateMulti::historical() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateMulti.historical)
  return _internal_historical();
}
inline void OrderUpdateMulti::set_historical(bool value) {
  _internal_set_historical(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.OrderUpdateMulti.historical)
}
inline bool OrderUpdateMulti::_internal_historical() const {
  return _impl_.historical_;
}
inline void OrderUpdateMulti::_internal_set_historical(bool value) {
  ;
  _impl_.historical_ = value;
}

// repeated .t4proto.v1.orderrouting.OrderUpdateMultiMessage updates = 4;
inline int OrderUpdateMulti::_internal_updates_size() const {
  return _impl_.updates_.size();
}
inline int OrderUpdateMulti::updates_size() const {
  return _internal_updates_size();
}
inline void OrderUpdateMulti::clear_updates() {
  _impl_.updates_.Clear();
}
inline ::t4proto::v1::orderrouting::OrderUpdateMultiMessage* OrderUpdateMulti::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.OrderUpdateMulti.updates)
  return _impl_.updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderUpdateMultiMessage >*
OrderUpdateMulti::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.orderrouting.OrderUpdateMulti.updates)
  return &_impl_.updates_;
}
inline const ::t4proto::v1::orderrouting::OrderUpdateMultiMessage& OrderUpdateMulti::_internal_updates(int index) const {
  return _impl_.updates_.Get(index);
}
inline const ::t4proto::v1::orderrouting::OrderUpdateMultiMessage& OrderUpdateMulti::updates(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.OrderUpdateMulti.updates)
  return _internal_updates(index);
}
inline ::t4proto::v1::orderrouting::OrderUpdateMultiMessage* OrderUpdateMulti::_internal_add_updates() {
  return _impl_.updates_.Add();
}
inline ::t4proto::v1::orderrouting::OrderUpdateMultiMessage* OrderUpdateMulti::add_updates() {
  ::t4proto::v1::orderrouting::OrderUpdateMultiMessage* _add = _internal_add_updates();
  // @@protoc_insertion_point(field_add:t4proto.v1.orderrouting.OrderUpdateMulti.updates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::orderrouting::OrderUpdateMultiMessage >&
OrderUpdateMulti::updates() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.orderrouting.OrderUpdateMulti.updates)
  return _impl_.updates_;
}

// -------------------------------------------------------------------

// CreateUDSResponse

// string request_id = 1;
inline void CreateUDSResponse::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& CreateUDSResponse::request_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.CreateUDSResponse.request_id)
  return _internal_request_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateUDSResponse::set_request_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.request_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.CreateUDSResponse.request_id)
}
inline std::string* CreateUDSResponse::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.CreateUDSResponse.request_id)
  return _s;
}
inline const std::string& CreateUDSResponse::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void CreateUDSResponse::_internal_set_request_id(const std::string& value) {
  ;


  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateUDSResponse::_internal_mutable_request_id() {
  ;
  return _impl_.request_id_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateUDSResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.CreateUDSResponse.request_id)
  return _impl_.request_id_.Release();
}
inline void CreateUDSResponse::set_allocated_request_id(std::string* value) {
  _impl_.request_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.request_id_.IsDefault()) {
          _impl_.request_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.CreateUDSResponse.request_id)
}

// string status_detail = 2;
inline void CreateUDSResponse::clear_status_detail() {
  _impl_.status_detail_.ClearToEmpty();
}
inline const std::string& CreateUDSResponse::status_detail() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.CreateUDSResponse.status_detail)
  return _internal_status_detail();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateUDSResponse::set_status_detail(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.status_detail_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.CreateUDSResponse.status_detail)
}
inline std::string* CreateUDSResponse::mutable_status_detail() {
  std::string* _s = _internal_mutable_status_detail();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.CreateUDSResponse.status_detail)
  return _s;
}
inline const std::string& CreateUDSResponse::_internal_status_detail() const {
  return _impl_.status_detail_.Get();
}
inline void CreateUDSResponse::_internal_set_status_detail(const std::string& value) {
  ;


  _impl_.status_detail_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateUDSResponse::_internal_mutable_status_detail() {
  ;
  return _impl_.status_detail_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateUDSResponse::release_status_detail() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.CreateUDSResponse.status_detail)
  return _impl_.status_detail_.Release();
}
inline void CreateUDSResponse::set_allocated_status_detail(std::string* value) {
  _impl_.status_detail_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_detail_.IsDefault()) {
          _impl_.status_detail_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.CreateUDSResponse.status_detail)
}

// string MarketRef = 3;
inline void CreateUDSResponse::clear_marketref() {
  _impl_.marketref_.ClearToEmpty();
}
inline const std::string& CreateUDSResponse::marketref() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.CreateUDSResponse.MarketRef)
  return _internal_marketref();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateUDSResponse::set_marketref(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.marketref_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.CreateUDSResponse.MarketRef)
}
inline std::string* CreateUDSResponse::mutable_marketref() {
  std::string* _s = _internal_mutable_marketref();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.orderrouting.CreateUDSResponse.MarketRef)
  return _s;
}
inline const std::string& CreateUDSResponse::_internal_marketref() const {
  return _impl_.marketref_.Get();
}
inline void CreateUDSResponse::_internal_set_marketref(const std::string& value) {
  ;


  _impl_.marketref_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateUDSResponse::_internal_mutable_marketref() {
  ;
  return _impl_.marketref_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateUDSResponse::release_marketref() {
  // @@protoc_insertion_point(field_release:t4proto.v1.orderrouting.CreateUDSResponse.MarketRef)
  return _impl_.marketref_.Release();
}
inline void CreateUDSResponse::set_allocated_marketref(std::string* value) {
  _impl_.marketref_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.marketref_.IsDefault()) {
          _impl_.marketref_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.CreateUDSResponse.MarketRef)
}

// .t4proto.v1.common.UDSStatus uds_status = 4;
inline void CreateUDSResponse::clear_uds_status() {
  _impl_.uds_status_ = 0;
}
inline ::t4proto::v1::common::UDSStatus CreateUDSResponse::uds_status() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.orderrouting.CreateUDSResponse.uds_status)
  return _internal_uds_status();
}
inline void CreateUDSResponse::set_uds_status(::t4proto::v1::common::UDSStatus value) {
   _internal_set_uds_status(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.orderrouting.CreateUDSResponse.uds_status)
}
inline ::t4proto::v1::common::UDSStatus CreateUDSResponse::_internal_uds_status() const {
  return static_cast<::t4proto::v1::common::UDSStatus>(_impl_.uds_status_);
}
inline void CreateUDSResponse::_internal_set_uds_status(::t4proto::v1::common::UDSStatus value) {
  ;
  _impl_.uds_status_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace orderrouting
}  // namespace v1
}  // namespace t4proto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_t4_2fv1_2forderrouting_2forderrouting_2eproto_2epb_2eh
