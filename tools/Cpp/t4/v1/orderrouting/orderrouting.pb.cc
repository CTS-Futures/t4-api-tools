// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: t4/v1/orderrouting/orderrouting.proto

#include "t4/v1/orderrouting/orderrouting.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace t4proto {
namespace v1 {
namespace orderrouting {
PROTOBUF_CONSTEXPR OrderActivation::OrderActivation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.submit_time_)*/nullptr
  , /*decltype(_impl_.cancel_time_)*/nullptr
  , /*decltype(_impl_.activation_cancel_time_)*/nullptr
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.submit_delay_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.cancel_delay_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.activation_cancel_delay_ms_)*/ ::int64_t{0}

  , /*decltype(_impl_.mode_)*/ 0

  , /*decltype(_impl_.volume_)*/ 0

  , /*decltype(_impl_.bid_offer_)*/ 0

  , /*decltype(_impl_.implied_)*/ false

  , /*decltype(_impl_.queue_submit_)*/ false
} {}
struct OrderActivationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderActivationDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderActivationDefaultTypeInternal() {}
  union {
    OrderActivation _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderActivationDefaultTypeInternal _OrderActivation_default_instance_;
PROTOBUF_CONSTEXPR OrderSubmit_Order::OrderSubmit_Order(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.tag_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.limit_price_)*/nullptr
  , /*decltype(_impl_.stop_price_)*/nullptr
  , /*decltype(_impl_.trail_distance_)*/nullptr
  , /*decltype(_impl_.activation_data_)*/nullptr
  , /*decltype(_impl_.buy_sell_)*/ 0

  , /*decltype(_impl_.price_type_)*/ 0

  , /*decltype(_impl_.time_type_)*/ 0

  , /*decltype(_impl_.volume_)*/ 0

  , /*decltype(_impl_.max_show_)*/ 0

  , /*decltype(_impl_.max_volume_)*/ 0

  , /*decltype(_impl_.activation_type_)*/ 0
} {}
struct OrderSubmit_OrderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderSubmit_OrderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderSubmit_OrderDefaultTypeInternal() {}
  union {
    OrderSubmit_Order _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderSubmit_OrderDefaultTypeInternal _OrderSubmit_Order_default_instance_;
PROTOBUF_CONSTEXPR OrderSubmit::OrderSubmit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.orders_)*/{}
  , /*decltype(_impl_.user_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.account_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.order_link_)*/ 0

  , /*decltype(_impl_.manual_order_indicator_)*/ false
} {}
struct OrderSubmitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderSubmitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderSubmitDefaultTypeInternal() {}
  union {
    OrderSubmit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderSubmitDefaultTypeInternal _OrderSubmit_default_instance_;
PROTOBUF_CONSTEXPR OrderRevise_Revise::OrderRevise_Revise(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unique_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tag_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.limit_price_)*/nullptr
  , /*decltype(_impl_.stop_price_)*/nullptr
  , /*decltype(_impl_.trail_price_)*/nullptr
  , /*decltype(_impl_.activation_data_)*/nullptr
  , /*decltype(_impl_.volume_)*/ 0

  , /*decltype(_impl_.max_show_)*/ 0

  , /*decltype(_impl_.max_volume_)*/ 0
} {}
struct OrderRevise_ReviseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderRevise_ReviseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderRevise_ReviseDefaultTypeInternal() {}
  union {
    OrderRevise_Revise _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderRevise_ReviseDefaultTypeInternal _OrderRevise_Revise_default_instance_;
PROTOBUF_CONSTEXPR OrderRevise::OrderRevise(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.revisions_)*/{}
  , /*decltype(_impl_.user_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.account_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.manual_order_indicator_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderReviseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderReviseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderReviseDefaultTypeInternal() {}
  union {
    OrderRevise _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderReviseDefaultTypeInternal _OrderRevise_default_instance_;
PROTOBUF_CONSTEXPR OrderPull_Pull::OrderPull_Pull(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.unique_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tag_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct OrderPull_PullDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderPull_PullDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderPull_PullDefaultTypeInternal() {}
  union {
    OrderPull_Pull _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderPull_PullDefaultTypeInternal _OrderPull_Pull_default_instance_;
PROTOBUF_CONSTEXPR OrderPull::OrderPull(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pulls_)*/{}
  , /*decltype(_impl_.user_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.account_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.manual_order_indicator_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderPullDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderPullDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderPullDefaultTypeInternal() {}
  union {
    OrderPull _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderPullDefaultTypeInternal _OrderPull_default_instance_;
PROTOBUF_CONSTEXPR CreateUDS_Leg::CreateUDS_Leg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exchange_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contract_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.delta_)*/nullptr
  , /*decltype(_impl_.buy_sell_)*/ 0

  , /*decltype(_impl_.volume_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateUDS_LegDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateUDS_LegDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateUDS_LegDefaultTypeInternal() {}
  union {
    CreateUDS_Leg _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateUDS_LegDefaultTypeInternal _CreateUDS_Leg_default_instance_;
PROTOBUF_CONSTEXPR CreateUDS::CreateUDS(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.legs_)*/{}
  , /*decltype(_impl_.request_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.user_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.account_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.strategy_type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateUDSDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateUDSDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateUDSDefaultTypeInternal() {}
  union {
    CreateUDS _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateUDSDefaultTypeInternal _CreateUDS_default_instance_;
PROTOBUF_CONSTEXPR OrderUpdateFailed::OrderUpdateFailed(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unique_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.account_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.status_detail_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tag_cl_ord_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.exchange_time_)*/nullptr
  , /*decltype(_impl_.change_)*/ 0

  , /*decltype(_impl_.status_)*/ 0

  , /*decltype(_impl_.response_pending_)*/ 0

  , /*decltype(_impl_.sequence_order_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderUpdateFailedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderUpdateFailedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderUpdateFailedDefaultTypeInternal() {}
  union {
    OrderUpdateFailed _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderUpdateFailedDefaultTypeInternal _OrderUpdateFailed_default_instance_;
PROTOBUF_CONSTEXPR OrderUpdateStatus_InstructionExtraEntry_DoNotUse::OrderUpdateStatus_InstructionExtraEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct OrderUpdateStatus_InstructionExtraEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderUpdateStatus_InstructionExtraEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderUpdateStatus_InstructionExtraEntry_DoNotUseDefaultTypeInternal() {}
  union {
    OrderUpdateStatus_InstructionExtraEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderUpdateStatus_InstructionExtraEntry_DoNotUseDefaultTypeInternal _OrderUpdateStatus_InstructionExtraEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR OrderUpdateStatus::OrderUpdateStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruction_extra_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.unique_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.account_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.status_detail_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.exchange_order_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.executing_login_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.user_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.user_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.user_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.session_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.app_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.app_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.routing_user_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.routing_user_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tag_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tag_cl_ord_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tag_orig_cl_ord_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.smp_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.exchange_login_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.exchange_location_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ats_regulatory_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.authorized_trader_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.activation_details_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.exchange_time_)*/nullptr
  , /*decltype(_impl_.current_limit_price_)*/nullptr
  , /*decltype(_impl_.current_stop_price_)*/nullptr
  , /*decltype(_impl_.trail_price_)*/nullptr
  , /*decltype(_impl_.new_limit_price_)*/nullptr
  , /*decltype(_impl_.new_stop_price_)*/nullptr
  , /*decltype(_impl_.change_)*/ 0

  , /*decltype(_impl_.status_)*/ 0

  , /*decltype(_impl_.response_pending_)*/ 0

  , /*decltype(_impl_.current_volume_)*/ 0

  , /*decltype(_impl_.price_type_)*/ 0

  , /*decltype(_impl_.time_type_)*/ 0

  , /*decltype(_impl_.working_volume_)*/ 0

  , /*decltype(_impl_.activation_type_)*/ 0

  , /*decltype(_impl_.current_max_show_)*/ 0

  , /*decltype(_impl_.new_volume_)*/ 0

  , /*decltype(_impl_.new_max_show_)*/ 0

  , /*decltype(_impl_.max_volume_)*/ 0

  , /*decltype(_impl_.sequence_order_)*/ 0

  , /*decltype(_impl_.app_type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderUpdateStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderUpdateStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderUpdateStatusDefaultTypeInternal() {}
  union {
    OrderUpdateStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderUpdateStatusDefaultTypeInternal _OrderUpdateStatus_default_instance_;
PROTOBUF_CONSTEXPR OrderUpdateTrade::OrderUpdateTrade(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unique_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.account_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.status_detail_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.exchange_trade_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contra_trader_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contra_broker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.exchange_time_)*/nullptr
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.change_)*/ 0

  , /*decltype(_impl_.status_)*/ 0

  , /*decltype(_impl_.response_pending_)*/ 0

  , /*decltype(_impl_.total_fill_volume_)*/ 0

  , /*decltype(_impl_.working_volume_)*/ 0

  , /*decltype(_impl_.volume_)*/ 0

  , /*decltype(_impl_.residual_volume_)*/ 0

  , /*decltype(_impl_.sequence_order_)*/ 0

  , /*decltype(_impl_.trade_date_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderUpdateTradeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderUpdateTradeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderUpdateTradeDefaultTypeInternal() {}
  union {
    OrderUpdateTrade _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderUpdateTradeDefaultTypeInternal _OrderUpdateTrade_default_instance_;
PROTOBUF_CONSTEXPR OrderUpdateTradeLeg::OrderUpdateTradeLeg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.unique_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.account_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.status_detail_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.exchange_trade_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contra_trader_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contra_broker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.exchange_time_)*/nullptr
  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.change_)*/ 0

  , /*decltype(_impl_.status_)*/ 0

  , /*decltype(_impl_.response_pending_)*/ 0

  , /*decltype(_impl_.leg_index_)*/ 0

  , /*decltype(_impl_.volume_)*/ 0

  , /*decltype(_impl_.residual_volume_)*/ 0

  , /*decltype(_impl_.trade_date_)*/ ::int64_t{0}

  , /*decltype(_impl_.sequence_order_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderUpdateTradeLegDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderUpdateTradeLegDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderUpdateTradeLegDefaultTypeInternal() {}
  union {
    OrderUpdateTradeLeg _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderUpdateTradeLegDefaultTypeInternal _OrderUpdateTradeLeg_default_instance_;
PROTOBUF_CONSTEXPR OrderUpdate_Trade::OrderUpdate_Trade(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exchange_trade_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contra_trader_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contra_broker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.exchange_time_)*/nullptr
  , /*decltype(_impl_.sequence_order_)*/ 0

  , /*decltype(_impl_.volume_)*/ 0

  , /*decltype(_impl_.trade_date_)*/ ::int64_t{0}

  , /*decltype(_impl_.residual_volume_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderUpdate_TradeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderUpdate_TradeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderUpdate_TradeDefaultTypeInternal() {}
  union {
    OrderUpdate_Trade _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderUpdate_TradeDefaultTypeInternal _OrderUpdate_Trade_default_instance_;
PROTOBUF_CONSTEXPR OrderUpdate_TradeLeg::OrderUpdate_TradeLeg(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exchange_trade_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contra_trader_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.contra_broker_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.price_)*/nullptr
  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.exchange_time_)*/nullptr
  , /*decltype(_impl_.sequence_order_)*/ 0

  , /*decltype(_impl_.leg_index_)*/ 0

  , /*decltype(_impl_.volume_)*/ 0

  , /*decltype(_impl_.residual_volume_)*/ 0

  , /*decltype(_impl_.trade_date_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderUpdate_TradeLegDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderUpdate_TradeLegDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderUpdate_TradeLegDefaultTypeInternal() {}
  union {
    OrderUpdate_TradeLeg _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderUpdate_TradeLegDefaultTypeInternal _OrderUpdate_TradeLeg_default_instance_;
PROTOBUF_CONSTEXPR OrderUpdate_InstructionExtraEntry_DoNotUse::OrderUpdate_InstructionExtraEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct OrderUpdate_InstructionExtraEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderUpdate_InstructionExtraEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderUpdate_InstructionExtraEntry_DoNotUseDefaultTypeInternal() {}
  union {
    OrderUpdate_InstructionExtraEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderUpdate_InstructionExtraEntry_DoNotUseDefaultTypeInternal _OrderUpdate_InstructionExtraEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR OrderUpdate::OrderUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instruction_extra_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.trades_)*/{}
  , /*decltype(_impl_.trade_legs_)*/{}
  , /*decltype(_impl_.unique_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.account_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.status_detail_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.exchange_order_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.exchange_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.exchange_login_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.executing_login_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.exchange_location_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.user_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.user_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.user_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.session_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.app_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.app_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.account_number_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.member_allocation_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.trader_allocation_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.customer_reference_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.avg_price_group_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.omnibus_account_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.executing_group_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tag_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.orders_linked_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.routing_user_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.routing_user_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tag_cl_ord_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tag_orig_cl_ord_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tag_relation_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.smp_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ats_regulatory_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.authorized_trader_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.activation_details_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.time_)*/nullptr
  , /*decltype(_impl_.exchange_time_)*/nullptr
  , /*decltype(_impl_.submit_time_)*/nullptr
  , /*decltype(_impl_.current_limit_price_)*/nullptr
  , /*decltype(_impl_.current_stop_price_)*/nullptr
  , /*decltype(_impl_.new_limit_price_)*/nullptr
  , /*decltype(_impl_.new_stop_price_)*/nullptr
  , /*decltype(_impl_.trail_price_)*/nullptr
  , /*decltype(_impl_.receive_time_)*/nullptr
  , /*decltype(_impl_.change_)*/ 0

  , /*decltype(_impl_.status_)*/ 0

  , /*decltype(_impl_.trade_date_)*/ ::int64_t{0}

  , /*decltype(_impl_.response_pending_)*/ 0

  , /*decltype(_impl_.buy_sell_)*/ 0

  , /*decltype(_impl_.price_type_)*/ 0

  , /*decltype(_impl_.time_type_)*/ 0

  , /*decltype(_impl_.current_volume_)*/ 0

  , /*decltype(_impl_.new_volume_)*/ 0

  , /*decltype(_impl_.open_close_)*/ 0

  , /*decltype(_impl_.cti_)*/ 0

  , /*decltype(_impl_.origin_)*/ 0

  , /*decltype(_impl_.account_code_)*/ 0

  , /*decltype(_impl_.cust_order_handling_inst_)*/ 0

  , /*decltype(_impl_.avg_price_indicator_)*/ 0

  , /*decltype(_impl_.clearing_trade_price_type_)*/ 0

  , /*decltype(_impl_.billing_fee_)*/ 0

  , /*decltype(_impl_.total_fill_volume_)*/ 0

  , /*decltype(_impl_.working_volume_)*/ 0

  , /*decltype(_impl_.exchange_total_fill_volume_)*/ 0

  , /*decltype(_impl_.trail_revision_interval_)*/ 0

  , /*decltype(_impl_.trail_revision_change_)*/ 0

  , /*decltype(_impl_.order_link_)*/ 0

  , /*decltype(_impl_.activation_type_)*/ 0

  , /*decltype(_impl_.primary_user_)*/ 0

  , /*decltype(_impl_.current_max_show_)*/ 0

  , /*decltype(_impl_.new_max_show_)*/ 0

  , /*decltype(_impl_.order_source_)*/ 0

  , /*decltype(_impl_.order_source_method_)*/ 0

  , /*decltype(_impl_.app_type_)*/ 0

  , /*decltype(_impl_.master_type_)*/ 0

  , /*decltype(_impl_.sequence_order_)*/ 0

  , /*decltype(_impl_.max_volume_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderUpdateDefaultTypeInternal() {}
  union {
    OrderUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderUpdateDefaultTypeInternal _OrderUpdate_default_instance_;
PROTOBUF_CONSTEXPR OrderUpdateMultiMessage::OrderUpdateMultiMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.payload_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct OrderUpdateMultiMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderUpdateMultiMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderUpdateMultiMessageDefaultTypeInternal() {}
  union {
    OrderUpdateMultiMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderUpdateMultiMessageDefaultTypeInternal _OrderUpdateMultiMessage_default_instance_;
PROTOBUF_CONSTEXPR OrderUpdateMulti::OrderUpdateMulti(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.updates_)*/{}
  , /*decltype(_impl_.market_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.account_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.historical_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OrderUpdateMultiDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrderUpdateMultiDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrderUpdateMultiDefaultTypeInternal() {}
  union {
    OrderUpdateMulti _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrderUpdateMultiDefaultTypeInternal _OrderUpdateMulti_default_instance_;
PROTOBUF_CONSTEXPR CreateUDSResponse::CreateUDSResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.status_detail_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.marketref_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.uds_status_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateUDSResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateUDSResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateUDSResponseDefaultTypeInternal() {}
  union {
    CreateUDSResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateUDSResponseDefaultTypeInternal _CreateUDSResponse_default_instance_;
}  // namespace orderrouting
}  // namespace v1
}  // namespace t4proto
static ::_pb::Metadata file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[21];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_t4_2fv1_2forderrouting_2forderrouting_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_t4_2fv1_2forderrouting_2forderrouting_2eproto = nullptr;
const ::uint32_t TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderActivation, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderActivation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderActivation, _impl_.submit_time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderActivation, _impl_.submit_delay_ms_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderActivation, _impl_.cancel_time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderActivation, _impl_.cancel_delay_ms_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderActivation, _impl_.activation_cancel_time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderActivation, _impl_.activation_cancel_delay_ms_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderActivation, _impl_.mode_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderActivation, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderActivation, _impl_.volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderActivation, _impl_.bid_offer_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderActivation, _impl_.implied_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderActivation, _impl_.queue_submit_),
    0,
    4,
    1,
    5,
    2,
    6,
    7,
    3,
    8,
    9,
    10,
    11,
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit_Order, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit_Order, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit_Order, _impl_.buy_sell_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit_Order, _impl_.price_type_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit_Order, _impl_.time_type_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit_Order, _impl_.volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit_Order, _impl_.max_show_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit_Order, _impl_.max_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit_Order, _impl_.limit_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit_Order, _impl_.stop_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit_Order, _impl_.trail_distance_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit_Order, _impl_.tag_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit_Order, _impl_.activation_type_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit_Order, _impl_.activation_data_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    5,
    6,
    1,
    2,
    3,
    0,
    7,
    4,
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit, _impl_.user_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit, _impl_.account_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit, _impl_.order_link_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit, _impl_.manual_order_indicator_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderSubmit, _impl_.orders_),
    0,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderRevise_Revise, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderRevise_Revise, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderRevise_Revise, _impl_.unique_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderRevise_Revise, _impl_.volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderRevise_Revise, _impl_.max_show_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderRevise_Revise, _impl_.max_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderRevise_Revise, _impl_.limit_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderRevise_Revise, _impl_.stop_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderRevise_Revise, _impl_.trail_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderRevise_Revise, _impl_.tag_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderRevise_Revise, _impl_.activation_data_),
    ~0u,
    5,
    6,
    7,
    1,
    2,
    3,
    0,
    4,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderRevise, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderRevise, _impl_.user_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderRevise, _impl_.account_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderRevise, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderRevise, _impl_.manual_order_indicator_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderRevise, _impl_.revisions_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderPull_Pull, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderPull_Pull, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderPull_Pull, _impl_.unique_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderPull_Pull, _impl_.tag_),
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderPull, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderPull, _impl_.user_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderPull, _impl_.account_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderPull, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderPull, _impl_.manual_order_indicator_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderPull, _impl_.pulls_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::CreateUDS_Leg, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::CreateUDS_Leg, _impl_.exchange_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::CreateUDS_Leg, _impl_.contract_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::CreateUDS_Leg, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::CreateUDS_Leg, _impl_.buy_sell_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::CreateUDS_Leg, _impl_.volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::CreateUDS_Leg, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::CreateUDS_Leg, _impl_.delta_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::CreateUDS, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::CreateUDS, _impl_.request_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::CreateUDS, _impl_.user_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::CreateUDS, _impl_.account_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::CreateUDS, _impl_.strategy_type_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::CreateUDS, _impl_.legs_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateFailed, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateFailed, _impl_.unique_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateFailed, _impl_.account_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateFailed, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateFailed, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateFailed, _impl_.exchange_time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateFailed, _impl_.change_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateFailed, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateFailed, _impl_.status_detail_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateFailed, _impl_.response_pending_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateFailed, _impl_.tag_cl_ord_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateFailed, _impl_.sequence_order_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus_InstructionExtraEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus_InstructionExtraEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus_InstructionExtraEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus_InstructionExtraEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.unique_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.account_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.exchange_time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.change_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.status_detail_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.response_pending_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.exchange_order_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.current_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.current_limit_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.current_stop_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.price_type_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.time_type_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.working_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.executing_login_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.activation_type_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.trail_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.current_max_show_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.user_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.user_name_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.user_address_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.session_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.app_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.app_name_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.routing_user_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.routing_user_name_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.new_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.new_limit_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.new_stop_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.new_max_show_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.tag_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.tag_cl_ord_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.tag_orig_cl_ord_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.smp_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.exchange_login_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.exchange_location_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.ats_regulatory_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.max_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.sequence_order_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.authorized_trader_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.instruction_extra_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.app_type_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateStatus, _impl_.activation_details_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTrade, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTrade, _impl_.unique_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTrade, _impl_.account_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTrade, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTrade, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTrade, _impl_.exchange_time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTrade, _impl_.change_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTrade, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTrade, _impl_.status_detail_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTrade, _impl_.response_pending_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTrade, _impl_.total_fill_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTrade, _impl_.working_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTrade, _impl_.volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTrade, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTrade, _impl_.residual_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTrade, _impl_.exchange_trade_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTrade, _impl_.contra_trader_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTrade, _impl_.contra_broker_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTrade, _impl_.trade_date_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTrade, _impl_.sequence_order_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTradeLeg, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTradeLeg, _impl_.unique_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTradeLeg, _impl_.account_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTradeLeg, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTradeLeg, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTradeLeg, _impl_.exchange_time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTradeLeg, _impl_.change_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTradeLeg, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTradeLeg, _impl_.status_detail_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTradeLeg, _impl_.response_pending_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTradeLeg, _impl_.leg_index_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTradeLeg, _impl_.volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTradeLeg, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTradeLeg, _impl_.exchange_trade_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTradeLeg, _impl_.contra_trader_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTradeLeg, _impl_.contra_broker_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTradeLeg, _impl_.residual_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTradeLeg, _impl_.trade_date_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateTradeLeg, _impl_.sequence_order_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_Trade, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_Trade, _impl_.sequence_order_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_Trade, _impl_.volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_Trade, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_Trade, _impl_.residual_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_Trade, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_Trade, _impl_.exchange_trade_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_Trade, _impl_.exchange_time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_Trade, _impl_.contra_trader_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_Trade, _impl_.contra_broker_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_Trade, _impl_.trade_date_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_TradeLeg, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_TradeLeg, _impl_.sequence_order_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_TradeLeg, _impl_.leg_index_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_TradeLeg, _impl_.volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_TradeLeg, _impl_.price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_TradeLeg, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_TradeLeg, _impl_.exchange_trade_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_TradeLeg, _impl_.exchange_time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_TradeLeg, _impl_.contra_trader_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_TradeLeg, _impl_.contra_broker_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_TradeLeg, _impl_.residual_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_TradeLeg, _impl_.trade_date_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_InstructionExtraEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_InstructionExtraEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_InstructionExtraEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate_InstructionExtraEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.unique_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.account_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.exchange_time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.change_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.status_detail_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.response_pending_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.exchange_order_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.submit_time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.trade_date_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.exchange_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.exchange_login_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.executing_login_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.exchange_location_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.user_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.user_name_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.user_address_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.session_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.app_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.app_name_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.buy_sell_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.price_type_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.time_type_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.current_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.current_limit_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.current_stop_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.new_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.new_limit_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.new_stop_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.open_close_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.account_number_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.cti_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.origin_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.account_code_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.member_allocation_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.trader_allocation_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.customer_reference_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.cust_order_handling_inst_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.avg_price_indicator_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.avg_price_group_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.clearing_trade_price_type_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.billing_fee_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.omnibus_account_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.executing_group_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.tag_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.total_fill_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.working_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.exchange_total_fill_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.trail_price_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.trail_revision_interval_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.trail_revision_change_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.order_link_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.orders_linked_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.activation_type_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.primary_user_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.current_max_show_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.new_max_show_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.routing_user_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.routing_user_name_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.order_source_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.order_source_method_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.app_type_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.master_type_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.tag_cl_ord_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.tag_orig_cl_ord_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.tag_relation_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.smp_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.sequence_order_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.ats_regulatory_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.max_volume_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.authorized_trader_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.instruction_extra_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.receive_time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.activation_details_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.trades_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdate, _impl_.trade_legs_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateMultiMessage, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateMultiMessage, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateMultiMessage, _impl_.payload_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateMulti, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateMulti, _impl_.market_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateMulti, _impl_.account_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateMulti, _impl_.historical_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateMulti, _impl_.updates_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::CreateUDSResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::CreateUDSResponse, _impl_.request_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::CreateUDSResponse, _impl_.status_detail_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::CreateUDSResponse, _impl_.marketref_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::CreateUDSResponse, _impl_.uds_status_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, 20, -1, sizeof(::t4proto::v1::orderrouting::OrderActivation)},
        { 32, 52, -1, sizeof(::t4proto::v1::orderrouting::OrderSubmit_Order)},
        { 64, 78, -1, sizeof(::t4proto::v1::orderrouting::OrderSubmit)},
        { 84, 101, -1, sizeof(::t4proto::v1::orderrouting::OrderRevise_Revise)},
        { 110, -1, -1, sizeof(::t4proto::v1::orderrouting::OrderRevise)},
        { 123, 133, -1, sizeof(::t4proto::v1::orderrouting::OrderPull_Pull)},
        { 135, -1, -1, sizeof(::t4proto::v1::orderrouting::OrderPull)},
        { 148, -1, -1, sizeof(::t4proto::v1::orderrouting::CreateUDS_Leg)},
        { 163, -1, -1, sizeof(::t4proto::v1::orderrouting::CreateUDS)},
        { 176, -1, -1, sizeof(::t4proto::v1::orderrouting::OrderUpdateFailed)},
        { 195, 205, -1, sizeof(::t4proto::v1::orderrouting::OrderUpdateStatus_InstructionExtraEntry_DoNotUse)},
        { 207, -1, -1, sizeof(::t4proto::v1::orderrouting::OrderUpdateStatus)},
        { 260, -1, -1, sizeof(::t4proto::v1::orderrouting::OrderUpdateTrade)},
        { 287, -1, -1, sizeof(::t4proto::v1::orderrouting::OrderUpdateTradeLeg)},
        { 313, -1, -1, sizeof(::t4proto::v1::orderrouting::OrderUpdate_Trade)},
        { 331, -1, -1, sizeof(::t4proto::v1::orderrouting::OrderUpdate_TradeLeg)},
        { 350, 360, -1, sizeof(::t4proto::v1::orderrouting::OrderUpdate_InstructionExtraEntry_DoNotUse)},
        { 362, -1, -1, sizeof(::t4proto::v1::orderrouting::OrderUpdate)},
        { 448, -1, -1, sizeof(::t4proto::v1::orderrouting::OrderUpdateMultiMessage)},
        { 462, -1, -1, sizeof(::t4proto::v1::orderrouting::OrderUpdateMulti)},
        { 474, -1, -1, sizeof(::t4proto::v1::orderrouting::CreateUDSResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::t4proto::v1::orderrouting::_OrderActivation_default_instance_._instance,
    &::t4proto::v1::orderrouting::_OrderSubmit_Order_default_instance_._instance,
    &::t4proto::v1::orderrouting::_OrderSubmit_default_instance_._instance,
    &::t4proto::v1::orderrouting::_OrderRevise_Revise_default_instance_._instance,
    &::t4proto::v1::orderrouting::_OrderRevise_default_instance_._instance,
    &::t4proto::v1::orderrouting::_OrderPull_Pull_default_instance_._instance,
    &::t4proto::v1::orderrouting::_OrderPull_default_instance_._instance,
    &::t4proto::v1::orderrouting::_CreateUDS_Leg_default_instance_._instance,
    &::t4proto::v1::orderrouting::_CreateUDS_default_instance_._instance,
    &::t4proto::v1::orderrouting::_OrderUpdateFailed_default_instance_._instance,
    &::t4proto::v1::orderrouting::_OrderUpdateStatus_InstructionExtraEntry_DoNotUse_default_instance_._instance,
    &::t4proto::v1::orderrouting::_OrderUpdateStatus_default_instance_._instance,
    &::t4proto::v1::orderrouting::_OrderUpdateTrade_default_instance_._instance,
    &::t4proto::v1::orderrouting::_OrderUpdateTradeLeg_default_instance_._instance,
    &::t4proto::v1::orderrouting::_OrderUpdate_Trade_default_instance_._instance,
    &::t4proto::v1::orderrouting::_OrderUpdate_TradeLeg_default_instance_._instance,
    &::t4proto::v1::orderrouting::_OrderUpdate_InstructionExtraEntry_DoNotUse_default_instance_._instance,
    &::t4proto::v1::orderrouting::_OrderUpdate_default_instance_._instance,
    &::t4proto::v1::orderrouting::_OrderUpdateMultiMessage_default_instance_._instance,
    &::t4proto::v1::orderrouting::_OrderUpdateMulti_default_instance_._instance,
    &::t4proto::v1::orderrouting::_CreateUDSResponse_default_instance_._instance,
};
const char descriptor_table_protodef_t4_2fv1_2forderrouting_2forderrouting_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n%t4/v1/orderrouting/orderrouting.proto\022"
    "\027t4proto.v1.orderrouting\032\037google/protobu"
    "f/timestamp.proto\032\030t4/v1/common/enums.pr"
    "oto\032\030t4/v1/common/price.proto\"\311\005\n\017OrderA"
    "ctivation\0224\n\013submit_time\030\001 \001(\0132\032.google."
    "protobuf.TimestampH\000\210\001\001\022\034\n\017submit_delay_"
    "ms\030\002 \001(\003H\001\210\001\001\0224\n\013cancel_time\030\003 \001(\0132\032.goo"
    "gle.protobuf.TimestampH\002\210\001\001\022\034\n\017cancel_de"
    "lay_ms\030\004 \001(\003H\003\210\001\001\022\?\n\026activation_cancel_t"
    "ime\030\005 \001(\0132\032.google.protobuf.TimestampH\004\210"
    "\001\001\022\'\n\032activation_cancel_delay_ms\030\006 \001(\003H\005"
    "\210\001\001\0220\n\004mode\030\007 \001(\0162\035.t4proto.v1.common.Ma"
    "rketModeH\006\210\001\001\022,\n\005price\030\010 \001(\0132\030.t4proto.v"
    "1.common.PriceH\007\210\001\001\022\023\n\006volume\030\t \001(\005H\010\210\001\001"
    "\0223\n\tbid_offer\030\n \001(\0162\033.t4proto.v1.common."
    "BidOfferH\t\210\001\001\022\024\n\007implied\030\013 \001(\010H\n\210\001\001\022\031\n\014q"
    "ueue_submit\030\014 \001(\010H\013\210\001\001B\016\n\014_submit_timeB\022"
    "\n\020_submit_delay_msB\016\n\014_cancel_timeB\022\n\020_c"
    "ancel_delay_msB\031\n\027_activation_cancel_tim"
    "eB\035\n\033_activation_cancel_delay_msB\007\n\005_mod"
    "eB\010\n\006_priceB\t\n\007_volumeB\014\n\n_bid_offerB\n\n\010"
    "_impliedB\017\n\r_queue_submit\"\365\006\n\013OrderSubmi"
    "t\022\024\n\007user_id\030\001 \001(\tH\000\210\001\001\022\022\n\naccount_id\030\002 "
    "\001(\t\022\021\n\tmarket_id\030\003 \001(\t\0220\n\norder_link\030\004 \001"
    "(\0162\034.t4proto.v1.common.OrderLink\022\036\n\026manu"
    "al_order_indicator\030\005 \001(\010\022:\n\006orders\030\006 \003(\013"
    "2*.t4proto.v1.orderrouting.OrderSubmit.O"
    "rder\032\216\005\n\005Order\022,\n\010buy_sell\030\001 \001(\0162\032.t4pro"
    "to.v1.common.BuySell\0220\n\nprice_type\030\002 \001(\016"
    "2\034.t4proto.v1.common.PriceType\022.\n\ttime_t"
    "ype\030\003 \001(\0162\033.t4proto.v1.common.TimeType\022\016"
    "\n\006volume\030\004 \001(\005\022\025\n\010max_show\030\005 \001(\005H\000\210\001\001\022\027\n"
    "\nmax_volume\030\006 \001(\005H\001\210\001\001\0222\n\013limit_price\030\007 "
    "\001(\0132\030.t4proto.v1.common.PriceH\002\210\001\001\0221\n\nst"
    "op_price\030\010 \001(\0132\030.t4proto.v1.common.Price"
    "H\003\210\001\001\0225\n\016trail_distance\030\t \001(\0132\030.t4proto."
    "v1.common.PriceH\004\210\001\001\022\020\n\003tag\030\n \001(\tH\005\210\001\001\022\?"
    "\n\017activation_type\030\013 \001(\0162!.t4proto.v1.com"
    "mon.ActivationTypeH\006\210\001\001\022F\n\017activation_da"
    "ta\030\014 \001(\0132(.t4proto.v1.orderrouting.Order"
    "ActivationH\007\210\001\001B\013\n\t_max_showB\r\n\013_max_vol"
    "umeB\016\n\014_limit_priceB\r\n\013_stop_priceB\021\n\017_t"
    "rail_distanceB\006\n\004_tagB\022\n\020_activation_typ"
    "eB\022\n\020_activation_dataB\n\n\010_user_id\"\357\004\n\013Or"
    "derRevise\022\017\n\007user_id\030\001 \001(\t\022\022\n\naccount_id"
    "\030\002 \001(\t\022\021\n\tmarket_id\030\003 \001(\t\022\036\n\026manual_orde"
    "r_indicator\030\004 \001(\010\022>\n\trevisions\030\005 \003(\0132+.t"
    "4proto.v1.orderrouting.OrderRevise.Revis"
    "e\032\307\003\n\006Revise\022\021\n\tunique_id\030\001 \001(\t\022\023\n\006volum"
    "e\030\002 \001(\005H\000\210\001\001\022\025\n\010max_show\030\003 \001(\005H\001\210\001\001\022\027\n\nm"
    "ax_volume\030\004 \001(\005H\002\210\001\001\0222\n\013limit_price\030\005 \001("
    "\0132\030.t4proto.v1.common.PriceH\003\210\001\001\0221\n\nstop"
    "_price\030\006 \001(\0132\030.t4proto.v1.common.PriceH\004"
    "\210\001\001\0222\n\013trail_price\030\007 \001(\0132\030.t4proto.v1.co"
    "mmon.PriceH\005\210\001\001\022\020\n\003tag\030\010 \001(\tH\006\210\001\001\022F\n\017act"
    "ivation_data\030\t \001(\0132(.t4proto.v1.orderrou"
    "ting.OrderActivationH\007\210\001\001B\t\n\007_volumeB\013\n\t"
    "_max_showB\r\n\013_max_volumeB\016\n\014_limit_price"
    "B\r\n\013_stop_priceB\016\n\014_trail_priceB\006\n\004_tagB"
    "\022\n\020_activation_data\"\320\001\n\tOrderPull\022\017\n\007use"
    "r_id\030\001 \001(\t\022\022\n\naccount_id\030\002 \001(\t\022\021\n\tmarket"
    "_id\030\003 \001(\t\022\036\n\026manual_order_indicator\030\004 \001("
    "\010\0226\n\005pulls\030\005 \003(\0132\'.t4proto.v1.orderrouti"
    "ng.OrderPull.Pull\0323\n\004Pull\022\021\n\tunique_id\030\001"
    " \001(\t\022\020\n\003tag\030\002 \001(\tH\000\210\001\001B\006\n\004_tag\"\211\003\n\tCreat"
    "eUDS\022\022\n\nrequest_id\030\001 \001(\t\022\017\n\007user_id\030\002 \001("
    "\t\022\022\n\naccount_id\030\003 \001(\t\0226\n\rstrategy_type\030\004"
    " \001(\0162\037.t4proto.v1.common.StrategyType\0224\n"
    "\004legs\030\005 \003(\0132&.t4proto.v1.orderrouting.Cr"
    "eateUDS.Leg\032\324\001\n\003Leg\022\023\n\013exchange_id\030\001 \001(\t"
    "\022\023\n\013contract_id\030\002 \001(\t\022\021\n\tmarket_id\030\003 \001(\t"
    "\022,\n\010buy_sell\030\004 \001(\0162\032.t4proto.v1.common.B"
    "uySell\022\016\n\006volume\030\005 \001(\005\022\'\n\005price\030\006 \001(\0132\030."
    "t4proto.v1.common.Price\022)\n\005delta\030\007 \001(\0132\032"
    ".t4proto.v1.common.Decimal\"\216\003\n\021OrderUpda"
    "teFailed\022\021\n\tunique_id\030\001 \001(\t\022\022\n\naccount_i"
    "d\030\002 \001(\t\022\021\n\tmarket_id\030\003 \001(\t\022(\n\004time\030\004 \001(\013"
    "2\032.google.protobuf.Timestamp\0221\n\rexchange"
    "_time\030\005 \001(\0132\032.google.protobuf.Timestamp\022"
    ".\n\006change\030\006 \001(\0162\036.t4proto.v1.common.Orde"
    "rChange\022.\n\006status\030\007 \001(\0162\036.t4proto.v1.com"
    "mon.OrderStatus\022\025\n\rstatus_detail\030\010 \001(\t\022<"
    "\n\020response_pending\030\t \001(\0162\".t4proto.v1.co"
    "mmon.ResponsePending\022\025\n\rtag_cl_ord_id\030\n "
    "\001(\t\022\026\n\016sequence_order\030\013 \001(\005\"\240\014\n\021OrderUpd"
    "ateStatus\022\021\n\tunique_id\030\001 \001(\t\022\022\n\naccount_"
    "id\030\002 \001(\t\022\021\n\tmarket_id\030\003 \001(\t\022(\n\004time\030\004 \001("
    "\0132\032.google.protobuf.Timestamp\0221\n\rexchang"
    "e_time\030\005 \001(\0132\032.google.protobuf.Timestamp"
    "\022.\n\006change\030\006 \001(\0162\036.t4proto.v1.common.Ord"
    "erChange\022.\n\006status\030\007 \001(\0162\036.t4proto.v1.co"
    "mmon.OrderStatus\022\025\n\rstatus_detail\030\010 \001(\t\022"
    "<\n\020response_pending\030\t \001(\0162\".t4proto.v1.c"
    "ommon.ResponsePending\022\031\n\021exchange_order_"
    "id\030\n \001(\t\022\026\n\016current_volume\030\013 \001(\005\0225\n\023curr"
    "ent_limit_price\030\014 \001(\0132\030.t4proto.v1.commo"
    "n.Price\0224\n\022current_stop_price\030\r \001(\0132\030.t4"
    "proto.v1.common.Price\0220\n\nprice_type\030\016 \001("
    "\0162\034.t4proto.v1.common.PriceType\022.\n\ttime_"
    "type\030\017 \001(\0162\033.t4proto.v1.common.TimeType\022"
    "\026\n\016working_volume\030\020 \001(\005\022\032\n\022executing_log"
    "in_id\030\021 \001(\t\022:\n\017activation_type\030\022 \001(\0162!.t"
    "4proto.v1.common.ActivationType\022-\n\013trail"
    "_price\030\023 \001(\0132\030.t4proto.v1.common.Price\022\030"
    "\n\020current_max_show\030\024 \001(\005\022\017\n\007user_id\030\025 \001("
    "\t\022\021\n\tuser_name\030\026 \001(\t\022\024\n\014user_address\030\027 \001"
    "(\t\022\022\n\nsession_id\030\030 \001(\t\022\016\n\006app_id\030\031 \001(\t\022\020"
    "\n\010app_name\030\032 \001(\t\022\027\n\017routing_user_id\030\033 \001("
    "\t\022\031\n\021routing_user_name\030\034 \001(\t\022\022\n\nnew_volu"
    "me\030\035 \001(\005\0221\n\017new_limit_price\030\036 \001(\0132\030.t4pr"
    "oto.v1.common.Price\0220\n\016new_stop_price\030\037 "
    "\001(\0132\030.t4proto.v1.common.Price\022\024\n\014new_max"
    "_show\030  \001(\005\022\013\n\003tag\030! \001(\t\022\025\n\rtag_cl_ord_i"
    "d\030\" \001(\t\022\032\n\022tag_orig_cl_ord_id\030# \001(\t\022\016\n\006s"
    "mp_id\030$ \001(\t\022\031\n\021exchange_login_id\030% \001(\t\022\031"
    "\n\021exchange_location\030& \001(\t\022\031\n\021ats_regulat"
    "ory_id\030\' \001(\t\022\022\n\nmax_volume\030( \001(\005\022\026\n\016sequ"
    "ence_order\030) \001(\005\022\034\n\024authorized_trader_id"
    "\030* \001(\t\022[\n\021instruction_extra\030+ \003(\0132@.t4pr"
    "oto.v1.orderrouting.OrderUpdateStatus.In"
    "structionExtraEntry\0224\n\010app_type\030, \001(\0162\"."
    "t4proto.v1.common.ApplicationType\022\032\n\022act"
    "ivation_details\030- \001(\t\0327\n\025InstructionExtr"
    "aEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\330"
    "\004\n\020OrderUpdateTrade\022\021\n\tunique_id\030\001 \001(\t\022\022"
    "\n\naccount_id\030\002 \001(\t\022\021\n\tmarket_id\030\003 \001(\t\022(\n"
    "\004time\030\004 \001(\0132\032.google.protobuf.Timestamp\022"
    "1\n\rexchange_time\030\005 \001(\0132\032.google.protobuf"
    ".Timestamp\022.\n\006change\030\006 \001(\0162\036.t4proto.v1."
    "common.OrderChange\022.\n\006status\030\007 \001(\0162\036.t4p"
    "roto.v1.common.OrderStatus\022\025\n\rstatus_det"
    "ail\030\010 \001(\t\022<\n\020response_pending\030\t \001(\0162\".t4"
    "proto.v1.common.ResponsePending\022\031\n\021total"
    "_fill_volume\030\n \001(\005\022\026\n\016working_volume\030\013 \001"
    "(\005\022\016\n\006volume\030\014 \001(\005\022\'\n\005price\030\r \001(\0132\030.t4pr"
    "oto.v1.common.Price\022\027\n\017residual_volume\030\016"
    " \001(\005\022\031\n\021exchange_trade_id\030\017 \001(\t\022\025\n\rcontr"
    "a_trader\030\020 \001(\t\022\025\n\rcontra_broker\030\021 \001(\t\022\022\n"
    "\ntrade_date\030\022 \001(\003\022\026\n\016sequence_order\030\023 \001("
    "\005\"\273\004\n\023OrderUpdateTradeLeg\022\021\n\tunique_id\030\001"
    " \001(\t\022\022\n\naccount_id\030\002 \001(\t\022\021\n\tmarket_id\030\003 "
    "\001(\t\022(\n\004time\030\004 \001(\0132\032.google.protobuf.Time"
    "stamp\0221\n\rexchange_time\030\005 \001(\0132\032.google.pr"
    "otobuf.Timestamp\022.\n\006change\030\006 \001(\0162\036.t4pro"
    "to.v1.common.OrderChange\022.\n\006status\030\007 \001(\016"
    "2\036.t4proto.v1.common.OrderStatus\022\025\n\rstat"
    "us_detail\030\010 \001(\t\022<\n\020response_pending\030\t \001("
    "\0162\".t4proto.v1.common.ResponsePending\022\021\n"
    "\tleg_index\030\n \001(\005\022\016\n\006volume\030\013 \001(\005\022\'\n\005pric"
    "e\030\014 \001(\0132\030.t4proto.v1.common.Price\022\031\n\021exc"
    "hange_trade_id\030\r \001(\t\022\025\n\rcontra_trader\030\016 "
    "\001(\t\022\025\n\rcontra_broker\030\017 \001(\t\022\027\n\017residual_v"
    "olume\030\020 \001(\005\022\022\n\ntrade_date\030\021 \001(\003\022\026\n\016seque"
    "nce_order\030\022 \001(\005\"\223\034\n\013OrderUpdate\022\021\n\tuniqu"
    "e_id\030\001 \001(\t\022\022\n\naccount_id\030\002 \001(\t\022\021\n\tmarket"
    "_id\030\003 \001(\t\022(\n\004time\030\004 \001(\0132\032.google.protobu"
    "f.Timestamp\0221\n\rexchange_time\030\005 \001(\0132\032.goo"
    "gle.protobuf.Timestamp\022.\n\006change\030\006 \001(\0162\036"
    ".t4proto.v1.common.OrderChange\022.\n\006status"
    "\030\007 \001(\0162\036.t4proto.v1.common.OrderStatus\022\025"
    "\n\rstatus_detail\030\010 \001(\t\022<\n\020response_pendin"
    "g\030\t \001(\0162\".t4proto.v1.common.ResponsePend"
    "ing\022\031\n\021exchange_order_id\030\n \001(\t\022/\n\013submit"
    "_time\030\013 \001(\0132\032.google.protobuf.Timestamp\022"
    "\022\n\ntrade_date\030\014 \001(\003\022\023\n\013exchange_id\030\r \001(\t"
    "\022\031\n\021exchange_login_id\030\016 \001(\t\022\032\n\022executing"
    "_login_id\030\017 \001(\t\022\031\n\021exchange_location\030\020 \001"
    "(\t\022\017\n\007user_id\030\021 \001(\t\022\021\n\tuser_name\030\022 \001(\t\022\024"
    "\n\014user_address\030\023 \001(\t\022\022\n\nsession_id\030\024 \001(\t"
    "\022\016\n\006app_id\030\025 \001(\t\022\020\n\010app_name\030\026 \001(\t\022,\n\010bu"
    "y_sell\030\027 \001(\0162\032.t4proto.v1.common.BuySell"
    "\0220\n\nprice_type\030\030 \001(\0162\034.t4proto.v1.common"
    ".PriceType\022.\n\ttime_type\030\031 \001(\0162\033.t4proto."
    "v1.common.TimeType\022\026\n\016current_volume\030\032 \001"
    "(\005\0225\n\023current_limit_price\030\033 \001(\0132\030.t4prot"
    "o.v1.common.Price\0224\n\022current_stop_price\030"
    "\034 \001(\0132\030.t4proto.v1.common.Price\022\022\n\nnew_v"
    "olume\030\035 \001(\005\0221\n\017new_limit_price\030\036 \001(\0132\030.t"
    "4proto.v1.common.Price\0220\n\016new_stop_price"
    "\030\037 \001(\0132\030.t4proto.v1.common.Price\0220\n\nopen"
    "_close\030  \001(\0162\034.t4proto.v1.common.OpenClo"
    "se\022\026\n\016account_number\030! \001(\t\022#\n\003cti\030\" \001(\0162"
    "\026.t4proto.v1.common.CTI\022)\n\006origin\030# \001(\0162"
    "\031.t4proto.v1.common.Origin\0224\n\014account_co"
    "de\030$ \001(\0162\036.t4proto.v1.common.AccountCode"
    "\022\031\n\021member_allocation\030% \001(\t\022\031\n\021trader_al"
    "location\030& \001(\t\022\032\n\022customer_reference\030\' \001"
    "(\t\022N\n\030cust_order_handling_inst\030( \001(\0162,.t"
    "4proto.v1.common.CustOrderHandlingInstTy"
    "pe\022E\n\023avg_price_indicator\030) \001(\0162(.t4prot"
    "o.v1.common.AvgPriceIndicatorType\022\032\n\022avg"
    "_price_group_id\030* \001(\t\022L\n\031clearing_trade_"
    "price_type\030+ \001(\0162).t4proto.v1.common.Cle"
    "aringTradePriceType\0222\n\013billing_fee\030, \001(\016"
    "2\035.t4proto.v1.common.BillingFee\022\027\n\017omnib"
    "us_account\030- \001(\t\022\032\n\022executing_group_id\030."
    " \001(\t\022\013\n\003tag\030/ \001(\t\022\031\n\021total_fill_volume\0300"
    " \001(\005\022\026\n\016working_volume\0301 \001(\005\022\"\n\032exchange"
    "_total_fill_volume\0302 \001(\005\022-\n\013trail_price\030"
    "3 \001(\0132\030.t4proto.v1.common.Price\022\037\n\027trail"
    "_revision_interval\0304 \001(\005\022\035\n\025trail_revisi"
    "on_change\0305 \001(\005\0220\n\norder_link\0306 \001(\0162\034.t4"
    "proto.v1.common.OrderLink\022\025\n\rorders_link"
    "ed\0307 \001(\t\022:\n\017activation_type\0308 \001(\0162!.t4pr"
    "oto.v1.common.ActivationType\0228\n\014primary_"
    "user\0309 \001(\0162\".t4proto.v1.common.PrimaryUs"
    "erType\022\030\n\020current_max_show\030: \001(\005\022\024\n\014new_"
    "max_show\030; \001(\005\022\027\n\017routing_user_id\030< \001(\t\022"
    "\031\n\021routing_user_name\030= \001(\t\0224\n\014order_sour"
    "ce\030> \001(\0162\036.t4proto.v1.common.OrderSource"
    "\022A\n\023order_source_method\030\? \001(\0162$.t4proto."
    "v1.common.OrderSourceMethod\0224\n\010app_type\030"
    "@ \001(\0162\".t4proto.v1.common.ApplicationTyp"
    "e\0222\n\013master_type\030A \001(\0162\035.t4proto.v1.comm"
    "on.MasterType\022\025\n\rtag_cl_ord_id\030B \001(\t\022\032\n\022"
    "tag_orig_cl_ord_id\030C \001(\t\022\027\n\017tag_relation"
    "_id\030D \001(\t\022\016\n\006smp_id\030E \001(\t\022\026\n\016sequence_or"
    "der\030F \001(\005\022\031\n\021ats_regulatory_id\030G \001(\t\022\022\n\n"
    "max_volume\030H \001(\005\022\034\n\024authorized_trader_id"
    "\030I \001(\t\022U\n\021instruction_extra\030J \003(\0132:.t4pr"
    "oto.v1.orderrouting.OrderUpdate.Instruct"
    "ionExtraEntry\0220\n\014receive_time\030K \001(\0132\032.go"
    "ogle.protobuf.Timestamp\022\032\n\022activation_de"
    "tails\030L \001(\t\022:\n\006trades\030M \003(\0132*.t4proto.v1"
    ".orderrouting.OrderUpdate.Trade\022A\n\ntrade"
    "_legs\030N \003(\0132-.t4proto.v1.orderrouting.Or"
    "derUpdate.TradeLeg\032\253\002\n\005Trade\022\026\n\016sequence"
    "_order\030\001 \001(\005\022\016\n\006volume\030\002 \001(\005\022\'\n\005price\030\003 "
    "\001(\0132\030.t4proto.v1.common.Price\022\027\n\017residua"
    "l_volume\030\004 \001(\005\022(\n\004time\030\005 \001(\0132\032.google.pr"
    "otobuf.Timestamp\022\031\n\021exchange_trade_id\030\006 "
    "\001(\t\0221\n\rexchange_time\030\007 \001(\0132\032.google.prot"
    "obuf.Timestamp\022\025\n\rcontra_trader\030\010 \001(\t\022\025\n"
    "\rcontra_broker\030\t \001(\t\022\022\n\ntrade_date\030\n \001(\003"
    "\032\301\002\n\010TradeLeg\022\026\n\016sequence_order\030\001 \001(\005\022\021\n"
    "\tleg_index\030\002 \001(\005\022\016\n\006volume\030\003 \001(\005\022\'\n\005pric"
    "e\030\004 \001(\0132\030.t4proto.v1.common.Price\022(\n\004tim"
    "e\030\005 \001(\0132\032.google.protobuf.Timestamp\022\031\n\021e"
    "xchange_trade_id\030\006 \001(\t\0221\n\rexchange_time\030"
    "\007 \001(\0132\032.google.protobuf.Timestamp\022\025\n\rcon"
    "tra_trader\030\010 \001(\t\022\025\n\rcontra_broker\030\t \001(\t\022"
    "\027\n\017residual_volume\030\n \001(\005\022\022\n\ntrade_date\030\013"
    " \001(\003\0327\n\025InstructionExtraEntry\022\013\n\003key\030\001 \001"
    "(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\221\003\n\027OrderUpdateMul"
    "tiMessage\022<\n\014order_update\030\003 \001(\0132$.t4prot"
    "o.v1.orderrouting.OrderUpdateH\000\022I\n\023order"
    "_update_failed\030\004 \001(\0132*.t4proto.v1.orderr"
    "outing.OrderUpdateFailedH\000\022I\n\023order_upda"
    "te_status\030\005 \001(\0132*.t4proto.v1.orderroutin"
    "g.OrderUpdateStatusH\000\022G\n\022order_update_tr"
    "ade\030\006 \001(\0132).t4proto.v1.orderrouting.Orde"
    "rUpdateTradeH\000\022N\n\026order_update_trade_leg"
    "\030\007 \001(\0132,.t4proto.v1.orderrouting.OrderUp"
    "dateTradeLegH\000B\t\n\007payload\"\220\001\n\020OrderUpdat"
    "eMulti\022\021\n\tmarket_id\030\001 \001(\t\022\022\n\naccount_id\030"
    "\002 \001(\t\022\022\n\nhistorical\030\003 \001(\010\022A\n\007updates\030\004 \003"
    "(\01320.t4proto.v1.orderrouting.OrderUpdate"
    "MultiMessage\"\203\001\n\021CreateUDSResponse\022\022\n\nre"
    "quest_id\030\001 \001(\t\022\025\n\rstatus_detail\030\002 \001(\t\022\021\n"
    "\tMarketRef\030\003 \001(\t\0220\n\nuds_status\030\004 \001(\0162\034.t"
    "4proto.v1.common.UDSStatusb\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_deps[3] =
    {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_t4_2fv1_2fcommon_2fenums_2eproto,
        &::descriptor_table_t4_2fv1_2fcommon_2fprice_2eproto,
};
static ::absl::once_flag descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto = {
    false,
    false,
    10434,
    descriptor_table_protodef_t4_2fv1_2forderrouting_2forderrouting_2eproto,
    "t4/v1/orderrouting/orderrouting.proto",
    &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
    descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_deps,
    3,
    21,
    schemas,
    file_default_instances,
    TableStruct_t4_2fv1_2forderrouting_2forderrouting_2eproto::offsets,
    file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto,
    file_level_enum_descriptors_t4_2fv1_2forderrouting_2forderrouting_2eproto,
    file_level_service_descriptors_t4_2fv1_2forderrouting_2forderrouting_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter() {
  return &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_t4_2fv1_2forderrouting_2forderrouting_2eproto(&descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto);
namespace t4proto {
namespace v1 {
namespace orderrouting {
// ===================================================================

class OrderActivation::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderActivation>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OrderActivation, _impl_._has_bits_);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& submit_time(const OrderActivation* msg);
  static void set_has_submit_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_submit_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& cancel_time(const OrderActivation* msg);
  static void set_has_cancel_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cancel_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& activation_cancel_time(const OrderActivation* msg);
  static void set_has_activation_cancel_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_activation_cancel_delay_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::t4proto::v1::common::Price& price(const OrderActivation* msg);
  static void set_has_price(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bid_offer(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_implied(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_queue_submit(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderActivation::_Internal::submit_time(const OrderActivation* msg) {
  return *msg->_impl_.submit_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderActivation::_Internal::cancel_time(const OrderActivation* msg) {
  return *msg->_impl_.cancel_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderActivation::_Internal::activation_cancel_time(const OrderActivation* msg) {
  return *msg->_impl_.activation_cancel_time_;
}
const ::t4proto::v1::common::Price&
OrderActivation::_Internal::price(const OrderActivation* msg) {
  return *msg->_impl_.price_;
}
void OrderActivation::clear_submit_time() {
  if (_impl_.submit_time_ != nullptr) _impl_.submit_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void OrderActivation::clear_cancel_time() {
  if (_impl_.cancel_time_ != nullptr) _impl_.cancel_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void OrderActivation::clear_activation_cancel_time() {
  if (_impl_.activation_cancel_time_ != nullptr) _impl_.activation_cancel_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void OrderActivation::clear_price() {
  if (_impl_.price_ != nullptr) _impl_.price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
OrderActivation::OrderActivation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.orderrouting.OrderActivation)
}
OrderActivation::OrderActivation(const OrderActivation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderActivation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.submit_time_){nullptr}
    , decltype(_impl_.cancel_time_){nullptr}
    , decltype(_impl_.activation_cancel_time_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.submit_delay_ms_) {}

    , decltype(_impl_.cancel_delay_ms_) {}

    , decltype(_impl_.activation_cancel_delay_ms_) {}

    , decltype(_impl_.mode_) {}

    , decltype(_impl_.volume_) {}

    , decltype(_impl_.bid_offer_) {}

    , decltype(_impl_.implied_) {}

    , decltype(_impl_.queue_submit_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.submit_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.submit_time_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.cancel_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.cancel_time_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.activation_cancel_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.activation_cancel_time_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.price_ = new ::t4proto::v1::common::Price(*from._impl_.price_);
  }
  ::memcpy(&_impl_.submit_delay_ms_, &from._impl_.submit_delay_ms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.queue_submit_) -
    reinterpret_cast<char*>(&_impl_.submit_delay_ms_)) + sizeof(_impl_.queue_submit_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.orderrouting.OrderActivation)
}

inline void OrderActivation::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.submit_time_){nullptr}
    , decltype(_impl_.cancel_time_){nullptr}
    , decltype(_impl_.activation_cancel_time_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.submit_delay_ms_) { ::int64_t{0} }

    , decltype(_impl_.cancel_delay_ms_) { ::int64_t{0} }

    , decltype(_impl_.activation_cancel_delay_ms_) { ::int64_t{0} }

    , decltype(_impl_.mode_) { 0 }

    , decltype(_impl_.volume_) { 0 }

    , decltype(_impl_.bid_offer_) { 0 }

    , decltype(_impl_.implied_) { false }

    , decltype(_impl_.queue_submit_) { false }

  };
}

OrderActivation::~OrderActivation() {
  // @@protoc_insertion_point(destructor:t4proto.v1.orderrouting.OrderActivation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderActivation::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.submit_time_;
  if (this != internal_default_instance()) delete _impl_.cancel_time_;
  if (this != internal_default_instance()) delete _impl_.activation_cancel_time_;
  if (this != internal_default_instance()) delete _impl_.price_;
}

void OrderActivation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderActivation::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.orderrouting.OrderActivation)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.submit_time_ != nullptr);
      _impl_.submit_time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.cancel_time_ != nullptr);
      _impl_.cancel_time_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.activation_cancel_time_ != nullptr);
      _impl_.activation_cancel_time_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.price_ != nullptr);
      _impl_.price_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.submit_delay_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.mode_) -
        reinterpret_cast<char*>(&_impl_.submit_delay_ms_)) + sizeof(_impl_.mode_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&_impl_.volume_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.queue_submit_) -
        reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.queue_submit_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderActivation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .google.protobuf.Timestamp submit_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_submit_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 submit_delay_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_submit_delay_ms(&has_bits);
          _impl_.submit_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Timestamp cancel_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 cancel_delay_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_cancel_delay_ms(&has_bits);
          _impl_.cancel_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Timestamp activation_cancel_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_cancel_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 activation_cancel_delay_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_activation_cancel_delay_ms(&has_bits);
          _impl_.activation_cancel_delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .t4proto.v1.common.MarketMode mode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::t4proto::v1::common::MarketMode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .t4proto.v1.common.Price price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 volume = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_volume(&has_bits);
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .t4proto.v1.common.BidOffer bid_offer = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_bid_offer(static_cast<::t4proto::v1::common::BidOffer>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool implied = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_implied(&has_bits);
          _impl_.implied_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool queue_submit = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_queue_submit(&has_bits);
          _impl_.queue_submit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderActivation::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.orderrouting.OrderActivation)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional .google.protobuf.Timestamp submit_time = 1;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::submit_time(this),
        _Internal::submit_time(this).GetCachedSize(), target, stream);
  }

  // optional int64 submit_delay_ms = 2;
  if ((_impl_._has_bits_[0] & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_submit_delay_ms(), target);
  }

  // optional .google.protobuf.Timestamp cancel_time = 3;
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cancel_time(this),
        _Internal::cancel_time(this).GetCachedSize(), target, stream);
  }

  // optional int64 cancel_delay_ms = 4;
  if ((_impl_._has_bits_[0] & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_cancel_delay_ms(), target);
  }

  // optional .google.protobuf.Timestamp activation_cancel_time = 5;
  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::activation_cancel_time(this),
        _Internal::activation_cancel_time(this).GetCachedSize(), target, stream);
  }

  // optional int64 activation_cancel_delay_ms = 6;
  if ((_impl_._has_bits_[0] & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_activation_cancel_delay_ms(), target);
  }

  // optional .t4proto.v1.common.MarketMode mode = 7;
  if ((_impl_._has_bits_[0] & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_mode(), target);
  }

  // optional .t4proto.v1.common.Price price = 8;
  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // optional int32 volume = 9;
  if ((_impl_._has_bits_[0] & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        9, this->_internal_volume(), target);
  }

  // optional .t4proto.v1.common.BidOffer bid_offer = 10;
  if ((_impl_._has_bits_[0] & 0x00000200u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_bid_offer(), target);
  }

  // optional bool implied = 11;
  if ((_impl_._has_bits_[0] & 0x00000400u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_implied(), target);
  }

  // optional bool queue_submit = 12;
  if ((_impl_._has_bits_[0] & 0x00000800u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this->_internal_queue_submit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.orderrouting.OrderActivation)
  return target;
}

::size_t OrderActivation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.orderrouting.OrderActivation)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .google.protobuf.Timestamp submit_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.submit_time_);
    }

    // optional .google.protobuf.Timestamp cancel_time = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.cancel_time_);
    }

    // optional .google.protobuf.Timestamp activation_cancel_time = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activation_cancel_time_);
    }

    // optional .t4proto.v1.common.Price price = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.price_);
    }

    // optional int64 submit_delay_ms = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_submit_delay_ms());
    }

    // optional int64 cancel_delay_ms = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_cancel_delay_ms());
    }

    // optional int64 activation_cancel_delay_ms = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_activation_cancel_delay_ms());
    }

    // optional .t4proto.v1.common.MarketMode mode = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional int32 volume = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_volume());
    }

    // optional .t4proto.v1.common.BidOffer bid_offer = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_bid_offer());
    }

    // optional bool implied = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2;
    }

    // optional bool queue_submit = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderActivation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderActivation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderActivation::GetClassData() const { return &_class_data_; }


void OrderActivation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderActivation*>(&to_msg);
  auto& from = static_cast<const OrderActivation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.orderrouting.OrderActivation)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_submit_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_submit_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_cancel_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_cancel_time());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_activation_cancel_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_activation_cancel_time());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_price()->::t4proto::v1::common::Price::MergeFrom(
          from._internal_price());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.submit_delay_ms_ = from._impl_.submit_delay_ms_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.cancel_delay_ms_ = from._impl_.cancel_delay_ms_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.activation_cancel_delay_ms_ = from._impl_.activation_cancel_delay_ms_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.mode_ = from._impl_.mode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.volume_ = from._impl_.volume_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.bid_offer_ = from._impl_.bid_offer_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.implied_ = from._impl_.implied_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.queue_submit_ = from._impl_.queue_submit_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderActivation::CopyFrom(const OrderActivation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.orderrouting.OrderActivation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderActivation::IsInitialized() const {
  return true;
}

void OrderActivation::InternalSwap(OrderActivation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderActivation, _impl_.queue_submit_)
      + sizeof(OrderActivation::_impl_.queue_submit_)
      - PROTOBUF_FIELD_OFFSET(OrderActivation, _impl_.submit_time_)>(
          reinterpret_cast<char*>(&_impl_.submit_time_),
          reinterpret_cast<char*>(&other->_impl_.submit_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderActivation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter, &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
      file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[0]);
}
// ===================================================================

class OrderSubmit_Order::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderSubmit_Order>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OrderSubmit_Order, _impl_._has_bits_);
  static void set_has_max_show(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::t4proto::v1::common::Price& limit_price(const OrderSubmit_Order* msg);
  static void set_has_limit_price(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::t4proto::v1::common::Price& stop_price(const OrderSubmit_Order* msg);
  static void set_has_stop_price(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::t4proto::v1::common::Price& trail_distance(const OrderSubmit_Order* msg);
  static void set_has_trail_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_activation_type(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::t4proto::v1::orderrouting::OrderActivation& activation_data(const OrderSubmit_Order* msg);
  static void set_has_activation_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::t4proto::v1::common::Price&
OrderSubmit_Order::_Internal::limit_price(const OrderSubmit_Order* msg) {
  return *msg->_impl_.limit_price_;
}
const ::t4proto::v1::common::Price&
OrderSubmit_Order::_Internal::stop_price(const OrderSubmit_Order* msg) {
  return *msg->_impl_.stop_price_;
}
const ::t4proto::v1::common::Price&
OrderSubmit_Order::_Internal::trail_distance(const OrderSubmit_Order* msg) {
  return *msg->_impl_.trail_distance_;
}
const ::t4proto::v1::orderrouting::OrderActivation&
OrderSubmit_Order::_Internal::activation_data(const OrderSubmit_Order* msg) {
  return *msg->_impl_.activation_data_;
}
void OrderSubmit_Order::clear_limit_price() {
  if (_impl_.limit_price_ != nullptr) _impl_.limit_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void OrderSubmit_Order::clear_stop_price() {
  if (_impl_.stop_price_ != nullptr) _impl_.stop_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void OrderSubmit_Order::clear_trail_distance() {
  if (_impl_.trail_distance_ != nullptr) _impl_.trail_distance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
OrderSubmit_Order::OrderSubmit_Order(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.orderrouting.OrderSubmit.Order)
}
OrderSubmit_Order::OrderSubmit_Order(const OrderSubmit_Order& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderSubmit_Order* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_) {}

    , decltype(_impl_.limit_price_){nullptr}
    , decltype(_impl_.stop_price_){nullptr}
    , decltype(_impl_.trail_distance_){nullptr}
    , decltype(_impl_.activation_data_){nullptr}
    , decltype(_impl_.buy_sell_) {}

    , decltype(_impl_.price_type_) {}

    , decltype(_impl_.time_type_) {}

    , decltype(_impl_.volume_) {}

    , decltype(_impl_.max_show_) {}

    , decltype(_impl_.max_volume_) {}

    , decltype(_impl_.activation_type_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.tag_.Set(from._internal_tag(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.limit_price_ = new ::t4proto::v1::common::Price(*from._impl_.limit_price_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.stop_price_ = new ::t4proto::v1::common::Price(*from._impl_.stop_price_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.trail_distance_ = new ::t4proto::v1::common::Price(*from._impl_.trail_distance_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.activation_data_ = new ::t4proto::v1::orderrouting::OrderActivation(*from._impl_.activation_data_);
  }
  ::memcpy(&_impl_.buy_sell_, &from._impl_.buy_sell_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.activation_type_) -
    reinterpret_cast<char*>(&_impl_.buy_sell_)) + sizeof(_impl_.activation_type_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.orderrouting.OrderSubmit.Order)
}

inline void OrderSubmit_Order::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.tag_) {}

    , decltype(_impl_.limit_price_){nullptr}
    , decltype(_impl_.stop_price_){nullptr}
    , decltype(_impl_.trail_distance_){nullptr}
    , decltype(_impl_.activation_data_){nullptr}
    , decltype(_impl_.buy_sell_) { 0 }

    , decltype(_impl_.price_type_) { 0 }

    , decltype(_impl_.time_type_) { 0 }

    , decltype(_impl_.volume_) { 0 }

    , decltype(_impl_.max_show_) { 0 }

    , decltype(_impl_.max_volume_) { 0 }

    , decltype(_impl_.activation_type_) { 0 }

  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderSubmit_Order::~OrderSubmit_Order() {
  // @@protoc_insertion_point(destructor:t4proto.v1.orderrouting.OrderSubmit.Order)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderSubmit_Order::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.Destroy();
  if (this != internal_default_instance()) delete _impl_.limit_price_;
  if (this != internal_default_instance()) delete _impl_.stop_price_;
  if (this != internal_default_instance()) delete _impl_.trail_distance_;
  if (this != internal_default_instance()) delete _impl_.activation_data_;
}

void OrderSubmit_Order::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderSubmit_Order::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.orderrouting.OrderSubmit.Order)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.limit_price_ != nullptr);
      _impl_.limit_price_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.stop_price_ != nullptr);
      _impl_.stop_price_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.trail_distance_ != nullptr);
      _impl_.trail_distance_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.activation_data_ != nullptr);
      _impl_.activation_data_->Clear();
    }
  }
  ::memset(&_impl_.buy_sell_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.volume_) -
      reinterpret_cast<char*>(&_impl_.buy_sell_)) + sizeof(_impl_.volume_));
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.max_show_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.activation_type_) -
        reinterpret_cast<char*>(&_impl_.max_show_)) + sizeof(_impl_.activation_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderSubmit_Order::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .t4proto.v1.common.BuySell buy_sell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_buy_sell(static_cast<::t4proto::v1::common::BuySell>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.PriceType price_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_price_type(static_cast<::t4proto::v1::common::PriceType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.TimeType time_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_time_type(static_cast<::t4proto::v1::common::TimeType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 max_show = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_max_show(&has_bits);
          _impl_.max_show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 max_volume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_max_volume(&has_bits);
          _impl_.max_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .t4proto.v1.common.Price limit_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .t4proto.v1.common.Price stop_price = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .t4proto.v1.common.Price trail_distance = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_trail_distance(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string tag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderSubmit.Order.tag"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .t4proto.v1.common.ActivationType activation_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_activation_type(static_cast<::t4proto::v1::common::ActivationType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .t4proto.v1.orderrouting.OrderActivation activation_data = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_data(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderSubmit_Order::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.orderrouting.OrderSubmit.Order)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .t4proto.v1.common.BuySell buy_sell = 1;
  if (this->_internal_buy_sell() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_buy_sell(), target);
  }

  // .t4proto.v1.common.PriceType price_type = 2;
  if (this->_internal_price_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_price_type(), target);
  }

  // .t4proto.v1.common.TimeType time_type = 3;
  if (this->_internal_time_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_time_type(), target);
  }

  // int32 volume = 4;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_volume(), target);
  }

  // optional int32 max_show = 5;
  if ((_impl_._has_bits_[0] & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_max_show(), target);
  }

  // optional int32 max_volume = 6;
  if ((_impl_._has_bits_[0] & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_max_volume(), target);
  }

  // optional .t4proto.v1.common.Price limit_price = 7;
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::limit_price(this),
        _Internal::limit_price(this).GetCachedSize(), target, stream);
  }

  // optional .t4proto.v1.common.Price stop_price = 8;
  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::stop_price(this),
        _Internal::stop_price(this).GetCachedSize(), target, stream);
  }

  // optional .t4proto.v1.common.Price trail_distance = 9;
  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::trail_distance(this),
        _Internal::trail_distance(this).GetCachedSize(), target, stream);
  }

  // optional string tag = 10;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    const std::string& _s = this->_internal_tag();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderSubmit.Order.tag");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // optional .t4proto.v1.common.ActivationType activation_type = 11;
  if ((_impl_._has_bits_[0] & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        11, this->_internal_activation_type(), target);
  }

  // optional .t4proto.v1.orderrouting.OrderActivation activation_data = 12;
  if ((_impl_._has_bits_[0] & 0x00000010u) != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::activation_data(this),
        _Internal::activation_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.orderrouting.OrderSubmit.Order)
  return target;
}

::size_t OrderSubmit_Order::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.orderrouting.OrderSubmit.Order)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string tag = 10;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_tag());
    }

    // optional .t4proto.v1.common.Price limit_price = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.limit_price_);
    }

    // optional .t4proto.v1.common.Price stop_price = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stop_price_);
    }

    // optional .t4proto.v1.common.Price trail_distance = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trail_distance_);
    }

    // optional .t4proto.v1.orderrouting.OrderActivation activation_data = 12;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activation_data_);
    }

  }
  // .t4proto.v1.common.BuySell buy_sell = 1;
  if (this->_internal_buy_sell() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_buy_sell());
  }

  // .t4proto.v1.common.PriceType price_type = 2;
  if (this->_internal_price_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_price_type());
  }

  // .t4proto.v1.common.TimeType time_type = 3;
  if (this->_internal_time_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_time_type());
  }

  // int32 volume = 4;
  if (this->_internal_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_volume());
  }

  if (cached_has_bits & 0x000000e0u) {
    // optional int32 max_show = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_max_show());
    }

    // optional int32 max_volume = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_max_volume());
    }

    // optional .t4proto.v1.common.ActivationType activation_type = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_activation_type());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderSubmit_Order::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderSubmit_Order::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderSubmit_Order::GetClassData() const { return &_class_data_; }


void OrderSubmit_Order::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderSubmit_Order*>(&to_msg);
  auto& from = static_cast<const OrderSubmit_Order&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.orderrouting.OrderSubmit.Order)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_limit_price()->::t4proto::v1::common::Price::MergeFrom(
          from._internal_limit_price());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_stop_price()->::t4proto::v1::common::Price::MergeFrom(
          from._internal_stop_price());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_trail_distance()->::t4proto::v1::common::Price::MergeFrom(
          from._internal_trail_distance());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_activation_data()->::t4proto::v1::orderrouting::OrderActivation::MergeFrom(
          from._internal_activation_data());
    }
  }
  if (from._internal_buy_sell() != 0) {
    _this->_internal_set_buy_sell(from._internal_buy_sell());
  }
  if (from._internal_price_type() != 0) {
    _this->_internal_set_price_type(from._internal_price_type());
  }
  if (from._internal_time_type() != 0) {
    _this->_internal_set_time_type(from._internal_time_type());
  }
  if (from._internal_volume() != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  if (cached_has_bits & 0x000000e0u) {
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.max_show_ = from._impl_.max_show_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.max_volume_ = from._impl_.max_volume_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.activation_type_ = from._impl_.activation_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderSubmit_Order::CopyFrom(const OrderSubmit_Order& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.orderrouting.OrderSubmit.Order)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderSubmit_Order::IsInitialized() const {
  return true;
}

void OrderSubmit_Order::InternalSwap(OrderSubmit_Order* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_, lhs_arena,
                                       &other->_impl_.tag_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderSubmit_Order, _impl_.activation_type_)
      + sizeof(OrderSubmit_Order::_impl_.activation_type_)
      - PROTOBUF_FIELD_OFFSET(OrderSubmit_Order, _impl_.limit_price_)>(
          reinterpret_cast<char*>(&_impl_.limit_price_),
          reinterpret_cast<char*>(&other->_impl_.limit_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderSubmit_Order::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter, &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
      file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[1]);
}
// ===================================================================

class OrderSubmit::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderSubmit>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OrderSubmit, _impl_._has_bits_);
  static void set_has_user_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OrderSubmit::OrderSubmit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.orderrouting.OrderSubmit)
}
OrderSubmit::OrderSubmit(const OrderSubmit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderSubmit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orders_){from._impl_.orders_}
    , decltype(_impl_.user_id_) {}

    , decltype(_impl_.account_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.order_link_) {}

    , decltype(_impl_.manual_order_indicator_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), _this->GetArenaForAllocation());
  }
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.order_link_, &from._impl_.order_link_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.manual_order_indicator_) -
    reinterpret_cast<char*>(&_impl_.order_link_)) + sizeof(_impl_.manual_order_indicator_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.orderrouting.OrderSubmit)
}

inline void OrderSubmit::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.orders_){arena}
    , decltype(_impl_.user_id_) {}

    , decltype(_impl_.account_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.order_link_) { 0 }

    , decltype(_impl_.manual_order_indicator_) { false }

  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderSubmit::~OrderSubmit() {
  // @@protoc_insertion_point(destructor:t4proto.v1.orderrouting.OrderSubmit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderSubmit::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.orders_.~RepeatedPtrField();
  _impl_.user_id_.Destroy();
  _impl_.account_id_.Destroy();
  _impl_.market_id_.Destroy();
}

void OrderSubmit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderSubmit::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.orderrouting.OrderSubmit)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.orders_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.user_id_.ClearNonDefaultToEmpty();
  }
  _impl_.account_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  ::memset(&_impl_.order_link_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.manual_order_indicator_) -
      reinterpret_cast<char*>(&_impl_.order_link_)) + sizeof(_impl_.manual_order_indicator_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderSubmit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderSubmit.user_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderSubmit.account_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderSubmit.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.OrderLink order_link = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_order_link(static_cast<::t4proto::v1::common::OrderLink>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool manual_order_indicator = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.manual_order_indicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .t4proto.v1.orderrouting.OrderSubmit.Order orders = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_orders(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderSubmit::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.orderrouting.OrderSubmit)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional string user_id = 1;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    const std::string& _s = this->_internal_user_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderSubmit.user_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string account_id = 2;
  if (!this->_internal_account_id().empty()) {
    const std::string& _s = this->_internal_account_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderSubmit.account_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderSubmit.market_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .t4proto.v1.common.OrderLink order_link = 4;
  if (this->_internal_order_link() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_order_link(), target);
  }

  // bool manual_order_indicator = 5;
  if (this->_internal_manual_order_indicator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_manual_order_indicator(), target);
  }

  // repeated .t4proto.v1.orderrouting.OrderSubmit.Order orders = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_orders_size()); i < n; i++) {
    const auto& repfield = this->_internal_orders(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.orderrouting.OrderSubmit)
  return target;
}

::size_t OrderSubmit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.orderrouting.OrderSubmit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .t4proto.v1.orderrouting.OrderSubmit.Order orders = 6;
  total_size += 1UL * this->_internal_orders_size();
  for (const auto& msg : this->_impl_.orders_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string user_id = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_user_id());
  }

  // string account_id = 2;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_id());
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // .t4proto.v1.common.OrderLink order_link = 4;
  if (this->_internal_order_link() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_order_link());
  }

  // bool manual_order_indicator = 5;
  if (this->_internal_manual_order_indicator() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderSubmit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderSubmit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderSubmit::GetClassData() const { return &_class_data_; }


void OrderSubmit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderSubmit*>(&to_msg);
  auto& from = static_cast<const OrderSubmit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.orderrouting.OrderSubmit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.orders_.MergeFrom(from._impl_.orders_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_order_link() != 0) {
    _this->_internal_set_order_link(from._internal_order_link());
  }
  if (from._internal_manual_order_indicator() != 0) {
    _this->_internal_set_manual_order_indicator(from._internal_manual_order_indicator());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderSubmit::CopyFrom(const OrderSubmit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.orderrouting.OrderSubmit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderSubmit::IsInitialized() const {
  return true;
}

void OrderSubmit::InternalSwap(OrderSubmit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.orders_.InternalSwap(&other->_impl_.orders_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_id_, lhs_arena,
                                       &other->_impl_.user_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_id_, lhs_arena,
                                       &other->_impl_.account_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderSubmit, _impl_.manual_order_indicator_)
      + sizeof(OrderSubmit::_impl_.manual_order_indicator_)
      - PROTOBUF_FIELD_OFFSET(OrderSubmit, _impl_.order_link_)>(
          reinterpret_cast<char*>(&_impl_.order_link_),
          reinterpret_cast<char*>(&other->_impl_.order_link_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderSubmit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter, &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
      file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[2]);
}
// ===================================================================

class OrderRevise_Revise::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderRevise_Revise>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OrderRevise_Revise, _impl_._has_bits_);
  static void set_has_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_max_show(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_max_volume(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::t4proto::v1::common::Price& limit_price(const OrderRevise_Revise* msg);
  static void set_has_limit_price(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::t4proto::v1::common::Price& stop_price(const OrderRevise_Revise* msg);
  static void set_has_stop_price(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::t4proto::v1::common::Price& trail_price(const OrderRevise_Revise* msg);
  static void set_has_trail_price(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::t4proto::v1::orderrouting::OrderActivation& activation_data(const OrderRevise_Revise* msg);
  static void set_has_activation_data(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::t4proto::v1::common::Price&
OrderRevise_Revise::_Internal::limit_price(const OrderRevise_Revise* msg) {
  return *msg->_impl_.limit_price_;
}
const ::t4proto::v1::common::Price&
OrderRevise_Revise::_Internal::stop_price(const OrderRevise_Revise* msg) {
  return *msg->_impl_.stop_price_;
}
const ::t4proto::v1::common::Price&
OrderRevise_Revise::_Internal::trail_price(const OrderRevise_Revise* msg) {
  return *msg->_impl_.trail_price_;
}
const ::t4proto::v1::orderrouting::OrderActivation&
OrderRevise_Revise::_Internal::activation_data(const OrderRevise_Revise* msg) {
  return *msg->_impl_.activation_data_;
}
void OrderRevise_Revise::clear_limit_price() {
  if (_impl_.limit_price_ != nullptr) _impl_.limit_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void OrderRevise_Revise::clear_stop_price() {
  if (_impl_.stop_price_ != nullptr) _impl_.stop_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void OrderRevise_Revise::clear_trail_price() {
  if (_impl_.trail_price_ != nullptr) _impl_.trail_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
OrderRevise_Revise::OrderRevise_Revise(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.orderrouting.OrderRevise.Revise)
}
OrderRevise_Revise::OrderRevise_Revise(const OrderRevise_Revise& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderRevise_Revise* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unique_id_) {}

    , decltype(_impl_.tag_) {}

    , decltype(_impl_.limit_price_){nullptr}
    , decltype(_impl_.stop_price_){nullptr}
    , decltype(_impl_.trail_price_){nullptr}
    , decltype(_impl_.activation_data_){nullptr}
    , decltype(_impl_.volume_) {}

    , decltype(_impl_.max_show_) {}

    , decltype(_impl_.max_volume_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unique_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unique_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unique_id().empty()) {
    _this->_impl_.unique_id_.Set(from._internal_unique_id(), _this->GetArenaForAllocation());
  }
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.tag_.Set(from._internal_tag(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.limit_price_ = new ::t4proto::v1::common::Price(*from._impl_.limit_price_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.stop_price_ = new ::t4proto::v1::common::Price(*from._impl_.stop_price_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.trail_price_ = new ::t4proto::v1::common::Price(*from._impl_.trail_price_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.activation_data_ = new ::t4proto::v1::orderrouting::OrderActivation(*from._impl_.activation_data_);
  }
  ::memcpy(&_impl_.volume_, &from._impl_.volume_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.max_volume_) -
    reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.max_volume_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.orderrouting.OrderRevise.Revise)
}

inline void OrderRevise_Revise::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unique_id_) {}

    , decltype(_impl_.tag_) {}

    , decltype(_impl_.limit_price_){nullptr}
    , decltype(_impl_.stop_price_){nullptr}
    , decltype(_impl_.trail_price_){nullptr}
    , decltype(_impl_.activation_data_){nullptr}
    , decltype(_impl_.volume_) { 0 }

    , decltype(_impl_.max_show_) { 0 }

    , decltype(_impl_.max_volume_) { 0 }

  };
  _impl_.unique_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unique_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderRevise_Revise::~OrderRevise_Revise() {
  // @@protoc_insertion_point(destructor:t4proto.v1.orderrouting.OrderRevise.Revise)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderRevise_Revise::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unique_id_.Destroy();
  _impl_.tag_.Destroy();
  if (this != internal_default_instance()) delete _impl_.limit_price_;
  if (this != internal_default_instance()) delete _impl_.stop_price_;
  if (this != internal_default_instance()) delete _impl_.trail_price_;
  if (this != internal_default_instance()) delete _impl_.activation_data_;
}

void OrderRevise_Revise::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderRevise_Revise::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.orderrouting.OrderRevise.Revise)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unique_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.limit_price_ != nullptr);
      _impl_.limit_price_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.stop_price_ != nullptr);
      _impl_.stop_price_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.trail_price_ != nullptr);
      _impl_.trail_price_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.activation_data_ != nullptr);
      _impl_.activation_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.volume_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.max_volume_) -
        reinterpret_cast<char*>(&_impl_.volume_)) + sizeof(_impl_.max_volume_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderRevise_Revise::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unique_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderRevise.Revise.unique_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 volume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_volume(&has_bits);
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 max_show = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_max_show(&has_bits);
          _impl_.max_show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 max_volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_max_volume(&has_bits);
          _impl_.max_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .t4proto.v1.common.Price limit_price = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_limit_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .t4proto.v1.common.Price stop_price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .t4proto.v1.common.Price trail_price = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_trail_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string tag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderRevise.Revise.tag"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .t4proto.v1.orderrouting.OrderActivation activation_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_activation_data(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderRevise_Revise::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.orderrouting.OrderRevise.Revise)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string unique_id = 1;
  if (!this->_internal_unique_id().empty()) {
    const std::string& _s = this->_internal_unique_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderRevise.Revise.unique_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int32 volume = 2;
  if ((_impl_._has_bits_[0] & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_volume(), target);
  }

  // optional int32 max_show = 3;
  if ((_impl_._has_bits_[0] & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_max_show(), target);
  }

  // optional int32 max_volume = 4;
  if ((_impl_._has_bits_[0] & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_max_volume(), target);
  }

  // optional .t4proto.v1.common.Price limit_price = 5;
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::limit_price(this),
        _Internal::limit_price(this).GetCachedSize(), target, stream);
  }

  // optional .t4proto.v1.common.Price stop_price = 6;
  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::stop_price(this),
        _Internal::stop_price(this).GetCachedSize(), target, stream);
  }

  // optional .t4proto.v1.common.Price trail_price = 7;
  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::trail_price(this),
        _Internal::trail_price(this).GetCachedSize(), target, stream);
  }

  // optional string tag = 8;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    const std::string& _s = this->_internal_tag();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderRevise.Revise.tag");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // optional .t4proto.v1.orderrouting.OrderActivation activation_data = 9;
  if ((_impl_._has_bits_[0] & 0x00000010u) != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::activation_data(this),
        _Internal::activation_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.orderrouting.OrderRevise.Revise)
  return target;
}

::size_t OrderRevise_Revise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.orderrouting.OrderRevise.Revise)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string unique_id = 1;
  if (!this->_internal_unique_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_unique_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string tag = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_tag());
    }

    // optional .t4proto.v1.common.Price limit_price = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.limit_price_);
    }

    // optional .t4proto.v1.common.Price stop_price = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stop_price_);
    }

    // optional .t4proto.v1.common.Price trail_price = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.trail_price_);
    }

    // optional .t4proto.v1.orderrouting.OrderActivation activation_data = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.activation_data_);
    }

    // optional int32 volume = 2;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_volume());
    }

    // optional int32 max_show = 3;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_max_show());
    }

    // optional int32 max_volume = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_max_volume());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderRevise_Revise::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderRevise_Revise::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderRevise_Revise::GetClassData() const { return &_class_data_; }


void OrderRevise_Revise::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderRevise_Revise*>(&to_msg);
  auto& from = static_cast<const OrderRevise_Revise&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.orderrouting.OrderRevise.Revise)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_unique_id().empty()) {
    _this->_internal_set_unique_id(from._internal_unique_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_limit_price()->::t4proto::v1::common::Price::MergeFrom(
          from._internal_limit_price());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_stop_price()->::t4proto::v1::common::Price::MergeFrom(
          from._internal_stop_price());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_trail_price()->::t4proto::v1::common::Price::MergeFrom(
          from._internal_trail_price());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_activation_data()->::t4proto::v1::orderrouting::OrderActivation::MergeFrom(
          from._internal_activation_data());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.volume_ = from._impl_.volume_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.max_show_ = from._impl_.max_show_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.max_volume_ = from._impl_.max_volume_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderRevise_Revise::CopyFrom(const OrderRevise_Revise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.orderrouting.OrderRevise.Revise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderRevise_Revise::IsInitialized() const {
  return true;
}

void OrderRevise_Revise::InternalSwap(OrderRevise_Revise* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.unique_id_, lhs_arena,
                                       &other->_impl_.unique_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_, lhs_arena,
                                       &other->_impl_.tag_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderRevise_Revise, _impl_.max_volume_)
      + sizeof(OrderRevise_Revise::_impl_.max_volume_)
      - PROTOBUF_FIELD_OFFSET(OrderRevise_Revise, _impl_.limit_price_)>(
          reinterpret_cast<char*>(&_impl_.limit_price_),
          reinterpret_cast<char*>(&other->_impl_.limit_price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderRevise_Revise::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter, &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
      file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[3]);
}
// ===================================================================

class OrderRevise::_Internal {
 public:
};

OrderRevise::OrderRevise(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.orderrouting.OrderRevise)
}
OrderRevise::OrderRevise(const OrderRevise& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderRevise* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.revisions_){from._impl_.revisions_}
    , decltype(_impl_.user_id_) {}

    , decltype(_impl_.account_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.manual_order_indicator_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), _this->GetArenaForAllocation());
  }
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.manual_order_indicator_ = from._impl_.manual_order_indicator_;
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.orderrouting.OrderRevise)
}

inline void OrderRevise::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.revisions_){arena}
    , decltype(_impl_.user_id_) {}

    , decltype(_impl_.account_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.manual_order_indicator_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderRevise::~OrderRevise() {
  // @@protoc_insertion_point(destructor:t4proto.v1.orderrouting.OrderRevise)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderRevise::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.revisions_.~RepeatedPtrField();
  _impl_.user_id_.Destroy();
  _impl_.account_id_.Destroy();
  _impl_.market_id_.Destroy();
}

void OrderRevise::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderRevise::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.orderrouting.OrderRevise)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.revisions_.Clear();
  _impl_.user_id_.ClearToEmpty();
  _impl_.account_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.manual_order_indicator_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderRevise::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderRevise.user_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderRevise.account_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderRevise.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool manual_order_indicator = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.manual_order_indicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .t4proto.v1.orderrouting.OrderRevise.Revise revisions = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_revisions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderRevise::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.orderrouting.OrderRevise)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    const std::string& _s = this->_internal_user_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderRevise.user_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string account_id = 2;
  if (!this->_internal_account_id().empty()) {
    const std::string& _s = this->_internal_account_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderRevise.account_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderRevise.market_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bool manual_order_indicator = 4;
  if (this->_internal_manual_order_indicator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_manual_order_indicator(), target);
  }

  // repeated .t4proto.v1.orderrouting.OrderRevise.Revise revisions = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_revisions_size()); i < n; i++) {
    const auto& repfield = this->_internal_revisions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.orderrouting.OrderRevise)
  return target;
}

::size_t OrderRevise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.orderrouting.OrderRevise)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .t4proto.v1.orderrouting.OrderRevise.Revise revisions = 5;
  total_size += 1UL * this->_internal_revisions_size();
  for (const auto& msg : this->_impl_.revisions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_user_id());
  }

  // string account_id = 2;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_id());
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // bool manual_order_indicator = 4;
  if (this->_internal_manual_order_indicator() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderRevise::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderRevise::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderRevise::GetClassData() const { return &_class_data_; }


void OrderRevise::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderRevise*>(&to_msg);
  auto& from = static_cast<const OrderRevise&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.orderrouting.OrderRevise)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.revisions_.MergeFrom(from._impl_.revisions_);
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_manual_order_indicator() != 0) {
    _this->_internal_set_manual_order_indicator(from._internal_manual_order_indicator());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderRevise::CopyFrom(const OrderRevise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.orderrouting.OrderRevise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderRevise::IsInitialized() const {
  return true;
}

void OrderRevise::InternalSwap(OrderRevise* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.revisions_.InternalSwap(&other->_impl_.revisions_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_id_, lhs_arena,
                                       &other->_impl_.user_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_id_, lhs_arena,
                                       &other->_impl_.account_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);

  swap(_impl_.manual_order_indicator_, other->_impl_.manual_order_indicator_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderRevise::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter, &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
      file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[4]);
}
// ===================================================================

class OrderPull_Pull::_Internal {
 public:
  using HasBits = decltype(std::declval<OrderPull_Pull>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(OrderPull_Pull, _impl_._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OrderPull_Pull::OrderPull_Pull(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.orderrouting.OrderPull.Pull)
}
OrderPull_Pull::OrderPull_Pull(const OrderPull_Pull& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderPull_Pull* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unique_id_) {}

    , decltype(_impl_.tag_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unique_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unique_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unique_id().empty()) {
    _this->_impl_.unique_id_.Set(from._internal_unique_id(), _this->GetArenaForAllocation());
  }
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.tag_.Set(from._internal_tag(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.orderrouting.OrderPull.Pull)
}

inline void OrderPull_Pull::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.unique_id_) {}

    , decltype(_impl_.tag_) {}

  };
  _impl_.unique_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unique_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderPull_Pull::~OrderPull_Pull() {
  // @@protoc_insertion_point(destructor:t4proto.v1.orderrouting.OrderPull.Pull)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderPull_Pull::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unique_id_.Destroy();
  _impl_.tag_.Destroy();
}

void OrderPull_Pull::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderPull_Pull::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.orderrouting.OrderPull.Pull)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unique_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.tag_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderPull_Pull::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unique_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderPull.Pull.unique_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderPull.Pull.tag"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderPull_Pull::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.orderrouting.OrderPull.Pull)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string unique_id = 1;
  if (!this->_internal_unique_id().empty()) {
    const std::string& _s = this->_internal_unique_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderPull.Pull.unique_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string tag = 2;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    const std::string& _s = this->_internal_tag();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderPull.Pull.tag");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.orderrouting.OrderPull.Pull)
  return target;
}

::size_t OrderPull_Pull::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.orderrouting.OrderPull.Pull)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string unique_id = 1;
  if (!this->_internal_unique_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_unique_id());
  }

  // optional string tag = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tag());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderPull_Pull::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderPull_Pull::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderPull_Pull::GetClassData() const { return &_class_data_; }


void OrderPull_Pull::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderPull_Pull*>(&to_msg);
  auto& from = static_cast<const OrderPull_Pull&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.orderrouting.OrderPull.Pull)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_unique_id().empty()) {
    _this->_internal_set_unique_id(from._internal_unique_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_tag(from._internal_tag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderPull_Pull::CopyFrom(const OrderPull_Pull& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.orderrouting.OrderPull.Pull)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderPull_Pull::IsInitialized() const {
  return true;
}

void OrderPull_Pull::InternalSwap(OrderPull_Pull* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.unique_id_, lhs_arena,
                                       &other->_impl_.unique_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_, lhs_arena,
                                       &other->_impl_.tag_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderPull_Pull::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter, &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
      file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[5]);
}
// ===================================================================

class OrderPull::_Internal {
 public:
};

OrderPull::OrderPull(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.orderrouting.OrderPull)
}
OrderPull::OrderPull(const OrderPull& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderPull* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pulls_){from._impl_.pulls_}
    , decltype(_impl_.user_id_) {}

    , decltype(_impl_.account_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.manual_order_indicator_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), _this->GetArenaForAllocation());
  }
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.manual_order_indicator_ = from._impl_.manual_order_indicator_;
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.orderrouting.OrderPull)
}

inline void OrderPull::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.pulls_){arena}
    , decltype(_impl_.user_id_) {}

    , decltype(_impl_.account_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.manual_order_indicator_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderPull::~OrderPull() {
  // @@protoc_insertion_point(destructor:t4proto.v1.orderrouting.OrderPull)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderPull::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.pulls_.~RepeatedPtrField();
  _impl_.user_id_.Destroy();
  _impl_.account_id_.Destroy();
  _impl_.market_id_.Destroy();
}

void OrderPull::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderPull::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.orderrouting.OrderPull)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pulls_.Clear();
  _impl_.user_id_.ClearToEmpty();
  _impl_.account_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.manual_order_indicator_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderPull::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string user_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderPull.user_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderPull.account_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderPull.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool manual_order_indicator = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.manual_order_indicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .t4proto.v1.orderrouting.OrderPull.Pull pulls = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pulls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderPull::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.orderrouting.OrderPull)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    const std::string& _s = this->_internal_user_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderPull.user_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string account_id = 2;
  if (!this->_internal_account_id().empty()) {
    const std::string& _s = this->_internal_account_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderPull.account_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderPull.market_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // bool manual_order_indicator = 4;
  if (this->_internal_manual_order_indicator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_manual_order_indicator(), target);
  }

  // repeated .t4proto.v1.orderrouting.OrderPull.Pull pulls = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pulls_size()); i < n; i++) {
    const auto& repfield = this->_internal_pulls(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.orderrouting.OrderPull)
  return target;
}

::size_t OrderPull::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.orderrouting.OrderPull)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .t4proto.v1.orderrouting.OrderPull.Pull pulls = 5;
  total_size += 1UL * this->_internal_pulls_size();
  for (const auto& msg : this->_impl_.pulls_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string user_id = 1;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_user_id());
  }

  // string account_id = 2;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_id());
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // bool manual_order_indicator = 4;
  if (this->_internal_manual_order_indicator() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderPull::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderPull::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderPull::GetClassData() const { return &_class_data_; }


void OrderPull::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderPull*>(&to_msg);
  auto& from = static_cast<const OrderPull&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.orderrouting.OrderPull)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.pulls_.MergeFrom(from._impl_.pulls_);
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_manual_order_indicator() != 0) {
    _this->_internal_set_manual_order_indicator(from._internal_manual_order_indicator());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderPull::CopyFrom(const OrderPull& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.orderrouting.OrderPull)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderPull::IsInitialized() const {
  return true;
}

void OrderPull::InternalSwap(OrderPull* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.pulls_.InternalSwap(&other->_impl_.pulls_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_id_, lhs_arena,
                                       &other->_impl_.user_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_id_, lhs_arena,
                                       &other->_impl_.account_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);

  swap(_impl_.manual_order_indicator_, other->_impl_.manual_order_indicator_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderPull::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter, &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
      file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[6]);
}
// ===================================================================

class CreateUDS_Leg::_Internal {
 public:
  static const ::t4proto::v1::common::Price& price(const CreateUDS_Leg* msg);
  static const ::t4proto::v1::common::Decimal& delta(const CreateUDS_Leg* msg);
};

const ::t4proto::v1::common::Price&
CreateUDS_Leg::_Internal::price(const CreateUDS_Leg* msg) {
  return *msg->_impl_.price_;
}
const ::t4proto::v1::common::Decimal&
CreateUDS_Leg::_Internal::delta(const CreateUDS_Leg* msg) {
  return *msg->_impl_.delta_;
}
void CreateUDS_Leg::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
void CreateUDS_Leg::clear_delta() {
  if (GetArenaForAllocation() == nullptr && _impl_.delta_ != nullptr) {
    delete _impl_.delta_;
  }
  _impl_.delta_ = nullptr;
}
CreateUDS_Leg::CreateUDS_Leg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.orderrouting.CreateUDS.Leg)
}
CreateUDS_Leg::CreateUDS_Leg(const CreateUDS_Leg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateUDS_Leg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_id_) {}

    , decltype(_impl_.contract_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.delta_){nullptr}
    , decltype(_impl_.buy_sell_) {}

    , decltype(_impl_.volume_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.exchange_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_id().empty()) {
    _this->_impl_.exchange_id_.Set(from._internal_exchange_id(), _this->GetArenaForAllocation());
  }
  _impl_.contract_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contract_id().empty()) {
    _this->_impl_.contract_id_.Set(from._internal_contract_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::t4proto::v1::common::Price(*from._impl_.price_);
  }
  if (from._internal_has_delta()) {
    _this->_impl_.delta_ = new ::t4proto::v1::common::Decimal(*from._impl_.delta_);
  }
  ::memcpy(&_impl_.buy_sell_, &from._impl_.buy_sell_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.volume_) -
    reinterpret_cast<char*>(&_impl_.buy_sell_)) + sizeof(_impl_.volume_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.orderrouting.CreateUDS.Leg)
}

inline void CreateUDS_Leg::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_id_) {}

    , decltype(_impl_.contract_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.delta_){nullptr}
    , decltype(_impl_.buy_sell_) { 0 }

    , decltype(_impl_.volume_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.exchange_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contract_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contract_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateUDS_Leg::~CreateUDS_Leg() {
  // @@protoc_insertion_point(destructor:t4proto.v1.orderrouting.CreateUDS.Leg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateUDS_Leg::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exchange_id_.Destroy();
  _impl_.contract_id_.Destroy();
  _impl_.market_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.price_;
  if (this != internal_default_instance()) delete _impl_.delta_;
}

void CreateUDS_Leg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateUDS_Leg::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.orderrouting.CreateUDS.Leg)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exchange_id_.ClearToEmpty();
  _impl_.contract_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.delta_ != nullptr) {
    delete _impl_.delta_;
  }
  _impl_.delta_ = nullptr;
  ::memset(&_impl_.buy_sell_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.volume_) -
      reinterpret_cast<char*>(&_impl_.buy_sell_)) + sizeof(_impl_.volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateUDS_Leg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string exchange_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_exchange_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.CreateUDS.Leg.exchange_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string contract_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_contract_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.CreateUDS.Leg.contract_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.CreateUDS.Leg.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.BuySell buy_sell = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_buy_sell(static_cast<::t4proto::v1::common::BuySell>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 volume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price price = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Decimal delta = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_delta(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateUDS_Leg::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.orderrouting.CreateUDS.Leg)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string exchange_id = 1;
  if (!this->_internal_exchange_id().empty()) {
    const std::string& _s = this->_internal_exchange_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.CreateUDS.Leg.exchange_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string contract_id = 2;
  if (!this->_internal_contract_id().empty()) {
    const std::string& _s = this->_internal_contract_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.CreateUDS.Leg.contract_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.CreateUDS.Leg.market_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .t4proto.v1.common.BuySell buy_sell = 4;
  if (this->_internal_buy_sell() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_buy_sell(), target);
  }

  // int32 volume = 5;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_volume(), target);
  }

  // .t4proto.v1.common.Price price = 6;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.Decimal delta = 7;
  if (this->_internal_has_delta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::delta(this),
        _Internal::delta(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.orderrouting.CreateUDS.Leg)
  return target;
}

::size_t CreateUDS_Leg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.orderrouting.CreateUDS.Leg)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exchange_id = 1;
  if (!this->_internal_exchange_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange_id());
  }

  // string contract_id = 2;
  if (!this->_internal_contract_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contract_id());
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // .t4proto.v1.common.Price price = 6;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // .t4proto.v1.common.Decimal delta = 7;
  if (this->_internal_has_delta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.delta_);
  }

  // .t4proto.v1.common.BuySell buy_sell = 4;
  if (this->_internal_buy_sell() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_buy_sell());
  }

  // int32 volume = 5;
  if (this->_internal_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_volume());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateUDS_Leg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateUDS_Leg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateUDS_Leg::GetClassData() const { return &_class_data_; }


void CreateUDS_Leg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateUDS_Leg*>(&to_msg);
  auto& from = static_cast<const CreateUDS_Leg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.orderrouting.CreateUDS.Leg)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_exchange_id().empty()) {
    _this->_internal_set_exchange_id(from._internal_exchange_id());
  }
  if (!from._internal_contract_id().empty()) {
    _this->_internal_set_contract_id(from._internal_contract_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_price());
  }
  if (from._internal_has_delta()) {
    _this->_internal_mutable_delta()->::t4proto::v1::common::Decimal::MergeFrom(
        from._internal_delta());
  }
  if (from._internal_buy_sell() != 0) {
    _this->_internal_set_buy_sell(from._internal_buy_sell());
  }
  if (from._internal_volume() != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateUDS_Leg::CopyFrom(const CreateUDS_Leg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.orderrouting.CreateUDS.Leg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUDS_Leg::IsInitialized() const {
  return true;
}

void CreateUDS_Leg::InternalSwap(CreateUDS_Leg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_id_, lhs_arena,
                                       &other->_impl_.exchange_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_id_, lhs_arena,
                                       &other->_impl_.contract_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateUDS_Leg, _impl_.volume_)
      + sizeof(CreateUDS_Leg::_impl_.volume_)
      - PROTOBUF_FIELD_OFFSET(CreateUDS_Leg, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateUDS_Leg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter, &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
      file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[7]);
}
// ===================================================================

class CreateUDS::_Internal {
 public:
};

CreateUDS::CreateUDS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.orderrouting.CreateUDS)
}
CreateUDS::CreateUDS(const CreateUDS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateUDS* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.legs_){from._impl_.legs_}
    , decltype(_impl_.request_id_) {}

    , decltype(_impl_.user_id_) {}

    , decltype(_impl_.account_id_) {}

    , decltype(_impl_.strategy_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), _this->GetArenaForAllocation());
  }
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.strategy_type_ = from._impl_.strategy_type_;
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.orderrouting.CreateUDS)
}

inline void CreateUDS::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.legs_){arena}
    , decltype(_impl_.request_id_) {}

    , decltype(_impl_.user_id_) {}

    , decltype(_impl_.account_id_) {}

    , decltype(_impl_.strategy_type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateUDS::~CreateUDS() {
  // @@protoc_insertion_point(destructor:t4proto.v1.orderrouting.CreateUDS)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateUDS::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.legs_.~RepeatedPtrField();
  _impl_.request_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.account_id_.Destroy();
}

void CreateUDS::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateUDS::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.orderrouting.CreateUDS)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.legs_.Clear();
  _impl_.request_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.account_id_.ClearToEmpty();
  _impl_.strategy_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateUDS::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.CreateUDS.request_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.CreateUDS.user_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string account_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.CreateUDS.account_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.StrategyType strategy_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_strategy_type(static_cast<::t4proto::v1::common::StrategyType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .t4proto.v1.orderrouting.CreateUDS.Leg legs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_legs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateUDS::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.orderrouting.CreateUDS)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    const std::string& _s = this->_internal_request_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.CreateUDS.request_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    const std::string& _s = this->_internal_user_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.CreateUDS.user_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string account_id = 3;
  if (!this->_internal_account_id().empty()) {
    const std::string& _s = this->_internal_account_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.CreateUDS.account_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .t4proto.v1.common.StrategyType strategy_type = 4;
  if (this->_internal_strategy_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_strategy_type(), target);
  }

  // repeated .t4proto.v1.orderrouting.CreateUDS.Leg legs = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_legs_size()); i < n; i++) {
    const auto& repfield = this->_internal_legs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.orderrouting.CreateUDS)
  return target;
}

::size_t CreateUDS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.orderrouting.CreateUDS)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .t4proto.v1.orderrouting.CreateUDS.Leg legs = 5;
  total_size += 1UL * this->_internal_legs_size();
  for (const auto& msg : this->_impl_.legs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_request_id());
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_user_id());
  }

  // string account_id = 3;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_id());
  }

  // .t4proto.v1.common.StrategyType strategy_type = 4;
  if (this->_internal_strategy_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_strategy_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateUDS::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateUDS::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateUDS::GetClassData() const { return &_class_data_; }


void CreateUDS::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateUDS*>(&to_msg);
  auto& from = static_cast<const CreateUDS&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.orderrouting.CreateUDS)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.legs_.MergeFrom(from._impl_.legs_);
  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_strategy_type() != 0) {
    _this->_internal_set_strategy_type(from._internal_strategy_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateUDS::CopyFrom(const CreateUDS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.orderrouting.CreateUDS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUDS::IsInitialized() const {
  return true;
}

void CreateUDS::InternalSwap(CreateUDS* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.legs_.InternalSwap(&other->_impl_.legs_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.request_id_, lhs_arena,
                                       &other->_impl_.request_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_id_, lhs_arena,
                                       &other->_impl_.user_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_id_, lhs_arena,
                                       &other->_impl_.account_id_, rhs_arena);
  swap(_impl_.strategy_type_, other->_impl_.strategy_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateUDS::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter, &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
      file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[8]);
}
// ===================================================================

class OrderUpdateFailed::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const OrderUpdateFailed* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& exchange_time(const OrderUpdateFailed* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderUpdateFailed::_Internal::time(const OrderUpdateFailed* msg) {
  return *msg->_impl_.time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderUpdateFailed::_Internal::exchange_time(const OrderUpdateFailed* msg) {
  return *msg->_impl_.exchange_time_;
}
void OrderUpdateFailed::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
void OrderUpdateFailed::clear_exchange_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.exchange_time_ != nullptr) {
    delete _impl_.exchange_time_;
  }
  _impl_.exchange_time_ = nullptr;
}
OrderUpdateFailed::OrderUpdateFailed(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.orderrouting.OrderUpdateFailed)
}
OrderUpdateFailed::OrderUpdateFailed(const OrderUpdateFailed& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderUpdateFailed* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unique_id_) {}

    , decltype(_impl_.account_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.status_detail_) {}

    , decltype(_impl_.tag_cl_ord_id_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.exchange_time_){nullptr}
    , decltype(_impl_.change_) {}

    , decltype(_impl_.status_) {}

    , decltype(_impl_.response_pending_) {}

    , decltype(_impl_.sequence_order_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unique_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unique_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unique_id().empty()) {
    _this->_impl_.unique_id_.Set(from._internal_unique_id(), _this->GetArenaForAllocation());
  }
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.status_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_detail_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status_detail().empty()) {
    _this->_impl_.status_detail_.Set(from._internal_status_detail(), _this->GetArenaForAllocation());
  }
  _impl_.tag_cl_ord_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_cl_ord_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag_cl_ord_id().empty()) {
    _this->_impl_.tag_cl_ord_id_.Set(from._internal_tag_cl_ord_id(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  if (from._internal_has_exchange_time()) {
    _this->_impl_.exchange_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.exchange_time_);
  }
  ::memcpy(&_impl_.change_, &from._impl_.change_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.sequence_order_) -
    reinterpret_cast<char*>(&_impl_.change_)) + sizeof(_impl_.sequence_order_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.orderrouting.OrderUpdateFailed)
}

inline void OrderUpdateFailed::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.unique_id_) {}

    , decltype(_impl_.account_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.status_detail_) {}

    , decltype(_impl_.tag_cl_ord_id_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.exchange_time_){nullptr}
    , decltype(_impl_.change_) { 0 }

    , decltype(_impl_.status_) { 0 }

    , decltype(_impl_.response_pending_) { 0 }

    , decltype(_impl_.sequence_order_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.unique_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unique_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_detail_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_cl_ord_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_cl_ord_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderUpdateFailed::~OrderUpdateFailed() {
  // @@protoc_insertion_point(destructor:t4proto.v1.orderrouting.OrderUpdateFailed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderUpdateFailed::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unique_id_.Destroy();
  _impl_.account_id_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.status_detail_.Destroy();
  _impl_.tag_cl_ord_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
  if (this != internal_default_instance()) delete _impl_.exchange_time_;
}

void OrderUpdateFailed::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderUpdateFailed::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.orderrouting.OrderUpdateFailed)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unique_id_.ClearToEmpty();
  _impl_.account_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.status_detail_.ClearToEmpty();
  _impl_.tag_cl_ord_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.exchange_time_ != nullptr) {
    delete _impl_.exchange_time_;
  }
  _impl_.exchange_time_ = nullptr;
  ::memset(&_impl_.change_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.sequence_order_) -
      reinterpret_cast<char*>(&_impl_.change_)) + sizeof(_impl_.sequence_order_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderUpdateFailed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unique_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateFailed.unique_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateFailed.account_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateFailed.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp exchange_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_exchange_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.OrderChange change = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_change(static_cast<::t4proto::v1::common::OrderChange>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.OrderStatus status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::t4proto::v1::common::OrderStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string status_detail = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_status_detail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateFailed.status_detail"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.ResponsePending response_pending = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_response_pending(static_cast<::t4proto::v1::common::ResponsePending>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string tag_cl_ord_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_tag_cl_ord_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateFailed.tag_cl_ord_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 sequence_order = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _impl_.sequence_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderUpdateFailed::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.orderrouting.OrderUpdateFailed)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string unique_id = 1;
  if (!this->_internal_unique_id().empty()) {
    const std::string& _s = this->_internal_unique_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateFailed.unique_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string account_id = 2;
  if (!this->_internal_account_id().empty()) {
    const std::string& _s = this->_internal_account_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateFailed.account_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateFailed.market_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .google.protobuf.Timestamp time = 4;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp exchange_time = 5;
  if (this->_internal_has_exchange_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::exchange_time(this),
        _Internal::exchange_time(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.OrderChange change = 6;
  if (this->_internal_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_change(), target);
  }

  // .t4proto.v1.common.OrderStatus status = 7;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_status(), target);
  }

  // string status_detail = 8;
  if (!this->_internal_status_detail().empty()) {
    const std::string& _s = this->_internal_status_detail();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateFailed.status_detail");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // .t4proto.v1.common.ResponsePending response_pending = 9;
  if (this->_internal_response_pending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_response_pending(), target);
  }

  // string tag_cl_ord_id = 10;
  if (!this->_internal_tag_cl_ord_id().empty()) {
    const std::string& _s = this->_internal_tag_cl_ord_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateFailed.tag_cl_ord_id");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // int32 sequence_order = 11;
  if (this->_internal_sequence_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        11, this->_internal_sequence_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.orderrouting.OrderUpdateFailed)
  return target;
}

::size_t OrderUpdateFailed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.orderrouting.OrderUpdateFailed)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string unique_id = 1;
  if (!this->_internal_unique_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_unique_id());
  }

  // string account_id = 2;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_id());
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string status_detail = 8;
  if (!this->_internal_status_detail().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_status_detail());
  }

  // string tag_cl_ord_id = 10;
  if (!this->_internal_tag_cl_ord_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tag_cl_ord_id());
  }

  // .google.protobuf.Timestamp time = 4;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // .google.protobuf.Timestamp exchange_time = 5;
  if (this->_internal_has_exchange_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.exchange_time_);
  }

  // .t4proto.v1.common.OrderChange change = 6;
  if (this->_internal_change() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_change());
  }

  // .t4proto.v1.common.OrderStatus status = 7;
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .t4proto.v1.common.ResponsePending response_pending = 9;
  if (this->_internal_response_pending() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_response_pending());
  }

  // int32 sequence_order = 11;
  if (this->_internal_sequence_order() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sequence_order());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderUpdateFailed::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderUpdateFailed::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderUpdateFailed::GetClassData() const { return &_class_data_; }


void OrderUpdateFailed::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderUpdateFailed*>(&to_msg);
  auto& from = static_cast<const OrderUpdateFailed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.orderrouting.OrderUpdateFailed)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_unique_id().empty()) {
    _this->_internal_set_unique_id(from._internal_unique_id());
  }
  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_status_detail().empty()) {
    _this->_internal_set_status_detail(from._internal_status_detail());
  }
  if (!from._internal_tag_cl_ord_id().empty()) {
    _this->_internal_set_tag_cl_ord_id(from._internal_tag_cl_ord_id());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_has_exchange_time()) {
    _this->_internal_mutable_exchange_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_exchange_time());
  }
  if (from._internal_change() != 0) {
    _this->_internal_set_change(from._internal_change());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_response_pending() != 0) {
    _this->_internal_set_response_pending(from._internal_response_pending());
  }
  if (from._internal_sequence_order() != 0) {
    _this->_internal_set_sequence_order(from._internal_sequence_order());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderUpdateFailed::CopyFrom(const OrderUpdateFailed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.orderrouting.OrderUpdateFailed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderUpdateFailed::IsInitialized() const {
  return true;
}

void OrderUpdateFailed::InternalSwap(OrderUpdateFailed* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.unique_id_, lhs_arena,
                                       &other->_impl_.unique_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_id_, lhs_arena,
                                       &other->_impl_.account_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_detail_, lhs_arena,
                                       &other->_impl_.status_detail_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_cl_ord_id_, lhs_arena,
                                       &other->_impl_.tag_cl_ord_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderUpdateFailed, _impl_.sequence_order_)
      + sizeof(OrderUpdateFailed::_impl_.sequence_order_)
      - PROTOBUF_FIELD_OFFSET(OrderUpdateFailed, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderUpdateFailed::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter, &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
      file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[9]);
}
// ===================================================================

OrderUpdateStatus_InstructionExtraEntry_DoNotUse::OrderUpdateStatus_InstructionExtraEntry_DoNotUse() {}
OrderUpdateStatus_InstructionExtraEntry_DoNotUse::OrderUpdateStatus_InstructionExtraEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OrderUpdateStatus_InstructionExtraEntry_DoNotUse::MergeFrom(const OrderUpdateStatus_InstructionExtraEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OrderUpdateStatus_InstructionExtraEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter, &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
      file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[10]);
}
// ===================================================================

class OrderUpdateStatus::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const OrderUpdateStatus* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& exchange_time(const OrderUpdateStatus* msg);
  static const ::t4proto::v1::common::Price& current_limit_price(const OrderUpdateStatus* msg);
  static const ::t4proto::v1::common::Price& current_stop_price(const OrderUpdateStatus* msg);
  static const ::t4proto::v1::common::Price& trail_price(const OrderUpdateStatus* msg);
  static const ::t4proto::v1::common::Price& new_limit_price(const OrderUpdateStatus* msg);
  static const ::t4proto::v1::common::Price& new_stop_price(const OrderUpdateStatus* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderUpdateStatus::_Internal::time(const OrderUpdateStatus* msg) {
  return *msg->_impl_.time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderUpdateStatus::_Internal::exchange_time(const OrderUpdateStatus* msg) {
  return *msg->_impl_.exchange_time_;
}
const ::t4proto::v1::common::Price&
OrderUpdateStatus::_Internal::current_limit_price(const OrderUpdateStatus* msg) {
  return *msg->_impl_.current_limit_price_;
}
const ::t4proto::v1::common::Price&
OrderUpdateStatus::_Internal::current_stop_price(const OrderUpdateStatus* msg) {
  return *msg->_impl_.current_stop_price_;
}
const ::t4proto::v1::common::Price&
OrderUpdateStatus::_Internal::trail_price(const OrderUpdateStatus* msg) {
  return *msg->_impl_.trail_price_;
}
const ::t4proto::v1::common::Price&
OrderUpdateStatus::_Internal::new_limit_price(const OrderUpdateStatus* msg) {
  return *msg->_impl_.new_limit_price_;
}
const ::t4proto::v1::common::Price&
OrderUpdateStatus::_Internal::new_stop_price(const OrderUpdateStatus* msg) {
  return *msg->_impl_.new_stop_price_;
}
void OrderUpdateStatus::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
void OrderUpdateStatus::clear_exchange_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.exchange_time_ != nullptr) {
    delete _impl_.exchange_time_;
  }
  _impl_.exchange_time_ = nullptr;
}
void OrderUpdateStatus::clear_current_limit_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.current_limit_price_ != nullptr) {
    delete _impl_.current_limit_price_;
  }
  _impl_.current_limit_price_ = nullptr;
}
void OrderUpdateStatus::clear_current_stop_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.current_stop_price_ != nullptr) {
    delete _impl_.current_stop_price_;
  }
  _impl_.current_stop_price_ = nullptr;
}
void OrderUpdateStatus::clear_trail_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.trail_price_ != nullptr) {
    delete _impl_.trail_price_;
  }
  _impl_.trail_price_ = nullptr;
}
void OrderUpdateStatus::clear_new_limit_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.new_limit_price_ != nullptr) {
    delete _impl_.new_limit_price_;
  }
  _impl_.new_limit_price_ = nullptr;
}
void OrderUpdateStatus::clear_new_stop_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.new_stop_price_ != nullptr) {
    delete _impl_.new_stop_price_;
  }
  _impl_.new_stop_price_ = nullptr;
}
OrderUpdateStatus::OrderUpdateStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &OrderUpdateStatus::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.orderrouting.OrderUpdateStatus)
}
OrderUpdateStatus::OrderUpdateStatus(const OrderUpdateStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderUpdateStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.instruction_extra_)*/{}
    , decltype(_impl_.unique_id_) {}

    , decltype(_impl_.account_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.status_detail_) {}

    , decltype(_impl_.exchange_order_id_) {}

    , decltype(_impl_.executing_login_id_) {}

    , decltype(_impl_.user_id_) {}

    , decltype(_impl_.user_name_) {}

    , decltype(_impl_.user_address_) {}

    , decltype(_impl_.session_id_) {}

    , decltype(_impl_.app_id_) {}

    , decltype(_impl_.app_name_) {}

    , decltype(_impl_.routing_user_id_) {}

    , decltype(_impl_.routing_user_name_) {}

    , decltype(_impl_.tag_) {}

    , decltype(_impl_.tag_cl_ord_id_) {}

    , decltype(_impl_.tag_orig_cl_ord_id_) {}

    , decltype(_impl_.smp_id_) {}

    , decltype(_impl_.exchange_login_id_) {}

    , decltype(_impl_.exchange_location_) {}

    , decltype(_impl_.ats_regulatory_id_) {}

    , decltype(_impl_.authorized_trader_id_) {}

    , decltype(_impl_.activation_details_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.exchange_time_){nullptr}
    , decltype(_impl_.current_limit_price_){nullptr}
    , decltype(_impl_.current_stop_price_){nullptr}
    , decltype(_impl_.trail_price_){nullptr}
    , decltype(_impl_.new_limit_price_){nullptr}
    , decltype(_impl_.new_stop_price_){nullptr}
    , decltype(_impl_.change_) {}

    , decltype(_impl_.status_) {}

    , decltype(_impl_.response_pending_) {}

    , decltype(_impl_.current_volume_) {}

    , decltype(_impl_.price_type_) {}

    , decltype(_impl_.time_type_) {}

    , decltype(_impl_.working_volume_) {}

    , decltype(_impl_.activation_type_) {}

    , decltype(_impl_.current_max_show_) {}

    , decltype(_impl_.new_volume_) {}

    , decltype(_impl_.new_max_show_) {}

    , decltype(_impl_.max_volume_) {}

    , decltype(_impl_.sequence_order_) {}

    , decltype(_impl_.app_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.instruction_extra_.MergeFrom(from._impl_.instruction_extra_);
  _impl_.unique_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unique_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unique_id().empty()) {
    _this->_impl_.unique_id_.Set(from._internal_unique_id(), _this->GetArenaForAllocation());
  }
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.status_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_detail_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status_detail().empty()) {
    _this->_impl_.status_detail_.Set(from._internal_status_detail(), _this->GetArenaForAllocation());
  }
  _impl_.exchange_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_order_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_order_id().empty()) {
    _this->_impl_.exchange_order_id_.Set(from._internal_exchange_order_id(), _this->GetArenaForAllocation());
  }
  _impl_.executing_login_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.executing_login_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_executing_login_id().empty()) {
    _this->_impl_.executing_login_id_.Set(from._internal_executing_login_id(), _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), _this->GetArenaForAllocation());
  }
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), _this->GetArenaForAllocation());
  }
  _impl_.user_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_address().empty()) {
    _this->_impl_.user_address_.Set(from._internal_user_address(), _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), _this->GetArenaForAllocation());
  }
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_name().empty()) {
    _this->_impl_.app_name_.Set(from._internal_app_name(), _this->GetArenaForAllocation());
  }
  _impl_.routing_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.routing_user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_routing_user_id().empty()) {
    _this->_impl_.routing_user_id_.Set(from._internal_routing_user_id(), _this->GetArenaForAllocation());
  }
  _impl_.routing_user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.routing_user_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_routing_user_name().empty()) {
    _this->_impl_.routing_user_name_.Set(from._internal_routing_user_name(), _this->GetArenaForAllocation());
  }
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    _this->_impl_.tag_.Set(from._internal_tag(), _this->GetArenaForAllocation());
  }
  _impl_.tag_cl_ord_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_cl_ord_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag_cl_ord_id().empty()) {
    _this->_impl_.tag_cl_ord_id_.Set(from._internal_tag_cl_ord_id(), _this->GetArenaForAllocation());
  }
  _impl_.tag_orig_cl_ord_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_orig_cl_ord_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag_orig_cl_ord_id().empty()) {
    _this->_impl_.tag_orig_cl_ord_id_.Set(from._internal_tag_orig_cl_ord_id(), _this->GetArenaForAllocation());
  }
  _impl_.smp_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.smp_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_smp_id().empty()) {
    _this->_impl_.smp_id_.Set(from._internal_smp_id(), _this->GetArenaForAllocation());
  }
  _impl_.exchange_login_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_login_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_login_id().empty()) {
    _this->_impl_.exchange_login_id_.Set(from._internal_exchange_login_id(), _this->GetArenaForAllocation());
  }
  _impl_.exchange_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_location_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_location().empty()) {
    _this->_impl_.exchange_location_.Set(from._internal_exchange_location(), _this->GetArenaForAllocation());
  }
  _impl_.ats_regulatory_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ats_regulatory_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ats_regulatory_id().empty()) {
    _this->_impl_.ats_regulatory_id_.Set(from._internal_ats_regulatory_id(), _this->GetArenaForAllocation());
  }
  _impl_.authorized_trader_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.authorized_trader_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_authorized_trader_id().empty()) {
    _this->_impl_.authorized_trader_id_.Set(from._internal_authorized_trader_id(), _this->GetArenaForAllocation());
  }
  _impl_.activation_details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.activation_details_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_activation_details().empty()) {
    _this->_impl_.activation_details_.Set(from._internal_activation_details(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  if (from._internal_has_exchange_time()) {
    _this->_impl_.exchange_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.exchange_time_);
  }
  if (from._internal_has_current_limit_price()) {
    _this->_impl_.current_limit_price_ = new ::t4proto::v1::common::Price(*from._impl_.current_limit_price_);
  }
  if (from._internal_has_current_stop_price()) {
    _this->_impl_.current_stop_price_ = new ::t4proto::v1::common::Price(*from._impl_.current_stop_price_);
  }
  if (from._internal_has_trail_price()) {
    _this->_impl_.trail_price_ = new ::t4proto::v1::common::Price(*from._impl_.trail_price_);
  }
  if (from._internal_has_new_limit_price()) {
    _this->_impl_.new_limit_price_ = new ::t4proto::v1::common::Price(*from._impl_.new_limit_price_);
  }
  if (from._internal_has_new_stop_price()) {
    _this->_impl_.new_stop_price_ = new ::t4proto::v1::common::Price(*from._impl_.new_stop_price_);
  }
  ::memcpy(&_impl_.change_, &from._impl_.change_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.app_type_) -
    reinterpret_cast<char*>(&_impl_.change_)) + sizeof(_impl_.app_type_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.orderrouting.OrderUpdateStatus)
}

inline void OrderUpdateStatus::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.instruction_extra_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.unique_id_) {}

    , decltype(_impl_.account_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.status_detail_) {}

    , decltype(_impl_.exchange_order_id_) {}

    , decltype(_impl_.executing_login_id_) {}

    , decltype(_impl_.user_id_) {}

    , decltype(_impl_.user_name_) {}

    , decltype(_impl_.user_address_) {}

    , decltype(_impl_.session_id_) {}

    , decltype(_impl_.app_id_) {}

    , decltype(_impl_.app_name_) {}

    , decltype(_impl_.routing_user_id_) {}

    , decltype(_impl_.routing_user_name_) {}

    , decltype(_impl_.tag_) {}

    , decltype(_impl_.tag_cl_ord_id_) {}

    , decltype(_impl_.tag_orig_cl_ord_id_) {}

    , decltype(_impl_.smp_id_) {}

    , decltype(_impl_.exchange_login_id_) {}

    , decltype(_impl_.exchange_location_) {}

    , decltype(_impl_.ats_regulatory_id_) {}

    , decltype(_impl_.authorized_trader_id_) {}

    , decltype(_impl_.activation_details_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.exchange_time_){nullptr}
    , decltype(_impl_.current_limit_price_){nullptr}
    , decltype(_impl_.current_stop_price_){nullptr}
    , decltype(_impl_.trail_price_){nullptr}
    , decltype(_impl_.new_limit_price_){nullptr}
    , decltype(_impl_.new_stop_price_){nullptr}
    , decltype(_impl_.change_) { 0 }

    , decltype(_impl_.status_) { 0 }

    , decltype(_impl_.response_pending_) { 0 }

    , decltype(_impl_.current_volume_) { 0 }

    , decltype(_impl_.price_type_) { 0 }

    , decltype(_impl_.time_type_) { 0 }

    , decltype(_impl_.working_volume_) { 0 }

    , decltype(_impl_.activation_type_) { 0 }

    , decltype(_impl_.current_max_show_) { 0 }

    , decltype(_impl_.new_volume_) { 0 }

    , decltype(_impl_.new_max_show_) { 0 }

    , decltype(_impl_.max_volume_) { 0 }

    , decltype(_impl_.sequence_order_) { 0 }

    , decltype(_impl_.app_type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.unique_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unique_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_detail_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_order_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.executing_login_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.executing_login_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.routing_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.routing_user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.routing_user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.routing_user_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_cl_ord_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_cl_ord_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_orig_cl_ord_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_orig_cl_ord_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.smp_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.smp_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_login_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_login_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_location_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ats_regulatory_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ats_regulatory_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.authorized_trader_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.authorized_trader_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.activation_details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.activation_details_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderUpdateStatus::~OrderUpdateStatus() {
  // @@protoc_insertion_point(destructor:t4proto.v1.orderrouting.OrderUpdateStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void OrderUpdateStatus::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruction_extra_.Destruct();
  _impl_.instruction_extra_.~MapField();
  _impl_.unique_id_.Destroy();
  _impl_.account_id_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.status_detail_.Destroy();
  _impl_.exchange_order_id_.Destroy();
  _impl_.executing_login_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.user_name_.Destroy();
  _impl_.user_address_.Destroy();
  _impl_.session_id_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.app_name_.Destroy();
  _impl_.routing_user_id_.Destroy();
  _impl_.routing_user_name_.Destroy();
  _impl_.tag_.Destroy();
  _impl_.tag_cl_ord_id_.Destroy();
  _impl_.tag_orig_cl_ord_id_.Destroy();
  _impl_.smp_id_.Destroy();
  _impl_.exchange_login_id_.Destroy();
  _impl_.exchange_location_.Destroy();
  _impl_.ats_regulatory_id_.Destroy();
  _impl_.authorized_trader_id_.Destroy();
  _impl_.activation_details_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
  if (this != internal_default_instance()) delete _impl_.exchange_time_;
  if (this != internal_default_instance()) delete _impl_.current_limit_price_;
  if (this != internal_default_instance()) delete _impl_.current_stop_price_;
  if (this != internal_default_instance()) delete _impl_.trail_price_;
  if (this != internal_default_instance()) delete _impl_.new_limit_price_;
  if (this != internal_default_instance()) delete _impl_.new_stop_price_;
}

void OrderUpdateStatus::ArenaDtor(void* object) {
  OrderUpdateStatus* _this = reinterpret_cast< OrderUpdateStatus* >(object);
  _this->_impl_.instruction_extra_.Destruct();
}
void OrderUpdateStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderUpdateStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.orderrouting.OrderUpdateStatus)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruction_extra_.Clear();
  _impl_.unique_id_.ClearToEmpty();
  _impl_.account_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.status_detail_.ClearToEmpty();
  _impl_.exchange_order_id_.ClearToEmpty();
  _impl_.executing_login_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.user_name_.ClearToEmpty();
  _impl_.user_address_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.app_name_.ClearToEmpty();
  _impl_.routing_user_id_.ClearToEmpty();
  _impl_.routing_user_name_.ClearToEmpty();
  _impl_.tag_.ClearToEmpty();
  _impl_.tag_cl_ord_id_.ClearToEmpty();
  _impl_.tag_orig_cl_ord_id_.ClearToEmpty();
  _impl_.smp_id_.ClearToEmpty();
  _impl_.exchange_login_id_.ClearToEmpty();
  _impl_.exchange_location_.ClearToEmpty();
  _impl_.ats_regulatory_id_.ClearToEmpty();
  _impl_.authorized_trader_id_.ClearToEmpty();
  _impl_.activation_details_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.exchange_time_ != nullptr) {
    delete _impl_.exchange_time_;
  }
  _impl_.exchange_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.current_limit_price_ != nullptr) {
    delete _impl_.current_limit_price_;
  }
  _impl_.current_limit_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.current_stop_price_ != nullptr) {
    delete _impl_.current_stop_price_;
  }
  _impl_.current_stop_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.trail_price_ != nullptr) {
    delete _impl_.trail_price_;
  }
  _impl_.trail_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.new_limit_price_ != nullptr) {
    delete _impl_.new_limit_price_;
  }
  _impl_.new_limit_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.new_stop_price_ != nullptr) {
    delete _impl_.new_stop_price_;
  }
  _impl_.new_stop_price_ = nullptr;
  ::memset(&_impl_.change_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.app_type_) -
      reinterpret_cast<char*>(&_impl_.change_)) + sizeof(_impl_.app_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderUpdateStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unique_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.unique_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.account_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp exchange_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_exchange_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.OrderChange change = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_change(static_cast<::t4proto::v1::common::OrderChange>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.OrderStatus status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::t4proto::v1::common::OrderStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string status_detail = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_status_detail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.status_detail"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.ResponsePending response_pending = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_response_pending(static_cast<::t4proto::v1::common::ResponsePending>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string exchange_order_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_exchange_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.exchange_order_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 current_volume = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _impl_.current_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price current_limit_price = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_limit_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price current_stop_price = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_stop_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.PriceType price_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_price_type(static_cast<::t4proto::v1::common::PriceType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.TimeType time_type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_time_type(static_cast<::t4proto::v1::common::TimeType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 working_volume = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _impl_.working_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string executing_login_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_executing_login_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.executing_login_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.ActivationType activation_type = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_activation_type(static_cast<::t4proto::v1::common::ActivationType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price trail_price = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_trail_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 current_max_show = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 160)) {
          _impl_.current_max_show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string user_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.user_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string user_name = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.user_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string user_address = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_user_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.user_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string session_id = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.session_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string app_id = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.app_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string app_name = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          auto str = _internal_mutable_app_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.app_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string routing_user_id = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          auto str = _internal_mutable_routing_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.routing_user_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string routing_user_name = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_routing_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.routing_user_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 new_volume = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 232)) {
          _impl_.new_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price new_limit_price = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_limit_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price new_stop_price = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_stop_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 new_max_show = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 0)) {
          _impl_.new_max_show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string tag = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.tag"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string tag_cl_ord_id = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tag_cl_ord_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.tag_cl_ord_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string tag_orig_cl_ord_id = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tag_orig_cl_ord_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.tag_orig_cl_ord_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string smp_id = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_smp_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.smp_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string exchange_login_id = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_exchange_login_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.exchange_login_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string exchange_location = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_exchange_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.exchange_location"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string ats_regulatory_id = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_ats_regulatory_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.ats_regulatory_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 max_volume = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.max_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 sequence_order = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _impl_.sequence_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string authorized_trader_id = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_authorized_trader_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.authorized_trader_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // map<string, string> instruction_extra = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.instruction_extra_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<346>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.ApplicationType app_type = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_app_type(static_cast<::t4proto::v1::common::ApplicationType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string activation_details = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_activation_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateStatus.activation_details"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderUpdateStatus::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.orderrouting.OrderUpdateStatus)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string unique_id = 1;
  if (!this->_internal_unique_id().empty()) {
    const std::string& _s = this->_internal_unique_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.unique_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string account_id = 2;
  if (!this->_internal_account_id().empty()) {
    const std::string& _s = this->_internal_account_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.account_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.market_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .google.protobuf.Timestamp time = 4;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp exchange_time = 5;
  if (this->_internal_has_exchange_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::exchange_time(this),
        _Internal::exchange_time(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.OrderChange change = 6;
  if (this->_internal_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_change(), target);
  }

  // .t4proto.v1.common.OrderStatus status = 7;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_status(), target);
  }

  // string status_detail = 8;
  if (!this->_internal_status_detail().empty()) {
    const std::string& _s = this->_internal_status_detail();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.status_detail");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // .t4proto.v1.common.ResponsePending response_pending = 9;
  if (this->_internal_response_pending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_response_pending(), target);
  }

  // string exchange_order_id = 10;
  if (!this->_internal_exchange_order_id().empty()) {
    const std::string& _s = this->_internal_exchange_order_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.exchange_order_id");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // int32 current_volume = 11;
  if (this->_internal_current_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        11, this->_internal_current_volume(), target);
  }

  // .t4proto.v1.common.Price current_limit_price = 12;
  if (this->_internal_has_current_limit_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::current_limit_price(this),
        _Internal::current_limit_price(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.Price current_stop_price = 13;
  if (this->_internal_has_current_stop_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::current_stop_price(this),
        _Internal::current_stop_price(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.PriceType price_type = 14;
  if (this->_internal_price_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        14, this->_internal_price_type(), target);
  }

  // .t4proto.v1.common.TimeType time_type = 15;
  if (this->_internal_time_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        15, this->_internal_time_type(), target);
  }

  // int32 working_volume = 16;
  if (this->_internal_working_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        16, this->_internal_working_volume(), target);
  }

  // string executing_login_id = 17;
  if (!this->_internal_executing_login_id().empty()) {
    const std::string& _s = this->_internal_executing_login_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.executing_login_id");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // .t4proto.v1.common.ActivationType activation_type = 18;
  if (this->_internal_activation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        18, this->_internal_activation_type(), target);
  }

  // .t4proto.v1.common.Price trail_price = 19;
  if (this->_internal_has_trail_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::trail_price(this),
        _Internal::trail_price(this).GetCachedSize(), target, stream);
  }

  // int32 current_max_show = 20;
  if (this->_internal_current_max_show() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        20, this->_internal_current_max_show(), target);
  }

  // string user_id = 21;
  if (!this->_internal_user_id().empty()) {
    const std::string& _s = this->_internal_user_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.user_id");
    target = stream->WriteStringMaybeAliased(21, _s, target);
  }

  // string user_name = 22;
  if (!this->_internal_user_name().empty()) {
    const std::string& _s = this->_internal_user_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.user_name");
    target = stream->WriteStringMaybeAliased(22, _s, target);
  }

  // string user_address = 23;
  if (!this->_internal_user_address().empty()) {
    const std::string& _s = this->_internal_user_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.user_address");
    target = stream->WriteStringMaybeAliased(23, _s, target);
  }

  // string session_id = 24;
  if (!this->_internal_session_id().empty()) {
    const std::string& _s = this->_internal_session_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.session_id");
    target = stream->WriteStringMaybeAliased(24, _s, target);
  }

  // string app_id = 25;
  if (!this->_internal_app_id().empty()) {
    const std::string& _s = this->_internal_app_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.app_id");
    target = stream->WriteStringMaybeAliased(25, _s, target);
  }

  // string app_name = 26;
  if (!this->_internal_app_name().empty()) {
    const std::string& _s = this->_internal_app_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.app_name");
    target = stream->WriteStringMaybeAliased(26, _s, target);
  }

  // string routing_user_id = 27;
  if (!this->_internal_routing_user_id().empty()) {
    const std::string& _s = this->_internal_routing_user_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.routing_user_id");
    target = stream->WriteStringMaybeAliased(27, _s, target);
  }

  // string routing_user_name = 28;
  if (!this->_internal_routing_user_name().empty()) {
    const std::string& _s = this->_internal_routing_user_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.routing_user_name");
    target = stream->WriteStringMaybeAliased(28, _s, target);
  }

  // int32 new_volume = 29;
  if (this->_internal_new_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        29, this->_internal_new_volume(), target);
  }

  // .t4proto.v1.common.Price new_limit_price = 30;
  if (this->_internal_has_new_limit_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::new_limit_price(this),
        _Internal::new_limit_price(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.Price new_stop_price = 31;
  if (this->_internal_has_new_stop_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::new_stop_price(this),
        _Internal::new_stop_price(this).GetCachedSize(), target, stream);
  }

  // int32 new_max_show = 32;
  if (this->_internal_new_max_show() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        32, this->_internal_new_max_show(), target);
  }

  // string tag = 33;
  if (!this->_internal_tag().empty()) {
    const std::string& _s = this->_internal_tag();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.tag");
    target = stream->WriteStringMaybeAliased(33, _s, target);
  }

  // string tag_cl_ord_id = 34;
  if (!this->_internal_tag_cl_ord_id().empty()) {
    const std::string& _s = this->_internal_tag_cl_ord_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.tag_cl_ord_id");
    target = stream->WriteStringMaybeAliased(34, _s, target);
  }

  // string tag_orig_cl_ord_id = 35;
  if (!this->_internal_tag_orig_cl_ord_id().empty()) {
    const std::string& _s = this->_internal_tag_orig_cl_ord_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.tag_orig_cl_ord_id");
    target = stream->WriteStringMaybeAliased(35, _s, target);
  }

  // string smp_id = 36;
  if (!this->_internal_smp_id().empty()) {
    const std::string& _s = this->_internal_smp_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.smp_id");
    target = stream->WriteStringMaybeAliased(36, _s, target);
  }

  // string exchange_login_id = 37;
  if (!this->_internal_exchange_login_id().empty()) {
    const std::string& _s = this->_internal_exchange_login_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.exchange_login_id");
    target = stream->WriteStringMaybeAliased(37, _s, target);
  }

  // string exchange_location = 38;
  if (!this->_internal_exchange_location().empty()) {
    const std::string& _s = this->_internal_exchange_location();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.exchange_location");
    target = stream->WriteStringMaybeAliased(38, _s, target);
  }

  // string ats_regulatory_id = 39;
  if (!this->_internal_ats_regulatory_id().empty()) {
    const std::string& _s = this->_internal_ats_regulatory_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.ats_regulatory_id");
    target = stream->WriteStringMaybeAliased(39, _s, target);
  }

  // int32 max_volume = 40;
  if (this->_internal_max_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        40, this->_internal_max_volume(), target);
  }

  // int32 sequence_order = 41;
  if (this->_internal_sequence_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        41, this->_internal_sequence_order(), target);
  }

  // string authorized_trader_id = 42;
  if (!this->_internal_authorized_trader_id().empty()) {
    const std::string& _s = this->_internal_authorized_trader_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.authorized_trader_id");
    target = stream->WriteStringMaybeAliased(42, _s, target);
  }

  // map<string, string> instruction_extra = 43;
  if (!this->_internal_instruction_extra().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = OrderUpdateStatus_InstructionExtraEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_instruction_extra();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.instruction_extra");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.second.data(), static_cast<int>(entry.second.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.instruction_extra");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(43, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(43, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .t4proto.v1.common.ApplicationType app_type = 44;
  if (this->_internal_app_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        44, this->_internal_app_type(), target);
  }

  // string activation_details = 45;
  if (!this->_internal_activation_details().empty()) {
    const std::string& _s = this->_internal_activation_details();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateStatus.activation_details");
    target = stream->WriteStringMaybeAliased(45, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.orderrouting.OrderUpdateStatus)
  return target;
}

::size_t OrderUpdateStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.orderrouting.OrderUpdateStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> instruction_extra = 43;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_instruction_extra_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_instruction_extra().begin();
      it != this->_internal_instruction_extra().end(); ++it) {
    total_size += OrderUpdateStatus_InstructionExtraEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string unique_id = 1;
  if (!this->_internal_unique_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_unique_id());
  }

  // string account_id = 2;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_id());
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string status_detail = 8;
  if (!this->_internal_status_detail().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_status_detail());
  }

  // string exchange_order_id = 10;
  if (!this->_internal_exchange_order_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange_order_id());
  }

  // string executing_login_id = 17;
  if (!this->_internal_executing_login_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_executing_login_id());
  }

  // string user_id = 21;
  if (!this->_internal_user_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_user_id());
  }

  // string user_name = 22;
  if (!this->_internal_user_name().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_user_name());
  }

  // string user_address = 23;
  if (!this->_internal_user_address().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_user_address());
  }

  // string session_id = 24;
  if (!this->_internal_session_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_session_id());
  }

  // string app_id = 25;
  if (!this->_internal_app_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_app_id());
  }

  // string app_name = 26;
  if (!this->_internal_app_name().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_app_name());
  }

  // string routing_user_id = 27;
  if (!this->_internal_routing_user_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_routing_user_id());
  }

  // string routing_user_name = 28;
  if (!this->_internal_routing_user_name().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_routing_user_name());
  }

  // string tag = 33;
  if (!this->_internal_tag().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tag());
  }

  // string tag_cl_ord_id = 34;
  if (!this->_internal_tag_cl_ord_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tag_cl_ord_id());
  }

  // string tag_orig_cl_ord_id = 35;
  if (!this->_internal_tag_orig_cl_ord_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tag_orig_cl_ord_id());
  }

  // string smp_id = 36;
  if (!this->_internal_smp_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_smp_id());
  }

  // string exchange_login_id = 37;
  if (!this->_internal_exchange_login_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange_login_id());
  }

  // string exchange_location = 38;
  if (!this->_internal_exchange_location().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange_location());
  }

  // string ats_regulatory_id = 39;
  if (!this->_internal_ats_regulatory_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ats_regulatory_id());
  }

  // string authorized_trader_id = 42;
  if (!this->_internal_authorized_trader_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_authorized_trader_id());
  }

  // string activation_details = 45;
  if (!this->_internal_activation_details().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_activation_details());
  }

  // .google.protobuf.Timestamp time = 4;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // .google.protobuf.Timestamp exchange_time = 5;
  if (this->_internal_has_exchange_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.exchange_time_);
  }

  // .t4proto.v1.common.Price current_limit_price = 12;
  if (this->_internal_has_current_limit_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_limit_price_);
  }

  // .t4proto.v1.common.Price current_stop_price = 13;
  if (this->_internal_has_current_stop_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_stop_price_);
  }

  // .t4proto.v1.common.Price trail_price = 19;
  if (this->_internal_has_trail_price()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trail_price_);
  }

  // .t4proto.v1.common.Price new_limit_price = 30;
  if (this->_internal_has_new_limit_price()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_limit_price_);
  }

  // .t4proto.v1.common.Price new_stop_price = 31;
  if (this->_internal_has_new_stop_price()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_stop_price_);
  }

  // .t4proto.v1.common.OrderChange change = 6;
  if (this->_internal_change() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_change());
  }

  // .t4proto.v1.common.OrderStatus status = 7;
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .t4proto.v1.common.ResponsePending response_pending = 9;
  if (this->_internal_response_pending() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_response_pending());
  }

  // int32 current_volume = 11;
  if (this->_internal_current_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_current_volume());
  }

  // .t4proto.v1.common.PriceType price_type = 14;
  if (this->_internal_price_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_price_type());
  }

  // .t4proto.v1.common.TimeType time_type = 15;
  if (this->_internal_time_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_time_type());
  }

  // int32 working_volume = 16;
  if (this->_internal_working_volume() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_working_volume());
  }

  // .t4proto.v1.common.ActivationType activation_type = 18;
  if (this->_internal_activation_type() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_activation_type());
  }

  // int32 current_max_show = 20;
  if (this->_internal_current_max_show() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_current_max_show());
  }

  // int32 new_volume = 29;
  if (this->_internal_new_volume() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_new_volume());
  }

  // int32 new_max_show = 32;
  if (this->_internal_new_max_show() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_new_max_show());
  }

  // int32 max_volume = 40;
  if (this->_internal_max_volume() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_max_volume());
  }

  // int32 sequence_order = 41;
  if (this->_internal_sequence_order() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_sequence_order());
  }

  // .t4proto.v1.common.ApplicationType app_type = 44;
  if (this->_internal_app_type() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_app_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderUpdateStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderUpdateStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderUpdateStatus::GetClassData() const { return &_class_data_; }


void OrderUpdateStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderUpdateStatus*>(&to_msg);
  auto& from = static_cast<const OrderUpdateStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.orderrouting.OrderUpdateStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruction_extra_.MergeFrom(from._impl_.instruction_extra_);
  if (!from._internal_unique_id().empty()) {
    _this->_internal_set_unique_id(from._internal_unique_id());
  }
  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_status_detail().empty()) {
    _this->_internal_set_status_detail(from._internal_status_detail());
  }
  if (!from._internal_exchange_order_id().empty()) {
    _this->_internal_set_exchange_order_id(from._internal_exchange_order_id());
  }
  if (!from._internal_executing_login_id().empty()) {
    _this->_internal_set_executing_login_id(from._internal_executing_login_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  if (!from._internal_user_address().empty()) {
    _this->_internal_set_user_address(from._internal_user_address());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_app_name().empty()) {
    _this->_internal_set_app_name(from._internal_app_name());
  }
  if (!from._internal_routing_user_id().empty()) {
    _this->_internal_set_routing_user_id(from._internal_routing_user_id());
  }
  if (!from._internal_routing_user_name().empty()) {
    _this->_internal_set_routing_user_name(from._internal_routing_user_name());
  }
  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (!from._internal_tag_cl_ord_id().empty()) {
    _this->_internal_set_tag_cl_ord_id(from._internal_tag_cl_ord_id());
  }
  if (!from._internal_tag_orig_cl_ord_id().empty()) {
    _this->_internal_set_tag_orig_cl_ord_id(from._internal_tag_orig_cl_ord_id());
  }
  if (!from._internal_smp_id().empty()) {
    _this->_internal_set_smp_id(from._internal_smp_id());
  }
  if (!from._internal_exchange_login_id().empty()) {
    _this->_internal_set_exchange_login_id(from._internal_exchange_login_id());
  }
  if (!from._internal_exchange_location().empty()) {
    _this->_internal_set_exchange_location(from._internal_exchange_location());
  }
  if (!from._internal_ats_regulatory_id().empty()) {
    _this->_internal_set_ats_regulatory_id(from._internal_ats_regulatory_id());
  }
  if (!from._internal_authorized_trader_id().empty()) {
    _this->_internal_set_authorized_trader_id(from._internal_authorized_trader_id());
  }
  if (!from._internal_activation_details().empty()) {
    _this->_internal_set_activation_details(from._internal_activation_details());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_has_exchange_time()) {
    _this->_internal_mutable_exchange_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_exchange_time());
  }
  if (from._internal_has_current_limit_price()) {
    _this->_internal_mutable_current_limit_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_current_limit_price());
  }
  if (from._internal_has_current_stop_price()) {
    _this->_internal_mutable_current_stop_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_current_stop_price());
  }
  if (from._internal_has_trail_price()) {
    _this->_internal_mutable_trail_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_trail_price());
  }
  if (from._internal_has_new_limit_price()) {
    _this->_internal_mutable_new_limit_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_new_limit_price());
  }
  if (from._internal_has_new_stop_price()) {
    _this->_internal_mutable_new_stop_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_new_stop_price());
  }
  if (from._internal_change() != 0) {
    _this->_internal_set_change(from._internal_change());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_response_pending() != 0) {
    _this->_internal_set_response_pending(from._internal_response_pending());
  }
  if (from._internal_current_volume() != 0) {
    _this->_internal_set_current_volume(from._internal_current_volume());
  }
  if (from._internal_price_type() != 0) {
    _this->_internal_set_price_type(from._internal_price_type());
  }
  if (from._internal_time_type() != 0) {
    _this->_internal_set_time_type(from._internal_time_type());
  }
  if (from._internal_working_volume() != 0) {
    _this->_internal_set_working_volume(from._internal_working_volume());
  }
  if (from._internal_activation_type() != 0) {
    _this->_internal_set_activation_type(from._internal_activation_type());
  }
  if (from._internal_current_max_show() != 0) {
    _this->_internal_set_current_max_show(from._internal_current_max_show());
  }
  if (from._internal_new_volume() != 0) {
    _this->_internal_set_new_volume(from._internal_new_volume());
  }
  if (from._internal_new_max_show() != 0) {
    _this->_internal_set_new_max_show(from._internal_new_max_show());
  }
  if (from._internal_max_volume() != 0) {
    _this->_internal_set_max_volume(from._internal_max_volume());
  }
  if (from._internal_sequence_order() != 0) {
    _this->_internal_set_sequence_order(from._internal_sequence_order());
  }
  if (from._internal_app_type() != 0) {
    _this->_internal_set_app_type(from._internal_app_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderUpdateStatus::CopyFrom(const OrderUpdateStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.orderrouting.OrderUpdateStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderUpdateStatus::IsInitialized() const {
  return true;
}

void OrderUpdateStatus::InternalSwap(OrderUpdateStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruction_extra_.InternalSwap(&other->_impl_.instruction_extra_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.unique_id_, lhs_arena,
                                       &other->_impl_.unique_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_id_, lhs_arena,
                                       &other->_impl_.account_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_detail_, lhs_arena,
                                       &other->_impl_.status_detail_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_order_id_, lhs_arena,
                                       &other->_impl_.exchange_order_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.executing_login_id_, lhs_arena,
                                       &other->_impl_.executing_login_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_id_, lhs_arena,
                                       &other->_impl_.user_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_name_, lhs_arena,
                                       &other->_impl_.user_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_address_, lhs_arena,
                                       &other->_impl_.user_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.session_id_, lhs_arena,
                                       &other->_impl_.session_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.app_id_, lhs_arena,
                                       &other->_impl_.app_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.app_name_, lhs_arena,
                                       &other->_impl_.app_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.routing_user_id_, lhs_arena,
                                       &other->_impl_.routing_user_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.routing_user_name_, lhs_arena,
                                       &other->_impl_.routing_user_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_, lhs_arena,
                                       &other->_impl_.tag_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_cl_ord_id_, lhs_arena,
                                       &other->_impl_.tag_cl_ord_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_orig_cl_ord_id_, lhs_arena,
                                       &other->_impl_.tag_orig_cl_ord_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.smp_id_, lhs_arena,
                                       &other->_impl_.smp_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_login_id_, lhs_arena,
                                       &other->_impl_.exchange_login_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_location_, lhs_arena,
                                       &other->_impl_.exchange_location_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ats_regulatory_id_, lhs_arena,
                                       &other->_impl_.ats_regulatory_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.authorized_trader_id_, lhs_arena,
                                       &other->_impl_.authorized_trader_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.activation_details_, lhs_arena,
                                       &other->_impl_.activation_details_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderUpdateStatus, _impl_.app_type_)
      + sizeof(OrderUpdateStatus::_impl_.app_type_)
      - PROTOBUF_FIELD_OFFSET(OrderUpdateStatus, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderUpdateStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter, &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
      file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[11]);
}
// ===================================================================

class OrderUpdateTrade::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const OrderUpdateTrade* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& exchange_time(const OrderUpdateTrade* msg);
  static const ::t4proto::v1::common::Price& price(const OrderUpdateTrade* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderUpdateTrade::_Internal::time(const OrderUpdateTrade* msg) {
  return *msg->_impl_.time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderUpdateTrade::_Internal::exchange_time(const OrderUpdateTrade* msg) {
  return *msg->_impl_.exchange_time_;
}
const ::t4proto::v1::common::Price&
OrderUpdateTrade::_Internal::price(const OrderUpdateTrade* msg) {
  return *msg->_impl_.price_;
}
void OrderUpdateTrade::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
void OrderUpdateTrade::clear_exchange_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.exchange_time_ != nullptr) {
    delete _impl_.exchange_time_;
  }
  _impl_.exchange_time_ = nullptr;
}
void OrderUpdateTrade::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
OrderUpdateTrade::OrderUpdateTrade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.orderrouting.OrderUpdateTrade)
}
OrderUpdateTrade::OrderUpdateTrade(const OrderUpdateTrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderUpdateTrade* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unique_id_) {}

    , decltype(_impl_.account_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.status_detail_) {}

    , decltype(_impl_.exchange_trade_id_) {}

    , decltype(_impl_.contra_trader_) {}

    , decltype(_impl_.contra_broker_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.exchange_time_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.change_) {}

    , decltype(_impl_.status_) {}

    , decltype(_impl_.response_pending_) {}

    , decltype(_impl_.total_fill_volume_) {}

    , decltype(_impl_.working_volume_) {}

    , decltype(_impl_.volume_) {}

    , decltype(_impl_.residual_volume_) {}

    , decltype(_impl_.sequence_order_) {}

    , decltype(_impl_.trade_date_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unique_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unique_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unique_id().empty()) {
    _this->_impl_.unique_id_.Set(from._internal_unique_id(), _this->GetArenaForAllocation());
  }
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.status_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_detail_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status_detail().empty()) {
    _this->_impl_.status_detail_.Set(from._internal_status_detail(), _this->GetArenaForAllocation());
  }
  _impl_.exchange_trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_trade_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_trade_id().empty()) {
    _this->_impl_.exchange_trade_id_.Set(from._internal_exchange_trade_id(), _this->GetArenaForAllocation());
  }
  _impl_.contra_trader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contra_trader_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contra_trader().empty()) {
    _this->_impl_.contra_trader_.Set(from._internal_contra_trader(), _this->GetArenaForAllocation());
  }
  _impl_.contra_broker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contra_broker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contra_broker().empty()) {
    _this->_impl_.contra_broker_.Set(from._internal_contra_broker(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  if (from._internal_has_exchange_time()) {
    _this->_impl_.exchange_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.exchange_time_);
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::t4proto::v1::common::Price(*from._impl_.price_);
  }
  ::memcpy(&_impl_.change_, &from._impl_.change_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.trade_date_) -
    reinterpret_cast<char*>(&_impl_.change_)) + sizeof(_impl_.trade_date_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.orderrouting.OrderUpdateTrade)
}

inline void OrderUpdateTrade::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.unique_id_) {}

    , decltype(_impl_.account_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.status_detail_) {}

    , decltype(_impl_.exchange_trade_id_) {}

    , decltype(_impl_.contra_trader_) {}

    , decltype(_impl_.contra_broker_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.exchange_time_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.change_) { 0 }

    , decltype(_impl_.status_) { 0 }

    , decltype(_impl_.response_pending_) { 0 }

    , decltype(_impl_.total_fill_volume_) { 0 }

    , decltype(_impl_.working_volume_) { 0 }

    , decltype(_impl_.volume_) { 0 }

    , decltype(_impl_.residual_volume_) { 0 }

    , decltype(_impl_.sequence_order_) { 0 }

    , decltype(_impl_.trade_date_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.unique_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unique_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_detail_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_trade_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contra_trader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contra_trader_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contra_broker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contra_broker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderUpdateTrade::~OrderUpdateTrade() {
  // @@protoc_insertion_point(destructor:t4proto.v1.orderrouting.OrderUpdateTrade)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderUpdateTrade::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unique_id_.Destroy();
  _impl_.account_id_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.status_detail_.Destroy();
  _impl_.exchange_trade_id_.Destroy();
  _impl_.contra_trader_.Destroy();
  _impl_.contra_broker_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
  if (this != internal_default_instance()) delete _impl_.exchange_time_;
  if (this != internal_default_instance()) delete _impl_.price_;
}

void OrderUpdateTrade::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderUpdateTrade::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.orderrouting.OrderUpdateTrade)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unique_id_.ClearToEmpty();
  _impl_.account_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.status_detail_.ClearToEmpty();
  _impl_.exchange_trade_id_.ClearToEmpty();
  _impl_.contra_trader_.ClearToEmpty();
  _impl_.contra_broker_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.exchange_time_ != nullptr) {
    delete _impl_.exchange_time_;
  }
  _impl_.exchange_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  ::memset(&_impl_.change_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.trade_date_) -
      reinterpret_cast<char*>(&_impl_.change_)) + sizeof(_impl_.trade_date_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderUpdateTrade::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unique_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateTrade.unique_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateTrade.account_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateTrade.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp exchange_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_exchange_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.OrderChange change = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_change(static_cast<::t4proto::v1::common::OrderChange>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.OrderStatus status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::t4proto::v1::common::OrderStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string status_detail = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_status_detail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateTrade.status_detail"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.ResponsePending response_pending = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_response_pending(static_cast<::t4proto::v1::common::ResponsePending>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 total_fill_volume = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.total_fill_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 working_volume = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _impl_.working_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 volume = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price price = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 residual_volume = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _impl_.residual_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string exchange_trade_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_exchange_trade_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateTrade.exchange_trade_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string contra_trader = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_contra_trader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateTrade.contra_trader"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string contra_broker = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_contra_broker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateTrade.contra_broker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 trade_date = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _impl_.trade_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 sequence_order = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 152)) {
          _impl_.sequence_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderUpdateTrade::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.orderrouting.OrderUpdateTrade)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string unique_id = 1;
  if (!this->_internal_unique_id().empty()) {
    const std::string& _s = this->_internal_unique_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateTrade.unique_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string account_id = 2;
  if (!this->_internal_account_id().empty()) {
    const std::string& _s = this->_internal_account_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateTrade.account_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateTrade.market_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .google.protobuf.Timestamp time = 4;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp exchange_time = 5;
  if (this->_internal_has_exchange_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::exchange_time(this),
        _Internal::exchange_time(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.OrderChange change = 6;
  if (this->_internal_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_change(), target);
  }

  // .t4proto.v1.common.OrderStatus status = 7;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_status(), target);
  }

  // string status_detail = 8;
  if (!this->_internal_status_detail().empty()) {
    const std::string& _s = this->_internal_status_detail();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateTrade.status_detail");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // .t4proto.v1.common.ResponsePending response_pending = 9;
  if (this->_internal_response_pending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_response_pending(), target);
  }

  // int32 total_fill_volume = 10;
  if (this->_internal_total_fill_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        10, this->_internal_total_fill_volume(), target);
  }

  // int32 working_volume = 11;
  if (this->_internal_working_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        11, this->_internal_working_volume(), target);
  }

  // int32 volume = 12;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        12, this->_internal_volume(), target);
  }

  // .t4proto.v1.common.Price price = 13;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // int32 residual_volume = 14;
  if (this->_internal_residual_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        14, this->_internal_residual_volume(), target);
  }

  // string exchange_trade_id = 15;
  if (!this->_internal_exchange_trade_id().empty()) {
    const std::string& _s = this->_internal_exchange_trade_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateTrade.exchange_trade_id");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // string contra_trader = 16;
  if (!this->_internal_contra_trader().empty()) {
    const std::string& _s = this->_internal_contra_trader();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateTrade.contra_trader");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // string contra_broker = 17;
  if (!this->_internal_contra_broker().empty()) {
    const std::string& _s = this->_internal_contra_broker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateTrade.contra_broker");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // int64 trade_date = 18;
  if (this->_internal_trade_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        18, this->_internal_trade_date(), target);
  }

  // int32 sequence_order = 19;
  if (this->_internal_sequence_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        19, this->_internal_sequence_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.orderrouting.OrderUpdateTrade)
  return target;
}

::size_t OrderUpdateTrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.orderrouting.OrderUpdateTrade)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string unique_id = 1;
  if (!this->_internal_unique_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_unique_id());
  }

  // string account_id = 2;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_id());
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string status_detail = 8;
  if (!this->_internal_status_detail().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_status_detail());
  }

  // string exchange_trade_id = 15;
  if (!this->_internal_exchange_trade_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange_trade_id());
  }

  // string contra_trader = 16;
  if (!this->_internal_contra_trader().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contra_trader());
  }

  // string contra_broker = 17;
  if (!this->_internal_contra_broker().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contra_broker());
  }

  // .google.protobuf.Timestamp time = 4;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // .google.protobuf.Timestamp exchange_time = 5;
  if (this->_internal_has_exchange_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.exchange_time_);
  }

  // .t4proto.v1.common.Price price = 13;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // .t4proto.v1.common.OrderChange change = 6;
  if (this->_internal_change() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_change());
  }

  // .t4proto.v1.common.OrderStatus status = 7;
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .t4proto.v1.common.ResponsePending response_pending = 9;
  if (this->_internal_response_pending() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_response_pending());
  }

  // int32 total_fill_volume = 10;
  if (this->_internal_total_fill_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_total_fill_volume());
  }

  // int32 working_volume = 11;
  if (this->_internal_working_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_working_volume());
  }

  // int32 volume = 12;
  if (this->_internal_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_volume());
  }

  // int32 residual_volume = 14;
  if (this->_internal_residual_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_residual_volume());
  }

  // int32 sequence_order = 19;
  if (this->_internal_sequence_order() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_sequence_order());
  }

  // int64 trade_date = 18;
  if (this->_internal_trade_date() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                    this->_internal_trade_date());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderUpdateTrade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderUpdateTrade::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderUpdateTrade::GetClassData() const { return &_class_data_; }


void OrderUpdateTrade::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderUpdateTrade*>(&to_msg);
  auto& from = static_cast<const OrderUpdateTrade&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.orderrouting.OrderUpdateTrade)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_unique_id().empty()) {
    _this->_internal_set_unique_id(from._internal_unique_id());
  }
  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_status_detail().empty()) {
    _this->_internal_set_status_detail(from._internal_status_detail());
  }
  if (!from._internal_exchange_trade_id().empty()) {
    _this->_internal_set_exchange_trade_id(from._internal_exchange_trade_id());
  }
  if (!from._internal_contra_trader().empty()) {
    _this->_internal_set_contra_trader(from._internal_contra_trader());
  }
  if (!from._internal_contra_broker().empty()) {
    _this->_internal_set_contra_broker(from._internal_contra_broker());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_has_exchange_time()) {
    _this->_internal_mutable_exchange_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_exchange_time());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_price());
  }
  if (from._internal_change() != 0) {
    _this->_internal_set_change(from._internal_change());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_response_pending() != 0) {
    _this->_internal_set_response_pending(from._internal_response_pending());
  }
  if (from._internal_total_fill_volume() != 0) {
    _this->_internal_set_total_fill_volume(from._internal_total_fill_volume());
  }
  if (from._internal_working_volume() != 0) {
    _this->_internal_set_working_volume(from._internal_working_volume());
  }
  if (from._internal_volume() != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  if (from._internal_residual_volume() != 0) {
    _this->_internal_set_residual_volume(from._internal_residual_volume());
  }
  if (from._internal_sequence_order() != 0) {
    _this->_internal_set_sequence_order(from._internal_sequence_order());
  }
  if (from._internal_trade_date() != 0) {
    _this->_internal_set_trade_date(from._internal_trade_date());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderUpdateTrade::CopyFrom(const OrderUpdateTrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.orderrouting.OrderUpdateTrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderUpdateTrade::IsInitialized() const {
  return true;
}

void OrderUpdateTrade::InternalSwap(OrderUpdateTrade* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.unique_id_, lhs_arena,
                                       &other->_impl_.unique_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_id_, lhs_arena,
                                       &other->_impl_.account_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_detail_, lhs_arena,
                                       &other->_impl_.status_detail_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_trade_id_, lhs_arena,
                                       &other->_impl_.exchange_trade_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contra_trader_, lhs_arena,
                                       &other->_impl_.contra_trader_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contra_broker_, lhs_arena,
                                       &other->_impl_.contra_broker_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderUpdateTrade, _impl_.trade_date_)
      + sizeof(OrderUpdateTrade::_impl_.trade_date_)
      - PROTOBUF_FIELD_OFFSET(OrderUpdateTrade, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderUpdateTrade::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter, &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
      file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[12]);
}
// ===================================================================

class OrderUpdateTradeLeg::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const OrderUpdateTradeLeg* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& exchange_time(const OrderUpdateTradeLeg* msg);
  static const ::t4proto::v1::common::Price& price(const OrderUpdateTradeLeg* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderUpdateTradeLeg::_Internal::time(const OrderUpdateTradeLeg* msg) {
  return *msg->_impl_.time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderUpdateTradeLeg::_Internal::exchange_time(const OrderUpdateTradeLeg* msg) {
  return *msg->_impl_.exchange_time_;
}
const ::t4proto::v1::common::Price&
OrderUpdateTradeLeg::_Internal::price(const OrderUpdateTradeLeg* msg) {
  return *msg->_impl_.price_;
}
void OrderUpdateTradeLeg::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
void OrderUpdateTradeLeg::clear_exchange_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.exchange_time_ != nullptr) {
    delete _impl_.exchange_time_;
  }
  _impl_.exchange_time_ = nullptr;
}
void OrderUpdateTradeLeg::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
OrderUpdateTradeLeg::OrderUpdateTradeLeg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.orderrouting.OrderUpdateTradeLeg)
}
OrderUpdateTradeLeg::OrderUpdateTradeLeg(const OrderUpdateTradeLeg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderUpdateTradeLeg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.unique_id_) {}

    , decltype(_impl_.account_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.status_detail_) {}

    , decltype(_impl_.exchange_trade_id_) {}

    , decltype(_impl_.contra_trader_) {}

    , decltype(_impl_.contra_broker_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.exchange_time_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.change_) {}

    , decltype(_impl_.status_) {}

    , decltype(_impl_.response_pending_) {}

    , decltype(_impl_.leg_index_) {}

    , decltype(_impl_.volume_) {}

    , decltype(_impl_.residual_volume_) {}

    , decltype(_impl_.trade_date_) {}

    , decltype(_impl_.sequence_order_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.unique_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unique_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unique_id().empty()) {
    _this->_impl_.unique_id_.Set(from._internal_unique_id(), _this->GetArenaForAllocation());
  }
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.status_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_detail_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status_detail().empty()) {
    _this->_impl_.status_detail_.Set(from._internal_status_detail(), _this->GetArenaForAllocation());
  }
  _impl_.exchange_trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_trade_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_trade_id().empty()) {
    _this->_impl_.exchange_trade_id_.Set(from._internal_exchange_trade_id(), _this->GetArenaForAllocation());
  }
  _impl_.contra_trader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contra_trader_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contra_trader().empty()) {
    _this->_impl_.contra_trader_.Set(from._internal_contra_trader(), _this->GetArenaForAllocation());
  }
  _impl_.contra_broker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contra_broker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contra_broker().empty()) {
    _this->_impl_.contra_broker_.Set(from._internal_contra_broker(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  if (from._internal_has_exchange_time()) {
    _this->_impl_.exchange_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.exchange_time_);
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::t4proto::v1::common::Price(*from._impl_.price_);
  }
  ::memcpy(&_impl_.change_, &from._impl_.change_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.sequence_order_) -
    reinterpret_cast<char*>(&_impl_.change_)) + sizeof(_impl_.sequence_order_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.orderrouting.OrderUpdateTradeLeg)
}

inline void OrderUpdateTradeLeg::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.unique_id_) {}

    , decltype(_impl_.account_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.status_detail_) {}

    , decltype(_impl_.exchange_trade_id_) {}

    , decltype(_impl_.contra_trader_) {}

    , decltype(_impl_.contra_broker_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.exchange_time_){nullptr}
    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.change_) { 0 }

    , decltype(_impl_.status_) { 0 }

    , decltype(_impl_.response_pending_) { 0 }

    , decltype(_impl_.leg_index_) { 0 }

    , decltype(_impl_.volume_) { 0 }

    , decltype(_impl_.residual_volume_) { 0 }

    , decltype(_impl_.trade_date_) { ::int64_t{0} }

    , decltype(_impl_.sequence_order_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.unique_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unique_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_detail_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_trade_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contra_trader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contra_trader_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contra_broker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contra_broker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderUpdateTradeLeg::~OrderUpdateTradeLeg() {
  // @@protoc_insertion_point(destructor:t4proto.v1.orderrouting.OrderUpdateTradeLeg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderUpdateTradeLeg::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.unique_id_.Destroy();
  _impl_.account_id_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.status_detail_.Destroy();
  _impl_.exchange_trade_id_.Destroy();
  _impl_.contra_trader_.Destroy();
  _impl_.contra_broker_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
  if (this != internal_default_instance()) delete _impl_.exchange_time_;
  if (this != internal_default_instance()) delete _impl_.price_;
}

void OrderUpdateTradeLeg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderUpdateTradeLeg::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.orderrouting.OrderUpdateTradeLeg)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.unique_id_.ClearToEmpty();
  _impl_.account_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.status_detail_.ClearToEmpty();
  _impl_.exchange_trade_id_.ClearToEmpty();
  _impl_.contra_trader_.ClearToEmpty();
  _impl_.contra_broker_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.exchange_time_ != nullptr) {
    delete _impl_.exchange_time_;
  }
  _impl_.exchange_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  ::memset(&_impl_.change_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.sequence_order_) -
      reinterpret_cast<char*>(&_impl_.change_)) + sizeof(_impl_.sequence_order_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderUpdateTradeLeg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unique_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateTradeLeg.unique_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateTradeLeg.account_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateTradeLeg.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp exchange_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_exchange_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.OrderChange change = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_change(static_cast<::t4proto::v1::common::OrderChange>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.OrderStatus status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::t4proto::v1::common::OrderStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string status_detail = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_status_detail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateTradeLeg.status_detail"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.ResponsePending response_pending = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_response_pending(static_cast<::t4proto::v1::common::ResponsePending>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 leg_index = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.leg_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 volume = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price price = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string exchange_trade_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_exchange_trade_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateTradeLeg.exchange_trade_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string contra_trader = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_contra_trader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateTradeLeg.contra_trader"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string contra_broker = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_contra_broker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateTradeLeg.contra_broker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 residual_volume = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _impl_.residual_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 trade_date = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _impl_.trade_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 sequence_order = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _impl_.sequence_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderUpdateTradeLeg::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.orderrouting.OrderUpdateTradeLeg)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string unique_id = 1;
  if (!this->_internal_unique_id().empty()) {
    const std::string& _s = this->_internal_unique_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateTradeLeg.unique_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string account_id = 2;
  if (!this->_internal_account_id().empty()) {
    const std::string& _s = this->_internal_account_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateTradeLeg.account_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateTradeLeg.market_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .google.protobuf.Timestamp time = 4;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp exchange_time = 5;
  if (this->_internal_has_exchange_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::exchange_time(this),
        _Internal::exchange_time(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.OrderChange change = 6;
  if (this->_internal_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_change(), target);
  }

  // .t4proto.v1.common.OrderStatus status = 7;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_status(), target);
  }

  // string status_detail = 8;
  if (!this->_internal_status_detail().empty()) {
    const std::string& _s = this->_internal_status_detail();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateTradeLeg.status_detail");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // .t4proto.v1.common.ResponsePending response_pending = 9;
  if (this->_internal_response_pending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_response_pending(), target);
  }

  // int32 leg_index = 10;
  if (this->_internal_leg_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        10, this->_internal_leg_index(), target);
  }

  // int32 volume = 11;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        11, this->_internal_volume(), target);
  }

  // .t4proto.v1.common.Price price = 12;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // string exchange_trade_id = 13;
  if (!this->_internal_exchange_trade_id().empty()) {
    const std::string& _s = this->_internal_exchange_trade_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateTradeLeg.exchange_trade_id");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // string contra_trader = 14;
  if (!this->_internal_contra_trader().empty()) {
    const std::string& _s = this->_internal_contra_trader();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateTradeLeg.contra_trader");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // string contra_broker = 15;
  if (!this->_internal_contra_broker().empty()) {
    const std::string& _s = this->_internal_contra_broker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateTradeLeg.contra_broker");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // int32 residual_volume = 16;
  if (this->_internal_residual_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        16, this->_internal_residual_volume(), target);
  }

  // int64 trade_date = 17;
  if (this->_internal_trade_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        17, this->_internal_trade_date(), target);
  }

  // int32 sequence_order = 18;
  if (this->_internal_sequence_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        18, this->_internal_sequence_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.orderrouting.OrderUpdateTradeLeg)
  return target;
}

::size_t OrderUpdateTradeLeg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.orderrouting.OrderUpdateTradeLeg)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string unique_id = 1;
  if (!this->_internal_unique_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_unique_id());
  }

  // string account_id = 2;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_id());
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string status_detail = 8;
  if (!this->_internal_status_detail().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_status_detail());
  }

  // string exchange_trade_id = 13;
  if (!this->_internal_exchange_trade_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange_trade_id());
  }

  // string contra_trader = 14;
  if (!this->_internal_contra_trader().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contra_trader());
  }

  // string contra_broker = 15;
  if (!this->_internal_contra_broker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contra_broker());
  }

  // .google.protobuf.Timestamp time = 4;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // .google.protobuf.Timestamp exchange_time = 5;
  if (this->_internal_has_exchange_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.exchange_time_);
  }

  // .t4proto.v1.common.Price price = 12;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // .t4proto.v1.common.OrderChange change = 6;
  if (this->_internal_change() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_change());
  }

  // .t4proto.v1.common.OrderStatus status = 7;
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // .t4proto.v1.common.ResponsePending response_pending = 9;
  if (this->_internal_response_pending() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_response_pending());
  }

  // int32 leg_index = 10;
  if (this->_internal_leg_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_leg_index());
  }

  // int32 volume = 11;
  if (this->_internal_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_volume());
  }

  // int32 residual_volume = 16;
  if (this->_internal_residual_volume() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_residual_volume());
  }

  // int64 trade_date = 17;
  if (this->_internal_trade_date() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                    this->_internal_trade_date());
  }

  // int32 sequence_order = 18;
  if (this->_internal_sequence_order() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_sequence_order());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderUpdateTradeLeg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderUpdateTradeLeg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderUpdateTradeLeg::GetClassData() const { return &_class_data_; }


void OrderUpdateTradeLeg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderUpdateTradeLeg*>(&to_msg);
  auto& from = static_cast<const OrderUpdateTradeLeg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.orderrouting.OrderUpdateTradeLeg)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_unique_id().empty()) {
    _this->_internal_set_unique_id(from._internal_unique_id());
  }
  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_status_detail().empty()) {
    _this->_internal_set_status_detail(from._internal_status_detail());
  }
  if (!from._internal_exchange_trade_id().empty()) {
    _this->_internal_set_exchange_trade_id(from._internal_exchange_trade_id());
  }
  if (!from._internal_contra_trader().empty()) {
    _this->_internal_set_contra_trader(from._internal_contra_trader());
  }
  if (!from._internal_contra_broker().empty()) {
    _this->_internal_set_contra_broker(from._internal_contra_broker());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_has_exchange_time()) {
    _this->_internal_mutable_exchange_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_exchange_time());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_price());
  }
  if (from._internal_change() != 0) {
    _this->_internal_set_change(from._internal_change());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_response_pending() != 0) {
    _this->_internal_set_response_pending(from._internal_response_pending());
  }
  if (from._internal_leg_index() != 0) {
    _this->_internal_set_leg_index(from._internal_leg_index());
  }
  if (from._internal_volume() != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  if (from._internal_residual_volume() != 0) {
    _this->_internal_set_residual_volume(from._internal_residual_volume());
  }
  if (from._internal_trade_date() != 0) {
    _this->_internal_set_trade_date(from._internal_trade_date());
  }
  if (from._internal_sequence_order() != 0) {
    _this->_internal_set_sequence_order(from._internal_sequence_order());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderUpdateTradeLeg::CopyFrom(const OrderUpdateTradeLeg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.orderrouting.OrderUpdateTradeLeg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderUpdateTradeLeg::IsInitialized() const {
  return true;
}

void OrderUpdateTradeLeg::InternalSwap(OrderUpdateTradeLeg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.unique_id_, lhs_arena,
                                       &other->_impl_.unique_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_id_, lhs_arena,
                                       &other->_impl_.account_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_detail_, lhs_arena,
                                       &other->_impl_.status_detail_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_trade_id_, lhs_arena,
                                       &other->_impl_.exchange_trade_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contra_trader_, lhs_arena,
                                       &other->_impl_.contra_trader_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contra_broker_, lhs_arena,
                                       &other->_impl_.contra_broker_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderUpdateTradeLeg, _impl_.sequence_order_)
      + sizeof(OrderUpdateTradeLeg::_impl_.sequence_order_)
      - PROTOBUF_FIELD_OFFSET(OrderUpdateTradeLeg, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderUpdateTradeLeg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter, &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
      file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[13]);
}
// ===================================================================

class OrderUpdate_Trade::_Internal {
 public:
  static const ::t4proto::v1::common::Price& price(const OrderUpdate_Trade* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const OrderUpdate_Trade* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& exchange_time(const OrderUpdate_Trade* msg);
};

const ::t4proto::v1::common::Price&
OrderUpdate_Trade::_Internal::price(const OrderUpdate_Trade* msg) {
  return *msg->_impl_.price_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderUpdate_Trade::_Internal::time(const OrderUpdate_Trade* msg) {
  return *msg->_impl_.time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderUpdate_Trade::_Internal::exchange_time(const OrderUpdate_Trade* msg) {
  return *msg->_impl_.exchange_time_;
}
void OrderUpdate_Trade::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
void OrderUpdate_Trade::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
void OrderUpdate_Trade::clear_exchange_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.exchange_time_ != nullptr) {
    delete _impl_.exchange_time_;
  }
  _impl_.exchange_time_ = nullptr;
}
OrderUpdate_Trade::OrderUpdate_Trade(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.orderrouting.OrderUpdate.Trade)
}
OrderUpdate_Trade::OrderUpdate_Trade(const OrderUpdate_Trade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderUpdate_Trade* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_trade_id_) {}

    , decltype(_impl_.contra_trader_) {}

    , decltype(_impl_.contra_broker_) {}

    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.exchange_time_){nullptr}
    , decltype(_impl_.sequence_order_) {}

    , decltype(_impl_.volume_) {}

    , decltype(_impl_.trade_date_) {}

    , decltype(_impl_.residual_volume_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.exchange_trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_trade_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_trade_id().empty()) {
    _this->_impl_.exchange_trade_id_.Set(from._internal_exchange_trade_id(), _this->GetArenaForAllocation());
  }
  _impl_.contra_trader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contra_trader_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contra_trader().empty()) {
    _this->_impl_.contra_trader_.Set(from._internal_contra_trader(), _this->GetArenaForAllocation());
  }
  _impl_.contra_broker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contra_broker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contra_broker().empty()) {
    _this->_impl_.contra_broker_.Set(from._internal_contra_broker(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::t4proto::v1::common::Price(*from._impl_.price_);
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  if (from._internal_has_exchange_time()) {
    _this->_impl_.exchange_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.exchange_time_);
  }
  ::memcpy(&_impl_.sequence_order_, &from._impl_.sequence_order_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.residual_volume_) -
    reinterpret_cast<char*>(&_impl_.sequence_order_)) + sizeof(_impl_.residual_volume_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.orderrouting.OrderUpdate.Trade)
}

inline void OrderUpdate_Trade::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_trade_id_) {}

    , decltype(_impl_.contra_trader_) {}

    , decltype(_impl_.contra_broker_) {}

    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.exchange_time_){nullptr}
    , decltype(_impl_.sequence_order_) { 0 }

    , decltype(_impl_.volume_) { 0 }

    , decltype(_impl_.trade_date_) { ::int64_t{0} }

    , decltype(_impl_.residual_volume_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.exchange_trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_trade_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contra_trader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contra_trader_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contra_broker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contra_broker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderUpdate_Trade::~OrderUpdate_Trade() {
  // @@protoc_insertion_point(destructor:t4proto.v1.orderrouting.OrderUpdate.Trade)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderUpdate_Trade::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exchange_trade_id_.Destroy();
  _impl_.contra_trader_.Destroy();
  _impl_.contra_broker_.Destroy();
  if (this != internal_default_instance()) delete _impl_.price_;
  if (this != internal_default_instance()) delete _impl_.time_;
  if (this != internal_default_instance()) delete _impl_.exchange_time_;
}

void OrderUpdate_Trade::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderUpdate_Trade::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.orderrouting.OrderUpdate.Trade)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exchange_trade_id_.ClearToEmpty();
  _impl_.contra_trader_.ClearToEmpty();
  _impl_.contra_broker_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.exchange_time_ != nullptr) {
    delete _impl_.exchange_time_;
  }
  _impl_.exchange_time_ = nullptr;
  ::memset(&_impl_.sequence_order_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.residual_volume_) -
      reinterpret_cast<char*>(&_impl_.sequence_order_)) + sizeof(_impl_.residual_volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderUpdate_Trade::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sequence_order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.sequence_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 volume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price price = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 residual_volume = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.residual_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string exchange_trade_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_exchange_trade_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.Trade.exchange_trade_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp exchange_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_exchange_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string contra_trader = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_contra_trader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.Trade.contra_trader"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string contra_broker = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_contra_broker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.Trade.contra_broker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 trade_date = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.trade_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderUpdate_Trade::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.orderrouting.OrderUpdate.Trade)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_order = 1;
  if (this->_internal_sequence_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_sequence_order(), target);
  }

  // int32 volume = 2;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_volume(), target);
  }

  // .t4proto.v1.common.Price price = 3;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // int32 residual_volume = 4;
  if (this->_internal_residual_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_residual_volume(), target);
  }

  // .google.protobuf.Timestamp time = 5;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // string exchange_trade_id = 6;
  if (!this->_internal_exchange_trade_id().empty()) {
    const std::string& _s = this->_internal_exchange_trade_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.Trade.exchange_trade_id");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // .google.protobuf.Timestamp exchange_time = 7;
  if (this->_internal_has_exchange_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::exchange_time(this),
        _Internal::exchange_time(this).GetCachedSize(), target, stream);
  }

  // string contra_trader = 8;
  if (!this->_internal_contra_trader().empty()) {
    const std::string& _s = this->_internal_contra_trader();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.Trade.contra_trader");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string contra_broker = 9;
  if (!this->_internal_contra_broker().empty()) {
    const std::string& _s = this->_internal_contra_broker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.Trade.contra_broker");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // int64 trade_date = 10;
  if (this->_internal_trade_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        10, this->_internal_trade_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.orderrouting.OrderUpdate.Trade)
  return target;
}

::size_t OrderUpdate_Trade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.orderrouting.OrderUpdate.Trade)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exchange_trade_id = 6;
  if (!this->_internal_exchange_trade_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange_trade_id());
  }

  // string contra_trader = 8;
  if (!this->_internal_contra_trader().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contra_trader());
  }

  // string contra_broker = 9;
  if (!this->_internal_contra_broker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contra_broker());
  }

  // .t4proto.v1.common.Price price = 3;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // .google.protobuf.Timestamp time = 5;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // .google.protobuf.Timestamp exchange_time = 7;
  if (this->_internal_has_exchange_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.exchange_time_);
  }

  // int32 sequence_order = 1;
  if (this->_internal_sequence_order() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sequence_order());
  }

  // int32 volume = 2;
  if (this->_internal_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_volume());
  }

  // int64 trade_date = 10;
  if (this->_internal_trade_date() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_trade_date());
  }

  // int32 residual_volume = 4;
  if (this->_internal_residual_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_residual_volume());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderUpdate_Trade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderUpdate_Trade::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderUpdate_Trade::GetClassData() const { return &_class_data_; }


void OrderUpdate_Trade::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderUpdate_Trade*>(&to_msg);
  auto& from = static_cast<const OrderUpdate_Trade&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.orderrouting.OrderUpdate.Trade)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_exchange_trade_id().empty()) {
    _this->_internal_set_exchange_trade_id(from._internal_exchange_trade_id());
  }
  if (!from._internal_contra_trader().empty()) {
    _this->_internal_set_contra_trader(from._internal_contra_trader());
  }
  if (!from._internal_contra_broker().empty()) {
    _this->_internal_set_contra_broker(from._internal_contra_broker());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_price());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_has_exchange_time()) {
    _this->_internal_mutable_exchange_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_exchange_time());
  }
  if (from._internal_sequence_order() != 0) {
    _this->_internal_set_sequence_order(from._internal_sequence_order());
  }
  if (from._internal_volume() != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  if (from._internal_trade_date() != 0) {
    _this->_internal_set_trade_date(from._internal_trade_date());
  }
  if (from._internal_residual_volume() != 0) {
    _this->_internal_set_residual_volume(from._internal_residual_volume());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderUpdate_Trade::CopyFrom(const OrderUpdate_Trade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.orderrouting.OrderUpdate.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderUpdate_Trade::IsInitialized() const {
  return true;
}

void OrderUpdate_Trade::InternalSwap(OrderUpdate_Trade* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_trade_id_, lhs_arena,
                                       &other->_impl_.exchange_trade_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contra_trader_, lhs_arena,
                                       &other->_impl_.contra_trader_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contra_broker_, lhs_arena,
                                       &other->_impl_.contra_broker_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderUpdate_Trade, _impl_.residual_volume_)
      + sizeof(OrderUpdate_Trade::_impl_.residual_volume_)
      - PROTOBUF_FIELD_OFFSET(OrderUpdate_Trade, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderUpdate_Trade::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter, &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
      file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[14]);
}
// ===================================================================

class OrderUpdate_TradeLeg::_Internal {
 public:
  static const ::t4proto::v1::common::Price& price(const OrderUpdate_TradeLeg* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const OrderUpdate_TradeLeg* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& exchange_time(const OrderUpdate_TradeLeg* msg);
};

const ::t4proto::v1::common::Price&
OrderUpdate_TradeLeg::_Internal::price(const OrderUpdate_TradeLeg* msg) {
  return *msg->_impl_.price_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderUpdate_TradeLeg::_Internal::time(const OrderUpdate_TradeLeg* msg) {
  return *msg->_impl_.time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderUpdate_TradeLeg::_Internal::exchange_time(const OrderUpdate_TradeLeg* msg) {
  return *msg->_impl_.exchange_time_;
}
void OrderUpdate_TradeLeg::clear_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
}
void OrderUpdate_TradeLeg::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
void OrderUpdate_TradeLeg::clear_exchange_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.exchange_time_ != nullptr) {
    delete _impl_.exchange_time_;
  }
  _impl_.exchange_time_ = nullptr;
}
OrderUpdate_TradeLeg::OrderUpdate_TradeLeg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.orderrouting.OrderUpdate.TradeLeg)
}
OrderUpdate_TradeLeg::OrderUpdate_TradeLeg(const OrderUpdate_TradeLeg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderUpdate_TradeLeg* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_trade_id_) {}

    , decltype(_impl_.contra_trader_) {}

    , decltype(_impl_.contra_broker_) {}

    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.exchange_time_){nullptr}
    , decltype(_impl_.sequence_order_) {}

    , decltype(_impl_.leg_index_) {}

    , decltype(_impl_.volume_) {}

    , decltype(_impl_.residual_volume_) {}

    , decltype(_impl_.trade_date_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.exchange_trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_trade_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_trade_id().empty()) {
    _this->_impl_.exchange_trade_id_.Set(from._internal_exchange_trade_id(), _this->GetArenaForAllocation());
  }
  _impl_.contra_trader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contra_trader_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contra_trader().empty()) {
    _this->_impl_.contra_trader_.Set(from._internal_contra_trader(), _this->GetArenaForAllocation());
  }
  _impl_.contra_broker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contra_broker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_contra_broker().empty()) {
    _this->_impl_.contra_broker_.Set(from._internal_contra_broker(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_price()) {
    _this->_impl_.price_ = new ::t4proto::v1::common::Price(*from._impl_.price_);
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  if (from._internal_has_exchange_time()) {
    _this->_impl_.exchange_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.exchange_time_);
  }
  ::memcpy(&_impl_.sequence_order_, &from._impl_.sequence_order_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.trade_date_) -
    reinterpret_cast<char*>(&_impl_.sequence_order_)) + sizeof(_impl_.trade_date_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.orderrouting.OrderUpdate.TradeLeg)
}

inline void OrderUpdate_TradeLeg::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.exchange_trade_id_) {}

    , decltype(_impl_.contra_trader_) {}

    , decltype(_impl_.contra_broker_) {}

    , decltype(_impl_.price_){nullptr}
    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.exchange_time_){nullptr}
    , decltype(_impl_.sequence_order_) { 0 }

    , decltype(_impl_.leg_index_) { 0 }

    , decltype(_impl_.volume_) { 0 }

    , decltype(_impl_.residual_volume_) { 0 }

    , decltype(_impl_.trade_date_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.exchange_trade_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_trade_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contra_trader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contra_trader_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.contra_broker_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.contra_broker_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderUpdate_TradeLeg::~OrderUpdate_TradeLeg() {
  // @@protoc_insertion_point(destructor:t4proto.v1.orderrouting.OrderUpdate.TradeLeg)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderUpdate_TradeLeg::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.exchange_trade_id_.Destroy();
  _impl_.contra_trader_.Destroy();
  _impl_.contra_broker_.Destroy();
  if (this != internal_default_instance()) delete _impl_.price_;
  if (this != internal_default_instance()) delete _impl_.time_;
  if (this != internal_default_instance()) delete _impl_.exchange_time_;
}

void OrderUpdate_TradeLeg::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderUpdate_TradeLeg::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.orderrouting.OrderUpdate.TradeLeg)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exchange_trade_id_.ClearToEmpty();
  _impl_.contra_trader_.ClearToEmpty();
  _impl_.contra_broker_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.price_ != nullptr) {
    delete _impl_.price_;
  }
  _impl_.price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.exchange_time_ != nullptr) {
    delete _impl_.exchange_time_;
  }
  _impl_.exchange_time_ = nullptr;
  ::memset(&_impl_.sequence_order_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.trade_date_) -
      reinterpret_cast<char*>(&_impl_.sequence_order_)) + sizeof(_impl_.trade_date_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderUpdate_TradeLeg::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sequence_order = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _impl_.sequence_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 leg_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.leg_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 volume = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price price = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string exchange_trade_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_exchange_trade_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.TradeLeg.exchange_trade_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp exchange_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_exchange_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string contra_trader = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_contra_trader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.TradeLeg.contra_trader"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string contra_broker = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_contra_broker();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.TradeLeg.contra_broker"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 residual_volume = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.residual_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 trade_date = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _impl_.trade_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderUpdate_TradeLeg::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.orderrouting.OrderUpdate.TradeLeg)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence_order = 1;
  if (this->_internal_sequence_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_sequence_order(), target);
  }

  // int32 leg_index = 2;
  if (this->_internal_leg_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_leg_index(), target);
  }

  // int32 volume = 3;
  if (this->_internal_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_volume(), target);
  }

  // .t4proto.v1.common.Price price = 4;
  if (this->_internal_has_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::price(this),
        _Internal::price(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time = 5;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // string exchange_trade_id = 6;
  if (!this->_internal_exchange_trade_id().empty()) {
    const std::string& _s = this->_internal_exchange_trade_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.TradeLeg.exchange_trade_id");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // .google.protobuf.Timestamp exchange_time = 7;
  if (this->_internal_has_exchange_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::exchange_time(this),
        _Internal::exchange_time(this).GetCachedSize(), target, stream);
  }

  // string contra_trader = 8;
  if (!this->_internal_contra_trader().empty()) {
    const std::string& _s = this->_internal_contra_trader();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.TradeLeg.contra_trader");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // string contra_broker = 9;
  if (!this->_internal_contra_broker().empty()) {
    const std::string& _s = this->_internal_contra_broker();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.TradeLeg.contra_broker");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // int32 residual_volume = 10;
  if (this->_internal_residual_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        10, this->_internal_residual_volume(), target);
  }

  // int64 trade_date = 11;
  if (this->_internal_trade_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        11, this->_internal_trade_date(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.orderrouting.OrderUpdate.TradeLeg)
  return target;
}

::size_t OrderUpdate_TradeLeg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.orderrouting.OrderUpdate.TradeLeg)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exchange_trade_id = 6;
  if (!this->_internal_exchange_trade_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange_trade_id());
  }

  // string contra_trader = 8;
  if (!this->_internal_contra_trader().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contra_trader());
  }

  // string contra_broker = 9;
  if (!this->_internal_contra_broker().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_contra_broker());
  }

  // .t4proto.v1.common.Price price = 4;
  if (this->_internal_has_price()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.price_);
  }

  // .google.protobuf.Timestamp time = 5;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // .google.protobuf.Timestamp exchange_time = 7;
  if (this->_internal_has_exchange_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.exchange_time_);
  }

  // int32 sequence_order = 1;
  if (this->_internal_sequence_order() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_sequence_order());
  }

  // int32 leg_index = 2;
  if (this->_internal_leg_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_leg_index());
  }

  // int32 volume = 3;
  if (this->_internal_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_volume());
  }

  // int32 residual_volume = 10;
  if (this->_internal_residual_volume() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_residual_volume());
  }

  // int64 trade_date = 11;
  if (this->_internal_trade_date() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_trade_date());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderUpdate_TradeLeg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderUpdate_TradeLeg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderUpdate_TradeLeg::GetClassData() const { return &_class_data_; }


void OrderUpdate_TradeLeg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderUpdate_TradeLeg*>(&to_msg);
  auto& from = static_cast<const OrderUpdate_TradeLeg&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.orderrouting.OrderUpdate.TradeLeg)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_exchange_trade_id().empty()) {
    _this->_internal_set_exchange_trade_id(from._internal_exchange_trade_id());
  }
  if (!from._internal_contra_trader().empty()) {
    _this->_internal_set_contra_trader(from._internal_contra_trader());
  }
  if (!from._internal_contra_broker().empty()) {
    _this->_internal_set_contra_broker(from._internal_contra_broker());
  }
  if (from._internal_has_price()) {
    _this->_internal_mutable_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_price());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_has_exchange_time()) {
    _this->_internal_mutable_exchange_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_exchange_time());
  }
  if (from._internal_sequence_order() != 0) {
    _this->_internal_set_sequence_order(from._internal_sequence_order());
  }
  if (from._internal_leg_index() != 0) {
    _this->_internal_set_leg_index(from._internal_leg_index());
  }
  if (from._internal_volume() != 0) {
    _this->_internal_set_volume(from._internal_volume());
  }
  if (from._internal_residual_volume() != 0) {
    _this->_internal_set_residual_volume(from._internal_residual_volume());
  }
  if (from._internal_trade_date() != 0) {
    _this->_internal_set_trade_date(from._internal_trade_date());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderUpdate_TradeLeg::CopyFrom(const OrderUpdate_TradeLeg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.orderrouting.OrderUpdate.TradeLeg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderUpdate_TradeLeg::IsInitialized() const {
  return true;
}

void OrderUpdate_TradeLeg::InternalSwap(OrderUpdate_TradeLeg* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_trade_id_, lhs_arena,
                                       &other->_impl_.exchange_trade_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contra_trader_, lhs_arena,
                                       &other->_impl_.contra_trader_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contra_broker_, lhs_arena,
                                       &other->_impl_.contra_broker_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderUpdate_TradeLeg, _impl_.trade_date_)
      + sizeof(OrderUpdate_TradeLeg::_impl_.trade_date_)
      - PROTOBUF_FIELD_OFFSET(OrderUpdate_TradeLeg, _impl_.price_)>(
          reinterpret_cast<char*>(&_impl_.price_),
          reinterpret_cast<char*>(&other->_impl_.price_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderUpdate_TradeLeg::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter, &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
      file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[15]);
}
// ===================================================================

OrderUpdate_InstructionExtraEntry_DoNotUse::OrderUpdate_InstructionExtraEntry_DoNotUse() {}
OrderUpdate_InstructionExtraEntry_DoNotUse::OrderUpdate_InstructionExtraEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void OrderUpdate_InstructionExtraEntry_DoNotUse::MergeFrom(const OrderUpdate_InstructionExtraEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata OrderUpdate_InstructionExtraEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter, &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
      file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[16]);
}
// ===================================================================

class OrderUpdate::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const OrderUpdate* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& exchange_time(const OrderUpdate* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& submit_time(const OrderUpdate* msg);
  static const ::t4proto::v1::common::Price& current_limit_price(const OrderUpdate* msg);
  static const ::t4proto::v1::common::Price& current_stop_price(const OrderUpdate* msg);
  static const ::t4proto::v1::common::Price& new_limit_price(const OrderUpdate* msg);
  static const ::t4proto::v1::common::Price& new_stop_price(const OrderUpdate* msg);
  static const ::t4proto::v1::common::Price& trail_price(const OrderUpdate* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& receive_time(const OrderUpdate* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderUpdate::_Internal::time(const OrderUpdate* msg) {
  return *msg->_impl_.time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderUpdate::_Internal::exchange_time(const OrderUpdate* msg) {
  return *msg->_impl_.exchange_time_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderUpdate::_Internal::submit_time(const OrderUpdate* msg) {
  return *msg->_impl_.submit_time_;
}
const ::t4proto::v1::common::Price&
OrderUpdate::_Internal::current_limit_price(const OrderUpdate* msg) {
  return *msg->_impl_.current_limit_price_;
}
const ::t4proto::v1::common::Price&
OrderUpdate::_Internal::current_stop_price(const OrderUpdate* msg) {
  return *msg->_impl_.current_stop_price_;
}
const ::t4proto::v1::common::Price&
OrderUpdate::_Internal::new_limit_price(const OrderUpdate* msg) {
  return *msg->_impl_.new_limit_price_;
}
const ::t4proto::v1::common::Price&
OrderUpdate::_Internal::new_stop_price(const OrderUpdate* msg) {
  return *msg->_impl_.new_stop_price_;
}
const ::t4proto::v1::common::Price&
OrderUpdate::_Internal::trail_price(const OrderUpdate* msg) {
  return *msg->_impl_.trail_price_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrderUpdate::_Internal::receive_time(const OrderUpdate* msg) {
  return *msg->_impl_.receive_time_;
}
void OrderUpdate::clear_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
}
void OrderUpdate::clear_exchange_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.exchange_time_ != nullptr) {
    delete _impl_.exchange_time_;
  }
  _impl_.exchange_time_ = nullptr;
}
void OrderUpdate::clear_submit_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.submit_time_ != nullptr) {
    delete _impl_.submit_time_;
  }
  _impl_.submit_time_ = nullptr;
}
void OrderUpdate::clear_current_limit_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.current_limit_price_ != nullptr) {
    delete _impl_.current_limit_price_;
  }
  _impl_.current_limit_price_ = nullptr;
}
void OrderUpdate::clear_current_stop_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.current_stop_price_ != nullptr) {
    delete _impl_.current_stop_price_;
  }
  _impl_.current_stop_price_ = nullptr;
}
void OrderUpdate::clear_new_limit_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.new_limit_price_ != nullptr) {
    delete _impl_.new_limit_price_;
  }
  _impl_.new_limit_price_ = nullptr;
}
void OrderUpdate::clear_new_stop_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.new_stop_price_ != nullptr) {
    delete _impl_.new_stop_price_;
  }
  _impl_.new_stop_price_ = nullptr;
}
void OrderUpdate::clear_trail_price() {
  if (GetArenaForAllocation() == nullptr && _impl_.trail_price_ != nullptr) {
    delete _impl_.trail_price_;
  }
  _impl_.trail_price_ = nullptr;
}
void OrderUpdate::clear_receive_time() {
  if (GetArenaForAllocation() == nullptr && _impl_.receive_time_ != nullptr) {
    delete _impl_.receive_time_;
  }
  _impl_.receive_time_ = nullptr;
}
OrderUpdate::OrderUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &OrderUpdate::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.orderrouting.OrderUpdate)
}
OrderUpdate::OrderUpdate(const OrderUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.instruction_extra_)*/{}
    , decltype(_impl_.trades_){from._impl_.trades_}
    , decltype(_impl_.trade_legs_){from._impl_.trade_legs_}
    , decltype(_impl_.unique_id_) {}

    , decltype(_impl_.account_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.status_detail_) {}

    , decltype(_impl_.exchange_order_id_) {}

    , decltype(_impl_.exchange_id_) {}

    , decltype(_impl_.exchange_login_id_) {}

    , decltype(_impl_.executing_login_id_) {}

    , decltype(_impl_.exchange_location_) {}

    , decltype(_impl_.user_id_) {}

    , decltype(_impl_.user_name_) {}

    , decltype(_impl_.user_address_) {}

    , decltype(_impl_.session_id_) {}

    , decltype(_impl_.app_id_) {}

    , decltype(_impl_.app_name_) {}

    , decltype(_impl_.account_number_) {}

    , decltype(_impl_.member_allocation_) {}

    , decltype(_impl_.trader_allocation_) {}

    , decltype(_impl_.customer_reference_) {}

    , decltype(_impl_.avg_price_group_id_) {}

    , decltype(_impl_.omnibus_account_) {}

    , decltype(_impl_.executing_group_id_) {}

    , decltype(_impl_.tag_) {}

    , decltype(_impl_.orders_linked_) {}

    , decltype(_impl_.routing_user_id_) {}

    , decltype(_impl_.routing_user_name_) {}

    , decltype(_impl_.tag_cl_ord_id_) {}

    , decltype(_impl_.tag_orig_cl_ord_id_) {}

    , decltype(_impl_.tag_relation_id_) {}

    , decltype(_impl_.smp_id_) {}

    , decltype(_impl_.ats_regulatory_id_) {}

    , decltype(_impl_.authorized_trader_id_) {}

    , decltype(_impl_.activation_details_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.exchange_time_){nullptr}
    , decltype(_impl_.submit_time_){nullptr}
    , decltype(_impl_.current_limit_price_){nullptr}
    , decltype(_impl_.current_stop_price_){nullptr}
    , decltype(_impl_.new_limit_price_){nullptr}
    , decltype(_impl_.new_stop_price_){nullptr}
    , decltype(_impl_.trail_price_){nullptr}
    , decltype(_impl_.receive_time_){nullptr}
    , decltype(_impl_.change_) {}

    , decltype(_impl_.status_) {}

    , decltype(_impl_.trade_date_) {}

    , decltype(_impl_.response_pending_) {}

    , decltype(_impl_.buy_sell_) {}

    , decltype(_impl_.price_type_) {}

    , decltype(_impl_.time_type_) {}

    , decltype(_impl_.current_volume_) {}

    , decltype(_impl_.new_volume_) {}

    , decltype(_impl_.open_close_) {}

    , decltype(_impl_.cti_) {}

    , decltype(_impl_.origin_) {}

    , decltype(_impl_.account_code_) {}

    , decltype(_impl_.cust_order_handling_inst_) {}

    , decltype(_impl_.avg_price_indicator_) {}

    , decltype(_impl_.clearing_trade_price_type_) {}

    , decltype(_impl_.billing_fee_) {}

    , decltype(_impl_.total_fill_volume_) {}

    , decltype(_impl_.working_volume_) {}

    , decltype(_impl_.exchange_total_fill_volume_) {}

    , decltype(_impl_.trail_revision_interval_) {}

    , decltype(_impl_.trail_revision_change_) {}

    , decltype(_impl_.order_link_) {}

    , decltype(_impl_.activation_type_) {}

    , decltype(_impl_.primary_user_) {}

    , decltype(_impl_.current_max_show_) {}

    , decltype(_impl_.new_max_show_) {}

    , decltype(_impl_.order_source_) {}

    , decltype(_impl_.order_source_method_) {}

    , decltype(_impl_.app_type_) {}

    , decltype(_impl_.master_type_) {}

    , decltype(_impl_.sequence_order_) {}

    , decltype(_impl_.max_volume_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.instruction_extra_.MergeFrom(from._impl_.instruction_extra_);
  _impl_.unique_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unique_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_unique_id().empty()) {
    _this->_impl_.unique_id_.Set(from._internal_unique_id(), _this->GetArenaForAllocation());
  }
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), _this->GetArenaForAllocation());
  }
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.status_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_detail_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status_detail().empty()) {
    _this->_impl_.status_detail_.Set(from._internal_status_detail(), _this->GetArenaForAllocation());
  }
  _impl_.exchange_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_order_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_order_id().empty()) {
    _this->_impl_.exchange_order_id_.Set(from._internal_exchange_order_id(), _this->GetArenaForAllocation());
  }
  _impl_.exchange_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_id().empty()) {
    _this->_impl_.exchange_id_.Set(from._internal_exchange_id(), _this->GetArenaForAllocation());
  }
  _impl_.exchange_login_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_login_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_login_id().empty()) {
    _this->_impl_.exchange_login_id_.Set(from._internal_exchange_login_id(), _this->GetArenaForAllocation());
  }
  _impl_.executing_login_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.executing_login_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_executing_login_id().empty()) {
    _this->_impl_.executing_login_id_.Set(from._internal_executing_login_id(), _this->GetArenaForAllocation());
  }
  _impl_.exchange_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_location_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_location().empty()) {
    _this->_impl_.exchange_location_.Set(from._internal_exchange_location(), _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), _this->GetArenaForAllocation());
  }
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), _this->GetArenaForAllocation());
  }
  _impl_.user_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_address().empty()) {
    _this->_impl_.user_address_.Set(from._internal_user_address(), _this->GetArenaForAllocation());
  }
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), _this->GetArenaForAllocation());
  }
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    _this->_impl_.app_id_.Set(from._internal_app_id(), _this->GetArenaForAllocation());
  }
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_name().empty()) {
    _this->_impl_.app_name_.Set(from._internal_app_name(), _this->GetArenaForAllocation());
  }
  _impl_.account_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_number_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_number().empty()) {
    _this->_impl_.account_number_.Set(from._internal_account_number(), _this->GetArenaForAllocation());
  }
  _impl_.member_allocation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.member_allocation_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_member_allocation().empty()) {
    _this->_impl_.member_allocation_.Set(from._internal_member_allocation(), _this->GetArenaForAllocation());
  }
  _impl_.trader_allocation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trader_allocation_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trader_allocation().empty()) {
    _this->_impl_.trader_allocation_.Set(from._internal_trader_allocation(), _this->GetArenaForAllocation());
  }
  _impl_.customer_reference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.customer_reference_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_customer_reference().empty()) {
    _this->_impl_.customer_reference_.Set(from._internal_customer_reference(), _this->GetArenaForAllocation());
  }
  _impl_.avg_price_group_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.avg_price_group_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_avg_price_group_id().empty()) {
    _this->_impl_.avg_price_group_id_.Set(from._internal_avg_price_group_id(), _this->GetArenaForAllocation());
  }
  _impl_.omnibus_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.omnibus_account_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_omnibus_account().empty()) {
    _this->_impl_.omnibus_account_.Set(from._internal_omnibus_account(), _this->GetArenaForAllocation());
  }
  _impl_.executing_group_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.executing_group_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_executing_group_id().empty()) {
    _this->_impl_.executing_group_id_.Set(from._internal_executing_group_id(), _this->GetArenaForAllocation());
  }
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    _this->_impl_.tag_.Set(from._internal_tag(), _this->GetArenaForAllocation());
  }
  _impl_.orders_linked_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orders_linked_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_orders_linked().empty()) {
    _this->_impl_.orders_linked_.Set(from._internal_orders_linked(), _this->GetArenaForAllocation());
  }
  _impl_.routing_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.routing_user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_routing_user_id().empty()) {
    _this->_impl_.routing_user_id_.Set(from._internal_routing_user_id(), _this->GetArenaForAllocation());
  }
  _impl_.routing_user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.routing_user_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_routing_user_name().empty()) {
    _this->_impl_.routing_user_name_.Set(from._internal_routing_user_name(), _this->GetArenaForAllocation());
  }
  _impl_.tag_cl_ord_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_cl_ord_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag_cl_ord_id().empty()) {
    _this->_impl_.tag_cl_ord_id_.Set(from._internal_tag_cl_ord_id(), _this->GetArenaForAllocation());
  }
  _impl_.tag_orig_cl_ord_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_orig_cl_ord_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag_orig_cl_ord_id().empty()) {
    _this->_impl_.tag_orig_cl_ord_id_.Set(from._internal_tag_orig_cl_ord_id(), _this->GetArenaForAllocation());
  }
  _impl_.tag_relation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_relation_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag_relation_id().empty()) {
    _this->_impl_.tag_relation_id_.Set(from._internal_tag_relation_id(), _this->GetArenaForAllocation());
  }
  _impl_.smp_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.smp_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_smp_id().empty()) {
    _this->_impl_.smp_id_.Set(from._internal_smp_id(), _this->GetArenaForAllocation());
  }
  _impl_.ats_regulatory_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ats_regulatory_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ats_regulatory_id().empty()) {
    _this->_impl_.ats_regulatory_id_.Set(from._internal_ats_regulatory_id(), _this->GetArenaForAllocation());
  }
  _impl_.authorized_trader_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.authorized_trader_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_authorized_trader_id().empty()) {
    _this->_impl_.authorized_trader_id_.Set(from._internal_authorized_trader_id(), _this->GetArenaForAllocation());
  }
  _impl_.activation_details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.activation_details_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_activation_details().empty()) {
    _this->_impl_.activation_details_.Set(from._internal_activation_details(), _this->GetArenaForAllocation());
  }
  if (from._internal_has_time()) {
    _this->_impl_.time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.time_);
  }
  if (from._internal_has_exchange_time()) {
    _this->_impl_.exchange_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.exchange_time_);
  }
  if (from._internal_has_submit_time()) {
    _this->_impl_.submit_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.submit_time_);
  }
  if (from._internal_has_current_limit_price()) {
    _this->_impl_.current_limit_price_ = new ::t4proto::v1::common::Price(*from._impl_.current_limit_price_);
  }
  if (from._internal_has_current_stop_price()) {
    _this->_impl_.current_stop_price_ = new ::t4proto::v1::common::Price(*from._impl_.current_stop_price_);
  }
  if (from._internal_has_new_limit_price()) {
    _this->_impl_.new_limit_price_ = new ::t4proto::v1::common::Price(*from._impl_.new_limit_price_);
  }
  if (from._internal_has_new_stop_price()) {
    _this->_impl_.new_stop_price_ = new ::t4proto::v1::common::Price(*from._impl_.new_stop_price_);
  }
  if (from._internal_has_trail_price()) {
    _this->_impl_.trail_price_ = new ::t4proto::v1::common::Price(*from._impl_.trail_price_);
  }
  if (from._internal_has_receive_time()) {
    _this->_impl_.receive_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.receive_time_);
  }
  ::memcpy(&_impl_.change_, &from._impl_.change_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.max_volume_) -
    reinterpret_cast<char*>(&_impl_.change_)) + sizeof(_impl_.max_volume_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.orderrouting.OrderUpdate)
}

inline void OrderUpdate::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.instruction_extra_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.trades_){arena}
    , decltype(_impl_.trade_legs_){arena}
    , decltype(_impl_.unique_id_) {}

    , decltype(_impl_.account_id_) {}

    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.status_detail_) {}

    , decltype(_impl_.exchange_order_id_) {}

    , decltype(_impl_.exchange_id_) {}

    , decltype(_impl_.exchange_login_id_) {}

    , decltype(_impl_.executing_login_id_) {}

    , decltype(_impl_.exchange_location_) {}

    , decltype(_impl_.user_id_) {}

    , decltype(_impl_.user_name_) {}

    , decltype(_impl_.user_address_) {}

    , decltype(_impl_.session_id_) {}

    , decltype(_impl_.app_id_) {}

    , decltype(_impl_.app_name_) {}

    , decltype(_impl_.account_number_) {}

    , decltype(_impl_.member_allocation_) {}

    , decltype(_impl_.trader_allocation_) {}

    , decltype(_impl_.customer_reference_) {}

    , decltype(_impl_.avg_price_group_id_) {}

    , decltype(_impl_.omnibus_account_) {}

    , decltype(_impl_.executing_group_id_) {}

    , decltype(_impl_.tag_) {}

    , decltype(_impl_.orders_linked_) {}

    , decltype(_impl_.routing_user_id_) {}

    , decltype(_impl_.routing_user_name_) {}

    , decltype(_impl_.tag_cl_ord_id_) {}

    , decltype(_impl_.tag_orig_cl_ord_id_) {}

    , decltype(_impl_.tag_relation_id_) {}

    , decltype(_impl_.smp_id_) {}

    , decltype(_impl_.ats_regulatory_id_) {}

    , decltype(_impl_.authorized_trader_id_) {}

    , decltype(_impl_.activation_details_) {}

    , decltype(_impl_.time_){nullptr}
    , decltype(_impl_.exchange_time_){nullptr}
    , decltype(_impl_.submit_time_){nullptr}
    , decltype(_impl_.current_limit_price_){nullptr}
    , decltype(_impl_.current_stop_price_){nullptr}
    , decltype(_impl_.new_limit_price_){nullptr}
    , decltype(_impl_.new_stop_price_){nullptr}
    , decltype(_impl_.trail_price_){nullptr}
    , decltype(_impl_.receive_time_){nullptr}
    , decltype(_impl_.change_) { 0 }

    , decltype(_impl_.status_) { 0 }

    , decltype(_impl_.trade_date_) { ::int64_t{0} }

    , decltype(_impl_.response_pending_) { 0 }

    , decltype(_impl_.buy_sell_) { 0 }

    , decltype(_impl_.price_type_) { 0 }

    , decltype(_impl_.time_type_) { 0 }

    , decltype(_impl_.current_volume_) { 0 }

    , decltype(_impl_.new_volume_) { 0 }

    , decltype(_impl_.open_close_) { 0 }

    , decltype(_impl_.cti_) { 0 }

    , decltype(_impl_.origin_) { 0 }

    , decltype(_impl_.account_code_) { 0 }

    , decltype(_impl_.cust_order_handling_inst_) { 0 }

    , decltype(_impl_.avg_price_indicator_) { 0 }

    , decltype(_impl_.clearing_trade_price_type_) { 0 }

    , decltype(_impl_.billing_fee_) { 0 }

    , decltype(_impl_.total_fill_volume_) { 0 }

    , decltype(_impl_.working_volume_) { 0 }

    , decltype(_impl_.exchange_total_fill_volume_) { 0 }

    , decltype(_impl_.trail_revision_interval_) { 0 }

    , decltype(_impl_.trail_revision_change_) { 0 }

    , decltype(_impl_.order_link_) { 0 }

    , decltype(_impl_.activation_type_) { 0 }

    , decltype(_impl_.primary_user_) { 0 }

    , decltype(_impl_.current_max_show_) { 0 }

    , decltype(_impl_.new_max_show_) { 0 }

    , decltype(_impl_.order_source_) { 0 }

    , decltype(_impl_.order_source_method_) { 0 }

    , decltype(_impl_.app_type_) { 0 }

    , decltype(_impl_.master_type_) { 0 }

    , decltype(_impl_.sequence_order_) { 0 }

    , decltype(_impl_.max_volume_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.unique_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.unique_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_detail_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_order_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_order_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_login_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_login_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.executing_login_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.executing_login_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_location_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_number_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.member_allocation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.member_allocation_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.trader_allocation_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.trader_allocation_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.customer_reference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.customer_reference_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.avg_price_group_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.avg_price_group_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.omnibus_account_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.omnibus_account_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.executing_group_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.executing_group_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.orders_linked_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.orders_linked_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.routing_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.routing_user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.routing_user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.routing_user_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_cl_ord_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_cl_ord_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_orig_cl_ord_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_orig_cl_ord_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_relation_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.tag_relation_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.smp_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.smp_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ats_regulatory_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.ats_regulatory_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.authorized_trader_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.authorized_trader_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.activation_details_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.activation_details_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderUpdate::~OrderUpdate() {
  // @@protoc_insertion_point(destructor:t4proto.v1.orderrouting.OrderUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void OrderUpdate::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instruction_extra_.Destruct();
  _impl_.instruction_extra_.~MapField();
  _impl_.trades_.~RepeatedPtrField();
  _impl_.trade_legs_.~RepeatedPtrField();
  _impl_.unique_id_.Destroy();
  _impl_.account_id_.Destroy();
  _impl_.market_id_.Destroy();
  _impl_.status_detail_.Destroy();
  _impl_.exchange_order_id_.Destroy();
  _impl_.exchange_id_.Destroy();
  _impl_.exchange_login_id_.Destroy();
  _impl_.executing_login_id_.Destroy();
  _impl_.exchange_location_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.user_name_.Destroy();
  _impl_.user_address_.Destroy();
  _impl_.session_id_.Destroy();
  _impl_.app_id_.Destroy();
  _impl_.app_name_.Destroy();
  _impl_.account_number_.Destroy();
  _impl_.member_allocation_.Destroy();
  _impl_.trader_allocation_.Destroy();
  _impl_.customer_reference_.Destroy();
  _impl_.avg_price_group_id_.Destroy();
  _impl_.omnibus_account_.Destroy();
  _impl_.executing_group_id_.Destroy();
  _impl_.tag_.Destroy();
  _impl_.orders_linked_.Destroy();
  _impl_.routing_user_id_.Destroy();
  _impl_.routing_user_name_.Destroy();
  _impl_.tag_cl_ord_id_.Destroy();
  _impl_.tag_orig_cl_ord_id_.Destroy();
  _impl_.tag_relation_id_.Destroy();
  _impl_.smp_id_.Destroy();
  _impl_.ats_regulatory_id_.Destroy();
  _impl_.authorized_trader_id_.Destroy();
  _impl_.activation_details_.Destroy();
  if (this != internal_default_instance()) delete _impl_.time_;
  if (this != internal_default_instance()) delete _impl_.exchange_time_;
  if (this != internal_default_instance()) delete _impl_.submit_time_;
  if (this != internal_default_instance()) delete _impl_.current_limit_price_;
  if (this != internal_default_instance()) delete _impl_.current_stop_price_;
  if (this != internal_default_instance()) delete _impl_.new_limit_price_;
  if (this != internal_default_instance()) delete _impl_.new_stop_price_;
  if (this != internal_default_instance()) delete _impl_.trail_price_;
  if (this != internal_default_instance()) delete _impl_.receive_time_;
}

void OrderUpdate::ArenaDtor(void* object) {
  OrderUpdate* _this = reinterpret_cast< OrderUpdate* >(object);
  _this->_impl_.instruction_extra_.Destruct();
}
void OrderUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.orderrouting.OrderUpdate)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruction_extra_.Clear();
  _impl_.trades_.Clear();
  _impl_.trade_legs_.Clear();
  _impl_.unique_id_.ClearToEmpty();
  _impl_.account_id_.ClearToEmpty();
  _impl_.market_id_.ClearToEmpty();
  _impl_.status_detail_.ClearToEmpty();
  _impl_.exchange_order_id_.ClearToEmpty();
  _impl_.exchange_id_.ClearToEmpty();
  _impl_.exchange_login_id_.ClearToEmpty();
  _impl_.executing_login_id_.ClearToEmpty();
  _impl_.exchange_location_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.user_name_.ClearToEmpty();
  _impl_.user_address_.ClearToEmpty();
  _impl_.session_id_.ClearToEmpty();
  _impl_.app_id_.ClearToEmpty();
  _impl_.app_name_.ClearToEmpty();
  _impl_.account_number_.ClearToEmpty();
  _impl_.member_allocation_.ClearToEmpty();
  _impl_.trader_allocation_.ClearToEmpty();
  _impl_.customer_reference_.ClearToEmpty();
  _impl_.avg_price_group_id_.ClearToEmpty();
  _impl_.omnibus_account_.ClearToEmpty();
  _impl_.executing_group_id_.ClearToEmpty();
  _impl_.tag_.ClearToEmpty();
  _impl_.orders_linked_.ClearToEmpty();
  _impl_.routing_user_id_.ClearToEmpty();
  _impl_.routing_user_name_.ClearToEmpty();
  _impl_.tag_cl_ord_id_.ClearToEmpty();
  _impl_.tag_orig_cl_ord_id_.ClearToEmpty();
  _impl_.tag_relation_id_.ClearToEmpty();
  _impl_.smp_id_.ClearToEmpty();
  _impl_.ats_regulatory_id_.ClearToEmpty();
  _impl_.authorized_trader_id_.ClearToEmpty();
  _impl_.activation_details_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.time_ != nullptr) {
    delete _impl_.time_;
  }
  _impl_.time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.exchange_time_ != nullptr) {
    delete _impl_.exchange_time_;
  }
  _impl_.exchange_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.submit_time_ != nullptr) {
    delete _impl_.submit_time_;
  }
  _impl_.submit_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.current_limit_price_ != nullptr) {
    delete _impl_.current_limit_price_;
  }
  _impl_.current_limit_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.current_stop_price_ != nullptr) {
    delete _impl_.current_stop_price_;
  }
  _impl_.current_stop_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.new_limit_price_ != nullptr) {
    delete _impl_.new_limit_price_;
  }
  _impl_.new_limit_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.new_stop_price_ != nullptr) {
    delete _impl_.new_stop_price_;
  }
  _impl_.new_stop_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.trail_price_ != nullptr) {
    delete _impl_.trail_price_;
  }
  _impl_.trail_price_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.receive_time_ != nullptr) {
    delete _impl_.receive_time_;
  }
  _impl_.receive_time_ = nullptr;
  ::memset(&_impl_.change_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.max_volume_) -
      reinterpret_cast<char*>(&_impl_.change_)) + sizeof(_impl_.max_volume_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unique_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.unique_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.account_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string market_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp exchange_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_exchange_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.OrderChange change = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_change(static_cast<::t4proto::v1::common::OrderChange>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.OrderStatus status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::t4proto::v1::common::OrderStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string status_detail = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_status_detail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.status_detail"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.ResponsePending response_pending = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_response_pending(static_cast<::t4proto::v1::common::ResponsePending>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string exchange_order_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_exchange_order_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.exchange_order_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp submit_time = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_submit_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 trade_date = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _impl_.trade_date_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string exchange_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_exchange_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.exchange_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string exchange_login_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_exchange_login_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.exchange_login_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string executing_login_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_executing_login_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.executing_login_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string exchange_location = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_exchange_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.exchange_location"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string user_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.user_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string user_name = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.user_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string user_address = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_user_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.user_address"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string session_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.session_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string app_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_app_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.app_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string app_name = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_app_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.app_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.BuySell buy_sell = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 184)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_buy_sell(static_cast<::t4proto::v1::common::BuySell>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.PriceType price_type = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 192)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_price_type(static_cast<::t4proto::v1::common::PriceType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.TimeType time_type = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 200)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_time_type(static_cast<::t4proto::v1::common::TimeType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 current_volume = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 208)) {
          _impl_.current_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price current_limit_price = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_limit_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price current_stop_price = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_stop_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 new_volume = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 232)) {
          _impl_.new_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price new_limit_price = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_limit_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price new_stop_price = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_stop_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.OpenClose open_close = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 0)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_open_close(static_cast<::t4proto::v1::common::OpenClose>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string account_number = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.account_number"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.CTI cti = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_cti(static_cast<::t4proto::v1::common::CTI>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Origin origin = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_origin(static_cast<::t4proto::v1::common::Origin>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.AccountCode account_code = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_account_code(static_cast<::t4proto::v1::common::AccountCode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string member_allocation = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_member_allocation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.member_allocation"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string trader_allocation = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_trader_allocation();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.trader_allocation"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string customer_reference = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_customer_reference();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.customer_reference"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.CustOrderHandlingInstType cust_order_handling_inst = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_cust_order_handling_inst(static_cast<::t4proto::v1::common::CustOrderHandlingInstType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.AvgPriceIndicatorType avg_price_indicator = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_avg_price_indicator(static_cast<::t4proto::v1::common::AvgPriceIndicatorType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string avg_price_group_id = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_avg_price_group_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.avg_price_group_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.ClearingTradePriceType clearing_trade_price_type = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_clearing_trade_price_type(static_cast<::t4proto::v1::common::ClearingTradePriceType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.BillingFee billing_fee = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_billing_fee(static_cast<::t4proto::v1::common::BillingFee>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string omnibus_account = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_omnibus_account();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.omnibus_account"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string executing_group_id = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_executing_group_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.executing_group_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string tag = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.tag"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 total_fill_volume = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _impl_.total_fill_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 working_volume = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _impl_.working_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 exchange_total_fill_volume = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _impl_.exchange_total_fill_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.Price trail_price = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_trail_price(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 trail_revision_interval = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 160)) {
          _impl_.trail_revision_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 trail_revision_change = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 168)) {
          _impl_.trail_revision_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.OrderLink order_link = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 176)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_order_link(static_cast<::t4proto::v1::common::OrderLink>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string orders_linked = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_orders_linked();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.orders_linked"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.ActivationType activation_type = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 192)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_activation_type(static_cast<::t4proto::v1::common::ActivationType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.PrimaryUserType primary_user = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 200)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_primary_user(static_cast<::t4proto::v1::common::PrimaryUserType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 current_max_show = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 208)) {
          _impl_.current_max_show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 new_max_show = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 216)) {
          _impl_.new_max_show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string routing_user_id = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          auto str = _internal_mutable_routing_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.routing_user_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string routing_user_name = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          auto str = _internal_mutable_routing_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.routing_user_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.OrderSource order_source = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 240)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_order_source(static_cast<::t4proto::v1::common::OrderSource>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.OrderSourceMethod order_source_method = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 248)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_order_source_method(static_cast<::t4proto::v1::common::OrderSourceMethod>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.ApplicationType app_type = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 0)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_app_type(static_cast<::t4proto::v1::common::ApplicationType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.MasterType master_type = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_master_type(static_cast<::t4proto::v1::common::MasterType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string tag_cl_ord_id = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tag_cl_ord_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.tag_cl_ord_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string tag_orig_cl_ord_id = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tag_orig_cl_ord_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.tag_orig_cl_ord_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string tag_relation_id = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_tag_relation_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.tag_relation_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string smp_id = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_smp_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.smp_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 sequence_order = 70;
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.sequence_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string ats_regulatory_id = 71;
      case 71:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_ats_regulatory_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.ats_regulatory_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 max_volume = 72;
      case 72:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _impl_.max_volume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string authorized_trader_id = 73;
      case 73:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_authorized_trader_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.authorized_trader_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // map<string, string> instruction_extra = 74;
      case 74:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&_impl_.instruction_extra_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<594>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .google.protobuf.Timestamp receive_time = 75;
      case 75:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_receive_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string activation_details = 76;
      case 76:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_activation_details();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdate.activation_details"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .t4proto.v1.orderrouting.OrderUpdate.Trade trades = 77;
      case 77:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_trades(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<618>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .t4proto.v1.orderrouting.OrderUpdate.TradeLeg trade_legs = 78;
      case 78:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_trade_legs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<626>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderUpdate::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.orderrouting.OrderUpdate)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string unique_id = 1;
  if (!this->_internal_unique_id().empty()) {
    const std::string& _s = this->_internal_unique_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.unique_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string account_id = 2;
  if (!this->_internal_account_id().empty()) {
    const std::string& _s = this->_internal_account_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.account_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.market_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .google.protobuf.Timestamp time = 4;
  if (this->_internal_has_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::time(this),
        _Internal::time(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp exchange_time = 5;
  if (this->_internal_has_exchange_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::exchange_time(this),
        _Internal::exchange_time(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.OrderChange change = 6;
  if (this->_internal_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this->_internal_change(), target);
  }

  // .t4proto.v1.common.OrderStatus status = 7;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_status(), target);
  }

  // string status_detail = 8;
  if (!this->_internal_status_detail().empty()) {
    const std::string& _s = this->_internal_status_detail();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.status_detail");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // .t4proto.v1.common.ResponsePending response_pending = 9;
  if (this->_internal_response_pending() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_response_pending(), target);
  }

  // string exchange_order_id = 10;
  if (!this->_internal_exchange_order_id().empty()) {
    const std::string& _s = this->_internal_exchange_order_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.exchange_order_id");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // .google.protobuf.Timestamp submit_time = 11;
  if (this->_internal_has_submit_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::submit_time(this),
        _Internal::submit_time(this).GetCachedSize(), target, stream);
  }

  // int64 trade_date = 12;
  if (this->_internal_trade_date() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        12, this->_internal_trade_date(), target);
  }

  // string exchange_id = 13;
  if (!this->_internal_exchange_id().empty()) {
    const std::string& _s = this->_internal_exchange_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.exchange_id");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // string exchange_login_id = 14;
  if (!this->_internal_exchange_login_id().empty()) {
    const std::string& _s = this->_internal_exchange_login_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.exchange_login_id");
    target = stream->WriteStringMaybeAliased(14, _s, target);
  }

  // string executing_login_id = 15;
  if (!this->_internal_executing_login_id().empty()) {
    const std::string& _s = this->_internal_executing_login_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.executing_login_id");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // string exchange_location = 16;
  if (!this->_internal_exchange_location().empty()) {
    const std::string& _s = this->_internal_exchange_location();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.exchange_location");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // string user_id = 17;
  if (!this->_internal_user_id().empty()) {
    const std::string& _s = this->_internal_user_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.user_id");
    target = stream->WriteStringMaybeAliased(17, _s, target);
  }

  // string user_name = 18;
  if (!this->_internal_user_name().empty()) {
    const std::string& _s = this->_internal_user_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.user_name");
    target = stream->WriteStringMaybeAliased(18, _s, target);
  }

  // string user_address = 19;
  if (!this->_internal_user_address().empty()) {
    const std::string& _s = this->_internal_user_address();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.user_address");
    target = stream->WriteStringMaybeAliased(19, _s, target);
  }

  // string session_id = 20;
  if (!this->_internal_session_id().empty()) {
    const std::string& _s = this->_internal_session_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.session_id");
    target = stream->WriteStringMaybeAliased(20, _s, target);
  }

  // string app_id = 21;
  if (!this->_internal_app_id().empty()) {
    const std::string& _s = this->_internal_app_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.app_id");
    target = stream->WriteStringMaybeAliased(21, _s, target);
  }

  // string app_name = 22;
  if (!this->_internal_app_name().empty()) {
    const std::string& _s = this->_internal_app_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.app_name");
    target = stream->WriteStringMaybeAliased(22, _s, target);
  }

  // .t4proto.v1.common.BuySell buy_sell = 23;
  if (this->_internal_buy_sell() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        23, this->_internal_buy_sell(), target);
  }

  // .t4proto.v1.common.PriceType price_type = 24;
  if (this->_internal_price_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        24, this->_internal_price_type(), target);
  }

  // .t4proto.v1.common.TimeType time_type = 25;
  if (this->_internal_time_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        25, this->_internal_time_type(), target);
  }

  // int32 current_volume = 26;
  if (this->_internal_current_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        26, this->_internal_current_volume(), target);
  }

  // .t4proto.v1.common.Price current_limit_price = 27;
  if (this->_internal_has_current_limit_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::current_limit_price(this),
        _Internal::current_limit_price(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.Price current_stop_price = 28;
  if (this->_internal_has_current_stop_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::current_stop_price(this),
        _Internal::current_stop_price(this).GetCachedSize(), target, stream);
  }

  // int32 new_volume = 29;
  if (this->_internal_new_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        29, this->_internal_new_volume(), target);
  }

  // .t4proto.v1.common.Price new_limit_price = 30;
  if (this->_internal_has_new_limit_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, _Internal::new_limit_price(this),
        _Internal::new_limit_price(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.Price new_stop_price = 31;
  if (this->_internal_has_new_stop_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::new_stop_price(this),
        _Internal::new_stop_price(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.common.OpenClose open_close = 32;
  if (this->_internal_open_close() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        32, this->_internal_open_close(), target);
  }

  // string account_number = 33;
  if (!this->_internal_account_number().empty()) {
    const std::string& _s = this->_internal_account_number();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.account_number");
    target = stream->WriteStringMaybeAliased(33, _s, target);
  }

  // .t4proto.v1.common.CTI cti = 34;
  if (this->_internal_cti() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        34, this->_internal_cti(), target);
  }

  // .t4proto.v1.common.Origin origin = 35;
  if (this->_internal_origin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        35, this->_internal_origin(), target);
  }

  // .t4proto.v1.common.AccountCode account_code = 36;
  if (this->_internal_account_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        36, this->_internal_account_code(), target);
  }

  // string member_allocation = 37;
  if (!this->_internal_member_allocation().empty()) {
    const std::string& _s = this->_internal_member_allocation();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.member_allocation");
    target = stream->WriteStringMaybeAliased(37, _s, target);
  }

  // string trader_allocation = 38;
  if (!this->_internal_trader_allocation().empty()) {
    const std::string& _s = this->_internal_trader_allocation();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.trader_allocation");
    target = stream->WriteStringMaybeAliased(38, _s, target);
  }

  // string customer_reference = 39;
  if (!this->_internal_customer_reference().empty()) {
    const std::string& _s = this->_internal_customer_reference();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.customer_reference");
    target = stream->WriteStringMaybeAliased(39, _s, target);
  }

  // .t4proto.v1.common.CustOrderHandlingInstType cust_order_handling_inst = 40;
  if (this->_internal_cust_order_handling_inst() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        40, this->_internal_cust_order_handling_inst(), target);
  }

  // .t4proto.v1.common.AvgPriceIndicatorType avg_price_indicator = 41;
  if (this->_internal_avg_price_indicator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        41, this->_internal_avg_price_indicator(), target);
  }

  // string avg_price_group_id = 42;
  if (!this->_internal_avg_price_group_id().empty()) {
    const std::string& _s = this->_internal_avg_price_group_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.avg_price_group_id");
    target = stream->WriteStringMaybeAliased(42, _s, target);
  }

  // .t4proto.v1.common.ClearingTradePriceType clearing_trade_price_type = 43;
  if (this->_internal_clearing_trade_price_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        43, this->_internal_clearing_trade_price_type(), target);
  }

  // .t4proto.v1.common.BillingFee billing_fee = 44;
  if (this->_internal_billing_fee() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        44, this->_internal_billing_fee(), target);
  }

  // string omnibus_account = 45;
  if (!this->_internal_omnibus_account().empty()) {
    const std::string& _s = this->_internal_omnibus_account();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.omnibus_account");
    target = stream->WriteStringMaybeAliased(45, _s, target);
  }

  // string executing_group_id = 46;
  if (!this->_internal_executing_group_id().empty()) {
    const std::string& _s = this->_internal_executing_group_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.executing_group_id");
    target = stream->WriteStringMaybeAliased(46, _s, target);
  }

  // string tag = 47;
  if (!this->_internal_tag().empty()) {
    const std::string& _s = this->_internal_tag();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.tag");
    target = stream->WriteStringMaybeAliased(47, _s, target);
  }

  // int32 total_fill_volume = 48;
  if (this->_internal_total_fill_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        48, this->_internal_total_fill_volume(), target);
  }

  // int32 working_volume = 49;
  if (this->_internal_working_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        49, this->_internal_working_volume(), target);
  }

  // int32 exchange_total_fill_volume = 50;
  if (this->_internal_exchange_total_fill_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        50, this->_internal_exchange_total_fill_volume(), target);
  }

  // .t4proto.v1.common.Price trail_price = 51;
  if (this->_internal_has_trail_price()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, _Internal::trail_price(this),
        _Internal::trail_price(this).GetCachedSize(), target, stream);
  }

  // int32 trail_revision_interval = 52;
  if (this->_internal_trail_revision_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        52, this->_internal_trail_revision_interval(), target);
  }

  // int32 trail_revision_change = 53;
  if (this->_internal_trail_revision_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        53, this->_internal_trail_revision_change(), target);
  }

  // .t4proto.v1.common.OrderLink order_link = 54;
  if (this->_internal_order_link() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        54, this->_internal_order_link(), target);
  }

  // string orders_linked = 55;
  if (!this->_internal_orders_linked().empty()) {
    const std::string& _s = this->_internal_orders_linked();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.orders_linked");
    target = stream->WriteStringMaybeAliased(55, _s, target);
  }

  // .t4proto.v1.common.ActivationType activation_type = 56;
  if (this->_internal_activation_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        56, this->_internal_activation_type(), target);
  }

  // .t4proto.v1.common.PrimaryUserType primary_user = 57;
  if (this->_internal_primary_user() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        57, this->_internal_primary_user(), target);
  }

  // int32 current_max_show = 58;
  if (this->_internal_current_max_show() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        58, this->_internal_current_max_show(), target);
  }

  // int32 new_max_show = 59;
  if (this->_internal_new_max_show() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        59, this->_internal_new_max_show(), target);
  }

  // string routing_user_id = 60;
  if (!this->_internal_routing_user_id().empty()) {
    const std::string& _s = this->_internal_routing_user_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.routing_user_id");
    target = stream->WriteStringMaybeAliased(60, _s, target);
  }

  // string routing_user_name = 61;
  if (!this->_internal_routing_user_name().empty()) {
    const std::string& _s = this->_internal_routing_user_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.routing_user_name");
    target = stream->WriteStringMaybeAliased(61, _s, target);
  }

  // .t4proto.v1.common.OrderSource order_source = 62;
  if (this->_internal_order_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        62, this->_internal_order_source(), target);
  }

  // .t4proto.v1.common.OrderSourceMethod order_source_method = 63;
  if (this->_internal_order_source_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        63, this->_internal_order_source_method(), target);
  }

  // .t4proto.v1.common.ApplicationType app_type = 64;
  if (this->_internal_app_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        64, this->_internal_app_type(), target);
  }

  // .t4proto.v1.common.MasterType master_type = 65;
  if (this->_internal_master_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        65, this->_internal_master_type(), target);
  }

  // string tag_cl_ord_id = 66;
  if (!this->_internal_tag_cl_ord_id().empty()) {
    const std::string& _s = this->_internal_tag_cl_ord_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.tag_cl_ord_id");
    target = stream->WriteStringMaybeAliased(66, _s, target);
  }

  // string tag_orig_cl_ord_id = 67;
  if (!this->_internal_tag_orig_cl_ord_id().empty()) {
    const std::string& _s = this->_internal_tag_orig_cl_ord_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.tag_orig_cl_ord_id");
    target = stream->WriteStringMaybeAliased(67, _s, target);
  }

  // string tag_relation_id = 68;
  if (!this->_internal_tag_relation_id().empty()) {
    const std::string& _s = this->_internal_tag_relation_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.tag_relation_id");
    target = stream->WriteStringMaybeAliased(68, _s, target);
  }

  // string smp_id = 69;
  if (!this->_internal_smp_id().empty()) {
    const std::string& _s = this->_internal_smp_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.smp_id");
    target = stream->WriteStringMaybeAliased(69, _s, target);
  }

  // int32 sequence_order = 70;
  if (this->_internal_sequence_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        70, this->_internal_sequence_order(), target);
  }

  // string ats_regulatory_id = 71;
  if (!this->_internal_ats_regulatory_id().empty()) {
    const std::string& _s = this->_internal_ats_regulatory_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.ats_regulatory_id");
    target = stream->WriteStringMaybeAliased(71, _s, target);
  }

  // int32 max_volume = 72;
  if (this->_internal_max_volume() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        72, this->_internal_max_volume(), target);
  }

  // string authorized_trader_id = 73;
  if (!this->_internal_authorized_trader_id().empty()) {
    const std::string& _s = this->_internal_authorized_trader_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.authorized_trader_id");
    target = stream->WriteStringMaybeAliased(73, _s, target);
  }

  // map<string, string> instruction_extra = 74;
  if (!this->_internal_instruction_extra().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = OrderUpdate_InstructionExtraEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_instruction_extra();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.instruction_extra");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.second.data(), static_cast<int>(entry.second.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.instruction_extra");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(74, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(74, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .google.protobuf.Timestamp receive_time = 75;
  if (this->_internal_has_receive_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(75, _Internal::receive_time(this),
        _Internal::receive_time(this).GetCachedSize(), target, stream);
  }

  // string activation_details = 76;
  if (!this->_internal_activation_details().empty()) {
    const std::string& _s = this->_internal_activation_details();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdate.activation_details");
    target = stream->WriteStringMaybeAliased(76, _s, target);
  }

  // repeated .t4proto.v1.orderrouting.OrderUpdate.Trade trades = 77;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trades_size()); i < n; i++) {
    const auto& repfield = this->_internal_trades(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(77, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .t4proto.v1.orderrouting.OrderUpdate.TradeLeg trade_legs = 78;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_trade_legs_size()); i < n; i++) {
    const auto& repfield = this->_internal_trade_legs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(78, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.orderrouting.OrderUpdate)
  return target;
}

::size_t OrderUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.orderrouting.OrderUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> instruction_extra = 74;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_instruction_extra_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_instruction_extra().begin();
      it != this->_internal_instruction_extra().end(); ++it) {
    total_size += OrderUpdate_InstructionExtraEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .t4proto.v1.orderrouting.OrderUpdate.Trade trades = 77;
  total_size += 2UL * this->_internal_trades_size();
  for (const auto& msg : this->_impl_.trades_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .t4proto.v1.orderrouting.OrderUpdate.TradeLeg trade_legs = 78;
  total_size += 2UL * this->_internal_trade_legs_size();
  for (const auto& msg : this->_impl_.trade_legs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string unique_id = 1;
  if (!this->_internal_unique_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_unique_id());
  }

  // string account_id = 2;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_id());
  }

  // string market_id = 3;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string status_detail = 8;
  if (!this->_internal_status_detail().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_status_detail());
  }

  // string exchange_order_id = 10;
  if (!this->_internal_exchange_order_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange_order_id());
  }

  // string exchange_id = 13;
  if (!this->_internal_exchange_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange_id());
  }

  // string exchange_login_id = 14;
  if (!this->_internal_exchange_login_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange_login_id());
  }

  // string executing_login_id = 15;
  if (!this->_internal_executing_login_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_executing_login_id());
  }

  // string exchange_location = 16;
  if (!this->_internal_exchange_location().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange_location());
  }

  // string user_id = 17;
  if (!this->_internal_user_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_user_id());
  }

  // string user_name = 18;
  if (!this->_internal_user_name().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_user_name());
  }

  // string user_address = 19;
  if (!this->_internal_user_address().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_user_address());
  }

  // string session_id = 20;
  if (!this->_internal_session_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_session_id());
  }

  // string app_id = 21;
  if (!this->_internal_app_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_app_id());
  }

  // string app_name = 22;
  if (!this->_internal_app_name().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_app_name());
  }

  // string account_number = 33;
  if (!this->_internal_account_number().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_number());
  }

  // string member_allocation = 37;
  if (!this->_internal_member_allocation().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_member_allocation());
  }

  // string trader_allocation = 38;
  if (!this->_internal_trader_allocation().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_trader_allocation());
  }

  // string customer_reference = 39;
  if (!this->_internal_customer_reference().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_customer_reference());
  }

  // string avg_price_group_id = 42;
  if (!this->_internal_avg_price_group_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_avg_price_group_id());
  }

  // string omnibus_account = 45;
  if (!this->_internal_omnibus_account().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_omnibus_account());
  }

  // string executing_group_id = 46;
  if (!this->_internal_executing_group_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_executing_group_id());
  }

  // string tag = 47;
  if (!this->_internal_tag().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tag());
  }

  // string orders_linked = 55;
  if (!this->_internal_orders_linked().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_orders_linked());
  }

  // string routing_user_id = 60;
  if (!this->_internal_routing_user_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_routing_user_id());
  }

  // string routing_user_name = 61;
  if (!this->_internal_routing_user_name().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_routing_user_name());
  }

  // string tag_cl_ord_id = 66;
  if (!this->_internal_tag_cl_ord_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tag_cl_ord_id());
  }

  // string tag_orig_cl_ord_id = 67;
  if (!this->_internal_tag_orig_cl_ord_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tag_orig_cl_ord_id());
  }

  // string tag_relation_id = 68;
  if (!this->_internal_tag_relation_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_tag_relation_id());
  }

  // string smp_id = 69;
  if (!this->_internal_smp_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_smp_id());
  }

  // string ats_regulatory_id = 71;
  if (!this->_internal_ats_regulatory_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_ats_regulatory_id());
  }

  // string authorized_trader_id = 73;
  if (!this->_internal_authorized_trader_id().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_authorized_trader_id());
  }

  // string activation_details = 76;
  if (!this->_internal_activation_details().empty()) {
    total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_activation_details());
  }

  // .google.protobuf.Timestamp time = 4;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.time_);
  }

  // .google.protobuf.Timestamp exchange_time = 5;
  if (this->_internal_has_exchange_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.exchange_time_);
  }

  // .google.protobuf.Timestamp submit_time = 11;
  if (this->_internal_has_submit_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.submit_time_);
  }

  // .t4proto.v1.common.Price current_limit_price = 27;
  if (this->_internal_has_current_limit_price()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_limit_price_);
  }

  // .t4proto.v1.common.Price current_stop_price = 28;
  if (this->_internal_has_current_stop_price()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_stop_price_);
  }

  // .t4proto.v1.common.Price new_limit_price = 30;
  if (this->_internal_has_new_limit_price()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_limit_price_);
  }

  // .t4proto.v1.common.Price new_stop_price = 31;
  if (this->_internal_has_new_stop_price()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.new_stop_price_);
  }

  // .t4proto.v1.common.Price trail_price = 51;
  if (this->_internal_has_trail_price()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trail_price_);
  }

  // .google.protobuf.Timestamp receive_time = 75;
  if (this->_internal_has_receive_time()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.receive_time_);
  }

  // .t4proto.v1.common.OrderChange change = 6;
  if (this->_internal_change() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_change());
  }

  // .t4proto.v1.common.OrderStatus status = 7;
  if (this->_internal_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  // int64 trade_date = 12;
  if (this->_internal_trade_date() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_trade_date());
  }

  // .t4proto.v1.common.ResponsePending response_pending = 9;
  if (this->_internal_response_pending() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_response_pending());
  }

  // .t4proto.v1.common.BuySell buy_sell = 23;
  if (this->_internal_buy_sell() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_buy_sell());
  }

  // .t4proto.v1.common.PriceType price_type = 24;
  if (this->_internal_price_type() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_price_type());
  }

  // .t4proto.v1.common.TimeType time_type = 25;
  if (this->_internal_time_type() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_time_type());
  }

  // int32 current_volume = 26;
  if (this->_internal_current_volume() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_current_volume());
  }

  // int32 new_volume = 29;
  if (this->_internal_new_volume() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_new_volume());
  }

  // .t4proto.v1.common.OpenClose open_close = 32;
  if (this->_internal_open_close() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_open_close());
  }

  // .t4proto.v1.common.CTI cti = 34;
  if (this->_internal_cti() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_cti());
  }

  // .t4proto.v1.common.Origin origin = 35;
  if (this->_internal_origin() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_origin());
  }

  // .t4proto.v1.common.AccountCode account_code = 36;
  if (this->_internal_account_code() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_account_code());
  }

  // .t4proto.v1.common.CustOrderHandlingInstType cust_order_handling_inst = 40;
  if (this->_internal_cust_order_handling_inst() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_cust_order_handling_inst());
  }

  // .t4proto.v1.common.AvgPriceIndicatorType avg_price_indicator = 41;
  if (this->_internal_avg_price_indicator() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_avg_price_indicator());
  }

  // .t4proto.v1.common.ClearingTradePriceType clearing_trade_price_type = 43;
  if (this->_internal_clearing_trade_price_type() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_clearing_trade_price_type());
  }

  // .t4proto.v1.common.BillingFee billing_fee = 44;
  if (this->_internal_billing_fee() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_billing_fee());
  }

  // int32 total_fill_volume = 48;
  if (this->_internal_total_fill_volume() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_total_fill_volume());
  }

  // int32 working_volume = 49;
  if (this->_internal_working_volume() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_working_volume());
  }

  // int32 exchange_total_fill_volume = 50;
  if (this->_internal_exchange_total_fill_volume() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_exchange_total_fill_volume());
  }

  // int32 trail_revision_interval = 52;
  if (this->_internal_trail_revision_interval() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_trail_revision_interval());
  }

  // int32 trail_revision_change = 53;
  if (this->_internal_trail_revision_change() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_trail_revision_change());
  }

  // .t4proto.v1.common.OrderLink order_link = 54;
  if (this->_internal_order_link() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_order_link());
  }

  // .t4proto.v1.common.ActivationType activation_type = 56;
  if (this->_internal_activation_type() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_activation_type());
  }

  // .t4proto.v1.common.PrimaryUserType primary_user = 57;
  if (this->_internal_primary_user() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_primary_user());
  }

  // int32 current_max_show = 58;
  if (this->_internal_current_max_show() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_current_max_show());
  }

  // int32 new_max_show = 59;
  if (this->_internal_new_max_show() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_new_max_show());
  }

  // .t4proto.v1.common.OrderSource order_source = 62;
  if (this->_internal_order_source() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_order_source());
  }

  // .t4proto.v1.common.OrderSourceMethod order_source_method = 63;
  if (this->_internal_order_source_method() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_order_source_method());
  }

  // .t4proto.v1.common.ApplicationType app_type = 64;
  if (this->_internal_app_type() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_app_type());
  }

  // .t4proto.v1.common.MasterType master_type = 65;
  if (this->_internal_master_type() != 0) {
    total_size += 2 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_master_type());
  }

  // int32 sequence_order = 70;
  if (this->_internal_sequence_order() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_sequence_order());
  }

  // int32 max_volume = 72;
  if (this->_internal_max_volume() != 0) {
    total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                    this->_internal_max_volume());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderUpdate::GetClassData() const { return &_class_data_; }


void OrderUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderUpdate*>(&to_msg);
  auto& from = static_cast<const OrderUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.orderrouting.OrderUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instruction_extra_.MergeFrom(from._impl_.instruction_extra_);
  _this->_impl_.trades_.MergeFrom(from._impl_.trades_);
  _this->_impl_.trade_legs_.MergeFrom(from._impl_.trade_legs_);
  if (!from._internal_unique_id().empty()) {
    _this->_internal_set_unique_id(from._internal_unique_id());
  }
  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_status_detail().empty()) {
    _this->_internal_set_status_detail(from._internal_status_detail());
  }
  if (!from._internal_exchange_order_id().empty()) {
    _this->_internal_set_exchange_order_id(from._internal_exchange_order_id());
  }
  if (!from._internal_exchange_id().empty()) {
    _this->_internal_set_exchange_id(from._internal_exchange_id());
  }
  if (!from._internal_exchange_login_id().empty()) {
    _this->_internal_set_exchange_login_id(from._internal_exchange_login_id());
  }
  if (!from._internal_executing_login_id().empty()) {
    _this->_internal_set_executing_login_id(from._internal_executing_login_id());
  }
  if (!from._internal_exchange_location().empty()) {
    _this->_internal_set_exchange_location(from._internal_exchange_location());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  if (!from._internal_user_address().empty()) {
    _this->_internal_set_user_address(from._internal_user_address());
  }
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_app_id().empty()) {
    _this->_internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_app_name().empty()) {
    _this->_internal_set_app_name(from._internal_app_name());
  }
  if (!from._internal_account_number().empty()) {
    _this->_internal_set_account_number(from._internal_account_number());
  }
  if (!from._internal_member_allocation().empty()) {
    _this->_internal_set_member_allocation(from._internal_member_allocation());
  }
  if (!from._internal_trader_allocation().empty()) {
    _this->_internal_set_trader_allocation(from._internal_trader_allocation());
  }
  if (!from._internal_customer_reference().empty()) {
    _this->_internal_set_customer_reference(from._internal_customer_reference());
  }
  if (!from._internal_avg_price_group_id().empty()) {
    _this->_internal_set_avg_price_group_id(from._internal_avg_price_group_id());
  }
  if (!from._internal_omnibus_account().empty()) {
    _this->_internal_set_omnibus_account(from._internal_omnibus_account());
  }
  if (!from._internal_executing_group_id().empty()) {
    _this->_internal_set_executing_group_id(from._internal_executing_group_id());
  }
  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (!from._internal_orders_linked().empty()) {
    _this->_internal_set_orders_linked(from._internal_orders_linked());
  }
  if (!from._internal_routing_user_id().empty()) {
    _this->_internal_set_routing_user_id(from._internal_routing_user_id());
  }
  if (!from._internal_routing_user_name().empty()) {
    _this->_internal_set_routing_user_name(from._internal_routing_user_name());
  }
  if (!from._internal_tag_cl_ord_id().empty()) {
    _this->_internal_set_tag_cl_ord_id(from._internal_tag_cl_ord_id());
  }
  if (!from._internal_tag_orig_cl_ord_id().empty()) {
    _this->_internal_set_tag_orig_cl_ord_id(from._internal_tag_orig_cl_ord_id());
  }
  if (!from._internal_tag_relation_id().empty()) {
    _this->_internal_set_tag_relation_id(from._internal_tag_relation_id());
  }
  if (!from._internal_smp_id().empty()) {
    _this->_internal_set_smp_id(from._internal_smp_id());
  }
  if (!from._internal_ats_regulatory_id().empty()) {
    _this->_internal_set_ats_regulatory_id(from._internal_ats_regulatory_id());
  }
  if (!from._internal_authorized_trader_id().empty()) {
    _this->_internal_set_authorized_trader_id(from._internal_authorized_trader_id());
  }
  if (!from._internal_activation_details().empty()) {
    _this->_internal_set_activation_details(from._internal_activation_details());
  }
  if (from._internal_has_time()) {
    _this->_internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_time());
  }
  if (from._internal_has_exchange_time()) {
    _this->_internal_mutable_exchange_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_exchange_time());
  }
  if (from._internal_has_submit_time()) {
    _this->_internal_mutable_submit_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_submit_time());
  }
  if (from._internal_has_current_limit_price()) {
    _this->_internal_mutable_current_limit_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_current_limit_price());
  }
  if (from._internal_has_current_stop_price()) {
    _this->_internal_mutable_current_stop_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_current_stop_price());
  }
  if (from._internal_has_new_limit_price()) {
    _this->_internal_mutable_new_limit_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_new_limit_price());
  }
  if (from._internal_has_new_stop_price()) {
    _this->_internal_mutable_new_stop_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_new_stop_price());
  }
  if (from._internal_has_trail_price()) {
    _this->_internal_mutable_trail_price()->::t4proto::v1::common::Price::MergeFrom(
        from._internal_trail_price());
  }
  if (from._internal_has_receive_time()) {
    _this->_internal_mutable_receive_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_receive_time());
  }
  if (from._internal_change() != 0) {
    _this->_internal_set_change(from._internal_change());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_trade_date() != 0) {
    _this->_internal_set_trade_date(from._internal_trade_date());
  }
  if (from._internal_response_pending() != 0) {
    _this->_internal_set_response_pending(from._internal_response_pending());
  }
  if (from._internal_buy_sell() != 0) {
    _this->_internal_set_buy_sell(from._internal_buy_sell());
  }
  if (from._internal_price_type() != 0) {
    _this->_internal_set_price_type(from._internal_price_type());
  }
  if (from._internal_time_type() != 0) {
    _this->_internal_set_time_type(from._internal_time_type());
  }
  if (from._internal_current_volume() != 0) {
    _this->_internal_set_current_volume(from._internal_current_volume());
  }
  if (from._internal_new_volume() != 0) {
    _this->_internal_set_new_volume(from._internal_new_volume());
  }
  if (from._internal_open_close() != 0) {
    _this->_internal_set_open_close(from._internal_open_close());
  }
  if (from._internal_cti() != 0) {
    _this->_internal_set_cti(from._internal_cti());
  }
  if (from._internal_origin() != 0) {
    _this->_internal_set_origin(from._internal_origin());
  }
  if (from._internal_account_code() != 0) {
    _this->_internal_set_account_code(from._internal_account_code());
  }
  if (from._internal_cust_order_handling_inst() != 0) {
    _this->_internal_set_cust_order_handling_inst(from._internal_cust_order_handling_inst());
  }
  if (from._internal_avg_price_indicator() != 0) {
    _this->_internal_set_avg_price_indicator(from._internal_avg_price_indicator());
  }
  if (from._internal_clearing_trade_price_type() != 0) {
    _this->_internal_set_clearing_trade_price_type(from._internal_clearing_trade_price_type());
  }
  if (from._internal_billing_fee() != 0) {
    _this->_internal_set_billing_fee(from._internal_billing_fee());
  }
  if (from._internal_total_fill_volume() != 0) {
    _this->_internal_set_total_fill_volume(from._internal_total_fill_volume());
  }
  if (from._internal_working_volume() != 0) {
    _this->_internal_set_working_volume(from._internal_working_volume());
  }
  if (from._internal_exchange_total_fill_volume() != 0) {
    _this->_internal_set_exchange_total_fill_volume(from._internal_exchange_total_fill_volume());
  }
  if (from._internal_trail_revision_interval() != 0) {
    _this->_internal_set_trail_revision_interval(from._internal_trail_revision_interval());
  }
  if (from._internal_trail_revision_change() != 0) {
    _this->_internal_set_trail_revision_change(from._internal_trail_revision_change());
  }
  if (from._internal_order_link() != 0) {
    _this->_internal_set_order_link(from._internal_order_link());
  }
  if (from._internal_activation_type() != 0) {
    _this->_internal_set_activation_type(from._internal_activation_type());
  }
  if (from._internal_primary_user() != 0) {
    _this->_internal_set_primary_user(from._internal_primary_user());
  }
  if (from._internal_current_max_show() != 0) {
    _this->_internal_set_current_max_show(from._internal_current_max_show());
  }
  if (from._internal_new_max_show() != 0) {
    _this->_internal_set_new_max_show(from._internal_new_max_show());
  }
  if (from._internal_order_source() != 0) {
    _this->_internal_set_order_source(from._internal_order_source());
  }
  if (from._internal_order_source_method() != 0) {
    _this->_internal_set_order_source_method(from._internal_order_source_method());
  }
  if (from._internal_app_type() != 0) {
    _this->_internal_set_app_type(from._internal_app_type());
  }
  if (from._internal_master_type() != 0) {
    _this->_internal_set_master_type(from._internal_master_type());
  }
  if (from._internal_sequence_order() != 0) {
    _this->_internal_set_sequence_order(from._internal_sequence_order());
  }
  if (from._internal_max_volume() != 0) {
    _this->_internal_set_max_volume(from._internal_max_volume());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderUpdate::CopyFrom(const OrderUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.orderrouting.OrderUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderUpdate::IsInitialized() const {
  return true;
}

void OrderUpdate::InternalSwap(OrderUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruction_extra_.InternalSwap(&other->_impl_.instruction_extra_);
  _impl_.trades_.InternalSwap(&other->_impl_.trades_);
  _impl_.trade_legs_.InternalSwap(&other->_impl_.trade_legs_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.unique_id_, lhs_arena,
                                       &other->_impl_.unique_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_id_, lhs_arena,
                                       &other->_impl_.account_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_detail_, lhs_arena,
                                       &other->_impl_.status_detail_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_order_id_, lhs_arena,
                                       &other->_impl_.exchange_order_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_id_, lhs_arena,
                                       &other->_impl_.exchange_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_login_id_, lhs_arena,
                                       &other->_impl_.exchange_login_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.executing_login_id_, lhs_arena,
                                       &other->_impl_.executing_login_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_location_, lhs_arena,
                                       &other->_impl_.exchange_location_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_id_, lhs_arena,
                                       &other->_impl_.user_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_name_, lhs_arena,
                                       &other->_impl_.user_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_address_, lhs_arena,
                                       &other->_impl_.user_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.session_id_, lhs_arena,
                                       &other->_impl_.session_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.app_id_, lhs_arena,
                                       &other->_impl_.app_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.app_name_, lhs_arena,
                                       &other->_impl_.app_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_number_, lhs_arena,
                                       &other->_impl_.account_number_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.member_allocation_, lhs_arena,
                                       &other->_impl_.member_allocation_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.trader_allocation_, lhs_arena,
                                       &other->_impl_.trader_allocation_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.customer_reference_, lhs_arena,
                                       &other->_impl_.customer_reference_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.avg_price_group_id_, lhs_arena,
                                       &other->_impl_.avg_price_group_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.omnibus_account_, lhs_arena,
                                       &other->_impl_.omnibus_account_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.executing_group_id_, lhs_arena,
                                       &other->_impl_.executing_group_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_, lhs_arena,
                                       &other->_impl_.tag_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.orders_linked_, lhs_arena,
                                       &other->_impl_.orders_linked_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.routing_user_id_, lhs_arena,
                                       &other->_impl_.routing_user_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.routing_user_name_, lhs_arena,
                                       &other->_impl_.routing_user_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_cl_ord_id_, lhs_arena,
                                       &other->_impl_.tag_cl_ord_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_orig_cl_ord_id_, lhs_arena,
                                       &other->_impl_.tag_orig_cl_ord_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tag_relation_id_, lhs_arena,
                                       &other->_impl_.tag_relation_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.smp_id_, lhs_arena,
                                       &other->_impl_.smp_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ats_regulatory_id_, lhs_arena,
                                       &other->_impl_.ats_regulatory_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.authorized_trader_id_, lhs_arena,
                                       &other->_impl_.authorized_trader_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.activation_details_, lhs_arena,
                                       &other->_impl_.activation_details_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrderUpdate, _impl_.max_volume_)
      + sizeof(OrderUpdate::_impl_.max_volume_)
      - PROTOBUF_FIELD_OFFSET(OrderUpdate, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter, &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
      file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[17]);
}
// ===================================================================

class OrderUpdateMultiMessage::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::orderrouting::OrderUpdateMultiMessage, _impl_._oneof_case_);
  static const ::t4proto::v1::orderrouting::OrderUpdate& order_update(const OrderUpdateMultiMessage* msg);
  static const ::t4proto::v1::orderrouting::OrderUpdateFailed& order_update_failed(const OrderUpdateMultiMessage* msg);
  static const ::t4proto::v1::orderrouting::OrderUpdateStatus& order_update_status(const OrderUpdateMultiMessage* msg);
  static const ::t4proto::v1::orderrouting::OrderUpdateTrade& order_update_trade(const OrderUpdateMultiMessage* msg);
  static const ::t4proto::v1::orderrouting::OrderUpdateTradeLeg& order_update_trade_leg(const OrderUpdateMultiMessage* msg);
};

const ::t4proto::v1::orderrouting::OrderUpdate&
OrderUpdateMultiMessage::_Internal::order_update(const OrderUpdateMultiMessage* msg) {
  return *msg->_impl_.payload_.order_update_;
}
const ::t4proto::v1::orderrouting::OrderUpdateFailed&
OrderUpdateMultiMessage::_Internal::order_update_failed(const OrderUpdateMultiMessage* msg) {
  return *msg->_impl_.payload_.order_update_failed_;
}
const ::t4proto::v1::orderrouting::OrderUpdateStatus&
OrderUpdateMultiMessage::_Internal::order_update_status(const OrderUpdateMultiMessage* msg) {
  return *msg->_impl_.payload_.order_update_status_;
}
const ::t4proto::v1::orderrouting::OrderUpdateTrade&
OrderUpdateMultiMessage::_Internal::order_update_trade(const OrderUpdateMultiMessage* msg) {
  return *msg->_impl_.payload_.order_update_trade_;
}
const ::t4proto::v1::orderrouting::OrderUpdateTradeLeg&
OrderUpdateMultiMessage::_Internal::order_update_trade_leg(const OrderUpdateMultiMessage* msg) {
  return *msg->_impl_.payload_.order_update_trade_leg_;
}
void OrderUpdateMultiMessage::set_allocated_order_update(::t4proto::v1::orderrouting::OrderUpdate* order_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (order_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(order_update);
    if (message_arena != submessage_arena) {
      order_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_update, submessage_arena);
    }
    set_has_order_update();
    _impl_.payload_.order_update_ = order_update;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update)
}
void OrderUpdateMultiMessage::set_allocated_order_update_failed(::t4proto::v1::orderrouting::OrderUpdateFailed* order_update_failed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (order_update_failed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(order_update_failed);
    if (message_arena != submessage_arena) {
      order_update_failed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_update_failed, submessage_arena);
    }
    set_has_order_update_failed();
    _impl_.payload_.order_update_failed_ = order_update_failed;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_failed)
}
void OrderUpdateMultiMessage::set_allocated_order_update_status(::t4proto::v1::orderrouting::OrderUpdateStatus* order_update_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (order_update_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(order_update_status);
    if (message_arena != submessage_arena) {
      order_update_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_update_status, submessage_arena);
    }
    set_has_order_update_status();
    _impl_.payload_.order_update_status_ = order_update_status;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_status)
}
void OrderUpdateMultiMessage::set_allocated_order_update_trade(::t4proto::v1::orderrouting::OrderUpdateTrade* order_update_trade) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (order_update_trade) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(order_update_trade);
    if (message_arena != submessage_arena) {
      order_update_trade = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_update_trade, submessage_arena);
    }
    set_has_order_update_trade();
    _impl_.payload_.order_update_trade_ = order_update_trade;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_trade)
}
void OrderUpdateMultiMessage::set_allocated_order_update_trade_leg(::t4proto::v1::orderrouting::OrderUpdateTradeLeg* order_update_trade_leg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (order_update_trade_leg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(order_update_trade_leg);
    if (message_arena != submessage_arena) {
      order_update_trade_leg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order_update_trade_leg, submessage_arena);
    }
    set_has_order_update_trade_leg();
    _impl_.payload_.order_update_trade_leg_ = order_update_trade_leg;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.orderrouting.OrderUpdateMultiMessage.order_update_trade_leg)
}
OrderUpdateMultiMessage::OrderUpdateMultiMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.orderrouting.OrderUpdateMultiMessage)
}
OrderUpdateMultiMessage::OrderUpdateMultiMessage(const OrderUpdateMultiMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderUpdateMultiMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kOrderUpdate: {
      _this->_internal_mutable_order_update()->::t4proto::v1::orderrouting::OrderUpdate::MergeFrom(
          from._internal_order_update());
      break;
    }
    case kOrderUpdateFailed: {
      _this->_internal_mutable_order_update_failed()->::t4proto::v1::orderrouting::OrderUpdateFailed::MergeFrom(
          from._internal_order_update_failed());
      break;
    }
    case kOrderUpdateStatus: {
      _this->_internal_mutable_order_update_status()->::t4proto::v1::orderrouting::OrderUpdateStatus::MergeFrom(
          from._internal_order_update_status());
      break;
    }
    case kOrderUpdateTrade: {
      _this->_internal_mutable_order_update_trade()->::t4proto::v1::orderrouting::OrderUpdateTrade::MergeFrom(
          from._internal_order_update_trade());
      break;
    }
    case kOrderUpdateTradeLeg: {
      _this->_internal_mutable_order_update_trade_leg()->::t4proto::v1::orderrouting::OrderUpdateTradeLeg::MergeFrom(
          from._internal_order_update_trade_leg());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.orderrouting.OrderUpdateMultiMessage)
}

inline void OrderUpdateMultiMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.payload_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_payload();
}

OrderUpdateMultiMessage::~OrderUpdateMultiMessage() {
  // @@protoc_insertion_point(destructor:t4proto.v1.orderrouting.OrderUpdateMultiMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderUpdateMultiMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void OrderUpdateMultiMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderUpdateMultiMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:t4proto.v1.orderrouting.OrderUpdateMultiMessage)
  switch (payload_case()) {
    case kOrderUpdate: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.order_update_;
      }
      break;
    }
    case kOrderUpdateFailed: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.order_update_failed_;
      }
      break;
    }
    case kOrderUpdateStatus: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.order_update_status_;
      }
      break;
    }
    case kOrderUpdateTrade: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.order_update_trade_;
      }
      break;
    }
    case kOrderUpdateTradeLeg: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.payload_.order_update_trade_leg_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


void OrderUpdateMultiMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.orderrouting.OrderUpdateMultiMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderUpdateMultiMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .t4proto.v1.orderrouting.OrderUpdate order_update = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_update(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.orderrouting.OrderUpdateFailed order_update_failed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_update_failed(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.orderrouting.OrderUpdateStatus order_update_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_update_status(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.orderrouting.OrderUpdateTrade order_update_trade = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_update_trade(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.orderrouting.OrderUpdateTradeLeg order_update_trade_leg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_order_update_trade_leg(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderUpdateMultiMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.orderrouting.OrderUpdateMultiMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .t4proto.v1.orderrouting.OrderUpdate order_update = 3;
  if (payload_case() == kOrderUpdate) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::order_update(this),
        _Internal::order_update(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.orderrouting.OrderUpdateFailed order_update_failed = 4;
  if (payload_case() == kOrderUpdateFailed) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::order_update_failed(this),
        _Internal::order_update_failed(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.orderrouting.OrderUpdateStatus order_update_status = 5;
  if (payload_case() == kOrderUpdateStatus) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::order_update_status(this),
        _Internal::order_update_status(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.orderrouting.OrderUpdateTrade order_update_trade = 6;
  if (payload_case() == kOrderUpdateTrade) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::order_update_trade(this),
        _Internal::order_update_trade(this).GetCachedSize(), target, stream);
  }

  // .t4proto.v1.orderrouting.OrderUpdateTradeLeg order_update_trade_leg = 7;
  if (payload_case() == kOrderUpdateTradeLeg) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::order_update_trade_leg(this),
        _Internal::order_update_trade_leg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.orderrouting.OrderUpdateMultiMessage)
  return target;
}

::size_t OrderUpdateMultiMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.orderrouting.OrderUpdateMultiMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .t4proto.v1.orderrouting.OrderUpdate order_update = 3;
    case kOrderUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.order_update_);
      break;
    }
    // .t4proto.v1.orderrouting.OrderUpdateFailed order_update_failed = 4;
    case kOrderUpdateFailed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.order_update_failed_);
      break;
    }
    // .t4proto.v1.orderrouting.OrderUpdateStatus order_update_status = 5;
    case kOrderUpdateStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.order_update_status_);
      break;
    }
    // .t4proto.v1.orderrouting.OrderUpdateTrade order_update_trade = 6;
    case kOrderUpdateTrade: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.order_update_trade_);
      break;
    }
    // .t4proto.v1.orderrouting.OrderUpdateTradeLeg order_update_trade_leg = 7;
    case kOrderUpdateTradeLeg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.payload_.order_update_trade_leg_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderUpdateMultiMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderUpdateMultiMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderUpdateMultiMessage::GetClassData() const { return &_class_data_; }


void OrderUpdateMultiMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderUpdateMultiMessage*>(&to_msg);
  auto& from = static_cast<const OrderUpdateMultiMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.orderrouting.OrderUpdateMultiMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kOrderUpdate: {
      _this->_internal_mutable_order_update()->::t4proto::v1::orderrouting::OrderUpdate::MergeFrom(
          from._internal_order_update());
      break;
    }
    case kOrderUpdateFailed: {
      _this->_internal_mutable_order_update_failed()->::t4proto::v1::orderrouting::OrderUpdateFailed::MergeFrom(
          from._internal_order_update_failed());
      break;
    }
    case kOrderUpdateStatus: {
      _this->_internal_mutable_order_update_status()->::t4proto::v1::orderrouting::OrderUpdateStatus::MergeFrom(
          from._internal_order_update_status());
      break;
    }
    case kOrderUpdateTrade: {
      _this->_internal_mutable_order_update_trade()->::t4proto::v1::orderrouting::OrderUpdateTrade::MergeFrom(
          from._internal_order_update_trade());
      break;
    }
    case kOrderUpdateTradeLeg: {
      _this->_internal_mutable_order_update_trade_leg()->::t4proto::v1::orderrouting::OrderUpdateTradeLeg::MergeFrom(
          from._internal_order_update_trade_leg());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderUpdateMultiMessage::CopyFrom(const OrderUpdateMultiMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.orderrouting.OrderUpdateMultiMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderUpdateMultiMessage::IsInitialized() const {
  return true;
}

void OrderUpdateMultiMessage::InternalSwap(OrderUpdateMultiMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderUpdateMultiMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter, &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
      file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[18]);
}
// ===================================================================

class OrderUpdateMulti::_Internal {
 public:
};

OrderUpdateMulti::OrderUpdateMulti(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.orderrouting.OrderUpdateMulti)
}
OrderUpdateMulti::OrderUpdateMulti(const OrderUpdateMulti& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OrderUpdateMulti* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.updates_){from._impl_.updates_}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.account_id_) {}

    , decltype(_impl_.historical_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_market_id().empty()) {
    _this->_impl_.market_id_.Set(from._internal_market_id(), _this->GetArenaForAllocation());
  }
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), _this->GetArenaForAllocation());
  }
  _this->_impl_.historical_ = from._impl_.historical_;
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.orderrouting.OrderUpdateMulti)
}

inline void OrderUpdateMulti::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.updates_){arena}
    , decltype(_impl_.market_id_) {}

    , decltype(_impl_.account_id_) {}

    , decltype(_impl_.historical_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.market_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.market_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OrderUpdateMulti::~OrderUpdateMulti() {
  // @@protoc_insertion_point(destructor:t4proto.v1.orderrouting.OrderUpdateMulti)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OrderUpdateMulti::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.updates_.~RepeatedPtrField();
  _impl_.market_id_.Destroy();
  _impl_.account_id_.Destroy();
}

void OrderUpdateMulti::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OrderUpdateMulti::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.orderrouting.OrderUpdateMulti)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.updates_.Clear();
  _impl_.market_id_.ClearToEmpty();
  _impl_.account_id_.ClearToEmpty();
  _impl_.historical_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrderUpdateMulti::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string market_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_market_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateMulti.market_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string account_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.OrderUpdateMulti.account_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool historical = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.historical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .t4proto.v1.orderrouting.OrderUpdateMultiMessage updates = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* OrderUpdateMulti::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.orderrouting.OrderUpdateMulti)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    const std::string& _s = this->_internal_market_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateMulti.market_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string account_id = 2;
  if (!this->_internal_account_id().empty()) {
    const std::string& _s = this->_internal_account_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.OrderUpdateMulti.account_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bool historical = 3;
  if (this->_internal_historical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_historical(), target);
  }

  // repeated .t4proto.v1.orderrouting.OrderUpdateMultiMessage updates = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_updates_size()); i < n; i++) {
    const auto& repfield = this->_internal_updates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.orderrouting.OrderUpdateMulti)
  return target;
}

::size_t OrderUpdateMulti::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.orderrouting.OrderUpdateMulti)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .t4proto.v1.orderrouting.OrderUpdateMultiMessage updates = 4;
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->_impl_.updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string market_id = 1;
  if (!this->_internal_market_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_market_id());
  }

  // string account_id = 2;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_id());
  }

  // bool historical = 3;
  if (this->_internal_historical() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrderUpdateMulti::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OrderUpdateMulti::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrderUpdateMulti::GetClassData() const { return &_class_data_; }


void OrderUpdateMulti::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OrderUpdateMulti*>(&to_msg);
  auto& from = static_cast<const OrderUpdateMulti&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.orderrouting.OrderUpdateMulti)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.updates_.MergeFrom(from._impl_.updates_);
  if (!from._internal_market_id().empty()) {
    _this->_internal_set_market_id(from._internal_market_id());
  }
  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (from._internal_historical() != 0) {
    _this->_internal_set_historical(from._internal_historical());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrderUpdateMulti::CopyFrom(const OrderUpdateMulti& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.orderrouting.OrderUpdateMulti)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderUpdateMulti::IsInitialized() const {
  return true;
}

void OrderUpdateMulti::InternalSwap(OrderUpdateMulti* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.updates_.InternalSwap(&other->_impl_.updates_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, lhs_arena,
                                       &other->_impl_.market_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_id_, lhs_arena,
                                       &other->_impl_.account_id_, rhs_arena);

  swap(_impl_.historical_, other->_impl_.historical_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OrderUpdateMulti::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter, &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
      file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[19]);
}
// ===================================================================

class CreateUDSResponse::_Internal {
 public:
};

CreateUDSResponse::CreateUDSResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.orderrouting.CreateUDSResponse)
}
CreateUDSResponse::CreateUDSResponse(const CreateUDSResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateUDSResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_) {}

    , decltype(_impl_.status_detail_) {}

    , decltype(_impl_.marketref_) {}

    , decltype(_impl_.uds_status_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), _this->GetArenaForAllocation());
  }
  _impl_.status_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_detail_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status_detail().empty()) {
    _this->_impl_.status_detail_.Set(from._internal_status_detail(), _this->GetArenaForAllocation());
  }
  _impl_.marketref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.marketref_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_marketref().empty()) {
    _this->_impl_.marketref_.Set(from._internal_marketref(), _this->GetArenaForAllocation());
  }
  _this->_impl_.uds_status_ = from._impl_.uds_status_;
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.orderrouting.CreateUDSResponse)
}

inline void CreateUDSResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_) {}

    , decltype(_impl_.status_detail_) {}

    , decltype(_impl_.marketref_) {}

    , decltype(_impl_.uds_status_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.status_detail_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_detail_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.marketref_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.marketref_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateUDSResponse::~CreateUDSResponse() {
  // @@protoc_insertion_point(destructor:t4proto.v1.orderrouting.CreateUDSResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateUDSResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.status_detail_.Destroy();
  _impl_.marketref_.Destroy();
}

void CreateUDSResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateUDSResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.orderrouting.CreateUDSResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _impl_.status_detail_.ClearToEmpty();
  _impl_.marketref_.ClearToEmpty();
  _impl_.uds_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateUDSResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.CreateUDSResponse.request_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string status_detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status_detail();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.CreateUDSResponse.status_detail"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string MarketRef = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_marketref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.orderrouting.CreateUDSResponse.MarketRef"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.UDSStatus uds_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_uds_status(static_cast<::t4proto::v1::common::UDSStatus>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateUDSResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.orderrouting.CreateUDSResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    const std::string& _s = this->_internal_request_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.CreateUDSResponse.request_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string status_detail = 2;
  if (!this->_internal_status_detail().empty()) {
    const std::string& _s = this->_internal_status_detail();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.CreateUDSResponse.status_detail");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string MarketRef = 3;
  if (!this->_internal_marketref().empty()) {
    const std::string& _s = this->_internal_marketref();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.orderrouting.CreateUDSResponse.MarketRef");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // .t4proto.v1.common.UDSStatus uds_status = 4;
  if (this->_internal_uds_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_uds_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.orderrouting.CreateUDSResponse)
  return target;
}

::size_t CreateUDSResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.orderrouting.CreateUDSResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_request_id());
  }

  // string status_detail = 2;
  if (!this->_internal_status_detail().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_status_detail());
  }

  // string MarketRef = 3;
  if (!this->_internal_marketref().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_marketref());
  }

  // .t4proto.v1.common.UDSStatus uds_status = 4;
  if (this->_internal_uds_status() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_uds_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateUDSResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateUDSResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateUDSResponse::GetClassData() const { return &_class_data_; }


void CreateUDSResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateUDSResponse*>(&to_msg);
  auto& from = static_cast<const CreateUDSResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.orderrouting.CreateUDSResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (!from._internal_status_detail().empty()) {
    _this->_internal_set_status_detail(from._internal_status_detail());
  }
  if (!from._internal_marketref().empty()) {
    _this->_internal_set_marketref(from._internal_marketref());
  }
  if (from._internal_uds_status() != 0) {
    _this->_internal_set_uds_status(from._internal_uds_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateUDSResponse::CopyFrom(const CreateUDSResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.orderrouting.CreateUDSResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUDSResponse::IsInitialized() const {
  return true;
}

void CreateUDSResponse::InternalSwap(CreateUDSResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.request_id_, lhs_arena,
                                       &other->_impl_.request_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_detail_, lhs_arena,
                                       &other->_impl_.status_detail_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.marketref_, lhs_arena,
                                       &other->_impl_.marketref_, rhs_arena);
  swap(_impl_.uds_status_, other->_impl_.uds_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateUDSResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_getter, &descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto_once,
      file_level_metadata_t4_2fv1_2forderrouting_2forderrouting_2eproto[20]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace orderrouting
}  // namespace v1
}  // namespace t4proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::t4proto::v1::orderrouting::OrderActivation*
Arena::CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderActivation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::orderrouting::OrderActivation >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::orderrouting::OrderSubmit_Order*
Arena::CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderSubmit_Order >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::orderrouting::OrderSubmit_Order >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::orderrouting::OrderSubmit*
Arena::CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderSubmit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::orderrouting::OrderSubmit >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::orderrouting::OrderRevise_Revise*
Arena::CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderRevise_Revise >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::orderrouting::OrderRevise_Revise >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::orderrouting::OrderRevise*
Arena::CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderRevise >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::orderrouting::OrderRevise >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::orderrouting::OrderPull_Pull*
Arena::CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderPull_Pull >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::orderrouting::OrderPull_Pull >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::orderrouting::OrderPull*
Arena::CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderPull >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::orderrouting::OrderPull >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::orderrouting::CreateUDS_Leg*
Arena::CreateMaybeMessage< ::t4proto::v1::orderrouting::CreateUDS_Leg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::orderrouting::CreateUDS_Leg >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::orderrouting::CreateUDS*
Arena::CreateMaybeMessage< ::t4proto::v1::orderrouting::CreateUDS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::orderrouting::CreateUDS >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::orderrouting::OrderUpdateFailed*
Arena::CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderUpdateFailed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::orderrouting::OrderUpdateFailed >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::orderrouting::OrderUpdateStatus_InstructionExtraEntry_DoNotUse*
Arena::CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderUpdateStatus_InstructionExtraEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::orderrouting::OrderUpdateStatus_InstructionExtraEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::orderrouting::OrderUpdateStatus*
Arena::CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderUpdateStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::orderrouting::OrderUpdateStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::orderrouting::OrderUpdateTrade*
Arena::CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderUpdateTrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::orderrouting::OrderUpdateTrade >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::orderrouting::OrderUpdateTradeLeg*
Arena::CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderUpdateTradeLeg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::orderrouting::OrderUpdateTradeLeg >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::orderrouting::OrderUpdate_Trade*
Arena::CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderUpdate_Trade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::orderrouting::OrderUpdate_Trade >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::orderrouting::OrderUpdate_TradeLeg*
Arena::CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderUpdate_TradeLeg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::orderrouting::OrderUpdate_TradeLeg >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::orderrouting::OrderUpdate_InstructionExtraEntry_DoNotUse*
Arena::CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderUpdate_InstructionExtraEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::orderrouting::OrderUpdate_InstructionExtraEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::orderrouting::OrderUpdate*
Arena::CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::orderrouting::OrderUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::orderrouting::OrderUpdateMultiMessage*
Arena::CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderUpdateMultiMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::orderrouting::OrderUpdateMultiMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::orderrouting::OrderUpdateMulti*
Arena::CreateMaybeMessage< ::t4proto::v1::orderrouting::OrderUpdateMulti >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::orderrouting::OrderUpdateMulti >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::orderrouting::CreateUDSResponse*
Arena::CreateMaybeMessage< ::t4proto::v1::orderrouting::CreateUDSResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::orderrouting::CreateUDSResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
