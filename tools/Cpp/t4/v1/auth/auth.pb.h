// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: t4/v1/auth/auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_t4_2fv1_2fauth_2fauth_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_t4_2fv1_2fauth_2fauth_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022002 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "t4/v1/common/enums.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_t4_2fv1_2fauth_2fauth_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_t4_2fv1_2fauth_2fauth_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_t4_2fv1_2fauth_2fauth_2eproto;
namespace t4proto {
namespace v1 {
namespace auth {
class AuthenticationToken;
struct AuthenticationTokenDefaultTypeInternal;
extern AuthenticationTokenDefaultTypeInternal _AuthenticationToken_default_instance_;
class AuthenticationTokenRequest;
struct AuthenticationTokenRequestDefaultTypeInternal;
extern AuthenticationTokenRequestDefaultTypeInternal _AuthenticationTokenRequest_default_instance_;
class LoginRequest;
struct LoginRequestDefaultTypeInternal;
extern LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
class LoginResponse;
struct LoginResponseDefaultTypeInternal;
extern LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
class LoginResponse_Account;
struct LoginResponse_AccountDefaultTypeInternal;
extern LoginResponse_AccountDefaultTypeInternal _LoginResponse_Account_default_instance_;
class LoginResponse_Exchange;
struct LoginResponse_ExchangeDefaultTypeInternal;
extern LoginResponse_ExchangeDefaultTypeInternal _LoginResponse_Exchange_default_instance_;
class LoginResponse_Exchange_ExtraDetailEntry_DoNotUse;
struct LoginResponse_Exchange_ExtraDetailEntry_DoNotUseDefaultTypeInternal;
extern LoginResponse_Exchange_ExtraDetailEntry_DoNotUseDefaultTypeInternal _LoginResponse_Exchange_ExtraDetailEntry_DoNotUse_default_instance_;
}  // namespace auth
}  // namespace v1
}  // namespace t4proto
PROTOBUF_NAMESPACE_OPEN
template <>
::t4proto::v1::auth::AuthenticationToken* Arena::CreateMaybeMessage<::t4proto::v1::auth::AuthenticationToken>(Arena*);
template <>
::t4proto::v1::auth::AuthenticationTokenRequest* Arena::CreateMaybeMessage<::t4proto::v1::auth::AuthenticationTokenRequest>(Arena*);
template <>
::t4proto::v1::auth::LoginRequest* Arena::CreateMaybeMessage<::t4proto::v1::auth::LoginRequest>(Arena*);
template <>
::t4proto::v1::auth::LoginResponse* Arena::CreateMaybeMessage<::t4proto::v1::auth::LoginResponse>(Arena*);
template <>
::t4proto::v1::auth::LoginResponse_Account* Arena::CreateMaybeMessage<::t4proto::v1::auth::LoginResponse_Account>(Arena*);
template <>
::t4proto::v1::auth::LoginResponse_Exchange* Arena::CreateMaybeMessage<::t4proto::v1::auth::LoginResponse_Exchange>(Arena*);
template <>
::t4proto::v1::auth::LoginResponse_Exchange_ExtraDetailEntry_DoNotUse* Arena::CreateMaybeMessage<::t4proto::v1::auth::LoginResponse_Exchange_ExtraDetailEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace t4proto {
namespace v1 {
namespace auth {

// ===================================================================


// -------------------------------------------------------------------

class LoginRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.auth.LoginRequest) */ {
 public:
  inline LoginRequest() : LoginRequest(nullptr) {}
  ~LoginRequest() override;
  explicit PROTOBUF_CONSTEXPR LoginRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRequest(const LoginRequest& from);
  LoginRequest(LoginRequest&& from) noexcept
    : LoginRequest() {
    *this = ::std::move(from);
  }

  inline LoginRequest& operator=(const LoginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRequest& operator=(LoginRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRequest* internal_default_instance() {
    return reinterpret_cast<const LoginRequest*>(
               &_LoginRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginRequest& a, LoginRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginRequest& from) {
    LoginRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.auth.LoginRequest";
  }
  protected:
  explicit LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApiKeyFieldNumber = 1,
    kFirmFieldNumber = 2,
    kUsernameFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kAppNameFieldNumber = 5,
    kAppLicenseFieldNumber = 6,
    kPriceFormatFieldNumber = 10,
  };
  // string api_key = 1;
  void clear_api_key() ;
  const std::string& api_key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_api_key(Arg_&& arg, Args_... args);
  std::string* mutable_api_key();
  PROTOBUF_NODISCARD std::string* release_api_key();
  void set_allocated_api_key(std::string* ptr);

  private:
  const std::string& _internal_api_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_api_key(
      const std::string& value);
  std::string* _internal_mutable_api_key();

  public:
  // string firm = 2;
  void clear_firm() ;
  const std::string& firm() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_firm(Arg_&& arg, Args_... args);
  std::string* mutable_firm();
  PROTOBUF_NODISCARD std::string* release_firm();
  void set_allocated_firm(std::string* ptr);

  private:
  const std::string& _internal_firm() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firm(
      const std::string& value);
  std::string* _internal_mutable_firm();

  public:
  // string username = 3;
  void clear_username() ;
  const std::string& username() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* ptr);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // string password = 4;
  void clear_password() ;
  const std::string& password() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_password(Arg_&& arg, Args_... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* ptr);

  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(
      const std::string& value);
  std::string* _internal_mutable_password();

  public:
  // string app_name = 5;
  void clear_app_name() ;
  const std::string& app_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_name(Arg_&& arg, Args_... args);
  std::string* mutable_app_name();
  PROTOBUF_NODISCARD std::string* release_app_name();
  void set_allocated_app_name(std::string* ptr);

  private:
  const std::string& _internal_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_name(
      const std::string& value);
  std::string* _internal_mutable_app_name();

  public:
  // string app_license = 6;
  void clear_app_license() ;
  const std::string& app_license() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_app_license(Arg_&& arg, Args_... args);
  std::string* mutable_app_license();
  PROTOBUF_NODISCARD std::string* release_app_license();
  void set_allocated_app_license(std::string* ptr);

  private:
  const std::string& _internal_app_license() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_license(
      const std::string& value);
  std::string* _internal_mutable_app_license();

  public:
  // .t4proto.v1.common.PriceFormat price_format = 10;
  void clear_price_format() ;
  ::t4proto::v1::common::PriceFormat price_format() const;
  void set_price_format(::t4proto::v1::common::PriceFormat value);

  private:
  ::t4proto::v1::common::PriceFormat _internal_price_format() const;
  void _internal_set_price_format(::t4proto::v1::common::PriceFormat value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.auth.LoginRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr api_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firm_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_license_;
    int price_format_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fauth_2fauth_2eproto;
};// -------------------------------------------------------------------

class LoginResponse_Exchange_ExtraDetailEntry_DoNotUse final : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LoginResponse_Exchange_ExtraDetailEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LoginResponse_Exchange_ExtraDetailEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  LoginResponse_Exchange_ExtraDetailEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR LoginResponse_Exchange_ExtraDetailEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit LoginResponse_Exchange_ExtraDetailEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LoginResponse_Exchange_ExtraDetailEntry_DoNotUse& other);
  static const LoginResponse_Exchange_ExtraDetailEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LoginResponse_Exchange_ExtraDetailEntry_DoNotUse*>(&_LoginResponse_Exchange_ExtraDetailEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "t4proto.v1.auth.LoginResponse.Exchange.ExtraDetailEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "t4proto.v1.auth.LoginResponse.Exchange.ExtraDetailEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_t4_2fv1_2fauth_2fauth_2eproto;
};
// -------------------------------------------------------------------

class LoginResponse_Exchange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.auth.LoginResponse.Exchange) */ {
 public:
  inline LoginResponse_Exchange() : LoginResponse_Exchange(nullptr) {}
  ~LoginResponse_Exchange() override;
  explicit PROTOBUF_CONSTEXPR LoginResponse_Exchange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginResponse_Exchange(const LoginResponse_Exchange& from);
  LoginResponse_Exchange(LoginResponse_Exchange&& from) noexcept
    : LoginResponse_Exchange() {
    *this = ::std::move(from);
  }

  inline LoginResponse_Exchange& operator=(const LoginResponse_Exchange& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse_Exchange& operator=(LoginResponse_Exchange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginResponse_Exchange& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginResponse_Exchange* internal_default_instance() {
    return reinterpret_cast<const LoginResponse_Exchange*>(
               &_LoginResponse_Exchange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginResponse_Exchange& a, LoginResponse_Exchange& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse_Exchange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse_Exchange* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginResponse_Exchange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginResponse_Exchange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginResponse_Exchange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginResponse_Exchange& from) {
    LoginResponse_Exchange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse_Exchange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.auth.LoginResponse.Exchange";
  }
  protected:
  explicit LoginResponse_Exchange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kExtraDetailFieldNumber = 9,
    kExchangeIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kPrimaryUserIdFieldNumber = 5,
    kSecondaryUserIdFieldNumber = 6,
    kLocationFieldNumber = 7,
    kSmpIdFieldNumber = 8,
    kMarketDataTypeFieldNumber = 3,
    kHasExecutingAccountFieldNumber = 4,
  };
  // map<string, string> extra_detail = 9;
  int extra_detail_size() const;
  private:
  int _internal_extra_detail_size() const;

  public:
  void clear_extra_detail() ;
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_extra_detail() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_extra_detail();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      extra_detail() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_extra_detail();
  // string exchange_id = 1;
  void clear_exchange_id() ;
  const std::string& exchange_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* ptr);

  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_id();

  public:
  // string user_id = 2;
  void clear_user_id() ;
  const std::string& user_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* ptr);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string primary_user_id = 5;
  void clear_primary_user_id() ;
  const std::string& primary_user_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_primary_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_primary_user_id();
  PROTOBUF_NODISCARD std::string* release_primary_user_id();
  void set_allocated_primary_user_id(std::string* ptr);

  private:
  const std::string& _internal_primary_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_primary_user_id(
      const std::string& value);
  std::string* _internal_mutable_primary_user_id();

  public:
  // string secondary_user_id = 6;
  void clear_secondary_user_id() ;
  const std::string& secondary_user_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_secondary_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_secondary_user_id();
  PROTOBUF_NODISCARD std::string* release_secondary_user_id();
  void set_allocated_secondary_user_id(std::string* ptr);

  private:
  const std::string& _internal_secondary_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secondary_user_id(
      const std::string& value);
  std::string* _internal_mutable_secondary_user_id();

  public:
  // string location = 7;
  void clear_location() ;
  const std::string& location() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_location(Arg_&& arg, Args_... args);
  std::string* mutable_location();
  PROTOBUF_NODISCARD std::string* release_location();
  void set_allocated_location(std::string* ptr);

  private:
  const std::string& _internal_location() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_location(
      const std::string& value);
  std::string* _internal_mutable_location();

  public:
  // string smp_id = 8;
  void clear_smp_id() ;
  const std::string& smp_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_smp_id(Arg_&& arg, Args_... args);
  std::string* mutable_smp_id();
  PROTOBUF_NODISCARD std::string* release_smp_id();
  void set_allocated_smp_id(std::string* ptr);

  private:
  const std::string& _internal_smp_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_smp_id(
      const std::string& value);
  std::string* _internal_mutable_smp_id();

  public:
  // .t4proto.v1.common.MarketDataType market_data_type = 3;
  void clear_market_data_type() ;
  ::t4proto::v1::common::MarketDataType market_data_type() const;
  void set_market_data_type(::t4proto::v1::common::MarketDataType value);

  private:
  ::t4proto::v1::common::MarketDataType _internal_market_data_type() const;
  void _internal_set_market_data_type(::t4proto::v1::common::MarketDataType value);

  public:
  // bool has_executing_account = 4;
  void clear_has_executing_account() ;
  bool has_executing_account() const;
  void set_has_executing_account(bool value);

  private:
  bool _internal_has_executing_account() const;
  void _internal_set_has_executing_account(bool value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.auth.LoginResponse.Exchange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        LoginResponse_Exchange_ExtraDetailEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> extra_detail_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exchange_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr primary_user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secondary_user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smp_id_;
    int market_data_type_;
    bool has_executing_account_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fauth_2fauth_2eproto;
};// -------------------------------------------------------------------

class LoginResponse_Account final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.auth.LoginResponse.Account) */ {
 public:
  inline LoginResponse_Account() : LoginResponse_Account(nullptr) {}
  ~LoginResponse_Account() override;
  explicit PROTOBUF_CONSTEXPR LoginResponse_Account(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginResponse_Account(const LoginResponse_Account& from);
  LoginResponse_Account(LoginResponse_Account&& from) noexcept
    : LoginResponse_Account() {
    *this = ::std::move(from);
  }

  inline LoginResponse_Account& operator=(const LoginResponse_Account& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse_Account& operator=(LoginResponse_Account&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginResponse_Account& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginResponse_Account* internal_default_instance() {
    return reinterpret_cast<const LoginResponse_Account*>(
               &_LoginResponse_Account_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoginResponse_Account& a, LoginResponse_Account& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse_Account* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse_Account* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginResponse_Account* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginResponse_Account>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginResponse_Account& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginResponse_Account& from) {
    LoginResponse_Account::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse_Account* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.auth.LoginResponse.Account";
  }
  protected:
  explicit LoginResponse_Account(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountIdFieldNumber = 1,
    kAccountNumberFieldNumber = 2,
    kAccountNameFieldNumber = 3,
    kDisplayNameFieldNumber = 4,
    kModeFieldNumber = 5,
  };
  // string account_id = 1;
  void clear_account_id() ;
  const std::string& account_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_id(Arg_&& arg, Args_... args);
  std::string* mutable_account_id();
  PROTOBUF_NODISCARD std::string* release_account_id();
  void set_allocated_account_id(std::string* ptr);

  private:
  const std::string& _internal_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_id(
      const std::string& value);
  std::string* _internal_mutable_account_id();

  public:
  // string account_number = 2;
  void clear_account_number() ;
  const std::string& account_number() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_number(Arg_&& arg, Args_... args);
  std::string* mutable_account_number();
  PROTOBUF_NODISCARD std::string* release_account_number();
  void set_allocated_account_number(std::string* ptr);

  private:
  const std::string& _internal_account_number() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_number(
      const std::string& value);
  std::string* _internal_mutable_account_number();

  public:
  // string account_name = 3;
  void clear_account_name() ;
  const std::string& account_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_name(Arg_&& arg, Args_... args);
  std::string* mutable_account_name();
  PROTOBUF_NODISCARD std::string* release_account_name();
  void set_allocated_account_name(std::string* ptr);

  private:
  const std::string& _internal_account_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_name(
      const std::string& value);
  std::string* _internal_mutable_account_name();

  public:
  // string display_name = 4;
  void clear_display_name() ;
  const std::string& display_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_display_name(Arg_&& arg, Args_... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* ptr);

  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(
      const std::string& value);
  std::string* _internal_mutable_display_name();

  public:
  // .t4proto.v1.common.AccountMode mode = 5;
  void clear_mode() ;
  ::t4proto::v1::common::AccountMode mode() const;
  void set_mode(::t4proto::v1::common::AccountMode value);

  private:
  ::t4proto::v1::common::AccountMode _internal_mode() const;
  void _internal_set_mode(::t4proto::v1::common::AccountMode value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.auth.LoginResponse.Account)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_number_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
    int mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fauth_2fauth_2eproto;
};// -------------------------------------------------------------------

class LoginResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.auth.LoginResponse) */ {
 public:
  inline LoginResponse() : LoginResponse(nullptr) {}
  ~LoginResponse() override;
  explicit PROTOBUF_CONSTEXPR LoginResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginResponse(const LoginResponse& from);
  LoginResponse(LoginResponse&& from) noexcept
    : LoginResponse() {
    *this = ::std::move(from);
  }

  inline LoginResponse& operator=(const LoginResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginResponse& operator=(LoginResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginResponse* internal_default_instance() {
    return reinterpret_cast<const LoginResponse*>(
               &_LoginResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginResponse& a, LoginResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginResponse& from) {
    LoginResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.auth.LoginResponse";
  }
  protected:
  explicit LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef LoginResponse_Exchange Exchange;
  typedef LoginResponse_Account Account;

  // accessors -------------------------------------------------------

  enum : int {
    kRolesFieldNumber = 5,
    kExchangesFieldNumber = 7,
    kAccountsFieldNumber = 8,
    kSessionIdFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kFirmIdFieldNumber = 4,
    kErrorMessageFieldNumber = 6,
    kAuthenticationTokenFieldNumber = 9,
    kResultFieldNumber = 1,
  };
  // repeated string roles = 5;
  int roles_size() const;
  private:
  int _internal_roles_size() const;

  public:
  void clear_roles() ;
  const std::string& roles(int index) const;
  std::string* mutable_roles(int index);
  void set_roles(int index, const std::string& value);
  void set_roles(int index, std::string&& value);
  void set_roles(int index, const char* value);
  void set_roles(int index, const char* value, std::size_t size);
  void set_roles(int index, absl::string_view value);
  std::string* add_roles();
  void add_roles(const std::string& value);
  void add_roles(std::string&& value);
  void add_roles(const char* value);
  void add_roles(const char* value, std::size_t size);
  void add_roles(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& roles() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_roles();

  private:
  const std::string& _internal_roles(int index) const;
  std::string* _internal_add_roles();

  public:
  // repeated .t4proto.v1.auth.LoginResponse.Exchange exchanges = 7;
  int exchanges_size() const;
  private:
  int _internal_exchanges_size() const;

  public:
  void clear_exchanges() ;
  ::t4proto::v1::auth::LoginResponse_Exchange* mutable_exchanges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::auth::LoginResponse_Exchange >*
      mutable_exchanges();
  private:
  const ::t4proto::v1::auth::LoginResponse_Exchange& _internal_exchanges(int index) const;
  ::t4proto::v1::auth::LoginResponse_Exchange* _internal_add_exchanges();
  public:
  const ::t4proto::v1::auth::LoginResponse_Exchange& exchanges(int index) const;
  ::t4proto::v1::auth::LoginResponse_Exchange* add_exchanges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::auth::LoginResponse_Exchange >&
      exchanges() const;
  // repeated .t4proto.v1.auth.LoginResponse.Account accounts = 8;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;

  public:
  void clear_accounts() ;
  ::t4proto::v1::auth::LoginResponse_Account* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::auth::LoginResponse_Account >*
      mutable_accounts();
  private:
  const ::t4proto::v1::auth::LoginResponse_Account& _internal_accounts(int index) const;
  ::t4proto::v1::auth::LoginResponse_Account* _internal_add_accounts();
  public:
  const ::t4proto::v1::auth::LoginResponse_Account& accounts(int index) const;
  ::t4proto::v1::auth::LoginResponse_Account* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::auth::LoginResponse_Account >&
      accounts() const;
  // string session_id = 2;
  void clear_session_id() ;
  const std::string& session_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* ptr);

  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(
      const std::string& value);
  std::string* _internal_mutable_session_id();

  public:
  // string user_id = 3;
  void clear_user_id() ;
  const std::string& user_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_id(Arg_&& arg, Args_... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* ptr);

  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(
      const std::string& value);
  std::string* _internal_mutable_user_id();

  public:
  // string firm_id = 4;
  void clear_firm_id() ;
  const std::string& firm_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_firm_id(Arg_&& arg, Args_... args);
  std::string* mutable_firm_id();
  PROTOBUF_NODISCARD std::string* release_firm_id();
  void set_allocated_firm_id(std::string* ptr);

  private:
  const std::string& _internal_firm_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firm_id(
      const std::string& value);
  std::string* _internal_mutable_firm_id();

  public:
  // string error_message = 6;
  void clear_error_message() ;
  const std::string& error_message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* ptr);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // optional .t4proto.v1.auth.AuthenticationToken authentication_token = 9;
  bool has_authentication_token() const;
  void clear_authentication_token() ;
  const ::t4proto::v1::auth::AuthenticationToken& authentication_token() const;
  PROTOBUF_NODISCARD ::t4proto::v1::auth::AuthenticationToken* release_authentication_token();
  ::t4proto::v1::auth::AuthenticationToken* mutable_authentication_token();
  void set_allocated_authentication_token(::t4proto::v1::auth::AuthenticationToken* authentication_token);
  private:
  const ::t4proto::v1::auth::AuthenticationToken& _internal_authentication_token() const;
  ::t4proto::v1::auth::AuthenticationToken* _internal_mutable_authentication_token();
  public:
  void unsafe_arena_set_allocated_authentication_token(
      ::t4proto::v1::auth::AuthenticationToken* authentication_token);
  ::t4proto::v1::auth::AuthenticationToken* unsafe_arena_release_authentication_token();
  // .t4proto.v1.common.LoginResult result = 1;
  void clear_result() ;
  ::t4proto::v1::common::LoginResult result() const;
  void set_result(::t4proto::v1::common::LoginResult value);

  private:
  ::t4proto::v1::common::LoginResult _internal_result() const;
  void _internal_set_result(::t4proto::v1::common::LoginResult value);

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.auth.LoginResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> roles_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::auth::LoginResponse_Exchange > exchanges_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::auth::LoginResponse_Account > accounts_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firm_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_message_;
    ::t4proto::v1::auth::AuthenticationToken* authentication_token_;
    int result_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fauth_2fauth_2eproto;
};// -------------------------------------------------------------------

class AuthenticationTokenRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.auth.AuthenticationTokenRequest) */ {
 public:
  inline AuthenticationTokenRequest() : AuthenticationTokenRequest(nullptr) {}
  ~AuthenticationTokenRequest() override;
  explicit PROTOBUF_CONSTEXPR AuthenticationTokenRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticationTokenRequest(const AuthenticationTokenRequest& from);
  AuthenticationTokenRequest(AuthenticationTokenRequest&& from) noexcept
    : AuthenticationTokenRequest() {
    *this = ::std::move(from);
  }

  inline AuthenticationTokenRequest& operator=(const AuthenticationTokenRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationTokenRequest& operator=(AuthenticationTokenRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticationTokenRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticationTokenRequest* internal_default_instance() {
    return reinterpret_cast<const AuthenticationTokenRequest*>(
               &_AuthenticationTokenRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AuthenticationTokenRequest& a, AuthenticationTokenRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationTokenRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticationTokenRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticationTokenRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthenticationTokenRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticationTokenRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthenticationTokenRequest& from) {
    AuthenticationTokenRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticationTokenRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.auth.AuthenticationTokenRequest";
  }
  protected:
  explicit AuthenticationTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
  };
  // string request_id = 1;
  void clear_request_id() ;
  const std::string& request_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_id(Arg_&& arg, Args_... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* ptr);

  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(
      const std::string& value);
  std::string* _internal_mutable_request_id();

  public:
  // @@protoc_insertion_point(class_scope:t4proto.v1.auth.AuthenticationTokenRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fauth_2fauth_2eproto;
};// -------------------------------------------------------------------

class AuthenticationToken final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:t4proto.v1.auth.AuthenticationToken) */ {
 public:
  inline AuthenticationToken() : AuthenticationToken(nullptr) {}
  ~AuthenticationToken() override;
  explicit PROTOBUF_CONSTEXPR AuthenticationToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthenticationToken(const AuthenticationToken& from);
  AuthenticationToken(AuthenticationToken&& from) noexcept
    : AuthenticationToken() {
    *this = ::std::move(from);
  }

  inline AuthenticationToken& operator=(const AuthenticationToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthenticationToken& operator=(AuthenticationToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AuthenticationToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthenticationToken* internal_default_instance() {
    return reinterpret_cast<const AuthenticationToken*>(
               &_AuthenticationToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AuthenticationToken& a, AuthenticationToken& b) {
    a.Swap(&b);
  }
  inline void Swap(AuthenticationToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthenticationToken* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthenticationToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthenticationToken>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AuthenticationToken& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AuthenticationToken& from) {
    AuthenticationToken::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticationToken* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "t4proto.v1.auth.AuthenticationToken";
  }
  protected:
  explicit AuthenticationToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kTokenFieldNumber = 2,
    kFailMessageFieldNumber = 4,
    kExpireTimeFieldNumber = 3,
  };
  // string request_id = 1;
  void clear_request_id() ;
  const std::string& request_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_request_id(Arg_&& arg, Args_... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* ptr);

  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(
      const std::string& value);
  std::string* _internal_mutable_request_id();

  public:
  // optional string token = 2;
  bool has_token() const;
  void clear_token() ;
  const std::string& token() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* ptr);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // optional string fail_message = 4;
  bool has_fail_message() const;
  void clear_fail_message() ;
  const std::string& fail_message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_fail_message(Arg_&& arg, Args_... args);
  std::string* mutable_fail_message();
  PROTOBUF_NODISCARD std::string* release_fail_message();
  void set_allocated_fail_message(std::string* ptr);

  private:
  const std::string& _internal_fail_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fail_message(
      const std::string& value);
  std::string* _internal_mutable_fail_message();

  public:
  // optional .google.protobuf.Timestamp expire_time = 3;
  bool has_expire_time() const;
  void clear_expire_time() ;
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expire_time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expire_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expire_time();
  void set_allocated_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expire_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expire_time();
  public:
  void unsafe_arena_set_allocated_expire_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expire_time();
  // @@protoc_insertion_point(class_scope:t4proto.v1.auth.AuthenticationToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fail_message_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_t4_2fv1_2fauth_2fauth_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LoginRequest

// string api_key = 1;
inline void LoginRequest::clear_api_key() {
  _impl_.api_key_.ClearToEmpty();
}
inline const std::string& LoginRequest::api_key() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginRequest.api_key)
  return _internal_api_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginRequest::set_api_key(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.api_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginRequest.api_key)
}
inline std::string* LoginRequest::mutable_api_key() {
  std::string* _s = _internal_mutable_api_key();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginRequest.api_key)
  return _s;
}
inline const std::string& LoginRequest::_internal_api_key() const {
  return _impl_.api_key_.Get();
}
inline void LoginRequest::_internal_set_api_key(const std::string& value) {
  ;


  _impl_.api_key_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRequest::_internal_mutable_api_key() {
  ;
  return _impl_.api_key_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginRequest::release_api_key() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.LoginRequest.api_key)
  return _impl_.api_key_.Release();
}
inline void LoginRequest::set_allocated_api_key(std::string* value) {
  _impl_.api_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.api_key_.IsDefault()) {
          _impl_.api_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.LoginRequest.api_key)
}

// string firm = 2;
inline void LoginRequest::clear_firm() {
  _impl_.firm_.ClearToEmpty();
}
inline const std::string& LoginRequest::firm() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginRequest.firm)
  return _internal_firm();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginRequest::set_firm(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.firm_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginRequest.firm)
}
inline std::string* LoginRequest::mutable_firm() {
  std::string* _s = _internal_mutable_firm();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginRequest.firm)
  return _s;
}
inline const std::string& LoginRequest::_internal_firm() const {
  return _impl_.firm_.Get();
}
inline void LoginRequest::_internal_set_firm(const std::string& value) {
  ;


  _impl_.firm_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRequest::_internal_mutable_firm() {
  ;
  return _impl_.firm_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginRequest::release_firm() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.LoginRequest.firm)
  return _impl_.firm_.Release();
}
inline void LoginRequest::set_allocated_firm(std::string* value) {
  _impl_.firm_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.firm_.IsDefault()) {
          _impl_.firm_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.LoginRequest.firm)
}

// string username = 3;
inline void LoginRequest::clear_username() {
  _impl_.username_.ClearToEmpty();
}
inline const std::string& LoginRequest::username() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginRequest.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginRequest::set_username(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginRequest.username)
}
inline std::string* LoginRequest::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginRequest.username)
  return _s;
}
inline const std::string& LoginRequest::_internal_username() const {
  return _impl_.username_.Get();
}
inline void LoginRequest::_internal_set_username(const std::string& value) {
  ;


  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRequest::_internal_mutable_username() {
  ;
  return _impl_.username_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginRequest::release_username() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.LoginRequest.username)
  return _impl_.username_.Release();
}
inline void LoginRequest::set_allocated_username(std::string* value) {
  _impl_.username_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.LoginRequest.username)
}

// string password = 4;
inline void LoginRequest::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& LoginRequest::password() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginRequest.password)
  return _internal_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginRequest::set_password(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginRequest.password)
}
inline std::string* LoginRequest::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginRequest.password)
  return _s;
}
inline const std::string& LoginRequest::_internal_password() const {
  return _impl_.password_.Get();
}
inline void LoginRequest::_internal_set_password(const std::string& value) {
  ;


  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRequest::_internal_mutable_password() {
  ;
  return _impl_.password_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginRequest::release_password() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.LoginRequest.password)
  return _impl_.password_.Release();
}
inline void LoginRequest::set_allocated_password(std::string* value) {
  _impl_.password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.password_.IsDefault()) {
          _impl_.password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.LoginRequest.password)
}

// string app_name = 5;
inline void LoginRequest::clear_app_name() {
  _impl_.app_name_.ClearToEmpty();
}
inline const std::string& LoginRequest::app_name() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginRequest.app_name)
  return _internal_app_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginRequest::set_app_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginRequest.app_name)
}
inline std::string* LoginRequest::mutable_app_name() {
  std::string* _s = _internal_mutable_app_name();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginRequest.app_name)
  return _s;
}
inline const std::string& LoginRequest::_internal_app_name() const {
  return _impl_.app_name_.Get();
}
inline void LoginRequest::_internal_set_app_name(const std::string& value) {
  ;


  _impl_.app_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRequest::_internal_mutable_app_name() {
  ;
  return _impl_.app_name_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginRequest::release_app_name() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.LoginRequest.app_name)
  return _impl_.app_name_.Release();
}
inline void LoginRequest::set_allocated_app_name(std::string* value) {
  _impl_.app_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_name_.IsDefault()) {
          _impl_.app_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.LoginRequest.app_name)
}

// string app_license = 6;
inline void LoginRequest::clear_app_license() {
  _impl_.app_license_.ClearToEmpty();
}
inline const std::string& LoginRequest::app_license() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginRequest.app_license)
  return _internal_app_license();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginRequest::set_app_license(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.app_license_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginRequest.app_license)
}
inline std::string* LoginRequest::mutable_app_license() {
  std::string* _s = _internal_mutable_app_license();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginRequest.app_license)
  return _s;
}
inline const std::string& LoginRequest::_internal_app_license() const {
  return _impl_.app_license_.Get();
}
inline void LoginRequest::_internal_set_app_license(const std::string& value) {
  ;


  _impl_.app_license_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginRequest::_internal_mutable_app_license() {
  ;
  return _impl_.app_license_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginRequest::release_app_license() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.LoginRequest.app_license)
  return _impl_.app_license_.Release();
}
inline void LoginRequest::set_allocated_app_license(std::string* value) {
  _impl_.app_license_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.app_license_.IsDefault()) {
          _impl_.app_license_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.LoginRequest.app_license)
}

// .t4proto.v1.common.PriceFormat price_format = 10;
inline void LoginRequest::clear_price_format() {
  _impl_.price_format_ = 0;
}
inline ::t4proto::v1::common::PriceFormat LoginRequest::price_format() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginRequest.price_format)
  return _internal_price_format();
}
inline void LoginRequest::set_price_format(::t4proto::v1::common::PriceFormat value) {
   _internal_set_price_format(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginRequest.price_format)
}
inline ::t4proto::v1::common::PriceFormat LoginRequest::_internal_price_format() const {
  return static_cast<::t4proto::v1::common::PriceFormat>(_impl_.price_format_);
}
inline void LoginRequest::_internal_set_price_format(::t4proto::v1::common::PriceFormat value) {
  ;
  _impl_.price_format_ = value;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// LoginResponse_Exchange

// string exchange_id = 1;
inline void LoginResponse_Exchange::clear_exchange_id() {
  _impl_.exchange_id_.ClearToEmpty();
}
inline const std::string& LoginResponse_Exchange::exchange_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.Exchange.exchange_id)
  return _internal_exchange_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginResponse_Exchange::set_exchange_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.exchange_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginResponse.Exchange.exchange_id)
}
inline std::string* LoginResponse_Exchange::mutable_exchange_id() {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginResponse.Exchange.exchange_id)
  return _s;
}
inline const std::string& LoginResponse_Exchange::_internal_exchange_id() const {
  return _impl_.exchange_id_.Get();
}
inline void LoginResponse_Exchange::_internal_set_exchange_id(const std::string& value) {
  ;


  _impl_.exchange_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginResponse_Exchange::_internal_mutable_exchange_id() {
  ;
  return _impl_.exchange_id_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginResponse_Exchange::release_exchange_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.LoginResponse.Exchange.exchange_id)
  return _impl_.exchange_id_.Release();
}
inline void LoginResponse_Exchange::set_allocated_exchange_id(std::string* value) {
  _impl_.exchange_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_id_.IsDefault()) {
          _impl_.exchange_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.LoginResponse.Exchange.exchange_id)
}

// string user_id = 2;
inline void LoginResponse_Exchange::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& LoginResponse_Exchange::user_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.Exchange.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginResponse_Exchange::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginResponse.Exchange.user_id)
}
inline std::string* LoginResponse_Exchange::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginResponse.Exchange.user_id)
  return _s;
}
inline const std::string& LoginResponse_Exchange::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void LoginResponse_Exchange::_internal_set_user_id(const std::string& value) {
  ;


  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginResponse_Exchange::_internal_mutable_user_id() {
  ;
  return _impl_.user_id_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginResponse_Exchange::release_user_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.LoginResponse.Exchange.user_id)
  return _impl_.user_id_.Release();
}
inline void LoginResponse_Exchange::set_allocated_user_id(std::string* value) {
  _impl_.user_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_id_.IsDefault()) {
          _impl_.user_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.LoginResponse.Exchange.user_id)
}

// .t4proto.v1.common.MarketDataType market_data_type = 3;
inline void LoginResponse_Exchange::clear_market_data_type() {
  _impl_.market_data_type_ = 0;
}
inline ::t4proto::v1::common::MarketDataType LoginResponse_Exchange::market_data_type() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.Exchange.market_data_type)
  return _internal_market_data_type();
}
inline void LoginResponse_Exchange::set_market_data_type(::t4proto::v1::common::MarketDataType value) {
   _internal_set_market_data_type(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginResponse.Exchange.market_data_type)
}
inline ::t4proto::v1::common::MarketDataType LoginResponse_Exchange::_internal_market_data_type() const {
  return static_cast<::t4proto::v1::common::MarketDataType>(_impl_.market_data_type_);
}
inline void LoginResponse_Exchange::_internal_set_market_data_type(::t4proto::v1::common::MarketDataType value) {
  ;
  _impl_.market_data_type_ = value;
}

// bool has_executing_account = 4;
inline void LoginResponse_Exchange::clear_has_executing_account() {
  _impl_.has_executing_account_ = false;
}
inline bool LoginResponse_Exchange::has_executing_account() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.Exchange.has_executing_account)
  return _internal_has_executing_account();
}
inline void LoginResponse_Exchange::set_has_executing_account(bool value) {
  _internal_set_has_executing_account(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginResponse.Exchange.has_executing_account)
}
inline bool LoginResponse_Exchange::_internal_has_executing_account() const {
  return _impl_.has_executing_account_;
}
inline void LoginResponse_Exchange::_internal_set_has_executing_account(bool value) {
  ;
  _impl_.has_executing_account_ = value;
}

// string primary_user_id = 5;
inline void LoginResponse_Exchange::clear_primary_user_id() {
  _impl_.primary_user_id_.ClearToEmpty();
}
inline const std::string& LoginResponse_Exchange::primary_user_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.Exchange.primary_user_id)
  return _internal_primary_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginResponse_Exchange::set_primary_user_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.primary_user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginResponse.Exchange.primary_user_id)
}
inline std::string* LoginResponse_Exchange::mutable_primary_user_id() {
  std::string* _s = _internal_mutable_primary_user_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginResponse.Exchange.primary_user_id)
  return _s;
}
inline const std::string& LoginResponse_Exchange::_internal_primary_user_id() const {
  return _impl_.primary_user_id_.Get();
}
inline void LoginResponse_Exchange::_internal_set_primary_user_id(const std::string& value) {
  ;


  _impl_.primary_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginResponse_Exchange::_internal_mutable_primary_user_id() {
  ;
  return _impl_.primary_user_id_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginResponse_Exchange::release_primary_user_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.LoginResponse.Exchange.primary_user_id)
  return _impl_.primary_user_id_.Release();
}
inline void LoginResponse_Exchange::set_allocated_primary_user_id(std::string* value) {
  _impl_.primary_user_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.primary_user_id_.IsDefault()) {
          _impl_.primary_user_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.LoginResponse.Exchange.primary_user_id)
}

// string secondary_user_id = 6;
inline void LoginResponse_Exchange::clear_secondary_user_id() {
  _impl_.secondary_user_id_.ClearToEmpty();
}
inline const std::string& LoginResponse_Exchange::secondary_user_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.Exchange.secondary_user_id)
  return _internal_secondary_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginResponse_Exchange::set_secondary_user_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.secondary_user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginResponse.Exchange.secondary_user_id)
}
inline std::string* LoginResponse_Exchange::mutable_secondary_user_id() {
  std::string* _s = _internal_mutable_secondary_user_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginResponse.Exchange.secondary_user_id)
  return _s;
}
inline const std::string& LoginResponse_Exchange::_internal_secondary_user_id() const {
  return _impl_.secondary_user_id_.Get();
}
inline void LoginResponse_Exchange::_internal_set_secondary_user_id(const std::string& value) {
  ;


  _impl_.secondary_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginResponse_Exchange::_internal_mutable_secondary_user_id() {
  ;
  return _impl_.secondary_user_id_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginResponse_Exchange::release_secondary_user_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.LoginResponse.Exchange.secondary_user_id)
  return _impl_.secondary_user_id_.Release();
}
inline void LoginResponse_Exchange::set_allocated_secondary_user_id(std::string* value) {
  _impl_.secondary_user_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.secondary_user_id_.IsDefault()) {
          _impl_.secondary_user_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.LoginResponse.Exchange.secondary_user_id)
}

// string location = 7;
inline void LoginResponse_Exchange::clear_location() {
  _impl_.location_.ClearToEmpty();
}
inline const std::string& LoginResponse_Exchange::location() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.Exchange.location)
  return _internal_location();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginResponse_Exchange::set_location(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.location_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginResponse.Exchange.location)
}
inline std::string* LoginResponse_Exchange::mutable_location() {
  std::string* _s = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginResponse.Exchange.location)
  return _s;
}
inline const std::string& LoginResponse_Exchange::_internal_location() const {
  return _impl_.location_.Get();
}
inline void LoginResponse_Exchange::_internal_set_location(const std::string& value) {
  ;


  _impl_.location_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginResponse_Exchange::_internal_mutable_location() {
  ;
  return _impl_.location_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginResponse_Exchange::release_location() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.LoginResponse.Exchange.location)
  return _impl_.location_.Release();
}
inline void LoginResponse_Exchange::set_allocated_location(std::string* value) {
  _impl_.location_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.location_.IsDefault()) {
          _impl_.location_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.LoginResponse.Exchange.location)
}

// string smp_id = 8;
inline void LoginResponse_Exchange::clear_smp_id() {
  _impl_.smp_id_.ClearToEmpty();
}
inline const std::string& LoginResponse_Exchange::smp_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.Exchange.smp_id)
  return _internal_smp_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginResponse_Exchange::set_smp_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.smp_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginResponse.Exchange.smp_id)
}
inline std::string* LoginResponse_Exchange::mutable_smp_id() {
  std::string* _s = _internal_mutable_smp_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginResponse.Exchange.smp_id)
  return _s;
}
inline const std::string& LoginResponse_Exchange::_internal_smp_id() const {
  return _impl_.smp_id_.Get();
}
inline void LoginResponse_Exchange::_internal_set_smp_id(const std::string& value) {
  ;


  _impl_.smp_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginResponse_Exchange::_internal_mutable_smp_id() {
  ;
  return _impl_.smp_id_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginResponse_Exchange::release_smp_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.LoginResponse.Exchange.smp_id)
  return _impl_.smp_id_.Release();
}
inline void LoginResponse_Exchange::set_allocated_smp_id(std::string* value) {
  _impl_.smp_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.smp_id_.IsDefault()) {
          _impl_.smp_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.LoginResponse.Exchange.smp_id)
}

// map<string, string> extra_detail = 9;
inline int LoginResponse_Exchange::_internal_extra_detail_size() const {
  return _impl_.extra_detail_.size();
}
inline int LoginResponse_Exchange::extra_detail_size() const {
  return _internal_extra_detail_size();
}
inline void LoginResponse_Exchange::clear_extra_detail() {
  _impl_.extra_detail_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LoginResponse_Exchange::_internal_extra_detail() const {
  return _impl_.extra_detail_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LoginResponse_Exchange::extra_detail() const {
  // @@protoc_insertion_point(field_map:t4proto.v1.auth.LoginResponse.Exchange.extra_detail)
  return _internal_extra_detail();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LoginResponse_Exchange::_internal_mutable_extra_detail() {
  return _impl_.extra_detail_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LoginResponse_Exchange::mutable_extra_detail() {
  // @@protoc_insertion_point(field_mutable_map:t4proto.v1.auth.LoginResponse.Exchange.extra_detail)
  return _internal_mutable_extra_detail();
}

// -------------------------------------------------------------------

// LoginResponse_Account

// string account_id = 1;
inline void LoginResponse_Account::clear_account_id() {
  _impl_.account_id_.ClearToEmpty();
}
inline const std::string& LoginResponse_Account::account_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.Account.account_id)
  return _internal_account_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginResponse_Account::set_account_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginResponse.Account.account_id)
}
inline std::string* LoginResponse_Account::mutable_account_id() {
  std::string* _s = _internal_mutable_account_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginResponse.Account.account_id)
  return _s;
}
inline const std::string& LoginResponse_Account::_internal_account_id() const {
  return _impl_.account_id_.Get();
}
inline void LoginResponse_Account::_internal_set_account_id(const std::string& value) {
  ;


  _impl_.account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginResponse_Account::_internal_mutable_account_id() {
  ;
  return _impl_.account_id_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginResponse_Account::release_account_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.LoginResponse.Account.account_id)
  return _impl_.account_id_.Release();
}
inline void LoginResponse_Account::set_allocated_account_id(std::string* value) {
  _impl_.account_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_id_.IsDefault()) {
          _impl_.account_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.LoginResponse.Account.account_id)
}

// string account_number = 2;
inline void LoginResponse_Account::clear_account_number() {
  _impl_.account_number_.ClearToEmpty();
}
inline const std::string& LoginResponse_Account::account_number() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.Account.account_number)
  return _internal_account_number();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginResponse_Account::set_account_number(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_number_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginResponse.Account.account_number)
}
inline std::string* LoginResponse_Account::mutable_account_number() {
  std::string* _s = _internal_mutable_account_number();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginResponse.Account.account_number)
  return _s;
}
inline const std::string& LoginResponse_Account::_internal_account_number() const {
  return _impl_.account_number_.Get();
}
inline void LoginResponse_Account::_internal_set_account_number(const std::string& value) {
  ;


  _impl_.account_number_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginResponse_Account::_internal_mutable_account_number() {
  ;
  return _impl_.account_number_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginResponse_Account::release_account_number() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.LoginResponse.Account.account_number)
  return _impl_.account_number_.Release();
}
inline void LoginResponse_Account::set_allocated_account_number(std::string* value) {
  _impl_.account_number_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_number_.IsDefault()) {
          _impl_.account_number_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.LoginResponse.Account.account_number)
}

// string account_name = 3;
inline void LoginResponse_Account::clear_account_name() {
  _impl_.account_name_.ClearToEmpty();
}
inline const std::string& LoginResponse_Account::account_name() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.Account.account_name)
  return _internal_account_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginResponse_Account::set_account_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginResponse.Account.account_name)
}
inline std::string* LoginResponse_Account::mutable_account_name() {
  std::string* _s = _internal_mutable_account_name();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginResponse.Account.account_name)
  return _s;
}
inline const std::string& LoginResponse_Account::_internal_account_name() const {
  return _impl_.account_name_.Get();
}
inline void LoginResponse_Account::_internal_set_account_name(const std::string& value) {
  ;


  _impl_.account_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginResponse_Account::_internal_mutable_account_name() {
  ;
  return _impl_.account_name_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginResponse_Account::release_account_name() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.LoginResponse.Account.account_name)
  return _impl_.account_name_.Release();
}
inline void LoginResponse_Account::set_allocated_account_name(std::string* value) {
  _impl_.account_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_name_.IsDefault()) {
          _impl_.account_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.LoginResponse.Account.account_name)
}

// string display_name = 4;
inline void LoginResponse_Account::clear_display_name() {
  _impl_.display_name_.ClearToEmpty();
}
inline const std::string& LoginResponse_Account::display_name() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.Account.display_name)
  return _internal_display_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginResponse_Account::set_display_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.display_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginResponse.Account.display_name)
}
inline std::string* LoginResponse_Account::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginResponse.Account.display_name)
  return _s;
}
inline const std::string& LoginResponse_Account::_internal_display_name() const {
  return _impl_.display_name_.Get();
}
inline void LoginResponse_Account::_internal_set_display_name(const std::string& value) {
  ;


  _impl_.display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginResponse_Account::_internal_mutable_display_name() {
  ;
  return _impl_.display_name_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginResponse_Account::release_display_name() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.LoginResponse.Account.display_name)
  return _impl_.display_name_.Release();
}
inline void LoginResponse_Account::set_allocated_display_name(std::string* value) {
  _impl_.display_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.display_name_.IsDefault()) {
          _impl_.display_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.LoginResponse.Account.display_name)
}

// .t4proto.v1.common.AccountMode mode = 5;
inline void LoginResponse_Account::clear_mode() {
  _impl_.mode_ = 0;
}
inline ::t4proto::v1::common::AccountMode LoginResponse_Account::mode() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.Account.mode)
  return _internal_mode();
}
inline void LoginResponse_Account::set_mode(::t4proto::v1::common::AccountMode value) {
   _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginResponse.Account.mode)
}
inline ::t4proto::v1::common::AccountMode LoginResponse_Account::_internal_mode() const {
  return static_cast<::t4proto::v1::common::AccountMode>(_impl_.mode_);
}
inline void LoginResponse_Account::_internal_set_mode(::t4proto::v1::common::AccountMode value) {
  ;
  _impl_.mode_ = value;
}

// -------------------------------------------------------------------

// LoginResponse

// .t4proto.v1.common.LoginResult result = 1;
inline void LoginResponse::clear_result() {
  _impl_.result_ = 0;
}
inline ::t4proto::v1::common::LoginResult LoginResponse::result() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.result)
  return _internal_result();
}
inline void LoginResponse::set_result(::t4proto::v1::common::LoginResult value) {
   _internal_set_result(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginResponse.result)
}
inline ::t4proto::v1::common::LoginResult LoginResponse::_internal_result() const {
  return static_cast<::t4proto::v1::common::LoginResult>(_impl_.result_);
}
inline void LoginResponse::_internal_set_result(::t4proto::v1::common::LoginResult value) {
  ;
  _impl_.result_ = value;
}

// string session_id = 2;
inline void LoginResponse::clear_session_id() {
  _impl_.session_id_.ClearToEmpty();
}
inline const std::string& LoginResponse::session_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.session_id)
  return _internal_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginResponse::set_session_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.session_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginResponse.session_id)
}
inline std::string* LoginResponse::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginResponse.session_id)
  return _s;
}
inline const std::string& LoginResponse::_internal_session_id() const {
  return _impl_.session_id_.Get();
}
inline void LoginResponse::_internal_set_session_id(const std::string& value) {
  ;


  _impl_.session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginResponse::_internal_mutable_session_id() {
  ;
  return _impl_.session_id_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginResponse::release_session_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.LoginResponse.session_id)
  return _impl_.session_id_.Release();
}
inline void LoginResponse::set_allocated_session_id(std::string* value) {
  _impl_.session_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.session_id_.IsDefault()) {
          _impl_.session_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.LoginResponse.session_id)
}

// string user_id = 3;
inline void LoginResponse::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& LoginResponse::user_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.user_id)
  return _internal_user_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginResponse::set_user_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.user_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginResponse.user_id)
}
inline std::string* LoginResponse::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginResponse.user_id)
  return _s;
}
inline const std::string& LoginResponse::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void LoginResponse::_internal_set_user_id(const std::string& value) {
  ;


  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginResponse::_internal_mutable_user_id() {
  ;
  return _impl_.user_id_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginResponse::release_user_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.LoginResponse.user_id)
  return _impl_.user_id_.Release();
}
inline void LoginResponse::set_allocated_user_id(std::string* value) {
  _impl_.user_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_id_.IsDefault()) {
          _impl_.user_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.LoginResponse.user_id)
}

// string firm_id = 4;
inline void LoginResponse::clear_firm_id() {
  _impl_.firm_id_.ClearToEmpty();
}
inline const std::string& LoginResponse::firm_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.firm_id)
  return _internal_firm_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginResponse::set_firm_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.firm_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginResponse.firm_id)
}
inline std::string* LoginResponse::mutable_firm_id() {
  std::string* _s = _internal_mutable_firm_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginResponse.firm_id)
  return _s;
}
inline const std::string& LoginResponse::_internal_firm_id() const {
  return _impl_.firm_id_.Get();
}
inline void LoginResponse::_internal_set_firm_id(const std::string& value) {
  ;


  _impl_.firm_id_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginResponse::_internal_mutable_firm_id() {
  ;
  return _impl_.firm_id_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginResponse::release_firm_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.LoginResponse.firm_id)
  return _impl_.firm_id_.Release();
}
inline void LoginResponse::set_allocated_firm_id(std::string* value) {
  _impl_.firm_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.firm_id_.IsDefault()) {
          _impl_.firm_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.LoginResponse.firm_id)
}

// repeated string roles = 5;
inline int LoginResponse::_internal_roles_size() const {
  return _impl_.roles_.size();
}
inline int LoginResponse::roles_size() const {
  return _internal_roles_size();
}
inline void LoginResponse::clear_roles() {
  _impl_.roles_.Clear();
}
inline std::string* LoginResponse::add_roles() {
  std::string* _s = _internal_add_roles();
  // @@protoc_insertion_point(field_add_mutable:t4proto.v1.auth.LoginResponse.roles)
  return _s;
}
inline const std::string& LoginResponse::_internal_roles(int index) const {
  return _impl_.roles_.Get(index);
}
inline const std::string& LoginResponse::roles(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.roles)
  return _internal_roles(index);
}
inline std::string* LoginResponse::mutable_roles(int index) {
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginResponse.roles)
  return _impl_.roles_.Mutable(index);
}
inline void LoginResponse::set_roles(int index, const std::string& value) {
  _impl_.roles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginResponse.roles)
}
inline void LoginResponse::set_roles(int index, std::string&& value) {
  _impl_.roles_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginResponse.roles)
}
inline void LoginResponse::set_roles(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _impl_.roles_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:t4proto.v1.auth.LoginResponse.roles)
}
inline void LoginResponse::set_roles(int index, const char* value,
                              std::size_t size) {
  _impl_.roles_.Mutable(index)->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:t4proto.v1.auth.LoginResponse.roles)
}
inline void LoginResponse::set_roles(int index, absl::string_view value) {
  _impl_.roles_.Mutable(index)->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_set_string_piece:t4proto.v1.auth.LoginResponse.roles)
}
inline std::string* LoginResponse::_internal_add_roles() { return _impl_.roles_.Add(); }
inline void LoginResponse::add_roles(const std::string& value) {
  _impl_.roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:t4proto.v1.auth.LoginResponse.roles)
}
inline void LoginResponse::add_roles(std::string&& value) {
  _impl_.roles_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:t4proto.v1.auth.LoginResponse.roles)
}
inline void LoginResponse::add_roles(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _impl_.roles_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:t4proto.v1.auth.LoginResponse.roles)
}
inline void LoginResponse::add_roles(const char* value, std::size_t size) {
  _impl_.roles_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:t4proto.v1.auth.LoginResponse.roles)
}
inline void LoginResponse::add_roles(absl::string_view value) {
  _impl_.roles_.Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:t4proto.v1.auth.LoginResponse.roles)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LoginResponse::roles() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.auth.LoginResponse.roles)
  return _impl_.roles_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* LoginResponse::mutable_roles() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.auth.LoginResponse.roles)
  return &_impl_.roles_;
}

// string error_message = 6;
inline void LoginResponse::clear_error_message() {
  _impl_.error_message_.ClearToEmpty();
}
inline const std::string& LoginResponse::error_message() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.LoginResponse.error_message)
}
inline std::string* LoginResponse::mutable_error_message() {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginResponse.error_message)
  return _s;
}
inline const std::string& LoginResponse::_internal_error_message() const {
  return _impl_.error_message_.Get();
}
inline void LoginResponse::_internal_set_error_message(const std::string& value) {
  ;


  _impl_.error_message_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginResponse::_internal_mutable_error_message() {
  ;
  return _impl_.error_message_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginResponse::release_error_message() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.LoginResponse.error_message)
  return _impl_.error_message_.Release();
}
inline void LoginResponse::set_allocated_error_message(std::string* value) {
  _impl_.error_message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_message_.IsDefault()) {
          _impl_.error_message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.LoginResponse.error_message)
}

// repeated .t4proto.v1.auth.LoginResponse.Exchange exchanges = 7;
inline int LoginResponse::_internal_exchanges_size() const {
  return _impl_.exchanges_.size();
}
inline int LoginResponse::exchanges_size() const {
  return _internal_exchanges_size();
}
inline void LoginResponse::clear_exchanges() {
  _impl_.exchanges_.Clear();
}
inline ::t4proto::v1::auth::LoginResponse_Exchange* LoginResponse::mutable_exchanges(int index) {
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginResponse.exchanges)
  return _impl_.exchanges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::auth::LoginResponse_Exchange >*
LoginResponse::mutable_exchanges() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.auth.LoginResponse.exchanges)
  return &_impl_.exchanges_;
}
inline const ::t4proto::v1::auth::LoginResponse_Exchange& LoginResponse::_internal_exchanges(int index) const {
  return _impl_.exchanges_.Get(index);
}
inline const ::t4proto::v1::auth::LoginResponse_Exchange& LoginResponse::exchanges(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.exchanges)
  return _internal_exchanges(index);
}
inline ::t4proto::v1::auth::LoginResponse_Exchange* LoginResponse::_internal_add_exchanges() {
  return _impl_.exchanges_.Add();
}
inline ::t4proto::v1::auth::LoginResponse_Exchange* LoginResponse::add_exchanges() {
  ::t4proto::v1::auth::LoginResponse_Exchange* _add = _internal_add_exchanges();
  // @@protoc_insertion_point(field_add:t4proto.v1.auth.LoginResponse.exchanges)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::auth::LoginResponse_Exchange >&
LoginResponse::exchanges() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.auth.LoginResponse.exchanges)
  return _impl_.exchanges_;
}

// repeated .t4proto.v1.auth.LoginResponse.Account accounts = 8;
inline int LoginResponse::_internal_accounts_size() const {
  return _impl_.accounts_.size();
}
inline int LoginResponse::accounts_size() const {
  return _internal_accounts_size();
}
inline void LoginResponse::clear_accounts() {
  _impl_.accounts_.Clear();
}
inline ::t4proto::v1::auth::LoginResponse_Account* LoginResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginResponse.accounts)
  return _impl_.accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::auth::LoginResponse_Account >*
LoginResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:t4proto.v1.auth.LoginResponse.accounts)
  return &_impl_.accounts_;
}
inline const ::t4proto::v1::auth::LoginResponse_Account& LoginResponse::_internal_accounts(int index) const {
  return _impl_.accounts_.Get(index);
}
inline const ::t4proto::v1::auth::LoginResponse_Account& LoginResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.accounts)
  return _internal_accounts(index);
}
inline ::t4proto::v1::auth::LoginResponse_Account* LoginResponse::_internal_add_accounts() {
  return _impl_.accounts_.Add();
}
inline ::t4proto::v1::auth::LoginResponse_Account* LoginResponse::add_accounts() {
  ::t4proto::v1::auth::LoginResponse_Account* _add = _internal_add_accounts();
  // @@protoc_insertion_point(field_add:t4proto.v1.auth.LoginResponse.accounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::t4proto::v1::auth::LoginResponse_Account >&
LoginResponse::accounts() const {
  // @@protoc_insertion_point(field_list:t4proto.v1.auth.LoginResponse.accounts)
  return _impl_.accounts_;
}

// optional .t4proto.v1.auth.AuthenticationToken authentication_token = 9;
inline bool LoginResponse::has_authentication_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.authentication_token_ != nullptr);
  return value;
}
inline void LoginResponse::clear_authentication_token() {
  if (_impl_.authentication_token_ != nullptr) _impl_.authentication_token_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::t4proto::v1::auth::AuthenticationToken& LoginResponse::_internal_authentication_token() const {
  const ::t4proto::v1::auth::AuthenticationToken* p = _impl_.authentication_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::t4proto::v1::auth::AuthenticationToken&>(
      ::t4proto::v1::auth::_AuthenticationToken_default_instance_);
}
inline const ::t4proto::v1::auth::AuthenticationToken& LoginResponse::authentication_token() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.LoginResponse.authentication_token)
  return _internal_authentication_token();
}
inline void LoginResponse::unsafe_arena_set_allocated_authentication_token(
    ::t4proto::v1::auth::AuthenticationToken* authentication_token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.authentication_token_);
  }
  _impl_.authentication_token_ = authentication_token;
  if (authentication_token) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.auth.LoginResponse.authentication_token)
}
inline ::t4proto::v1::auth::AuthenticationToken* LoginResponse::release_authentication_token() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::t4proto::v1::auth::AuthenticationToken* temp = _impl_.authentication_token_;
  _impl_.authentication_token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::t4proto::v1::auth::AuthenticationToken* LoginResponse::unsafe_arena_release_authentication_token() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.LoginResponse.authentication_token)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::t4proto::v1::auth::AuthenticationToken* temp = _impl_.authentication_token_;
  _impl_.authentication_token_ = nullptr;
  return temp;
}
inline ::t4proto::v1::auth::AuthenticationToken* LoginResponse::_internal_mutable_authentication_token() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.authentication_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::t4proto::v1::auth::AuthenticationToken>(GetArenaForAllocation());
    _impl_.authentication_token_ = p;
  }
  return _impl_.authentication_token_;
}
inline ::t4proto::v1::auth::AuthenticationToken* LoginResponse::mutable_authentication_token() {
  ::t4proto::v1::auth::AuthenticationToken* _msg = _internal_mutable_authentication_token();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.LoginResponse.authentication_token)
  return _msg;
}
inline void LoginResponse::set_allocated_authentication_token(::t4proto::v1::auth::AuthenticationToken* authentication_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.authentication_token_;
  }
  if (authentication_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(authentication_token);
    if (message_arena != submessage_arena) {
      authentication_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, authentication_token, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.authentication_token_ = authentication_token;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.LoginResponse.authentication_token)
}

// -------------------------------------------------------------------

// AuthenticationTokenRequest

// string request_id = 1;
inline void AuthenticationTokenRequest::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& AuthenticationTokenRequest::request_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.AuthenticationTokenRequest.request_id)
  return _internal_request_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthenticationTokenRequest::set_request_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.request_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.AuthenticationTokenRequest.request_id)
}
inline std::string* AuthenticationTokenRequest::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.AuthenticationTokenRequest.request_id)
  return _s;
}
inline const std::string& AuthenticationTokenRequest::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void AuthenticationTokenRequest::_internal_set_request_id(const std::string& value) {
  ;


  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthenticationTokenRequest::_internal_mutable_request_id() {
  ;
  return _impl_.request_id_.Mutable( GetArenaForAllocation());
}
inline std::string* AuthenticationTokenRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.AuthenticationTokenRequest.request_id)
  return _impl_.request_id_.Release();
}
inline void AuthenticationTokenRequest::set_allocated_request_id(std::string* value) {
  _impl_.request_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.request_id_.IsDefault()) {
          _impl_.request_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.AuthenticationTokenRequest.request_id)
}

// -------------------------------------------------------------------

// AuthenticationToken

// string request_id = 1;
inline void AuthenticationToken::clear_request_id() {
  _impl_.request_id_.ClearToEmpty();
}
inline const std::string& AuthenticationToken::request_id() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.AuthenticationToken.request_id)
  return _internal_request_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthenticationToken::set_request_id(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.request_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.AuthenticationToken.request_id)
}
inline std::string* AuthenticationToken::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.AuthenticationToken.request_id)
  return _s;
}
inline const std::string& AuthenticationToken::_internal_request_id() const {
  return _impl_.request_id_.Get();
}
inline void AuthenticationToken::_internal_set_request_id(const std::string& value) {
  ;


  _impl_.request_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthenticationToken::_internal_mutable_request_id() {
  ;
  return _impl_.request_id_.Mutable( GetArenaForAllocation());
}
inline std::string* AuthenticationToken::release_request_id() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.AuthenticationToken.request_id)
  return _impl_.request_id_.Release();
}
inline void AuthenticationToken::set_allocated_request_id(std::string* value) {
  _impl_.request_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.request_id_.IsDefault()) {
          _impl_.request_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.AuthenticationToken.request_id)
}

// optional string token = 2;
inline bool AuthenticationToken::has_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AuthenticationToken::clear_token() {
  _impl_.token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthenticationToken::token() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.AuthenticationToken.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthenticationToken::set_token(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.AuthenticationToken.token)
}
inline std::string* AuthenticationToken::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.AuthenticationToken.token)
  return _s;
}
inline const std::string& AuthenticationToken::_internal_token() const {
  return _impl_.token_.Get();
}
inline void AuthenticationToken::_internal_set_token(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthenticationToken::_internal_mutable_token() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.token_.Mutable( GetArenaForAllocation());
}
inline std::string* AuthenticationToken::release_token() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.AuthenticationToken.token)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.token_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AuthenticationToken::set_allocated_token(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.AuthenticationToken.token)
}

// optional .google.protobuf.Timestamp expire_time = 3;
inline bool AuthenticationToken::has_expire_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.expire_time_ != nullptr);
  return value;
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AuthenticationToken::_internal_expire_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.expire_time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& AuthenticationToken::expire_time() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.AuthenticationToken.expire_time)
  return _internal_expire_time();
}
inline void AuthenticationToken::unsafe_arena_set_allocated_expire_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_time_);
  }
  _impl_.expire_time_ = expire_time;
  if (expire_time) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:t4proto.v1.auth.AuthenticationToken.expire_time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AuthenticationToken::release_expire_time() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_time_;
  _impl_.expire_time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AuthenticationToken::unsafe_arena_release_expire_time() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.AuthenticationToken.expire_time)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.expire_time_;
  _impl_.expire_time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AuthenticationToken::_internal_mutable_expire_time() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.expire_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.expire_time_ = p;
  }
  return _impl_.expire_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* AuthenticationToken::mutable_expire_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expire_time();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.AuthenticationToken.expire_time)
  return _msg;
}
inline void AuthenticationToken::set_allocated_expire_time(::PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.expire_time_);
  }
  if (expire_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expire_time));
    if (message_arena != submessage_arena) {
      expire_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expire_time, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.expire_time_ = expire_time;
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.AuthenticationToken.expire_time)
}

// optional string fail_message = 4;
inline bool AuthenticationToken::has_fail_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AuthenticationToken::clear_fail_message() {
  _impl_.fail_message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AuthenticationToken::fail_message() const {
  // @@protoc_insertion_point(field_get:t4proto.v1.auth.AuthenticationToken.fail_message)
  return _internal_fail_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AuthenticationToken::set_fail_message(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.fail_message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:t4proto.v1.auth.AuthenticationToken.fail_message)
}
inline std::string* AuthenticationToken::mutable_fail_message() {
  std::string* _s = _internal_mutable_fail_message();
  // @@protoc_insertion_point(field_mutable:t4proto.v1.auth.AuthenticationToken.fail_message)
  return _s;
}
inline const std::string& AuthenticationToken::_internal_fail_message() const {
  return _impl_.fail_message_.Get();
}
inline void AuthenticationToken::_internal_set_fail_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.fail_message_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthenticationToken::_internal_mutable_fail_message() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.fail_message_.Mutable( GetArenaForAllocation());
}
inline std::string* AuthenticationToken::release_fail_message() {
  // @@protoc_insertion_point(field_release:t4proto.v1.auth.AuthenticationToken.fail_message)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.fail_message_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fail_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AuthenticationToken::set_allocated_fail_message(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.fail_message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.fail_message_.IsDefault()) {
          _impl_.fail_message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.auth.AuthenticationToken.fail_message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace auth
}  // namespace v1
}  // namespace t4proto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_t4_2fv1_2fauth_2fauth_2eproto_2epb_2eh
