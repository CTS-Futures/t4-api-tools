// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: t4/v1/auth/auth.proto

#include "t4/v1/auth/auth.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace t4proto {
namespace v1 {
namespace auth {
PROTOBUF_CONSTEXPR LoginRequest::LoginRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.api_key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.firm_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.username_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.password_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.app_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.app_license_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.price_format_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginRequestDefaultTypeInternal() {}
  union {
    LoginRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginRequestDefaultTypeInternal _LoginRequest_default_instance_;
PROTOBUF_CONSTEXPR LoginResponse_Exchange_ExtraDetailEntry_DoNotUse::LoginResponse_Exchange_ExtraDetailEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct LoginResponse_Exchange_ExtraDetailEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginResponse_Exchange_ExtraDetailEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginResponse_Exchange_ExtraDetailEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LoginResponse_Exchange_ExtraDetailEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginResponse_Exchange_ExtraDetailEntry_DoNotUseDefaultTypeInternal _LoginResponse_Exchange_ExtraDetailEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR LoginResponse_Exchange::LoginResponse_Exchange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extra_detail_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.exchange_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.user_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.primary_user_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.secondary_user_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.location_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.smp_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.market_data_type_)*/ 0

  , /*decltype(_impl_.has_executing_account_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginResponse_ExchangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginResponse_ExchangeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginResponse_ExchangeDefaultTypeInternal() {}
  union {
    LoginResponse_Exchange _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginResponse_ExchangeDefaultTypeInternal _LoginResponse_Exchange_default_instance_;
PROTOBUF_CONSTEXPR LoginResponse_Account::LoginResponse_Account(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.account_number_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.account_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.display_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.mode_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LoginResponse_AccountDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginResponse_AccountDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginResponse_AccountDefaultTypeInternal() {}
  union {
    LoginResponse_Account _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginResponse_AccountDefaultTypeInternal _LoginResponse_Account_default_instance_;
PROTOBUF_CONSTEXPR LoginResponse::LoginResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.roles_)*/{}
  , /*decltype(_impl_.exchanges_)*/{}
  , /*decltype(_impl_.accounts_)*/{}
  , /*decltype(_impl_.session_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.user_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.firm_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.error_message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.authentication_token_)*/nullptr
  , /*decltype(_impl_.result_)*/ 0
} {}
struct LoginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LoginResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LoginResponseDefaultTypeInternal() {}
  union {
    LoginResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LoginResponseDefaultTypeInternal _LoginResponse_default_instance_;
PROTOBUF_CONSTEXPR AuthenticationTokenRequest::AuthenticationTokenRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AuthenticationTokenRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthenticationTokenRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthenticationTokenRequestDefaultTypeInternal() {}
  union {
    AuthenticationTokenRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthenticationTokenRequestDefaultTypeInternal _AuthenticationTokenRequest_default_instance_;
PROTOBUF_CONSTEXPR AuthenticationToken::AuthenticationToken(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.request_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.token_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.fail_message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.expire_time_)*/nullptr} {}
struct AuthenticationTokenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AuthenticationTokenDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AuthenticationTokenDefaultTypeInternal() {}
  union {
    AuthenticationToken _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AuthenticationTokenDefaultTypeInternal _AuthenticationToken_default_instance_;
}  // namespace auth
}  // namespace v1
}  // namespace t4proto
static ::_pb::Metadata file_level_metadata_t4_2fv1_2fauth_2fauth_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_t4_2fv1_2fauth_2fauth_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_t4_2fv1_2fauth_2fauth_2eproto = nullptr;
const ::uint32_t TableStruct_t4_2fv1_2fauth_2fauth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginRequest, _impl_.api_key_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginRequest, _impl_.firm_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginRequest, _impl_.username_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginRequest, _impl_.password_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginRequest, _impl_.app_name_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginRequest, _impl_.app_license_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginRequest, _impl_.price_format_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse_Exchange_ExtraDetailEntry_DoNotUse, _has_bits_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse_Exchange_ExtraDetailEntry_DoNotUse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse_Exchange_ExtraDetailEntry_DoNotUse, key_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse_Exchange_ExtraDetailEntry_DoNotUse, value_),
    0,
    1,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse_Exchange, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse_Exchange, _impl_.exchange_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse_Exchange, _impl_.user_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse_Exchange, _impl_.market_data_type_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse_Exchange, _impl_.has_executing_account_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse_Exchange, _impl_.primary_user_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse_Exchange, _impl_.secondary_user_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse_Exchange, _impl_.location_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse_Exchange, _impl_.smp_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse_Exchange, _impl_.extra_detail_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse_Account, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse_Account, _impl_.account_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse_Account, _impl_.account_number_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse_Account, _impl_.account_name_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse_Account, _impl_.display_name_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse_Account, _impl_.mode_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse, _impl_.result_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse, _impl_.session_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse, _impl_.user_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse, _impl_.firm_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse, _impl_.roles_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse, _impl_.error_message_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse, _impl_.exchanges_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse, _impl_.accounts_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::LoginResponse, _impl_.authentication_token_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    0,
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::AuthenticationTokenRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::AuthenticationTokenRequest, _impl_.request_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::AuthenticationToken, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::AuthenticationToken, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::AuthenticationToken, _impl_.request_id_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::AuthenticationToken, _impl_.token_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::AuthenticationToken, _impl_.expire_time_),
    PROTOBUF_FIELD_OFFSET(::t4proto::v1::auth::AuthenticationToken, _impl_.fail_message_),
    ~0u,
    0,
    2,
    1,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::t4proto::v1::auth::LoginRequest)},
        { 15, 25, -1, sizeof(::t4proto::v1::auth::LoginResponse_Exchange_ExtraDetailEntry_DoNotUse)},
        { 27, -1, -1, sizeof(::t4proto::v1::auth::LoginResponse_Exchange)},
        { 44, -1, -1, sizeof(::t4proto::v1::auth::LoginResponse_Account)},
        { 57, 74, -1, sizeof(::t4proto::v1::auth::LoginResponse)},
        { 83, -1, -1, sizeof(::t4proto::v1::auth::AuthenticationTokenRequest)},
        { 92, 104, -1, sizeof(::t4proto::v1::auth::AuthenticationToken)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::t4proto::v1::auth::_LoginRequest_default_instance_._instance,
    &::t4proto::v1::auth::_LoginResponse_Exchange_ExtraDetailEntry_DoNotUse_default_instance_._instance,
    &::t4proto::v1::auth::_LoginResponse_Exchange_default_instance_._instance,
    &::t4proto::v1::auth::_LoginResponse_Account_default_instance_._instance,
    &::t4proto::v1::auth::_LoginResponse_default_instance_._instance,
    &::t4proto::v1::auth::_AuthenticationTokenRequest_default_instance_._instance,
    &::t4proto::v1::auth::_AuthenticationToken_default_instance_._instance,
};
const char descriptor_table_protodef_t4_2fv1_2fauth_2fauth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\025t4/v1/auth/auth.proto\022\017t4proto.v1.auth"
    "\032\037google/protobuf/timestamp.proto\032\030t4/v1"
    "/common/enums.proto\"\256\001\n\014LoginRequest\022\017\n\007"
    "api_key\030\001 \001(\t\022\014\n\004firm\030\002 \001(\t\022\020\n\010username\030"
    "\003 \001(\t\022\020\n\010password\030\004 \001(\t\022\020\n\010app_name\030\005 \001("
    "\t\022\023\n\013app_license\030\006 \001(\t\0224\n\014price_format\030\n"
    " \001(\0162\036.t4proto.v1.common.PriceFormat\"\356\006\n"
    "\rLoginResponse\022.\n\006result\030\001 \001(\0162\036.t4proto"
    ".v1.common.LoginResult\022\022\n\nsession_id\030\002 \001"
    "(\t\022\017\n\007user_id\030\003 \001(\t\022\017\n\007firm_id\030\004 \001(\t\022\r\n\005"
    "roles\030\005 \003(\t\022\025\n\rerror_message\030\006 \001(\t\022:\n\tex"
    "changes\030\007 \003(\0132\'.t4proto.v1.auth.LoginRes"
    "ponse.Exchange\0228\n\010accounts\030\010 \003(\0132&.t4pro"
    "to.v1.auth.LoginResponse.Account\022G\n\024auth"
    "entication_token\030\t \001(\0132$.t4proto.v1.auth"
    ".AuthenticationTokenH\000\210\001\001\032\346\002\n\010Exchange\022\023"
    "\n\013exchange_id\030\001 \001(\t\022\017\n\007user_id\030\002 \001(\t\022;\n\020"
    "market_data_type\030\003 \001(\0162!.t4proto.v1.comm"
    "on.MarketDataType\022\035\n\025has_executing_accou"
    "nt\030\004 \001(\010\022\027\n\017primary_user_id\030\005 \001(\t\022\031\n\021sec"
    "ondary_user_id\030\006 \001(\t\022\020\n\010location\030\007 \001(\t\022\016"
    "\n\006smp_id\030\010 \001(\t\022N\n\014extra_detail\030\t \003(\01328.t"
    "4proto.v1.auth.LoginResponse.Exchange.Ex"
    "traDetailEntry\0322\n\020ExtraDetailEntry\022\013\n\003ke"
    "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\032\217\001\n\007Account\022\022"
    "\n\naccount_id\030\001 \001(\t\022\026\n\016account_number\030\002 \001"
    "(\t\022\024\n\014account_name\030\003 \001(\t\022\024\n\014display_name"
    "\030\004 \001(\t\022,\n\004mode\030\005 \001(\0162\036.t4proto.v1.common"
    ".AccountModeB\027\n\025_authentication_token\"0\n"
    "\032AuthenticationTokenRequest\022\022\n\nrequest_i"
    "d\030\001 \001(\t\"\271\001\n\023AuthenticationToken\022\022\n\nreque"
    "st_id\030\001 \001(\t\022\022\n\005token\030\002 \001(\tH\000\210\001\001\0224\n\013expir"
    "e_time\030\003 \001(\0132\032.google.protobuf.Timestamp"
    "H\001\210\001\001\022\031\n\014fail_message\030\004 \001(\tH\002\210\001\001B\010\n\006_tok"
    "enB\016\n\014_expire_timeB\017\n\r_fail_messageb\006pro"
    "to3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_t4_2fv1_2fauth_2fauth_2eproto_deps[2] =
    {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_t4_2fv1_2fcommon_2fenums_2eproto,
};
static ::absl::once_flag descriptor_table_t4_2fv1_2fauth_2fauth_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_t4_2fv1_2fauth_2fauth_2eproto = {
    false,
    false,
    1403,
    descriptor_table_protodef_t4_2fv1_2fauth_2fauth_2eproto,
    "t4/v1/auth/auth.proto",
    &descriptor_table_t4_2fv1_2fauth_2fauth_2eproto_once,
    descriptor_table_t4_2fv1_2fauth_2fauth_2eproto_deps,
    2,
    7,
    schemas,
    file_default_instances,
    TableStruct_t4_2fv1_2fauth_2fauth_2eproto::offsets,
    file_level_metadata_t4_2fv1_2fauth_2fauth_2eproto,
    file_level_enum_descriptors_t4_2fv1_2fauth_2fauth_2eproto,
    file_level_service_descriptors_t4_2fv1_2fauth_2fauth_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_t4_2fv1_2fauth_2fauth_2eproto_getter() {
  return &descriptor_table_t4_2fv1_2fauth_2fauth_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_t4_2fv1_2fauth_2fauth_2eproto(&descriptor_table_t4_2fv1_2fauth_2fauth_2eproto);
namespace t4proto {
namespace v1 {
namespace auth {
// ===================================================================

class LoginRequest::_Internal {
 public:
};

LoginRequest::LoginRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.auth.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.api_key_) {}

    , decltype(_impl_.firm_) {}

    , decltype(_impl_.username_) {}

    , decltype(_impl_.password_) {}

    , decltype(_impl_.app_name_) {}

    , decltype(_impl_.app_license_) {}

    , decltype(_impl_.price_format_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.api_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.api_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_api_key().empty()) {
    _this->_impl_.api_key_.Set(from._internal_api_key(), _this->GetArenaForAllocation());
  }
  _impl_.firm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.firm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_firm().empty()) {
    _this->_impl_.firm_.Set(from._internal_firm(), _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), _this->GetArenaForAllocation());
  }
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_password().empty()) {
    _this->_impl_.password_.Set(from._internal_password(), _this->GetArenaForAllocation());
  }
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_name().empty()) {
    _this->_impl_.app_name_.Set(from._internal_app_name(), _this->GetArenaForAllocation());
  }
  _impl_.app_license_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_license_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_license().empty()) {
    _this->_impl_.app_license_.Set(from._internal_app_license(), _this->GetArenaForAllocation());
  }
  _this->_impl_.price_format_ = from._impl_.price_format_;
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.auth.LoginRequest)
}

inline void LoginRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.api_key_) {}

    , decltype(_impl_.firm_) {}

    , decltype(_impl_.username_) {}

    , decltype(_impl_.password_) {}

    , decltype(_impl_.app_name_) {}

    , decltype(_impl_.app_license_) {}

    , decltype(_impl_.price_format_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.api_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.api_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.firm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.firm_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.app_license_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.app_license_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:t4proto.v1.auth.LoginRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.api_key_.Destroy();
  _impl_.firm_.Destroy();
  _impl_.username_.Destroy();
  _impl_.password_.Destroy();
  _impl_.app_name_.Destroy();
  _impl_.app_license_.Destroy();
}

void LoginRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.auth.LoginRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.api_key_.ClearToEmpty();
  _impl_.firm_.ClearToEmpty();
  _impl_.username_.ClearToEmpty();
  _impl_.password_.ClearToEmpty();
  _impl_.app_name_.ClearToEmpty();
  _impl_.app_license_.ClearToEmpty();
  _impl_.price_format_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string api_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_api_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.LoginRequest.api_key"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string firm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_firm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.LoginRequest.firm"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.LoginRequest.username"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string password = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.LoginRequest.password"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string app_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_app_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.LoginRequest.app_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string app_license = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_app_license();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.LoginRequest.app_license"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.PriceFormat price_format = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_price_format(static_cast<::t4proto::v1::common::PriceFormat>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LoginRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.auth.LoginRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string api_key = 1;
  if (!this->_internal_api_key().empty()) {
    const std::string& _s = this->_internal_api_key();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginRequest.api_key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string firm = 2;
  if (!this->_internal_firm().empty()) {
    const std::string& _s = this->_internal_firm();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginRequest.firm");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string username = 3;
  if (!this->_internal_username().empty()) {
    const std::string& _s = this->_internal_username();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginRequest.username");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    const std::string& _s = this->_internal_password();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginRequest.password");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string app_name = 5;
  if (!this->_internal_app_name().empty()) {
    const std::string& _s = this->_internal_app_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginRequest.app_name");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string app_license = 6;
  if (!this->_internal_app_license().empty()) {
    const std::string& _s = this->_internal_app_license();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginRequest.app_license");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // .t4proto.v1.common.PriceFormat price_format = 10;
  if (this->_internal_price_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        10, this->_internal_price_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.auth.LoginRequest)
  return target;
}

::size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.auth.LoginRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string api_key = 1;
  if (!this->_internal_api_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_api_key());
  }

  // string firm = 2;
  if (!this->_internal_firm().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_firm());
  }

  // string username = 3;
  if (!this->_internal_username().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_username());
  }

  // string password = 4;
  if (!this->_internal_password().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_password());
  }

  // string app_name = 5;
  if (!this->_internal_app_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_app_name());
  }

  // string app_license = 6;
  if (!this->_internal_app_license().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_app_license());
  }

  // .t4proto.v1.common.PriceFormat price_format = 10;
  if (this->_internal_price_format() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_price_format());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginRequest::GetClassData() const { return &_class_data_; }


void LoginRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginRequest*>(&to_msg);
  auto& from = static_cast<const LoginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.auth.LoginRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_api_key().empty()) {
    _this->_internal_set_api_key(from._internal_api_key());
  }
  if (!from._internal_firm().empty()) {
    _this->_internal_set_firm(from._internal_firm());
  }
  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_password().empty()) {
    _this->_internal_set_password(from._internal_password());
  }
  if (!from._internal_app_name().empty()) {
    _this->_internal_set_app_name(from._internal_app_name());
  }
  if (!from._internal_app_license().empty()) {
    _this->_internal_set_app_license(from._internal_app_license());
  }
  if (from._internal_price_format() != 0) {
    _this->_internal_set_price_format(from._internal_price_format());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.auth.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::InternalSwap(LoginRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.api_key_, lhs_arena,
                                       &other->_impl_.api_key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.firm_, lhs_arena,
                                       &other->_impl_.firm_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, lhs_arena,
                                       &other->_impl_.username_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.password_, lhs_arena,
                                       &other->_impl_.password_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.app_name_, lhs_arena,
                                       &other->_impl_.app_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.app_license_, lhs_arena,
                                       &other->_impl_.app_license_, rhs_arena);
  swap(_impl_.price_format_, other->_impl_.price_format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fauth_2fauth_2eproto_getter, &descriptor_table_t4_2fv1_2fauth_2fauth_2eproto_once,
      file_level_metadata_t4_2fv1_2fauth_2fauth_2eproto[0]);
}
// ===================================================================

LoginResponse_Exchange_ExtraDetailEntry_DoNotUse::LoginResponse_Exchange_ExtraDetailEntry_DoNotUse() {}
LoginResponse_Exchange_ExtraDetailEntry_DoNotUse::LoginResponse_Exchange_ExtraDetailEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LoginResponse_Exchange_ExtraDetailEntry_DoNotUse::MergeFrom(const LoginResponse_Exchange_ExtraDetailEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LoginResponse_Exchange_ExtraDetailEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fauth_2fauth_2eproto_getter, &descriptor_table_t4_2fv1_2fauth_2fauth_2eproto_once,
      file_level_metadata_t4_2fv1_2fauth_2fauth_2eproto[1]);
}
// ===================================================================

class LoginResponse_Exchange::_Internal {
 public:
};

LoginResponse_Exchange::LoginResponse_Exchange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &LoginResponse_Exchange::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.auth.LoginResponse.Exchange)
}
LoginResponse_Exchange::LoginResponse_Exchange(const LoginResponse_Exchange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginResponse_Exchange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.extra_detail_)*/{}
    , decltype(_impl_.exchange_id_) {}

    , decltype(_impl_.user_id_) {}

    , decltype(_impl_.primary_user_id_) {}

    , decltype(_impl_.secondary_user_id_) {}

    , decltype(_impl_.location_) {}

    , decltype(_impl_.smp_id_) {}

    , decltype(_impl_.market_data_type_) {}

    , decltype(_impl_.has_executing_account_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.extra_detail_.MergeFrom(from._impl_.extra_detail_);
  _impl_.exchange_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exchange_id().empty()) {
    _this->_impl_.exchange_id_.Set(from._internal_exchange_id(), _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), _this->GetArenaForAllocation());
  }
  _impl_.primary_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.primary_user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_primary_user_id().empty()) {
    _this->_impl_.primary_user_id_.Set(from._internal_primary_user_id(), _this->GetArenaForAllocation());
  }
  _impl_.secondary_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.secondary_user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secondary_user_id().empty()) {
    _this->_impl_.secondary_user_id_.Set(from._internal_secondary_user_id(), _this->GetArenaForAllocation());
  }
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.location_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_location().empty()) {
    _this->_impl_.location_.Set(from._internal_location(), _this->GetArenaForAllocation());
  }
  _impl_.smp_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.smp_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_smp_id().empty()) {
    _this->_impl_.smp_id_.Set(from._internal_smp_id(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.market_data_type_, &from._impl_.market_data_type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.has_executing_account_) -
    reinterpret_cast<char*>(&_impl_.market_data_type_)) + sizeof(_impl_.has_executing_account_));
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.auth.LoginResponse.Exchange)
}

inline void LoginResponse_Exchange::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_.extra_detail_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.exchange_id_) {}

    , decltype(_impl_.user_id_) {}

    , decltype(_impl_.primary_user_id_) {}

    , decltype(_impl_.secondary_user_id_) {}

    , decltype(_impl_.location_) {}

    , decltype(_impl_.smp_id_) {}

    , decltype(_impl_.market_data_type_) { 0 }

    , decltype(_impl_.has_executing_account_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.exchange_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.exchange_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.primary_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.primary_user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.secondary_user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.secondary_user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.location_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.location_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.smp_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.smp_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginResponse_Exchange::~LoginResponse_Exchange() {
  // @@protoc_insertion_point(destructor:t4proto.v1.auth.LoginResponse.Exchange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void LoginResponse_Exchange::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extra_detail_.Destruct();
  _impl_.extra_detail_.~MapField();
  _impl_.exchange_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.primary_user_id_.Destroy();
  _impl_.secondary_user_id_.Destroy();
  _impl_.location_.Destroy();
  _impl_.smp_id_.Destroy();
}

void LoginResponse_Exchange::ArenaDtor(void* object) {
  LoginResponse_Exchange* _this = reinterpret_cast< LoginResponse_Exchange* >(object);
  _this->_impl_.extra_detail_.Destruct();
}
void LoginResponse_Exchange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginResponse_Exchange::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.auth.LoginResponse.Exchange)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extra_detail_.Clear();
  _impl_.exchange_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.primary_user_id_.ClearToEmpty();
  _impl_.secondary_user_id_.ClearToEmpty();
  _impl_.location_.ClearToEmpty();
  _impl_.smp_id_.ClearToEmpty();
  ::memset(&_impl_.market_data_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.has_executing_account_) -
      reinterpret_cast<char*>(&_impl_.market_data_type_)) + sizeof(_impl_.has_executing_account_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginResponse_Exchange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string exchange_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_exchange_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.LoginResponse.Exchange.exchange_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string user_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.LoginResponse.Exchange.user_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.MarketDataType market_data_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_market_data_type(static_cast<::t4proto::v1::common::MarketDataType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool has_executing_account = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.has_executing_account_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string primary_user_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_primary_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.LoginResponse.Exchange.primary_user_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string secondary_user_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_secondary_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.LoginResponse.Exchange.secondary_user_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string location = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_location();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.LoginResponse.Exchange.location"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string smp_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_smp_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.LoginResponse.Exchange.smp_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // map<string, string> extra_detail = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.extra_detail_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LoginResponse_Exchange::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.auth.LoginResponse.Exchange)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string exchange_id = 1;
  if (!this->_internal_exchange_id().empty()) {
    const std::string& _s = this->_internal_exchange_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginResponse.Exchange.exchange_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    const std::string& _s = this->_internal_user_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginResponse.Exchange.user_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // .t4proto.v1.common.MarketDataType market_data_type = 3;
  if (this->_internal_market_data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_market_data_type(), target);
  }

  // bool has_executing_account = 4;
  if (this->_internal_has_executing_account() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_has_executing_account(), target);
  }

  // string primary_user_id = 5;
  if (!this->_internal_primary_user_id().empty()) {
    const std::string& _s = this->_internal_primary_user_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginResponse.Exchange.primary_user_id");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // string secondary_user_id = 6;
  if (!this->_internal_secondary_user_id().empty()) {
    const std::string& _s = this->_internal_secondary_user_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginResponse.Exchange.secondary_user_id");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // string location = 7;
  if (!this->_internal_location().empty()) {
    const std::string& _s = this->_internal_location();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginResponse.Exchange.location");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // string smp_id = 8;
  if (!this->_internal_smp_id().empty()) {
    const std::string& _s = this->_internal_smp_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginResponse.Exchange.smp_id");
    target = stream->WriteStringMaybeAliased(8, _s, target);
  }

  // map<string, string> extra_detail = 9;
  if (!this->_internal_extra_detail().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = LoginResponse_Exchange_ExtraDetailEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_extra_detail();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.first.data(), static_cast<int>(entry.first.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginResponse.Exchange.extra_detail");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          entry.second.data(), static_cast<int>(entry.second.length()),
 ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginResponse.Exchange.extra_detail");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.auth.LoginResponse.Exchange)
  return target;
}

::size_t LoginResponse_Exchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.auth.LoginResponse.Exchange)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> extra_detail = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_extra_detail_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_extra_detail().begin();
      it != this->_internal_extra_detail().end(); ++it) {
    total_size += LoginResponse_Exchange_ExtraDetailEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string exchange_id = 1;
  if (!this->_internal_exchange_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange_id());
  }

  // string user_id = 2;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_user_id());
  }

  // string primary_user_id = 5;
  if (!this->_internal_primary_user_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_primary_user_id());
  }

  // string secondary_user_id = 6;
  if (!this->_internal_secondary_user_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_secondary_user_id());
  }

  // string location = 7;
  if (!this->_internal_location().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_location());
  }

  // string smp_id = 8;
  if (!this->_internal_smp_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_smp_id());
  }

  // .t4proto.v1.common.MarketDataType market_data_type = 3;
  if (this->_internal_market_data_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_market_data_type());
  }

  // bool has_executing_account = 4;
  if (this->_internal_has_executing_account() != 0) {
    total_size += 2;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginResponse_Exchange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginResponse_Exchange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginResponse_Exchange::GetClassData() const { return &_class_data_; }


void LoginResponse_Exchange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginResponse_Exchange*>(&to_msg);
  auto& from = static_cast<const LoginResponse_Exchange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.auth.LoginResponse.Exchange)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.extra_detail_.MergeFrom(from._impl_.extra_detail_);
  if (!from._internal_exchange_id().empty()) {
    _this->_internal_set_exchange_id(from._internal_exchange_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_primary_user_id().empty()) {
    _this->_internal_set_primary_user_id(from._internal_primary_user_id());
  }
  if (!from._internal_secondary_user_id().empty()) {
    _this->_internal_set_secondary_user_id(from._internal_secondary_user_id());
  }
  if (!from._internal_location().empty()) {
    _this->_internal_set_location(from._internal_location());
  }
  if (!from._internal_smp_id().empty()) {
    _this->_internal_set_smp_id(from._internal_smp_id());
  }
  if (from._internal_market_data_type() != 0) {
    _this->_internal_set_market_data_type(from._internal_market_data_type());
  }
  if (from._internal_has_executing_account() != 0) {
    _this->_internal_set_has_executing_account(from._internal_has_executing_account());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginResponse_Exchange::CopyFrom(const LoginResponse_Exchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.auth.LoginResponse.Exchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse_Exchange::IsInitialized() const {
  return true;
}

void LoginResponse_Exchange::InternalSwap(LoginResponse_Exchange* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.extra_detail_.InternalSwap(&other->_impl_.extra_detail_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_id_, lhs_arena,
                                       &other->_impl_.exchange_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_id_, lhs_arena,
                                       &other->_impl_.user_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.primary_user_id_, lhs_arena,
                                       &other->_impl_.primary_user_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.secondary_user_id_, lhs_arena,
                                       &other->_impl_.secondary_user_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.location_, lhs_arena,
                                       &other->_impl_.location_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.smp_id_, lhs_arena,
                                       &other->_impl_.smp_id_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginResponse_Exchange, _impl_.has_executing_account_)
      + sizeof(LoginResponse_Exchange::_impl_.has_executing_account_)
      - PROTOBUF_FIELD_OFFSET(LoginResponse_Exchange, _impl_.market_data_type_)>(
          reinterpret_cast<char*>(&_impl_.market_data_type_),
          reinterpret_cast<char*>(&other->_impl_.market_data_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginResponse_Exchange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fauth_2fauth_2eproto_getter, &descriptor_table_t4_2fv1_2fauth_2fauth_2eproto_once,
      file_level_metadata_t4_2fv1_2fauth_2fauth_2eproto[2]);
}
// ===================================================================

class LoginResponse_Account::_Internal {
 public:
};

LoginResponse_Account::LoginResponse_Account(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.auth.LoginResponse.Account)
}
LoginResponse_Account::LoginResponse_Account(const LoginResponse_Account& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginResponse_Account* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_) {}

    , decltype(_impl_.account_number_) {}

    , decltype(_impl_.account_name_) {}

    , decltype(_impl_.display_name_) {}

    , decltype(_impl_.mode_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_id().empty()) {
    _this->_impl_.account_id_.Set(from._internal_account_id(), _this->GetArenaForAllocation());
  }
  _impl_.account_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_number_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_number().empty()) {
    _this->_impl_.account_number_.Set(from._internal_account_number(), _this->GetArenaForAllocation());
  }
  _impl_.account_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_name().empty()) {
    _this->_impl_.account_name_.Set(from._internal_account_name(), _this->GetArenaForAllocation());
  }
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.mode_ = from._impl_.mode_;
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.auth.LoginResponse.Account)
}

inline void LoginResponse_Account::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.account_id_) {}

    , decltype(_impl_.account_number_) {}

    , decltype(_impl_.account_name_) {}

    , decltype(_impl_.display_name_) {}

    , decltype(_impl_.mode_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_number_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_number_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginResponse_Account::~LoginResponse_Account() {
  // @@protoc_insertion_point(destructor:t4proto.v1.auth.LoginResponse.Account)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginResponse_Account::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_id_.Destroy();
  _impl_.account_number_.Destroy();
  _impl_.account_name_.Destroy();
  _impl_.display_name_.Destroy();
}

void LoginResponse_Account::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginResponse_Account::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.auth.LoginResponse.Account)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.ClearToEmpty();
  _impl_.account_number_.ClearToEmpty();
  _impl_.account_name_.ClearToEmpty();
  _impl_.display_name_.ClearToEmpty();
  _impl_.mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginResponse_Account::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.LoginResponse.Account.account_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string account_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.LoginResponse.Account.account_number"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string account_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_account_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.LoginResponse.Account.account_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string display_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.LoginResponse.Account.display_name"));
        } else {
          goto handle_unusual;
        }
        continue;
      // .t4proto.v1.common.AccountMode mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::t4proto::v1::common::AccountMode>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LoginResponse_Account::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.auth.LoginResponse.Account)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    const std::string& _s = this->_internal_account_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginResponse.Account.account_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string account_number = 2;
  if (!this->_internal_account_number().empty()) {
    const std::string& _s = this->_internal_account_number();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginResponse.Account.account_number");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string account_name = 3;
  if (!this->_internal_account_name().empty()) {
    const std::string& _s = this->_internal_account_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginResponse.Account.account_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string display_name = 4;
  if (!this->_internal_display_name().empty()) {
    const std::string& _s = this->_internal_display_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginResponse.Account.display_name");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // .t4proto.v1.common.AccountMode mode = 5;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.auth.LoginResponse.Account)
  return target;
}

::size_t LoginResponse_Account::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.auth.LoginResponse.Account)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_id = 1;
  if (!this->_internal_account_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_id());
  }

  // string account_number = 2;
  if (!this->_internal_account_number().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_number());
  }

  // string account_name = 3;
  if (!this->_internal_account_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_name());
  }

  // string display_name = 4;
  if (!this->_internal_display_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_display_name());
  }

  // .t4proto.v1.common.AccountMode mode = 5;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginResponse_Account::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginResponse_Account::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginResponse_Account::GetClassData() const { return &_class_data_; }


void LoginResponse_Account::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginResponse_Account*>(&to_msg);
  auto& from = static_cast<const LoginResponse_Account&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.auth.LoginResponse.Account)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_id().empty()) {
    _this->_internal_set_account_id(from._internal_account_id());
  }
  if (!from._internal_account_number().empty()) {
    _this->_internal_set_account_number(from._internal_account_number());
  }
  if (!from._internal_account_name().empty()) {
    _this->_internal_set_account_name(from._internal_account_name());
  }
  if (!from._internal_display_name().empty()) {
    _this->_internal_set_display_name(from._internal_display_name());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginResponse_Account::CopyFrom(const LoginResponse_Account& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.auth.LoginResponse.Account)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse_Account::IsInitialized() const {
  return true;
}

void LoginResponse_Account::InternalSwap(LoginResponse_Account* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_id_, lhs_arena,
                                       &other->_impl_.account_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_number_, lhs_arena,
                                       &other->_impl_.account_number_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_name_, lhs_arena,
                                       &other->_impl_.account_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.display_name_, lhs_arena,
                                       &other->_impl_.display_name_, rhs_arena);
  swap(_impl_.mode_, other->_impl_.mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginResponse_Account::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fauth_2fauth_2eproto_getter, &descriptor_table_t4_2fv1_2fauth_2fauth_2eproto_once,
      file_level_metadata_t4_2fv1_2fauth_2fauth_2eproto[3]);
}
// ===================================================================

class LoginResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<LoginResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_._has_bits_);
  static const ::t4proto::v1::auth::AuthenticationToken& authentication_token(const LoginResponse* msg);
  static void set_has_authentication_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::t4proto::v1::auth::AuthenticationToken&
LoginResponse::_Internal::authentication_token(const LoginResponse* msg) {
  return *msg->_impl_.authentication_token_;
}
LoginResponse::LoginResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.auth.LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LoginResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roles_){from._impl_.roles_}
    , decltype(_impl_.exchanges_){from._impl_.exchanges_}
    , decltype(_impl_.accounts_){from._impl_.accounts_}
    , decltype(_impl_.session_id_) {}

    , decltype(_impl_.user_id_) {}

    , decltype(_impl_.firm_id_) {}

    , decltype(_impl_.error_message_) {}

    , decltype(_impl_.authentication_token_){nullptr}
    , decltype(_impl_.result_) {}
  };

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_id().empty()) {
    _this->_impl_.session_id_.Set(from._internal_session_id(), _this->GetArenaForAllocation());
  }
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_id().empty()) {
    _this->_impl_.user_id_.Set(from._internal_user_id(), _this->GetArenaForAllocation());
  }
  _impl_.firm_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.firm_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_firm_id().empty()) {
    _this->_impl_.firm_id_.Set(from._internal_firm_id(), _this->GetArenaForAllocation());
  }
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.authentication_token_ = new ::t4proto::v1::auth::AuthenticationToken(*from._impl_.authentication_token_);
  }
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.auth.LoginResponse)
}

inline void LoginResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.roles_){arena}
    , decltype(_impl_.exchanges_){arena}
    , decltype(_impl_.accounts_){arena}
    , decltype(_impl_.session_id_) {}

    , decltype(_impl_.user_id_) {}

    , decltype(_impl_.firm_id_) {}

    , decltype(_impl_.error_message_) {}

    , decltype(_impl_.authentication_token_){nullptr}
    , decltype(_impl_.result_) { 0 }

  };
  _impl_.session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.session_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.firm_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.firm_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:t4proto.v1.auth.LoginResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LoginResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.roles_.~RepeatedPtrField();
  _impl_.exchanges_.~RepeatedPtrField();
  _impl_.accounts_.~RepeatedPtrField();
  _impl_.session_id_.Destroy();
  _impl_.user_id_.Destroy();
  _impl_.firm_id_.Destroy();
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.authentication_token_;
}

void LoginResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.auth.LoginResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.roles_.Clear();
  _impl_.exchanges_.Clear();
  _impl_.accounts_.Clear();
  _impl_.session_id_.ClearToEmpty();
  _impl_.user_id_.ClearToEmpty();
  _impl_.firm_id_.ClearToEmpty();
  _impl_.error_message_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.authentication_token_ != nullptr);
    _impl_.authentication_token_->Clear();
  }
  _impl_.result_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LoginResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .t4proto.v1.common.LoginResult result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::uint32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_result(static_cast<::t4proto::v1::common::LoginResult>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.LoginResponse.session_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string user_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.LoginResponse.user_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string firm_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_firm_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.LoginResponse.firm_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string roles = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_roles();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.LoginResponse.roles"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string error_message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.LoginResponse.error_message"));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .t4proto.v1.auth.LoginResponse.Exchange exchanges = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exchanges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .t4proto.v1.auth.LoginResponse.Account accounts = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_accounts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .t4proto.v1.auth.AuthenticationToken authentication_token = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_authentication_token(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LoginResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.auth.LoginResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .t4proto.v1.common.LoginResult result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_result(), target);
  }

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    const std::string& _s = this->_internal_session_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginResponse.session_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string user_id = 3;
  if (!this->_internal_user_id().empty()) {
    const std::string& _s = this->_internal_user_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginResponse.user_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string firm_id = 4;
  if (!this->_internal_firm_id().empty()) {
    const std::string& _s = this->_internal_firm_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginResponse.firm_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // repeated string roles = 5;
  for (int i = 0, n = this->_internal_roles_size(); i < n; ++i) {
    const auto& s = this->_internal_roles(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginResponse.roles");
    target = stream->WriteString(5, s, target);
  }

  // string error_message = 6;
  if (!this->_internal_error_message().empty()) {
    const std::string& _s = this->_internal_error_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.LoginResponse.error_message");
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // repeated .t4proto.v1.auth.LoginResponse.Exchange exchanges = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_exchanges_size()); i < n; i++) {
    const auto& repfield = this->_internal_exchanges(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .t4proto.v1.auth.LoginResponse.Account accounts = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_accounts_size()); i < n; i++) {
    const auto& repfield = this->_internal_accounts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .t4proto.v1.auth.AuthenticationToken authentication_token = 9;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::authentication_token(this),
        _Internal::authentication_token(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.auth.LoginResponse)
  return target;
}

::size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.auth.LoginResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string roles = 5;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.roles_.size());
  for (int i = 0, n = _impl_.roles_.size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(_impl_.roles_.Get(i));
  }

  // repeated .t4proto.v1.auth.LoginResponse.Exchange exchanges = 7;
  total_size += 1UL * this->_internal_exchanges_size();
  for (const auto& msg : this->_impl_.exchanges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .t4proto.v1.auth.LoginResponse.Account accounts = 8;
  total_size += 1UL * this->_internal_accounts_size();
  for (const auto& msg : this->_impl_.accounts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string session_id = 2;
  if (!this->_internal_session_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_session_id());
  }

  // string user_id = 3;
  if (!this->_internal_user_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_user_id());
  }

  // string firm_id = 4;
  if (!this->_internal_firm_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_firm_id());
  }

  // string error_message = 6;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_error_message());
  }

  // optional .t4proto.v1.auth.AuthenticationToken authentication_token = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.authentication_token_);
  }

  // .t4proto.v1.common.LoginResult result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LoginResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LoginResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LoginResponse::GetClassData() const { return &_class_data_; }


void LoginResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LoginResponse*>(&to_msg);
  auto& from = static_cast<const LoginResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.auth.LoginResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.roles_.MergeFrom(from._impl_.roles_);
  _this->_impl_.exchanges_.MergeFrom(from._impl_.exchanges_);
  _this->_impl_.accounts_.MergeFrom(from._impl_.accounts_);
  if (!from._internal_session_id().empty()) {
    _this->_internal_set_session_id(from._internal_session_id());
  }
  if (!from._internal_user_id().empty()) {
    _this->_internal_set_user_id(from._internal_user_id());
  }
  if (!from._internal_firm_id().empty()) {
    _this->_internal_set_firm_id(from._internal_firm_id());
  }
  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_authentication_token()->::t4proto::v1::auth::AuthenticationToken::MergeFrom(
        from._internal_authentication_token());
  }
  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.auth.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  return true;
}

void LoginResponse::InternalSwap(LoginResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.roles_.InternalSwap(&other->_impl_.roles_);
  _impl_.exchanges_.InternalSwap(&other->_impl_.exchanges_);
  _impl_.accounts_.InternalSwap(&other->_impl_.accounts_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.session_id_, lhs_arena,
                                       &other->_impl_.session_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_id_, lhs_arena,
                                       &other->_impl_.user_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.firm_id_, lhs_arena,
                                       &other->_impl_.firm_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, lhs_arena,
                                       &other->_impl_.error_message_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.result_)
      + sizeof(LoginResponse::_impl_.result_)
      - PROTOBUF_FIELD_OFFSET(LoginResponse, _impl_.authentication_token_)>(
          reinterpret_cast<char*>(&_impl_.authentication_token_),
          reinterpret_cast<char*>(&other->_impl_.authentication_token_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LoginResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fauth_2fauth_2eproto_getter, &descriptor_table_t4_2fv1_2fauth_2fauth_2eproto_once,
      file_level_metadata_t4_2fv1_2fauth_2fauth_2eproto[4]);
}
// ===================================================================

class AuthenticationTokenRequest::_Internal {
 public:
};

AuthenticationTokenRequest::AuthenticationTokenRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.auth.AuthenticationTokenRequest)
}
AuthenticationTokenRequest::AuthenticationTokenRequest(const AuthenticationTokenRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthenticationTokenRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.auth.AuthenticationTokenRequest)
}

inline void AuthenticationTokenRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.request_id_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthenticationTokenRequest::~AuthenticationTokenRequest() {
  // @@protoc_insertion_point(destructor:t4proto.v1.auth.AuthenticationTokenRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthenticationTokenRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
}

void AuthenticationTokenRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthenticationTokenRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.auth.AuthenticationTokenRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticationTokenRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.AuthenticationTokenRequest.request_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AuthenticationTokenRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.auth.AuthenticationTokenRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    const std::string& _s = this->_internal_request_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.AuthenticationTokenRequest.request_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.auth.AuthenticationTokenRequest)
  return target;
}

::size_t AuthenticationTokenRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.auth.AuthenticationTokenRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthenticationTokenRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthenticationTokenRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthenticationTokenRequest::GetClassData() const { return &_class_data_; }


void AuthenticationTokenRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthenticationTokenRequest*>(&to_msg);
  auto& from = static_cast<const AuthenticationTokenRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.auth.AuthenticationTokenRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthenticationTokenRequest::CopyFrom(const AuthenticationTokenRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.auth.AuthenticationTokenRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticationTokenRequest::IsInitialized() const {
  return true;
}

void AuthenticationTokenRequest::InternalSwap(AuthenticationTokenRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.request_id_, lhs_arena,
                                       &other->_impl_.request_id_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticationTokenRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fauth_2fauth_2eproto_getter, &descriptor_table_t4_2fv1_2fauth_2fauth_2eproto_once,
      file_level_metadata_t4_2fv1_2fauth_2fauth_2eproto[5]);
}
// ===================================================================

class AuthenticationToken::_Internal {
 public:
  using HasBits = decltype(std::declval<AuthenticationToken>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AuthenticationToken, _impl_._has_bits_);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expire_time(const AuthenticationToken* msg);
  static void set_has_expire_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_fail_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
AuthenticationToken::_Internal::expire_time(const AuthenticationToken* msg) {
  return *msg->_impl_.expire_time_;
}
void AuthenticationToken::clear_expire_time() {
  if (_impl_.expire_time_ != nullptr) _impl_.expire_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
AuthenticationToken::AuthenticationToken(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.auth.AuthenticationToken)
}
AuthenticationToken::AuthenticationToken(const AuthenticationToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AuthenticationToken* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_) {}

    , decltype(_impl_.token_) {}

    , decltype(_impl_.fail_message_) {}

    , decltype(_impl_.expire_time_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    _this->_impl_.request_id_.Set(from._internal_request_id(), _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.token_.Set(from._internal_token(), _this->GetArenaForAllocation());
  }
  _impl_.fail_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fail_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.fail_message_.Set(from._internal_fail_message(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.expire_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.expire_time_);
  }
  // @@protoc_insertion_point(copy_constructor:t4proto.v1.auth.AuthenticationToken)
}

inline void AuthenticationToken::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.request_id_) {}

    , decltype(_impl_.token_) {}

    , decltype(_impl_.fail_message_) {}

    , decltype(_impl_.expire_time_){nullptr}
  };
  _impl_.request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.request_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.fail_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.fail_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AuthenticationToken::~AuthenticationToken() {
  // @@protoc_insertion_point(destructor:t4proto.v1.auth.AuthenticationToken)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AuthenticationToken::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.request_id_.Destroy();
  _impl_.token_.Destroy();
  _impl_.fail_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.expire_time_;
}

void AuthenticationToken::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AuthenticationToken::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.auth.AuthenticationToken)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.request_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.fail_message_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.expire_time_ != nullptr);
      _impl_.expire_time_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AuthenticationToken::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.AuthenticationToken.request_id"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.AuthenticationToken.token"));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .google.protobuf.Timestamp expire_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expire_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string fail_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_fail_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "t4proto.v1.auth.AuthenticationToken.fail_message"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AuthenticationToken::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.auth.AuthenticationToken)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    const std::string& _s = this->_internal_request_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.AuthenticationToken.request_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string token = 2;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    const std::string& _s = this->_internal_token();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.AuthenticationToken.token");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional .google.protobuf.Timestamp expire_time = 3;
  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::expire_time(this),
        _Internal::expire_time(this).GetCachedSize(), target, stream);
  }

  // optional string fail_message = 4;
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    const std::string& _s = this->_internal_fail_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "t4proto.v1.auth.AuthenticationToken.fail_message");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.auth.AuthenticationToken)
  return target;
}

::size_t AuthenticationToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:t4proto.v1.auth.AuthenticationToken)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (!this->_internal_request_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_request_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string token = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_token());
    }

    // optional string fail_message = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_fail_message());
    }

    // optional .google.protobuf.Timestamp expire_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.expire_time_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AuthenticationToken::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AuthenticationToken::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AuthenticationToken::GetClassData() const { return &_class_data_; }


void AuthenticationToken::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AuthenticationToken*>(&to_msg);
  auto& from = static_cast<const AuthenticationToken&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.auth.AuthenticationToken)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_request_id().empty()) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_fail_message(from._internal_fail_message());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_expire_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_expire_time());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AuthenticationToken::CopyFrom(const AuthenticationToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.auth.AuthenticationToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthenticationToken::IsInitialized() const {
  return true;
}

void AuthenticationToken::InternalSwap(AuthenticationToken* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.request_id_, lhs_arena,
                                       &other->_impl_.request_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.token_, lhs_arena,
                                       &other->_impl_.token_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.fail_message_, lhs_arena,
                                       &other->_impl_.fail_message_, rhs_arena);
  swap(_impl_.expire_time_, other->_impl_.expire_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AuthenticationToken::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_t4_2fv1_2fauth_2fauth_2eproto_getter, &descriptor_table_t4_2fv1_2fauth_2fauth_2eproto_once,
      file_level_metadata_t4_2fv1_2fauth_2fauth_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace auth
}  // namespace v1
}  // namespace t4proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::t4proto::v1::auth::LoginRequest*
Arena::CreateMaybeMessage< ::t4proto::v1::auth::LoginRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::auth::LoginRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::auth::LoginResponse_Exchange_ExtraDetailEntry_DoNotUse*
Arena::CreateMaybeMessage< ::t4proto::v1::auth::LoginResponse_Exchange_ExtraDetailEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::auth::LoginResponse_Exchange_ExtraDetailEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::auth::LoginResponse_Exchange*
Arena::CreateMaybeMessage< ::t4proto::v1::auth::LoginResponse_Exchange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::auth::LoginResponse_Exchange >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::auth::LoginResponse_Account*
Arena::CreateMaybeMessage< ::t4proto::v1::auth::LoginResponse_Account >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::auth::LoginResponse_Account >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::auth::LoginResponse*
Arena::CreateMaybeMessage< ::t4proto::v1::auth::LoginResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::auth::LoginResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::auth::AuthenticationTokenRequest*
Arena::CreateMaybeMessage< ::t4proto::v1::auth::AuthenticationTokenRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::auth::AuthenticationTokenRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::t4proto::v1::auth::AuthenticationToken*
Arena::CreateMaybeMessage< ::t4proto::v1::auth::AuthenticationToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::t4proto::v1::auth::AuthenticationToken >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
