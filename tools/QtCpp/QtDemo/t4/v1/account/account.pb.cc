// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: t4/v1/account/account.proto
// Protobuf C++ Version: 6.31.1

#include "t4/v1/account/account.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace t4proto {
namespace v1 {
namespace account {

inline constexpr AccountSubscribeResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        errors_{},
        success_{false} {}

template <typename>
PROTOBUF_CONSTEXPR AccountSubscribeResponse::AccountSubscribeResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AccountSubscribeResponse_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AccountSubscribeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountSubscribeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountSubscribeResponseDefaultTypeInternal() {}
  union {
    AccountSubscribeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountSubscribeResponseDefaultTypeInternal _AccountSubscribeResponse_default_instance_;

inline constexpr AccountSubscribe::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        account_id_{},
        subscribe_{static_cast< ::t4proto::v1::common::AccountSubscribeType >(0)},
        subscribe_all_accounts_{false},
        upl_mode_{static_cast< ::t4proto::v1::common::UPLMode >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR AccountSubscribe::AccountSubscribe(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AccountSubscribe_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AccountSubscribeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountSubscribeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountSubscribeDefaultTypeInternal() {}
  union {
    AccountSubscribe _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountSubscribeDefaultTypeInternal _AccountSubscribe_default_instance_;

inline constexpr AccountDetails::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        account_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        account_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        account_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        firm_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        active_time_start_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        active_time_stop_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        firm_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        display_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        risk_details_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        group_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        enabled_{static_cast< ::t4proto::v1::common::AccountEnabled >(0)},
        max_clip_size_{0},
        deleted_{false},
        pre_trade_disabled_{false},
        position_rollover_{false},
        pl_rollover_{false},
        margin_pc_{0},
        min_balance_{0},
        loss_limit_{0},
        loss_limit_pc_{0},
        overnight_margin_pc_{0},
        warning_threshold_pl_{0},
        warning_threshold_loss_limit_{0},
        warning_threshold_margin_{0},
        mode_{static_cast< ::t4proto::v1::common::AccountMode >(0)},
        day_loss_limit_{0},
        max_account_position_{0},
        wide_market_{0},
        order_routing_{false},
        use_pl_for_margin_{false},
        options_settlement_{false},
        use_premium_for_margin_{false},
        margin_type_{static_cast< ::t4proto::v1::common::AccountMarginType >(0)},
        price_banding_{0},
        day_loss_limit_pc_{0},
        warning_threshold_min_net_equity_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AccountDetails::AccountDetails(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AccountDetails_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AccountDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountDetailsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountDetailsDefaultTypeInternal() {}
  union {
    AccountDetails _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountDetailsDefaultTypeInternal _AccountDetails_default_instance_;

inline constexpr AccountCurrency::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rate_{0},
        import_factor_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AccountCurrency::AccountCurrency(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AccountCurrency_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AccountCurrencyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountCurrencyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountCurrencyDefaultTypeInternal() {}
  union {
    AccountCurrency _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountCurrencyDefaultTypeInternal _AccountCurrency_default_instance_;

inline constexpr AccountUpdate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        account_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        imported_net_liq_date_{nullptr},
        prev_imported_net_liq_date_{nullptr},
        margin_time_{nullptr},
        alerting_time_{nullptr},
        balance_{0},
        rpl_{0},
        overnight_upl_{0},
        margin_{0},
        day_margin_{0},
        full_margin_{0},
        base_margin_{0},
        alerting_margin_{0},
        pre_trade_margin_{0},
        mp_{0},
        premium_{0},
        long_mp_{0},
        short_mp_{0},
        fees_and_commissions_{0},
        prev_margin_{0},
        imported_net_liq_{0},
        prev_imported_net_liq_{0},
        filled_delta_{0},
        working_delta_{0},
        status_{static_cast< ::t4proto::v1::common::AccountStatus >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR AccountUpdate::AccountUpdate(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AccountUpdate_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AccountUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountUpdateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountUpdateDefaultTypeInternal() {}
  union {
    AccountUpdate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountUpdateDefaultTypeInternal _AccountUpdate_default_instance_;

inline constexpr AccountProfit::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        account_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        update_time_{nullptr},
        upl_{0},
        upl_trade_{0},
        rpl_{0},
        day_upl_{0},
        day_upl_trade_{0},
        day_rpl_{0},
        warning_pl_{0},
        warning_loss_limit_{0},
        warning_margin_{0},
        total_working_orders_{0},
        total_working_volume_{0},
        is_alerting_live_margin_{false},
        is_alerting_full_margin_{false} {}

template <typename>
PROTOBUF_CONSTEXPR AccountProfit::AccountProfit(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AccountProfit_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AccountProfitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountProfitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountProfitDefaultTypeInternal() {}
  union {
    AccountProfit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountProfitDefaultTypeInternal _AccountProfit_default_instance_;

inline constexpr AccountPositionProfit::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        account_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        contract_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        market_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        update_time_{nullptr},
        net_{0},
        upl_{0},
        upl_trade_{0},
        rpl_{0},
        upl_usd_{0},
        upl_trade_usd_{0},
        rpl_usd_{0},
        day_net_{0},
        day_rpl_{0},
        day_rpl_usd_{0},
        day_upl_{0},
        day_upl_trade_{0},
        day_upl_usd_{0},
        day_upl_trade_usd_{0},
        delayed_{false},
        is_options_{false},
        has_data_{false},
        is_implied_{false} {}

template <typename>
PROTOBUF_CONSTEXPR AccountPositionProfit::AccountPositionProfit(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AccountPositionProfit_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AccountPositionProfitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountPositionProfitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountPositionProfitDefaultTypeInternal() {}
  union {
    AccountPositionProfit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountPositionProfitDefaultTypeInternal _AccountPositionProfit_default_instance_;

inline constexpr AccountPosition::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        account_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        contract_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        market_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        trade_date_{nullptr},
        average_open_price_{nullptr},
        total_open_price_{nullptr},
        total_buy_fill_price_{nullptr},
        total_sell_fill_price_{nullptr},
        day_total_buy_fill_price_{nullptr},
        day_total_sell_fill_price_{nullptr},
        total_overnight_price_{nullptr},
        margin_time_{nullptr},
        alerting_time_{nullptr},
        buys_{0},
        sells_{0},
        working_buys_{0},
        working_sells_{0},
        rpl_{0},
        overnight_upl_{0},
        margin_{0},
        mp_{0},
        currency_rate_{0},
        overnight_position_{0},
        total_open_volume_{0},
        premium_{0},
        fees_and_commissions_{0},
        long_mp_{0},
        short_mp_{0},
        prev_margin_{0},
        prev_rpl_{0},
        prev_position_{0},
        day_buys_{0},
        prev_upl_{0},
        day_sells_{0},
        risk_status_{static_cast< ::t4proto::v1::common::ContractRiskStatus >(0)},
        alerting_margin_{0},
        day_margin_{0},
        full_margin_{0},
        pre_trade_margin_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AccountPosition::AccountPosition(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AccountPosition_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AccountPositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountPositionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountPositionDefaultTypeInternal() {}
  union {
    AccountPosition _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountPositionDefaultTypeInternal _AccountPosition_default_instance_;

inline constexpr AccountSnapshotMessage::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR AccountSnapshotMessage::AccountSnapshotMessage(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AccountSnapshotMessage_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AccountSnapshotMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountSnapshotMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountSnapshotMessageDefaultTypeInternal() {}
  union {
    AccountSnapshotMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountSnapshotMessageDefaultTypeInternal _AccountSnapshotMessage_default_instance_;

inline constexpr AccountSnapshot::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        messages_{},
        account_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        last_update_requested_{::int64_t{0}},
        last_update_supplied_{::int64_t{0}},
        status_{static_cast< ::t4proto::v1::common::AccountStatus >(0)},
        due_to_connection_{false} {}

template <typename>
PROTOBUF_CONSTEXPR AccountSnapshot::AccountSnapshot(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(AccountSnapshot_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AccountSnapshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccountSnapshotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccountSnapshotDefaultTypeInternal() {}
  union {
    AccountSnapshot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccountSnapshotDefaultTypeInternal _AccountSnapshot_default_instance_;
}  // namespace account
}  // namespace v1
}  // namespace t4proto
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_t4_2fv1_2faccount_2faccount_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_t4_2fv1_2faccount_2faccount_2eproto = nullptr;
const ::uint32_t
    TableStruct_t4_2fv1_2faccount_2faccount_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountSubscribe, _impl_._has_bits_),
        7, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountSubscribe, _impl_.subscribe_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountSubscribe, _impl_.subscribe_all_accounts_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountSubscribe, _impl_.account_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountSubscribe, _impl_.upl_mode_),
        0,
        1,
        ~0u,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountSubscribeResponse, _impl_._has_bits_),
        5, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountSubscribeResponse, _impl_.success_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountSubscribeResponse, _impl_.errors_),
        0,
        ~0u,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountCurrency, _impl_._has_bits_),
        6, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountCurrency, _impl_.currency_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountCurrency, _impl_.rate_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountCurrency, _impl_.import_factor_),
        0,
        1,
        2,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_._has_bits_),
        43, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.account_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.exchange_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.contract_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.market_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.buys_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.sells_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.working_buys_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.working_sells_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.rpl_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.overnight_upl_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.margin_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.mp_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.overnight_position_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.currency_rate_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.trade_date_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.premium_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.total_open_volume_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.fees_and_commissions_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.long_mp_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.short_mp_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.prev_position_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.prev_margin_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.prev_rpl_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.prev_upl_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.day_buys_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.day_sells_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.average_open_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.total_open_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.total_buy_fill_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.total_sell_fill_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.day_total_buy_fill_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.day_total_sell_fill_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.total_overnight_price_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.risk_status_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.margin_time_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.alerting_margin_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.alerting_time_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.day_margin_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.full_margin_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPosition, _impl_.pre_trade_margin_),
        0,
        1,
        2,
        3,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        22,
        4,
        25,
        24,
        26,
        27,
        28,
        31,
        29,
        30,
        33,
        32,
        34,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        35,
        12,
        36,
        13,
        37,
        38,
        39,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_._has_bits_),
        28, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.account_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.balance_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.rpl_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.overnight_upl_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.margin_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.day_margin_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.full_margin_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.base_margin_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.alerting_margin_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.pre_trade_margin_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.mp_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.premium_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.long_mp_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.short_mp_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.fees_and_commissions_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.prev_margin_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.imported_net_liq_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.imported_net_liq_date_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.prev_imported_net_liq_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.prev_imported_net_liq_date_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.filled_delta_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.working_delta_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.margin_time_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountUpdate, _impl_.alerting_time_),
        0,
        24,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        1,
        21,
        2,
        22,
        23,
        3,
        4,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_._has_bits_),
        39, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.account_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.account_name_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.account_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.enabled_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.deleted_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.max_clip_size_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.pre_trade_disabled_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.position_rollover_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.pl_rollover_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.firm_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.min_balance_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.margin_pc_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.loss_limit_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.loss_limit_pc_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.overnight_margin_pc_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.order_routing_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.active_time_start_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.active_time_stop_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.warning_threshold_pl_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.warning_threshold_loss_limit_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.warning_threshold_margin_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.firm_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.mode_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.max_account_position_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.day_loss_limit_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.display_name_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.wide_market_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.use_pl_for_margin_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.margin_type_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.risk_details_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.price_banding_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.day_loss_limit_pc_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.options_settlement_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.group_name_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.use_premium_for_margin_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountDetails, _impl_.warning_threshold_min_net_equity_),
        0,
        1,
        2,
        10,
        12,
        11,
        13,
        14,
        15,
        3,
        17,
        16,
        18,
        19,
        20,
        28,
        4,
        5,
        21,
        22,
        23,
        6,
        24,
        26,
        25,
        7,
        27,
        29,
        32,
        8,
        33,
        34,
        30,
        9,
        31,
        35,
        0x004, // bitmap
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountSnapshotMessage, _impl_._oneof_case_[0]),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountSnapshotMessage, _impl_.payload_),
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountSnapshot, _impl_._has_bits_),
        9, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountSnapshot, _impl_.account_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountSnapshot, _impl_.last_update_requested_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountSnapshot, _impl_.last_update_supplied_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountSnapshot, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountSnapshot, _impl_.due_to_connection_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountSnapshot, _impl_.messages_),
        0,
        1,
        2,
        3,
        4,
        ~0u,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountProfit, _impl_._has_bits_),
        18, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountProfit, _impl_.account_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountProfit, _impl_.update_time_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountProfit, _impl_.upl_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountProfit, _impl_.upl_trade_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountProfit, _impl_.rpl_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountProfit, _impl_.day_upl_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountProfit, _impl_.day_upl_trade_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountProfit, _impl_.day_rpl_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountProfit, _impl_.warning_pl_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountProfit, _impl_.warning_loss_limit_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountProfit, _impl_.warning_margin_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountProfit, _impl_.total_working_orders_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountProfit, _impl_.total_working_volume_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountProfit, _impl_.is_alerting_live_margin_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountProfit, _impl_.is_alerting_full_margin_),
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        0x081, // bitmap
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_._has_bits_),
        26, // hasbit index offset
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.account_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.exchange_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.contract_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.market_id_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.delayed_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.update_time_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.is_options_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.has_data_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.is_implied_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.net_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.upl_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.upl_trade_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.rpl_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.upl_usd_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.upl_trade_usd_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.rpl_usd_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.day_net_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.day_rpl_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.day_rpl_usd_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.day_upl_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.day_upl_trade_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.day_upl_usd_),
        PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountPositionProfit, _impl_.day_upl_trade_usd_),
        0,
        1,
        2,
        3,
        19,
        4,
        20,
        21,
        22,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, sizeof(::t4proto::v1::account::AccountSubscribe)},
        {11, sizeof(::t4proto::v1::account::AccountSubscribeResponse)},
        {18, sizeof(::t4proto::v1::account::AccountCurrency)},
        {27, sizeof(::t4proto::v1::account::AccountPosition)},
        {110, sizeof(::t4proto::v1::account::AccountUpdate)},
        {163, sizeof(::t4proto::v1::account::AccountDetails)},
        {238, sizeof(::t4proto::v1::account::AccountSnapshotMessage)},
        {247, sizeof(::t4proto::v1::account::AccountSnapshot)},
        {262, sizeof(::t4proto::v1::account::AccountProfit)},
        {295, sizeof(::t4proto::v1::account::AccountPositionProfit)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::t4proto::v1::account::_AccountSubscribe_default_instance_._instance,
    &::t4proto::v1::account::_AccountSubscribeResponse_default_instance_._instance,
    &::t4proto::v1::account::_AccountCurrency_default_instance_._instance,
    &::t4proto::v1::account::_AccountPosition_default_instance_._instance,
    &::t4proto::v1::account::_AccountUpdate_default_instance_._instance,
    &::t4proto::v1::account::_AccountDetails_default_instance_._instance,
    &::t4proto::v1::account::_AccountSnapshotMessage_default_instance_._instance,
    &::t4proto::v1::account::_AccountSnapshot_default_instance_._instance,
    &::t4proto::v1::account::_AccountProfit_default_instance_._instance,
    &::t4proto::v1::account::_AccountPositionProfit_default_instance_._instance,
};
const char descriptor_table_protodef_t4_2fv1_2faccount_2faccount_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\033t4/v1/account/account.proto\022\022t4proto.v"
    "1.account\032\037google/protobuf/timestamp.pro"
    "to\032\030t4/v1/common/enums.proto\032\030t4/v1/comm"
    "on/price.proto\032\031t4/v1/market/market.prot"
    "o\032%t4/v1/orderrouting/orderrouting.proto"
    "\"\302\001\n\020AccountSubscribe\022:\n\tsubscribe\030\001 \001(\016"
    "2\'.t4proto.v1.common.AccountSubscribeTyp"
    "e\022\036\n\026subscribe_all_accounts\030\002 \001(\010\022\022\n\nacc"
    "ount_id\030\003 \003(\t\0221\n\010upl_mode\030\004 \001(\0162\032.t4prot"
    "o.v1.common.UPLModeH\000\210\001\001B\013\n\t_upl_mode\";\n"
    "\030AccountSubscribeResponse\022\017\n\007success\030\001 \001"
    "(\010\022\016\n\006errors\030\002 \003(\t\"H\n\017AccountCurrency\022\020\n"
    "\010currency\030\001 \001(\t\022\014\n\004rate\030\002 \001(\001\022\025\n\rimport_"
    "factor\030\003 \001(\001\"\221\013\n\017AccountPosition\022\022\n\nacco"
    "unt_id\030\001 \001(\t\022\023\n\013exchange_id\030\002 \001(\t\022\023\n\013con"
    "tract_id\030\003 \001(\t\022\021\n\tmarket_id\030\004 \001(\t\022\014\n\004buy"
    "s\030\005 \001(\005\022\r\n\005sells\030\006 \001(\005\022\024\n\014working_buys\030\007"
    " \001(\005\022\025\n\rworking_sells\030\010 \001(\005\022\013\n\003rpl\030\t \001(\001"
    "\022\025\n\rovernight_upl\030\n \001(\001\022\016\n\006margin\030\013 \001(\001\022"
    "\n\n\002mp\030\014 \001(\001\022\032\n\022overnight_position\030\r \001(\005\022"
    "\025\n\rcurrency_rate\030\016 \001(\001\022.\n\ntrade_date\030\017 \001"
    "(\0132\032.google.protobuf.Timestamp\022\017\n\007premiu"
    "m\030\020 \001(\001\022\031\n\021total_open_volume\030\021 \001(\005\022\034\n\024fe"
    "es_and_commissions\030\022 \001(\001\022\017\n\007long_mp\030\023 \001("
    "\001\022\020\n\010short_mp\030\024 \001(\001\022\025\n\rprev_position\030\025 \001"
    "(\005\022\023\n\013prev_margin\030\026 \001(\001\022\020\n\010prev_rpl\030\027 \001("
    "\001\022\020\n\010prev_upl\030\030 \001(\001\022\020\n\010day_buys\030\031 \001(\005\022\021\n"
    "\tday_sells\030\032 \001(\005\0229\n\022average_open_price\030\033"
    " \001(\0132\030.t4proto.v1.common.PriceH\000\210\001\001\0227\n\020t"
    "otal_open_price\030\034 \001(\0132\030.t4proto.v1.commo"
    "n.PriceH\001\210\001\001\022;\n\024total_buy_fill_price\030\035 \001"
    "(\0132\030.t4proto.v1.common.PriceH\002\210\001\001\022<\n\025tot"
    "al_sell_fill_price\030\036 \001(\0132\030.t4proto.v1.co"
    "mmon.PriceH\003\210\001\001\022\?\n\030day_total_buy_fill_pr"
    "ice\030\037 \001(\0132\030.t4proto.v1.common.PriceH\004\210\001\001"
    "\022@\n\031day_total_sell_fill_price\030  \001(\0132\030.t4"
    "proto.v1.common.PriceH\005\210\001\001\022<\n\025total_over"
    "night_price\030! \001(\0132\030.t4proto.v1.common.Pr"
    "iceH\006\210\001\001\022:\n\013risk_status\030\" \001(\0162%.t4proto."
    "v1.common.ContractRiskStatus\022/\n\013margin_t"
    "ime\030# \001(\0132\032.google.protobuf.Timestamp\022\027\n"
    "\017alerting_margin\030$ \001(\001\0221\n\ralerting_time\030"
    "% \001(\0132\032.google.protobuf.Timestamp\022\022\n\nday"
    "_margin\030& \001(\001\022\023\n\013full_margin\030\' \001(\001\022\030\n\020pr"
    "e_trade_margin\030( \001(\001B\025\n\023_average_open_pr"
    "iceB\023\n\021_total_open_priceB\027\n\025_total_buy_f"
    "ill_priceB\030\n\026_total_sell_fill_priceB\033\n\031_"
    "day_total_buy_fill_priceB\034\n\032_day_total_s"
    "ell_fill_priceB\030\n\026_total_overnight_price"
    "\"\303\005\n\rAccountUpdate\022\022\n\naccount_id\030\001 \001(\t\0220"
    "\n\006status\030\002 \001(\0162 .t4proto.v1.common.Accou"
    "ntStatus\022\017\n\007balance\030\003 \001(\001\022\013\n\003rpl\030\004 \001(\001\022\025"
    "\n\rovernight_upl\030\005 \001(\001\022\016\n\006margin\030\006 \001(\001\022\022\n"
    "\nday_margin\030\007 \001(\001\022\023\n\013full_margin\030\010 \001(\001\022\023"
    "\n\013base_margin\030\t \001(\001\022\027\n\017alerting_margin\030\n"
    " \001(\001\022\030\n\020pre_trade_margin\030\013 \001(\001\022\n\n\002mp\030\014 \001"
    "(\001\022\017\n\007premium\030\r \001(\001\022\017\n\007long_mp\030\016 \001(\001\022\020\n\010"
    "short_mp\030\017 \001(\001\022\034\n\024fees_and_commissions\030\020"
    " \001(\001\022\023\n\013prev_margin\030\021 \001(\001\022\030\n\020imported_ne"
    "t_liq\030\022 \001(\001\0229\n\025imported_net_liq_date\030\023 \001"
    "(\0132\032.google.protobuf.Timestamp\022\035\n\025prev_i"
    "mported_net_liq\030\024 \001(\001\022>\n\032prev_imported_n"
    "et_liq_date\030\025 \001(\0132\032.google.protobuf.Time"
    "stamp\022\024\n\014filled_delta\030\026 \001(\001\022\025\n\rworking_d"
    "elta\030\027 \001(\001\022/\n\013margin_time\030\030 \001(\0132\032.google"
    ".protobuf.Timestamp\0221\n\ralerting_time\030\031 \001"
    "(\0132\032.google.protobuf.Timestamp\"\333\007\n\016Accou"
    "ntDetails\022\022\n\naccount_id\030\001 \001(\t\022\024\n\014account"
    "_name\030\002 \001(\t\022\017\n\007account\030\003 \001(\t\0222\n\007enabled\030"
    "\004 \001(\0162!.t4proto.v1.common.AccountEnabled"
    "\022\017\n\007deleted\030\005 \001(\010\022\025\n\rmax_clip_size\030\006 \001(\005"
    "\022\032\n\022pre_trade_disabled\030\007 \001(\010\022\031\n\021position"
    "_rollover\030\010 \001(\010\022\023\n\013pl_rollover\030\t \001(\010\022\017\n\007"
    "firm_id\030\n \001(\t\022\023\n\013min_balance\030\013 \001(\001\022\021\n\tma"
    "rgin_pc\030\014 \001(\005\022\022\n\nloss_limit\030\r \001(\001\022\025\n\rlos"
    "s_limit_pc\030\016 \001(\005\022\033\n\023overnight_margin_pc\030"
    "\017 \001(\005\022\025\n\rorder_routing\030\020 \001(\010\022\031\n\021active_t"
    "ime_start\030\021 \001(\t\022\030\n\020active_time_stop\030\022 \001("
    "\t\022\034\n\024warning_threshold_pl\030\023 \001(\005\022$\n\034warni"
    "ng_threshold_loss_limit\030\024 \001(\005\022 \n\030warning"
    "_threshold_margin\030\025 \001(\005\022\014\n\004firm\030\026 \001(\t\022,\n"
    "\004mode\030\027 \001(\0162\036.t4proto.v1.common.AccountM"
    "ode\022\034\n\024max_account_position\030\030 \001(\005\022\026\n\016day"
    "_loss_limit\030\031 \001(\001\022\024\n\014display_name\030\032 \001(\t\022"
    "\023\n\013wide_market\030\033 \001(\005\022\031\n\021use_pl_for_margi"
    "n\030\034 \001(\010\0229\n\013margin_type\030\035 \001(\0162$.t4proto.v"
    "1.common.AccountMarginType\022\024\n\014risk_detai"
    "ls\030\036 \001(\t\022\025\n\rprice_banding\030\037 \001(\005\022\031\n\021day_l"
    "oss_limit_pc\030  \001(\005\022\032\n\022options_settlement"
    "\030! \001(\010\022\022\n\ngroup_name\030\" \001(\t\022\036\n\026use_premiu"
    "m_for_margin\030# \001(\010\022(\n warning_threshold_"
    "min_net_equity\030$ \001(\001\"\246\003\n\026AccountSnapshot"
    "Message\022\?\n\020account_position\030\003 \001(\0132#.t4pr"
    "oto.v1.account.AccountPositionH\000\022;\n\016acco"
    "unt_update\030\004 \001(\0132!.t4proto.v1.account.Ac"
    "countUpdateH\000\022=\n\017account_details\030\005 \001(\0132\""
    ".t4proto.v1.account.AccountDetailsH\000\022\?\n\020"
    "account_currency\030\006 \001(\0132#.t4proto.v1.acco"
    "unt.AccountCurrencyH\000\022:\n\016market_details\030"
    "\007 \001(\0132 .t4proto.v1.market.MarketDetailsH"
    "\000\022G\n\022order_update_multi\030\010 \001(\0132).t4proto."
    "v1.orderrouting.OrderUpdateMultiH\000B\t\n\007pa"
    "yload\"\355\001\n\017AccountSnapshot\022\022\n\naccount_id\030"
    "\001 \001(\t\022\035\n\025last_update_requested\030\002 \001(\003\022\034\n\024"
    "last_update_supplied\030\003 \001(\003\0220\n\006status\030\004 \001"
    "(\0162 .t4proto.v1.common.AccountStatus\022\031\n\021"
    "due_to_connection\030\005 \001(\010\022<\n\010messages\030\006 \003("
    "\0132*.t4proto.v1.account.AccountSnapshotMe"
    "ssage\"\254\005\n\rAccountProfit\022\022\n\naccount_id\030\001 "
    "\001(\t\022/\n\013update_time\030\002 \001(\0132\032.google.protob"
    "uf.Timestamp\022\020\n\003upl\030\003 \001(\001H\000\210\001\001\022\026\n\tupl_tr"
    "ade\030\004 \001(\001H\001\210\001\001\022\020\n\003rpl\030\005 \001(\001H\002\210\001\001\022\024\n\007day_"
    "upl\030\006 \001(\001H\003\210\001\001\022\032\n\rday_upl_trade\030\007 \001(\001H\004\210"
    "\001\001\022\024\n\007day_rpl\030\010 \001(\001H\005\210\001\001\022\027\n\nwarning_pl\030\t"
    " \001(\005H\006\210\001\001\022\037\n\022warning_loss_limit\030\n \001(\005H\007\210"
    "\001\001\022\033\n\016warning_margin\030\013 \001(\005H\010\210\001\001\022!\n\024total"
    "_working_orders\030\014 \001(\005H\t\210\001\001\022!\n\024total_work"
    "ing_volume\030\r \001(\005H\n\210\001\001\022$\n\027is_alerting_liv"
    "e_margin\030\016 \001(\010H\013\210\001\001\022$\n\027is_alerting_full_"
    "margin\030\017 \001(\010H\014\210\001\001B\006\n\004_uplB\014\n\n_upl_tradeB"
    "\006\n\004_rplB\n\n\010_day_uplB\020\n\016_day_upl_tradeB\n\n"
    "\010_day_rplB\r\n\013_warning_plB\025\n\023_warning_los"
    "s_limitB\021\n\017_warning_marginB\027\n\025_total_wor"
    "king_ordersB\027\n\025_total_working_volumeB\032\n\030"
    "_is_alerting_live_marginB\032\n\030_is_alerting"
    "_full_margin\"\350\005\n\025AccountPositionProfit\022\022"
    "\n\naccount_id\030\001 \001(\t\022\023\n\013exchange_id\030\002 \001(\t\022"
    "\023\n\013contract_id\030\003 \001(\t\022\021\n\tmarket_id\030\004 \001(\t\022"
    "\017\n\007delayed\030\005 \001(\010\022/\n\013update_time\030\006 \001(\0132\032."
    "google.protobuf.Timestamp\022\022\n\nis_options\030"
    "\007 \001(\010\022\020\n\010has_data\030\010 \001(\010\022\022\n\nis_implied\030\t "
    "\001(\010\022\020\n\003net\030\n \001(\001H\000\210\001\001\022\020\n\003upl\030\013 \001(\001H\001\210\001\001\022"
    "\026\n\tupl_trade\030\014 \001(\001H\002\210\001\001\022\020\n\003rpl\030\r \001(\001H\003\210\001"
    "\001\022\024\n\007upl_usd\030\016 \001(\001H\004\210\001\001\022\032\n\rupl_trade_usd"
    "\030\017 \001(\001H\005\210\001\001\022\024\n\007rpl_usd\030\020 \001(\001H\006\210\001\001\022\024\n\007day"
    "_net\030\021 \001(\001H\007\210\001\001\022\024\n\007day_rpl\030\022 \001(\001H\010\210\001\001\022\030\n"
    "\013day_rpl_usd\030\023 \001(\001H\t\210\001\001\022\024\n\007day_upl\030\024 \001(\001"
    "H\n\210\001\001\022\032\n\rday_upl_trade\030\025 \001(\001H\013\210\001\001\022\030\n\013day"
    "_upl_usd\030\026 \001(\001H\014\210\001\001\022\036\n\021day_upl_trade_usd"
    "\030\027 \001(\001H\r\210\001\001B\006\n\004_netB\006\n\004_uplB\014\n\n_upl_trad"
    "eB\006\n\004_rplB\n\n\010_upl_usdB\020\n\016_upl_trade_usdB"
    "\n\n\010_rpl_usdB\n\n\010_day_netB\n\n\010_day_rplB\016\n\014_"
    "day_rpl_usdB\n\n\010_day_uplB\020\n\016_day_upl_trad"
    "eB\016\n\014_day_upl_usdB\024\n\022_day_upl_trade_usdb"
    "\006proto3"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_t4_2fv1_2faccount_2faccount_2eproto_deps[5] = {
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
        &::descriptor_table_t4_2fv1_2fcommon_2fenums_2eproto,
        &::descriptor_table_t4_2fv1_2fcommon_2fprice_2eproto,
        &::descriptor_table_t4_2fv1_2fmarket_2fmarket_2eproto,
        &::descriptor_table_t4_2fv1_2forderrouting_2forderrouting_2eproto,
};
static ::absl::once_flag descriptor_table_t4_2fv1_2faccount_2faccount_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_t4_2fv1_2faccount_2faccount_2eproto = {
    false,
    false,
    5767,
    descriptor_table_protodef_t4_2fv1_2faccount_2faccount_2eproto,
    "t4/v1/account/account.proto",
    &descriptor_table_t4_2fv1_2faccount_2faccount_2eproto_once,
    descriptor_table_t4_2fv1_2faccount_2faccount_2eproto_deps,
    5,
    10,
    schemas,
    file_default_instances,
    TableStruct_t4_2fv1_2faccount_2faccount_2eproto::offsets,
    file_level_enum_descriptors_t4_2fv1_2faccount_2faccount_2eproto,
    file_level_service_descriptors_t4_2fv1_2faccount_2faccount_2eproto,
};
namespace t4proto {
namespace v1 {
namespace account {
// ===================================================================

class AccountSubscribe::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AccountSubscribe>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AccountSubscribe, _impl_._has_bits_);
};

AccountSubscribe::AccountSubscribe(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AccountSubscribe_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.account.AccountSubscribe)
}
PROTOBUF_NDEBUG_INLINE AccountSubscribe::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::t4proto::v1::account::AccountSubscribe& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        account_id_{visibility, arena, from.account_id_} {}

AccountSubscribe::AccountSubscribe(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AccountSubscribe& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AccountSubscribe_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AccountSubscribe* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, subscribe_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, subscribe_),
           offsetof(Impl_, upl_mode_) -
               offsetof(Impl_, subscribe_) +
               sizeof(Impl_::upl_mode_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.account.AccountSubscribe)
}
PROTOBUF_NDEBUG_INLINE AccountSubscribe::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        account_id_{visibility, arena} {}

inline void AccountSubscribe::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, subscribe_),
           0,
           offsetof(Impl_, upl_mode_) -
               offsetof(Impl_, subscribe_) +
               sizeof(Impl_::upl_mode_));
}
AccountSubscribe::~AccountSubscribe() {
  // @@protoc_insertion_point(destructor:t4proto.v1.account.AccountSubscribe)
  SharedDtor(*this);
}
inline void AccountSubscribe::SharedDtor(MessageLite& self) {
  AccountSubscribe& this_ = static_cast<AccountSubscribe&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AccountSubscribe::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AccountSubscribe(arena);
}
constexpr auto AccountSubscribe::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AccountSubscribe, _impl_.account_id_) +
          decltype(AccountSubscribe::_impl_.account_id_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(AccountSubscribe), alignof(AccountSubscribe), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AccountSubscribe::PlacementNew_,
                                 sizeof(AccountSubscribe),
                                 alignof(AccountSubscribe));
  }
}
constexpr auto AccountSubscribe::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AccountSubscribe_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AccountSubscribe::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AccountSubscribe>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AccountSubscribe::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AccountSubscribe>(), &AccountSubscribe::ByteSizeLong,
              &AccountSubscribe::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AccountSubscribe, _impl_._cached_size_),
          false,
      },
      &AccountSubscribe::kDescriptorMethods,
      &descriptor_table_t4_2fv1_2faccount_2faccount_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AccountSubscribe_class_data_ =
        AccountSubscribe::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AccountSubscribe::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AccountSubscribe_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AccountSubscribe_class_data_.tc_table);
  return AccountSubscribe_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 54, 2>
AccountSubscribe::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AccountSubscribe, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    AccountSubscribe_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::account::AccountSubscribe>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .t4proto.v1.common.UPLMode upl_mode = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AccountSubscribe, _impl_.upl_mode_), 2>(),
     {32, 2, 0, PROTOBUF_FIELD_OFFSET(AccountSubscribe, _impl_.upl_mode_)}},
    // .t4proto.v1.common.AccountSubscribeType subscribe = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AccountSubscribe, _impl_.subscribe_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(AccountSubscribe, _impl_.subscribe_)}},
    // bool subscribe_all_accounts = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AccountSubscribe, _impl_.subscribe_all_accounts_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(AccountSubscribe, _impl_.subscribe_all_accounts_)}},
    // repeated string account_id = 3;
    {::_pbi::TcParser::FastUR1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AccountSubscribe, _impl_.account_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .t4proto.v1.common.AccountSubscribeType subscribe = 1;
    {PROTOBUF_FIELD_OFFSET(AccountSubscribe, _impl_.subscribe_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // bool subscribe_all_accounts = 2;
    {PROTOBUF_FIELD_OFFSET(AccountSubscribe, _impl_.subscribe_all_accounts_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // repeated string account_id = 3;
    {PROTOBUF_FIELD_OFFSET(AccountSubscribe, _impl_.account_id_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // optional .t4proto.v1.common.UPLMode upl_mode = 4;
    {PROTOBUF_FIELD_OFFSET(AccountSubscribe, _impl_.upl_mode_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\43\0\0\12\0\0\0\0"
    "t4proto.v1.account.AccountSubscribe"
    "account_id"
  }},
};
PROTOBUF_NOINLINE void AccountSubscribe::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.account.AccountSubscribe)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_id_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    ::memset(&_impl_.subscribe_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.upl_mode_) -
        reinterpret_cast<char*>(&_impl_.subscribe_)) + sizeof(_impl_.upl_mode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AccountSubscribe::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AccountSubscribe& this_ = static_cast<const AccountSubscribe&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AccountSubscribe::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AccountSubscribe& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.account.AccountSubscribe)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // .t4proto.v1.common.AccountSubscribeType subscribe = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_subscribe() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          1, this_._internal_subscribe(), target);
    }
  }

  // bool subscribe_all_accounts = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_subscribe_all_accounts() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          2, this_._internal_subscribe_all_accounts(), target);
    }
  }

  // repeated string account_id = 3;
  for (int i = 0, n = this_._internal_account_id_size(); i < n; ++i) {
    const auto& s = this_._internal_account_id().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountSubscribe.account_id");
    target = stream->WriteString(3, s, target);
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional .t4proto.v1.common.UPLMode upl_mode = 4;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this_._internal_upl_mode(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.account.AccountSubscribe)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AccountSubscribe::ByteSizeLong(const MessageLite& base) {
  const AccountSubscribe& this_ = static_cast<const AccountSubscribe&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AccountSubscribe::ByteSizeLong() const {
  const AccountSubscribe& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.account.AccountSubscribe)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string account_id = 3;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_account_id().size());
      for (int i = 0, n = this_._internal_account_id().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_account_id().Get(i));
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // .t4proto.v1.common.AccountSubscribeType subscribe = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_subscribe() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_subscribe());
      }
    }
    // bool subscribe_all_accounts = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_subscribe_all_accounts() != 0) {
        total_size += 2;
      }
    }
    // optional .t4proto.v1.common.UPLMode upl_mode = 4;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_upl_mode());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AccountSubscribe::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AccountSubscribe*>(&to_msg);
  auto& from = static_cast<const AccountSubscribe&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.account.AccountSubscribe)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_account_id()->MergeFrom(from._internal_account_id());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_subscribe() != 0) {
        _this->_impl_.subscribe_ = from._impl_.subscribe_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_subscribe_all_accounts() != 0) {
        _this->_impl_.subscribe_all_accounts_ = from._impl_.subscribe_all_accounts_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.upl_mode_ = from._impl_.upl_mode_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AccountSubscribe::CopyFrom(const AccountSubscribe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.account.AccountSubscribe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AccountSubscribe::InternalSwap(AccountSubscribe* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.account_id_.InternalSwap(&other->_impl_.account_id_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountSubscribe, _impl_.upl_mode_)
      + sizeof(AccountSubscribe::_impl_.upl_mode_)
      - PROTOBUF_FIELD_OFFSET(AccountSubscribe, _impl_.subscribe_)>(
          reinterpret_cast<char*>(&_impl_.subscribe_),
          reinterpret_cast<char*>(&other->_impl_.subscribe_));
}

::google::protobuf::Metadata AccountSubscribe::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AccountSubscribeResponse::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AccountSubscribeResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AccountSubscribeResponse, _impl_._has_bits_);
};

AccountSubscribeResponse::AccountSubscribeResponse(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AccountSubscribeResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.account.AccountSubscribeResponse)
}
PROTOBUF_NDEBUG_INLINE AccountSubscribeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::t4proto::v1::account::AccountSubscribeResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        errors_{visibility, arena, from.errors_} {}

AccountSubscribeResponse::AccountSubscribeResponse(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AccountSubscribeResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AccountSubscribeResponse_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AccountSubscribeResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.success_ = from._impl_.success_;

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.account.AccountSubscribeResponse)
}
PROTOBUF_NDEBUG_INLINE AccountSubscribeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        errors_{visibility, arena} {}

inline void AccountSubscribeResponse::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.success_ = {};
}
AccountSubscribeResponse::~AccountSubscribeResponse() {
  // @@protoc_insertion_point(destructor:t4proto.v1.account.AccountSubscribeResponse)
  SharedDtor(*this);
}
inline void AccountSubscribeResponse::SharedDtor(MessageLite& self) {
  AccountSubscribeResponse& this_ = static_cast<AccountSubscribeResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AccountSubscribeResponse::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AccountSubscribeResponse(arena);
}
constexpr auto AccountSubscribeResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AccountSubscribeResponse, _impl_.errors_) +
          decltype(AccountSubscribeResponse::_impl_.errors_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(AccountSubscribeResponse), alignof(AccountSubscribeResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AccountSubscribeResponse::PlacementNew_,
                                 sizeof(AccountSubscribeResponse),
                                 alignof(AccountSubscribeResponse));
  }
}
constexpr auto AccountSubscribeResponse::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AccountSubscribeResponse_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AccountSubscribeResponse::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AccountSubscribeResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AccountSubscribeResponse::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AccountSubscribeResponse>(), &AccountSubscribeResponse::ByteSizeLong,
              &AccountSubscribeResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AccountSubscribeResponse, _impl_._cached_size_),
          false,
      },
      &AccountSubscribeResponse::kDescriptorMethods,
      &descriptor_table_t4_2fv1_2faccount_2faccount_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AccountSubscribeResponse_class_data_ =
        AccountSubscribeResponse::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AccountSubscribeResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AccountSubscribeResponse_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AccountSubscribeResponse_class_data_.tc_table);
  return AccountSubscribeResponse_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 58, 2>
AccountSubscribeResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AccountSubscribeResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    AccountSubscribeResponse_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::account::AccountSubscribeResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string errors = 2;
    {::_pbi::TcParser::FastUR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AccountSubscribeResponse, _impl_.errors_)}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AccountSubscribeResponse, _impl_.success_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(AccountSubscribeResponse, _impl_.success_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(AccountSubscribeResponse, _impl_.success_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // repeated string errors = 2;
    {PROTOBUF_FIELD_OFFSET(AccountSubscribeResponse, _impl_.errors_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\53\0\6\0\0\0\0\0"
    "t4proto.v1.account.AccountSubscribeResponse"
    "errors"
  }},
};
PROTOBUF_NOINLINE void AccountSubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.account.AccountSubscribeResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.errors_.Clear();
  _impl_.success_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AccountSubscribeResponse::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AccountSubscribeResponse& this_ = static_cast<const AccountSubscribeResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AccountSubscribeResponse::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AccountSubscribeResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.account.AccountSubscribeResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bool success = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (this_._internal_success() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          1, this_._internal_success(), target);
    }
  }

  // repeated string errors = 2;
  for (int i = 0, n = this_._internal_errors_size(); i < n; ++i) {
    const auto& s = this_._internal_errors().Get(i);
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountSubscribeResponse.errors");
    target = stream->WriteString(2, s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.account.AccountSubscribeResponse)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AccountSubscribeResponse::ByteSizeLong(const MessageLite& base) {
  const AccountSubscribeResponse& this_ = static_cast<const AccountSubscribeResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AccountSubscribeResponse::ByteSizeLong() const {
  const AccountSubscribeResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.account.AccountSubscribeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated string errors = 2;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_errors().size());
      for (int i = 0, n = this_._internal_errors().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_errors().Get(i));
      }
    }
  }
   {
    // bool success = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_success() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AccountSubscribeResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AccountSubscribeResponse*>(&to_msg);
  auto& from = static_cast<const AccountSubscribeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.account.AccountSubscribeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_errors()->MergeFrom(from._internal_errors());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    if (from._internal_success() != 0) {
      _this->_impl_.success_ = from._impl_.success_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AccountSubscribeResponse::CopyFrom(const AccountSubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.account.AccountSubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AccountSubscribeResponse::InternalSwap(AccountSubscribeResponse* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.errors_.InternalSwap(&other->_impl_.errors_);
  swap(_impl_.success_, other->_impl_.success_);
}

::google::protobuf::Metadata AccountSubscribeResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AccountCurrency::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AccountCurrency>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AccountCurrency, _impl_._has_bits_);
};

AccountCurrency::AccountCurrency(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AccountCurrency_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.account.AccountCurrency)
}
PROTOBUF_NDEBUG_INLINE AccountCurrency::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::t4proto::v1::account::AccountCurrency& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        currency_(arena, from.currency_) {}

AccountCurrency::AccountCurrency(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AccountCurrency& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AccountCurrency_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AccountCurrency* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, rate_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, rate_),
           offsetof(Impl_, import_factor_) -
               offsetof(Impl_, rate_) +
               sizeof(Impl_::import_factor_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.account.AccountCurrency)
}
PROTOBUF_NDEBUG_INLINE AccountCurrency::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        currency_(arena) {}

inline void AccountCurrency::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, rate_),
           0,
           offsetof(Impl_, import_factor_) -
               offsetof(Impl_, rate_) +
               sizeof(Impl_::import_factor_));
}
AccountCurrency::~AccountCurrency() {
  // @@protoc_insertion_point(destructor:t4proto.v1.account.AccountCurrency)
  SharedDtor(*this);
}
inline void AccountCurrency::SharedDtor(MessageLite& self) {
  AccountCurrency& this_ = static_cast<AccountCurrency&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.currency_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AccountCurrency::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AccountCurrency(arena);
}
constexpr auto AccountCurrency::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AccountCurrency),
                                            alignof(AccountCurrency));
}
constexpr auto AccountCurrency::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AccountCurrency_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AccountCurrency::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AccountCurrency>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AccountCurrency::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AccountCurrency>(), &AccountCurrency::ByteSizeLong,
              &AccountCurrency::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AccountCurrency, _impl_._cached_size_),
          false,
      },
      &AccountCurrency::kDescriptorMethods,
      &descriptor_table_t4_2fv1_2faccount_2faccount_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AccountCurrency_class_data_ =
        AccountCurrency::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AccountCurrency::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AccountCurrency_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AccountCurrency_class_data_.tc_table);
  return AccountCurrency_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 51, 2>
AccountCurrency::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AccountCurrency, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    AccountCurrency_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::account::AccountCurrency>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string currency = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AccountCurrency, _impl_.currency_)}},
    // double rate = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 1, 0, PROTOBUF_FIELD_OFFSET(AccountCurrency, _impl_.rate_)}},
    // double import_factor = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(AccountCurrency, _impl_.import_factor_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string currency = 1;
    {PROTOBUF_FIELD_OFFSET(AccountCurrency, _impl_.currency_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double rate = 2;
    {PROTOBUF_FIELD_OFFSET(AccountCurrency, _impl_.rate_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double import_factor = 3;
    {PROTOBUF_FIELD_OFFSET(AccountCurrency, _impl_.import_factor_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\42\10\0\0\0\0\0\0"
    "t4proto.v1.account.AccountCurrency"
    "currency"
  }},
};
PROTOBUF_NOINLINE void AccountCurrency::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.account.AccountCurrency)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.currency_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x00000006u) != 0) {
    ::memset(&_impl_.rate_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.import_factor_) -
        reinterpret_cast<char*>(&_impl_.rate_)) + sizeof(_impl_.import_factor_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AccountCurrency::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AccountCurrency& this_ = static_cast<const AccountCurrency&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AccountCurrency::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AccountCurrency& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.account.AccountCurrency)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string currency = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_currency().empty()) {
      const ::std::string& _s = this_._internal_currency();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountCurrency.currency");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // double rate = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_rate()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          2, this_._internal_rate(), target);
    }
  }

  // double import_factor = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_import_factor()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          3, this_._internal_import_factor(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.account.AccountCurrency)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AccountCurrency::ByteSizeLong(const MessageLite& base) {
  const AccountCurrency& this_ = static_cast<const AccountCurrency&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AccountCurrency::ByteSizeLong() const {
  const AccountCurrency& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.account.AccountCurrency)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // string currency = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_currency().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_currency());
      }
    }
    // double rate = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_rate()) != 0) {
        total_size += 9;
      }
    }
    // double import_factor = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_import_factor()) != 0) {
        total_size += 9;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AccountCurrency::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AccountCurrency*>(&to_msg);
  auto& from = static_cast<const AccountCurrency&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.account.AccountCurrency)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_currency().empty()) {
        _this->_internal_set_currency(from._internal_currency());
      } else {
        if (_this->_impl_.currency_.IsDefault()) {
          _this->_internal_set_currency("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_rate()) != 0) {
        _this->_impl_.rate_ = from._impl_.rate_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_import_factor()) != 0) {
        _this->_impl_.import_factor_ = from._impl_.import_factor_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AccountCurrency::CopyFrom(const AccountCurrency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.account.AccountCurrency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AccountCurrency::InternalSwap(AccountCurrency* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountCurrency, _impl_.import_factor_)
      + sizeof(AccountCurrency::_impl_.import_factor_)
      - PROTOBUF_FIELD_OFFSET(AccountCurrency, _impl_.rate_)>(
          reinterpret_cast<char*>(&_impl_.rate_),
          reinterpret_cast<char*>(&other->_impl_.rate_));
}

::google::protobuf::Metadata AccountCurrency::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AccountPosition::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AccountPosition>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_._has_bits_);
};

void AccountPosition::clear_trade_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.trade_date_ != nullptr) _impl_.trade_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void AccountPosition::clear_average_open_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.average_open_price_ != nullptr) _impl_.average_open_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void AccountPosition::clear_total_open_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.total_open_price_ != nullptr) _impl_.total_open_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void AccountPosition::clear_total_buy_fill_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.total_buy_fill_price_ != nullptr) _impl_.total_buy_fill_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void AccountPosition::clear_total_sell_fill_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.total_sell_fill_price_ != nullptr) _impl_.total_sell_fill_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void AccountPosition::clear_day_total_buy_fill_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.day_total_buy_fill_price_ != nullptr) _impl_.day_total_buy_fill_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void AccountPosition::clear_day_total_sell_fill_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.day_total_sell_fill_price_ != nullptr) _impl_.day_total_sell_fill_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void AccountPosition::clear_total_overnight_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.total_overnight_price_ != nullptr) _impl_.total_overnight_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void AccountPosition::clear_margin_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.margin_time_ != nullptr) _impl_.margin_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void AccountPosition::clear_alerting_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.alerting_time_ != nullptr) _impl_.alerting_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
AccountPosition::AccountPosition(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AccountPosition_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.account.AccountPosition)
}
PROTOBUF_NDEBUG_INLINE AccountPosition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::t4proto::v1::account::AccountPosition& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        account_id_(arena, from.account_id_),
        exchange_id_(arena, from.exchange_id_),
        contract_id_(arena, from.contract_id_),
        market_id_(arena, from.market_id_) {}

AccountPosition::AccountPosition(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AccountPosition& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AccountPosition_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AccountPosition* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.trade_date_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.trade_date_)
                : nullptr;
  _impl_.average_open_price_ = ((cached_has_bits & 0x00000020u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.average_open_price_)
                : nullptr;
  _impl_.total_open_price_ = ((cached_has_bits & 0x00000040u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.total_open_price_)
                : nullptr;
  _impl_.total_buy_fill_price_ = ((cached_has_bits & 0x00000080u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.total_buy_fill_price_)
                : nullptr;
  _impl_.total_sell_fill_price_ = ((cached_has_bits & 0x00000100u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.total_sell_fill_price_)
                : nullptr;
  _impl_.day_total_buy_fill_price_ = ((cached_has_bits & 0x00000200u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.day_total_buy_fill_price_)
                : nullptr;
  _impl_.day_total_sell_fill_price_ = ((cached_has_bits & 0x00000400u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.day_total_sell_fill_price_)
                : nullptr;
  _impl_.total_overnight_price_ = ((cached_has_bits & 0x00000800u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.total_overnight_price_)
                : nullptr;
  _impl_.margin_time_ = ((cached_has_bits & 0x00001000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.margin_time_)
                : nullptr;
  _impl_.alerting_time_ = ((cached_has_bits & 0x00002000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.alerting_time_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, buys_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, buys_),
           offsetof(Impl_, pre_trade_margin_) -
               offsetof(Impl_, buys_) +
               sizeof(Impl_::pre_trade_margin_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.account.AccountPosition)
}
PROTOBUF_NDEBUG_INLINE AccountPosition::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        account_id_(arena),
        exchange_id_(arena),
        contract_id_(arena),
        market_id_(arena) {}

inline void AccountPosition::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, trade_date_),
           0,
           offsetof(Impl_, pre_trade_margin_) -
               offsetof(Impl_, trade_date_) +
               sizeof(Impl_::pre_trade_margin_));
}
AccountPosition::~AccountPosition() {
  // @@protoc_insertion_point(destructor:t4proto.v1.account.AccountPosition)
  SharedDtor(*this);
}
inline void AccountPosition::SharedDtor(MessageLite& self) {
  AccountPosition& this_ = static_cast<AccountPosition&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.account_id_.Destroy();
  this_._impl_.exchange_id_.Destroy();
  this_._impl_.contract_id_.Destroy();
  this_._impl_.market_id_.Destroy();
  delete this_._impl_.trade_date_;
  delete this_._impl_.average_open_price_;
  delete this_._impl_.total_open_price_;
  delete this_._impl_.total_buy_fill_price_;
  delete this_._impl_.total_sell_fill_price_;
  delete this_._impl_.day_total_buy_fill_price_;
  delete this_._impl_.day_total_sell_fill_price_;
  delete this_._impl_.total_overnight_price_;
  delete this_._impl_.margin_time_;
  delete this_._impl_.alerting_time_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AccountPosition::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AccountPosition(arena);
}
constexpr auto AccountPosition::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AccountPosition),
                                            alignof(AccountPosition));
}
constexpr auto AccountPosition::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AccountPosition_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AccountPosition::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AccountPosition>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AccountPosition::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AccountPosition>(), &AccountPosition::ByteSizeLong,
              &AccountPosition::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_._cached_size_),
          false,
      },
      &AccountPosition::kDescriptorMethods,
      &descriptor_table_t4_2fv1_2faccount_2faccount_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AccountPosition_class_data_ =
        AccountPosition::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AccountPosition::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AccountPosition_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AccountPosition_class_data_.tc_table);
  return AccountPosition_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 40, 10, 124, 7>
AccountPosition::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_._has_bits_),
    0, // no _extensions_
    40, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    40,  // num_field_entries
    10,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    AccountPosition_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::account::AccountPosition>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string account_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.account_id_)}},
    // string exchange_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.exchange_id_)}},
    // string contract_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.contract_id_)}},
    // string market_id = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 3, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.market_id_)}},
    // int32 buys = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AccountPosition, _impl_.buys_), 14>(),
     {40, 14, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.buys_)}},
    // int32 sells = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AccountPosition, _impl_.sells_), 15>(),
     {48, 15, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.sells_)}},
    // int32 working_buys = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AccountPosition, _impl_.working_buys_), 16>(),
     {56, 16, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.working_buys_)}},
    // int32 working_sells = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AccountPosition, _impl_.working_sells_), 17>(),
     {64, 17, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.working_sells_)}},
    // double rpl = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 18, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.rpl_)}},
    // double overnight_upl = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 19, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.overnight_upl_)}},
    // double margin = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 20, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.margin_)}},
    // double mp = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 21, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.mp_)}},
    // int32 overnight_position = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AccountPosition, _impl_.overnight_position_), 23>(),
     {104, 23, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.overnight_position_)}},
    // double currency_rate = 14;
    {::_pbi::TcParser::FastF64S1,
     {113, 22, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.currency_rate_)}},
    // .google.protobuf.Timestamp trade_date = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 4, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.trade_date_)}},
    // double premium = 16;
    {::_pbi::TcParser::FastF64S2,
     {385, 25, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.premium_)}},
    // int32 total_open_volume = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 24, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.total_open_volume_)}},
    // double fees_and_commissions = 18;
    {::_pbi::TcParser::FastF64S2,
     {401, 26, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.fees_and_commissions_)}},
    // double long_mp = 19;
    {::_pbi::TcParser::FastF64S2,
     {409, 27, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.long_mp_)}},
    // double short_mp = 20;
    {::_pbi::TcParser::FastF64S2,
     {417, 28, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.short_mp_)}},
    // int32 prev_position = 21;
    {::_pbi::TcParser::FastV32S2,
     {424, 31, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.prev_position_)}},
    // double prev_margin = 22;
    {::_pbi::TcParser::FastF64S2,
     {433, 29, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.prev_margin_)}},
    // double prev_rpl = 23;
    {::_pbi::TcParser::FastF64S2,
     {441, 30, 0, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.prev_rpl_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .t4proto.v1.common.Price average_open_price = 27;
    {::_pbi::TcParser::FastMtS2,
     {474, 5, 1, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.average_open_price_)}},
    // optional .t4proto.v1.common.Price total_open_price = 28;
    {::_pbi::TcParser::FastMtS2,
     {482, 6, 2, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.total_open_price_)}},
    // optional .t4proto.v1.common.Price total_buy_fill_price = 29;
    {::_pbi::TcParser::FastMtS2,
     {490, 7, 3, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.total_buy_fill_price_)}},
    // optional .t4proto.v1.common.Price total_sell_fill_price = 30;
    {::_pbi::TcParser::FastMtS2,
     {498, 8, 4, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.total_sell_fill_price_)}},
    // optional .t4proto.v1.common.Price day_total_buy_fill_price = 31;
    {::_pbi::TcParser::FastMtS2,
     {506, 9, 5, PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.day_total_buy_fill_price_)}},
  }}, {{
    33, 0, 1,
    65280, 32,
    65535, 65535
  }}, {{
    // string account_id = 1;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.account_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange_id = 2;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.exchange_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string contract_id = 3;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.contract_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string market_id = 4;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.market_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 buys = 5;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.buys_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 sells = 6;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.sells_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 working_buys = 7;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.working_buys_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 working_sells = 8;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.working_sells_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // double rpl = 9;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.rpl_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double overnight_upl = 10;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.overnight_upl_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double margin = 11;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.margin_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double mp = 12;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.mp_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // int32 overnight_position = 13;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.overnight_position_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // double currency_rate = 14;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.currency_rate_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // .google.protobuf.Timestamp trade_date = 15;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.trade_date_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double premium = 16;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.premium_), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // int32 total_open_volume = 17;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.total_open_volume_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // double fees_and_commissions = 18;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.fees_and_commissions_), _Internal::kHasBitsOffset + 26, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double long_mp = 19;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.long_mp_), _Internal::kHasBitsOffset + 27, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double short_mp = 20;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.short_mp_), _Internal::kHasBitsOffset + 28, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // int32 prev_position = 21;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.prev_position_), _Internal::kHasBitsOffset + 31, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // double prev_margin = 22;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.prev_margin_), _Internal::kHasBitsOffset + 29, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double prev_rpl = 23;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.prev_rpl_), _Internal::kHasBitsOffset + 30, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double prev_upl = 24;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.prev_upl_), _Internal::kHasBitsOffset + 33, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // int32 day_buys = 25;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.day_buys_), _Internal::kHasBitsOffset + 32, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 day_sells = 26;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.day_sells_), _Internal::kHasBitsOffset + 34, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .t4proto.v1.common.Price average_open_price = 27;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.average_open_price_), _Internal::kHasBitsOffset + 5, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .t4proto.v1.common.Price total_open_price = 28;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.total_open_price_), _Internal::kHasBitsOffset + 6, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .t4proto.v1.common.Price total_buy_fill_price = 29;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.total_buy_fill_price_), _Internal::kHasBitsOffset + 7, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .t4proto.v1.common.Price total_sell_fill_price = 30;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.total_sell_fill_price_), _Internal::kHasBitsOffset + 8, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .t4proto.v1.common.Price day_total_buy_fill_price = 31;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.day_total_buy_fill_price_), _Internal::kHasBitsOffset + 9, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .t4proto.v1.common.Price day_total_sell_fill_price = 32;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.day_total_sell_fill_price_), _Internal::kHasBitsOffset + 10, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .t4proto.v1.common.Price total_overnight_price = 33;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.total_overnight_price_), _Internal::kHasBitsOffset + 11, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.common.ContractRiskStatus risk_status = 34;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.risk_status_), _Internal::kHasBitsOffset + 35, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // .google.protobuf.Timestamp margin_time = 35;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.margin_time_), _Internal::kHasBitsOffset + 12, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double alerting_margin = 36;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.alerting_margin_), _Internal::kHasBitsOffset + 36, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // .google.protobuf.Timestamp alerting_time = 37;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.alerting_time_), _Internal::kHasBitsOffset + 13, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double day_margin = 38;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.day_margin_), _Internal::kHasBitsOffset + 37, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double full_margin = 39;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.full_margin_), _Internal::kHasBitsOffset + 38, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double pre_trade_margin = 40;
    {PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.pre_trade_margin_), _Internal::kHasBitsOffset + 39, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
      {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
      {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
      {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
      {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
      {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
      {::_pbi::TcParser::GetTable<::t4proto::v1::common::Price>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }},
  {{
    "\42\12\13\13\11\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "t4proto.v1.account.AccountPosition"
    "account_id"
    "exchange_id"
    "contract_id"
    "market_id"
  }},
};
PROTOBUF_NOINLINE void AccountPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.account.AccountPosition)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.account_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.exchange_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.contract_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.market_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.trade_date_ != nullptr);
      _impl_.trade_date_->Clear();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(_impl_.average_open_price_ != nullptr);
      _impl_.average_open_price_->Clear();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(_impl_.total_open_price_ != nullptr);
      _impl_.total_open_price_->Clear();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(_impl_.total_buy_fill_price_ != nullptr);
      _impl_.total_buy_fill_price_->Clear();
    }
  }
  if ((cached_has_bits & 0x00003f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(_impl_.total_sell_fill_price_ != nullptr);
      _impl_.total_sell_fill_price_->Clear();
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(_impl_.day_total_buy_fill_price_ != nullptr);
      _impl_.day_total_buy_fill_price_->Clear();
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      ABSL_DCHECK(_impl_.day_total_sell_fill_price_ != nullptr);
      _impl_.day_total_sell_fill_price_->Clear();
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      ABSL_DCHECK(_impl_.total_overnight_price_ != nullptr);
      _impl_.total_overnight_price_->Clear();
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      ABSL_DCHECK(_impl_.margin_time_ != nullptr);
      _impl_.margin_time_->Clear();
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      ABSL_DCHECK(_impl_.alerting_time_ != nullptr);
      _impl_.alerting_time_->Clear();
    }
  }
  if ((cached_has_bits & 0x0000c000u) != 0) {
    ::memset(&_impl_.buys_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.sells_) -
        reinterpret_cast<char*>(&_impl_.buys_)) + sizeof(_impl_.sells_));
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    ::memset(&_impl_.working_buys_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.overnight_position_) -
        reinterpret_cast<char*>(&_impl_.working_buys_)) + sizeof(_impl_.overnight_position_));
  }
  if ((cached_has_bits & 0xff000000u) != 0) {
    ::memset(&_impl_.total_open_volume_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.prev_position_) -
        reinterpret_cast<char*>(&_impl_.total_open_volume_)) + sizeof(_impl_.prev_position_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    ::memset(&_impl_.day_buys_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.pre_trade_margin_) -
        reinterpret_cast<char*>(&_impl_.day_buys_)) + sizeof(_impl_.pre_trade_margin_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AccountPosition::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AccountPosition& this_ = static_cast<const AccountPosition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AccountPosition::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AccountPosition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.account.AccountPosition)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string account_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_account_id().empty()) {
      const ::std::string& _s = this_._internal_account_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountPosition.account_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string exchange_id = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_exchange_id().empty()) {
      const ::std::string& _s = this_._internal_exchange_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountPosition.exchange_id");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string contract_id = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_contract_id().empty()) {
      const ::std::string& _s = this_._internal_contract_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountPosition.contract_id");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // string market_id = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!this_._internal_market_id().empty()) {
      const ::std::string& _s = this_._internal_market_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountPosition.market_id");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // int32 buys = 5;
  if ((this_._impl_._has_bits_[0] & 0x00004000u) != 0) {
    if (this_._internal_buys() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<5>(
              stream, this_._internal_buys(), target);
    }
  }

  // int32 sells = 6;
  if ((this_._impl_._has_bits_[0] & 0x00008000u) != 0) {
    if (this_._internal_sells() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<6>(
              stream, this_._internal_sells(), target);
    }
  }

  // int32 working_buys = 7;
  if ((this_._impl_._has_bits_[0] & 0x00010000u) != 0) {
    if (this_._internal_working_buys() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<7>(
              stream, this_._internal_working_buys(), target);
    }
  }

  // int32 working_sells = 8;
  if ((this_._impl_._has_bits_[0] & 0x00020000u) != 0) {
    if (this_._internal_working_sells() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<8>(
              stream, this_._internal_working_sells(), target);
    }
  }

  // double rpl = 9;
  if ((this_._impl_._has_bits_[0] & 0x00040000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_rpl()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          9, this_._internal_rpl(), target);
    }
  }

  // double overnight_upl = 10;
  if ((this_._impl_._has_bits_[0] & 0x00080000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_overnight_upl()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          10, this_._internal_overnight_upl(), target);
    }
  }

  // double margin = 11;
  if ((this_._impl_._has_bits_[0] & 0x00100000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_margin()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          11, this_._internal_margin(), target);
    }
  }

  // double mp = 12;
  if ((this_._impl_._has_bits_[0] & 0x00200000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_mp()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          12, this_._internal_mp(), target);
    }
  }

  // int32 overnight_position = 13;
  if ((this_._impl_._has_bits_[0] & 0x00800000u) != 0) {
    if (this_._internal_overnight_position() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<13>(
              stream, this_._internal_overnight_position(), target);
    }
  }

  // double currency_rate = 14;
  if ((this_._impl_._has_bits_[0] & 0x00400000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_currency_rate()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          14, this_._internal_currency_rate(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .google.protobuf.Timestamp trade_date = 15;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        15, *this_._impl_.trade_date_, this_._impl_.trade_date_->GetCachedSize(), target,
        stream);
  }

  // double premium = 16;
  if ((cached_has_bits & 0x02000000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_premium()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          16, this_._internal_premium(), target);
    }
  }

  // int32 total_open_volume = 17;
  if ((cached_has_bits & 0x01000000u) != 0) {
    if (this_._internal_total_open_volume() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(
          17, this_._internal_total_open_volume(), target);
    }
  }

  // double fees_and_commissions = 18;
  if ((cached_has_bits & 0x04000000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_fees_and_commissions()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          18, this_._internal_fees_and_commissions(), target);
    }
  }

  // double long_mp = 19;
  if ((cached_has_bits & 0x08000000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_long_mp()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          19, this_._internal_long_mp(), target);
    }
  }

  // double short_mp = 20;
  if ((cached_has_bits & 0x10000000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_short_mp()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          20, this_._internal_short_mp(), target);
    }
  }

  // int32 prev_position = 21;
  if ((cached_has_bits & 0x80000000u) != 0) {
    if (this_._internal_prev_position() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(
          21, this_._internal_prev_position(), target);
    }
  }

  // double prev_margin = 22;
  if ((cached_has_bits & 0x20000000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_prev_margin()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          22, this_._internal_prev_margin(), target);
    }
  }

  // double prev_rpl = 23;
  if ((cached_has_bits & 0x40000000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_prev_rpl()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          23, this_._internal_prev_rpl(), target);
    }
  }

  // double prev_upl = 24;
  if ((this_._impl_._has_bits_[1] & 0x00000002u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_prev_upl()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          24, this_._internal_prev_upl(), target);
    }
  }

  // int32 day_buys = 25;
  if ((this_._impl_._has_bits_[1] & 0x00000001u) != 0) {
    if (this_._internal_day_buys() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(
          25, this_._internal_day_buys(), target);
    }
  }

  // int32 day_sells = 26;
  if ((this_._impl_._has_bits_[1] & 0x00000004u) != 0) {
    if (this_._internal_day_sells() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(
          26, this_._internal_day_sells(), target);
    }
  }

  // optional .t4proto.v1.common.Price average_open_price = 27;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        27, *this_._impl_.average_open_price_, this_._impl_.average_open_price_->GetCachedSize(), target,
        stream);
  }

  // optional .t4proto.v1.common.Price total_open_price = 28;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        28, *this_._impl_.total_open_price_, this_._impl_.total_open_price_->GetCachedSize(), target,
        stream);
  }

  // optional .t4proto.v1.common.Price total_buy_fill_price = 29;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        29, *this_._impl_.total_buy_fill_price_, this_._impl_.total_buy_fill_price_->GetCachedSize(), target,
        stream);
  }

  // optional .t4proto.v1.common.Price total_sell_fill_price = 30;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        30, *this_._impl_.total_sell_fill_price_, this_._impl_.total_sell_fill_price_->GetCachedSize(), target,
        stream);
  }

  // optional .t4proto.v1.common.Price day_total_buy_fill_price = 31;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        31, *this_._impl_.day_total_buy_fill_price_, this_._impl_.day_total_buy_fill_price_->GetCachedSize(), target,
        stream);
  }

  // optional .t4proto.v1.common.Price day_total_sell_fill_price = 32;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        32, *this_._impl_.day_total_sell_fill_price_, this_._impl_.day_total_sell_fill_price_->GetCachedSize(), target,
        stream);
  }

  // optional .t4proto.v1.common.Price total_overnight_price = 33;
  if ((cached_has_bits & 0x00000800u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        33, *this_._impl_.total_overnight_price_, this_._impl_.total_overnight_price_->GetCachedSize(), target,
        stream);
  }

  // .t4proto.v1.common.ContractRiskStatus risk_status = 34;
  if ((this_._impl_._has_bits_[1] & 0x00000008u) != 0) {
    if (this_._internal_risk_status() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          34, this_._internal_risk_status(), target);
    }
  }

  // .google.protobuf.Timestamp margin_time = 35;
  if ((cached_has_bits & 0x00001000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        35, *this_._impl_.margin_time_, this_._impl_.margin_time_->GetCachedSize(), target,
        stream);
  }

  // double alerting_margin = 36;
  if ((this_._impl_._has_bits_[1] & 0x00000010u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_alerting_margin()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          36, this_._internal_alerting_margin(), target);
    }
  }

  // .google.protobuf.Timestamp alerting_time = 37;
  if ((cached_has_bits & 0x00002000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        37, *this_._impl_.alerting_time_, this_._impl_.alerting_time_->GetCachedSize(), target,
        stream);
  }

  // double day_margin = 38;
  if ((this_._impl_._has_bits_[1] & 0x00000020u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_day_margin()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          38, this_._internal_day_margin(), target);
    }
  }

  // double full_margin = 39;
  if ((this_._impl_._has_bits_[1] & 0x00000040u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_full_margin()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          39, this_._internal_full_margin(), target);
    }
  }

  // double pre_trade_margin = 40;
  if ((this_._impl_._has_bits_[1] & 0x00000080u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_pre_trade_margin()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          40, this_._internal_pre_trade_margin(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.account.AccountPosition)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AccountPosition::ByteSizeLong(const MessageLite& base) {
  const AccountPosition& this_ = static_cast<const AccountPosition&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AccountPosition::ByteSizeLong() const {
  const AccountPosition& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.account.AccountPosition)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string account_id = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_account_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_account_id());
      }
    }
    // string exchange_id = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_exchange_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_exchange_id());
      }
    }
    // string contract_id = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_contract_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_contract_id());
      }
    }
    // string market_id = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_market_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_market_id());
      }
    }
    // .google.protobuf.Timestamp trade_date = 15;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.trade_date_);
    }
    // optional .t4proto.v1.common.Price average_open_price = 27;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.average_open_price_);
    }
    // optional .t4proto.v1.common.Price total_open_price = 28;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.total_open_price_);
    }
    // optional .t4proto.v1.common.Price total_buy_fill_price = 29;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.total_buy_fill_price_);
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    // optional .t4proto.v1.common.Price total_sell_fill_price = 30;
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.total_sell_fill_price_);
    }
    // optional .t4proto.v1.common.Price day_total_buy_fill_price = 31;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.day_total_buy_fill_price_);
    }
    // optional .t4proto.v1.common.Price day_total_sell_fill_price = 32;
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.day_total_sell_fill_price_);
    }
    // optional .t4proto.v1.common.Price total_overnight_price = 33;
    if ((cached_has_bits & 0x00000800u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.total_overnight_price_);
    }
    // .google.protobuf.Timestamp margin_time = 35;
    if ((cached_has_bits & 0x00001000u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.margin_time_);
    }
    // .google.protobuf.Timestamp alerting_time = 37;
    if ((cached_has_bits & 0x00002000u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.alerting_time_);
    }
    // int32 buys = 5;
    if ((cached_has_bits & 0x00004000u) != 0) {
      if (this_._internal_buys() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_buys());
      }
    }
    // int32 sells = 6;
    if ((cached_has_bits & 0x00008000u) != 0) {
      if (this_._internal_sells() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_sells());
      }
    }
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    // int32 working_buys = 7;
    if ((cached_has_bits & 0x00010000u) != 0) {
      if (this_._internal_working_buys() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_working_buys());
      }
    }
    // int32 working_sells = 8;
    if ((cached_has_bits & 0x00020000u) != 0) {
      if (this_._internal_working_sells() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_working_sells());
      }
    }
    // double rpl = 9;
    if ((cached_has_bits & 0x00040000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_rpl()) != 0) {
        total_size += 9;
      }
    }
    // double overnight_upl = 10;
    if ((cached_has_bits & 0x00080000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_overnight_upl()) != 0) {
        total_size += 9;
      }
    }
    // double margin = 11;
    if ((cached_has_bits & 0x00100000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_margin()) != 0) {
        total_size += 9;
      }
    }
    // double mp = 12;
    if ((cached_has_bits & 0x00200000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_mp()) != 0) {
        total_size += 9;
      }
    }
    // double currency_rate = 14;
    if ((cached_has_bits & 0x00400000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_currency_rate()) != 0) {
        total_size += 9;
      }
    }
    // int32 overnight_position = 13;
    if ((cached_has_bits & 0x00800000u) != 0) {
      if (this_._internal_overnight_position() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_overnight_position());
      }
    }
  }
  if ((cached_has_bits & 0xff000000u) != 0) {
    // int32 total_open_volume = 17;
    if ((cached_has_bits & 0x01000000u) != 0) {
      if (this_._internal_total_open_volume() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                        this_._internal_total_open_volume());
      }
    }
    // double premium = 16;
    if ((cached_has_bits & 0x02000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_premium()) != 0) {
        total_size += 10;
      }
    }
    // double fees_and_commissions = 18;
    if ((cached_has_bits & 0x04000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_fees_and_commissions()) != 0) {
        total_size += 10;
      }
    }
    // double long_mp = 19;
    if ((cached_has_bits & 0x08000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_long_mp()) != 0) {
        total_size += 10;
      }
    }
    // double short_mp = 20;
    if ((cached_has_bits & 0x10000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_short_mp()) != 0) {
        total_size += 10;
      }
    }
    // double prev_margin = 22;
    if ((cached_has_bits & 0x20000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_prev_margin()) != 0) {
        total_size += 10;
      }
    }
    // double prev_rpl = 23;
    if ((cached_has_bits & 0x40000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_prev_rpl()) != 0) {
        total_size += 10;
      }
    }
    // int32 prev_position = 21;
    if ((cached_has_bits & 0x80000000u) != 0) {
      if (this_._internal_prev_position() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                        this_._internal_prev_position());
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[1];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // int32 day_buys = 25;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_day_buys() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                        this_._internal_day_buys());
      }
    }
    // double prev_upl = 24;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_prev_upl()) != 0) {
        total_size += 10;
      }
    }
    // int32 day_sells = 26;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_day_sells() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                        this_._internal_day_sells());
      }
    }
    // .t4proto.v1.common.ContractRiskStatus risk_status = 34;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_risk_status() != 0) {
        total_size += 2 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_risk_status());
      }
    }
    // double alerting_margin = 36;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_alerting_margin()) != 0) {
        total_size += 10;
      }
    }
    // double day_margin = 38;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_day_margin()) != 0) {
        total_size += 10;
      }
    }
    // double full_margin = 39;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_full_margin()) != 0) {
        total_size += 10;
      }
    }
    // double pre_trade_margin = 40;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_pre_trade_margin()) != 0) {
        total_size += 10;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AccountPosition::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AccountPosition*>(&to_msg);
  auto& from = static_cast<const AccountPosition&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.account.AccountPosition)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_account_id().empty()) {
        _this->_internal_set_account_id(from._internal_account_id());
      } else {
        if (_this->_impl_.account_id_.IsDefault()) {
          _this->_internal_set_account_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_exchange_id().empty()) {
        _this->_internal_set_exchange_id(from._internal_exchange_id());
      } else {
        if (_this->_impl_.exchange_id_.IsDefault()) {
          _this->_internal_set_exchange_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_contract_id().empty()) {
        _this->_internal_set_contract_id(from._internal_contract_id());
      } else {
        if (_this->_impl_.contract_id_.IsDefault()) {
          _this->_internal_set_contract_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_market_id().empty()) {
        _this->_internal_set_market_id(from._internal_market_id());
      } else {
        if (_this->_impl_.market_id_.IsDefault()) {
          _this->_internal_set_market_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.trade_date_ != nullptr);
      if (_this->_impl_.trade_date_ == nullptr) {
        _this->_impl_.trade_date_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.trade_date_);
      } else {
        _this->_impl_.trade_date_->MergeFrom(*from._impl_.trade_date_);
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(from._impl_.average_open_price_ != nullptr);
      if (_this->_impl_.average_open_price_ == nullptr) {
        _this->_impl_.average_open_price_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.average_open_price_);
      } else {
        _this->_impl_.average_open_price_->MergeFrom(*from._impl_.average_open_price_);
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(from._impl_.total_open_price_ != nullptr);
      if (_this->_impl_.total_open_price_ == nullptr) {
        _this->_impl_.total_open_price_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.total_open_price_);
      } else {
        _this->_impl_.total_open_price_->MergeFrom(*from._impl_.total_open_price_);
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(from._impl_.total_buy_fill_price_ != nullptr);
      if (_this->_impl_.total_buy_fill_price_ == nullptr) {
        _this->_impl_.total_buy_fill_price_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.total_buy_fill_price_);
      } else {
        _this->_impl_.total_buy_fill_price_->MergeFrom(*from._impl_.total_buy_fill_price_);
      }
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(from._impl_.total_sell_fill_price_ != nullptr);
      if (_this->_impl_.total_sell_fill_price_ == nullptr) {
        _this->_impl_.total_sell_fill_price_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.total_sell_fill_price_);
      } else {
        _this->_impl_.total_sell_fill_price_->MergeFrom(*from._impl_.total_sell_fill_price_);
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(from._impl_.day_total_buy_fill_price_ != nullptr);
      if (_this->_impl_.day_total_buy_fill_price_ == nullptr) {
        _this->_impl_.day_total_buy_fill_price_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.day_total_buy_fill_price_);
      } else {
        _this->_impl_.day_total_buy_fill_price_->MergeFrom(*from._impl_.day_total_buy_fill_price_);
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      ABSL_DCHECK(from._impl_.day_total_sell_fill_price_ != nullptr);
      if (_this->_impl_.day_total_sell_fill_price_ == nullptr) {
        _this->_impl_.day_total_sell_fill_price_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.day_total_sell_fill_price_);
      } else {
        _this->_impl_.day_total_sell_fill_price_->MergeFrom(*from._impl_.day_total_sell_fill_price_);
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      ABSL_DCHECK(from._impl_.total_overnight_price_ != nullptr);
      if (_this->_impl_.total_overnight_price_ == nullptr) {
        _this->_impl_.total_overnight_price_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.total_overnight_price_);
      } else {
        _this->_impl_.total_overnight_price_->MergeFrom(*from._impl_.total_overnight_price_);
      }
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      ABSL_DCHECK(from._impl_.margin_time_ != nullptr);
      if (_this->_impl_.margin_time_ == nullptr) {
        _this->_impl_.margin_time_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.margin_time_);
      } else {
        _this->_impl_.margin_time_->MergeFrom(*from._impl_.margin_time_);
      }
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      ABSL_DCHECK(from._impl_.alerting_time_ != nullptr);
      if (_this->_impl_.alerting_time_ == nullptr) {
        _this->_impl_.alerting_time_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.alerting_time_);
      } else {
        _this->_impl_.alerting_time_->MergeFrom(*from._impl_.alerting_time_);
      }
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      if (from._internal_buys() != 0) {
        _this->_impl_.buys_ = from._impl_.buys_;
      }
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      if (from._internal_sells() != 0) {
        _this->_impl_.sells_ = from._impl_.sells_;
      }
    }
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    if ((cached_has_bits & 0x00010000u) != 0) {
      if (from._internal_working_buys() != 0) {
        _this->_impl_.working_buys_ = from._impl_.working_buys_;
      }
    }
    if ((cached_has_bits & 0x00020000u) != 0) {
      if (from._internal_working_sells() != 0) {
        _this->_impl_.working_sells_ = from._impl_.working_sells_;
      }
    }
    if ((cached_has_bits & 0x00040000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_rpl()) != 0) {
        _this->_impl_.rpl_ = from._impl_.rpl_;
      }
    }
    if ((cached_has_bits & 0x00080000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_overnight_upl()) != 0) {
        _this->_impl_.overnight_upl_ = from._impl_.overnight_upl_;
      }
    }
    if ((cached_has_bits & 0x00100000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_margin()) != 0) {
        _this->_impl_.margin_ = from._impl_.margin_;
      }
    }
    if ((cached_has_bits & 0x00200000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_mp()) != 0) {
        _this->_impl_.mp_ = from._impl_.mp_;
      }
    }
    if ((cached_has_bits & 0x00400000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_currency_rate()) != 0) {
        _this->_impl_.currency_rate_ = from._impl_.currency_rate_;
      }
    }
    if ((cached_has_bits & 0x00800000u) != 0) {
      if (from._internal_overnight_position() != 0) {
        _this->_impl_.overnight_position_ = from._impl_.overnight_position_;
      }
    }
  }
  if ((cached_has_bits & 0xff000000u) != 0) {
    if ((cached_has_bits & 0x01000000u) != 0) {
      if (from._internal_total_open_volume() != 0) {
        _this->_impl_.total_open_volume_ = from._impl_.total_open_volume_;
      }
    }
    if ((cached_has_bits & 0x02000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_premium()) != 0) {
        _this->_impl_.premium_ = from._impl_.premium_;
      }
    }
    if ((cached_has_bits & 0x04000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_fees_and_commissions()) != 0) {
        _this->_impl_.fees_and_commissions_ = from._impl_.fees_and_commissions_;
      }
    }
    if ((cached_has_bits & 0x08000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_long_mp()) != 0) {
        _this->_impl_.long_mp_ = from._impl_.long_mp_;
      }
    }
    if ((cached_has_bits & 0x10000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_short_mp()) != 0) {
        _this->_impl_.short_mp_ = from._impl_.short_mp_;
      }
    }
    if ((cached_has_bits & 0x20000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_prev_margin()) != 0) {
        _this->_impl_.prev_margin_ = from._impl_.prev_margin_;
      }
    }
    if ((cached_has_bits & 0x40000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_prev_rpl()) != 0) {
        _this->_impl_.prev_rpl_ = from._impl_.prev_rpl_;
      }
    }
    if ((cached_has_bits & 0x80000000u) != 0) {
      if (from._internal_prev_position() != 0) {
        _this->_impl_.prev_position_ = from._impl_.prev_position_;
      }
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_day_buys() != 0) {
        _this->_impl_.day_buys_ = from._impl_.day_buys_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_prev_upl()) != 0) {
        _this->_impl_.prev_upl_ = from._impl_.prev_upl_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_day_sells() != 0) {
        _this->_impl_.day_sells_ = from._impl_.day_sells_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_risk_status() != 0) {
        _this->_impl_.risk_status_ = from._impl_.risk_status_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_alerting_margin()) != 0) {
        _this->_impl_.alerting_margin_ = from._impl_.alerting_margin_;
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_day_margin()) != 0) {
        _this->_impl_.day_margin_ = from._impl_.day_margin_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_full_margin()) != 0) {
        _this->_impl_.full_margin_ = from._impl_.full_margin_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_pre_trade_margin()) != 0) {
        _this->_impl_.pre_trade_margin_ = from._impl_.pre_trade_margin_;
      }
    }
  }
  _this->_impl_._has_bits_.Or(from._impl_._has_bits_);
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AccountPosition::CopyFrom(const AccountPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.account.AccountPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AccountPosition::InternalSwap(AccountPosition* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_id_, &other->_impl_.account_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_id_, &other->_impl_.exchange_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_id_, &other->_impl_.contract_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, &other->_impl_.market_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.pre_trade_margin_)
      + sizeof(AccountPosition::_impl_.pre_trade_margin_)
      - PROTOBUF_FIELD_OFFSET(AccountPosition, _impl_.trade_date_)>(
          reinterpret_cast<char*>(&_impl_.trade_date_),
          reinterpret_cast<char*>(&other->_impl_.trade_date_));
}

::google::protobuf::Metadata AccountPosition::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AccountUpdate::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AccountUpdate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_._has_bits_);
};

void AccountUpdate::clear_imported_net_liq_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.imported_net_liq_date_ != nullptr) _impl_.imported_net_liq_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void AccountUpdate::clear_prev_imported_net_liq_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.prev_imported_net_liq_date_ != nullptr) _impl_.prev_imported_net_liq_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void AccountUpdate::clear_margin_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.margin_time_ != nullptr) _impl_.margin_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void AccountUpdate::clear_alerting_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.alerting_time_ != nullptr) _impl_.alerting_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
AccountUpdate::AccountUpdate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AccountUpdate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.account.AccountUpdate)
}
PROTOBUF_NDEBUG_INLINE AccountUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::t4proto::v1::account::AccountUpdate& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        account_id_(arena, from.account_id_) {}

AccountUpdate::AccountUpdate(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AccountUpdate& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AccountUpdate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AccountUpdate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.imported_net_liq_date_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.imported_net_liq_date_)
                : nullptr;
  _impl_.prev_imported_net_liq_date_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.prev_imported_net_liq_date_)
                : nullptr;
  _impl_.margin_time_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.margin_time_)
                : nullptr;
  _impl_.alerting_time_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.alerting_time_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, balance_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, balance_),
           offsetof(Impl_, status_) -
               offsetof(Impl_, balance_) +
               sizeof(Impl_::status_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.account.AccountUpdate)
}
PROTOBUF_NDEBUG_INLINE AccountUpdate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        account_id_(arena) {}

inline void AccountUpdate::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, imported_net_liq_date_),
           0,
           offsetof(Impl_, status_) -
               offsetof(Impl_, imported_net_liq_date_) +
               sizeof(Impl_::status_));
}
AccountUpdate::~AccountUpdate() {
  // @@protoc_insertion_point(destructor:t4proto.v1.account.AccountUpdate)
  SharedDtor(*this);
}
inline void AccountUpdate::SharedDtor(MessageLite& self) {
  AccountUpdate& this_ = static_cast<AccountUpdate&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.account_id_.Destroy();
  delete this_._impl_.imported_net_liq_date_;
  delete this_._impl_.prev_imported_net_liq_date_;
  delete this_._impl_.margin_time_;
  delete this_._impl_.alerting_time_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AccountUpdate::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AccountUpdate(arena);
}
constexpr auto AccountUpdate::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AccountUpdate),
                                            alignof(AccountUpdate));
}
constexpr auto AccountUpdate::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AccountUpdate_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AccountUpdate::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AccountUpdate>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AccountUpdate::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AccountUpdate>(), &AccountUpdate::ByteSizeLong,
              &AccountUpdate::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_._cached_size_),
          false,
      },
      &AccountUpdate::kDescriptorMethods,
      &descriptor_table_t4_2fv1_2faccount_2faccount_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AccountUpdate_class_data_ =
        AccountUpdate::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AccountUpdate::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AccountUpdate_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AccountUpdate_class_data_.tc_table);
  return AccountUpdate_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 25, 4, 75, 2>
AccountUpdate::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_._has_bits_),
    0, // no _extensions_
    25, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4261412864,  // skipmap
    offsetof(decltype(_table_), field_entries),
    25,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    AccountUpdate_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::account::AccountUpdate>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string account_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.account_id_)}},
    // .t4proto.v1.common.AccountStatus status = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AccountUpdate, _impl_.status_), 24>(),
     {16, 24, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.status_)}},
    // double balance = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 5, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.balance_)}},
    // double rpl = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 6, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.rpl_)}},
    // double overnight_upl = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 7, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.overnight_upl_)}},
    // double margin = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 8, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.margin_)}},
    // double day_margin = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 9, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.day_margin_)}},
    // double full_margin = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 10, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.full_margin_)}},
    // double base_margin = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 11, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.base_margin_)}},
    // double alerting_margin = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 12, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.alerting_margin_)}},
    // double pre_trade_margin = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 13, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.pre_trade_margin_)}},
    // double mp = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 14, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.mp_)}},
    // double premium = 13;
    {::_pbi::TcParser::FastF64S1,
     {105, 15, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.premium_)}},
    // double long_mp = 14;
    {::_pbi::TcParser::FastF64S1,
     {113, 16, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.long_mp_)}},
    // double short_mp = 15;
    {::_pbi::TcParser::FastF64S1,
     {121, 17, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.short_mp_)}},
    // double fees_and_commissions = 16;
    {::_pbi::TcParser::FastF64S2,
     {385, 18, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.fees_and_commissions_)}},
    // double prev_margin = 17;
    {::_pbi::TcParser::FastF64S2,
     {393, 19, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.prev_margin_)}},
    // double imported_net_liq = 18;
    {::_pbi::TcParser::FastF64S2,
     {401, 20, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.imported_net_liq_)}},
    // .google.protobuf.Timestamp imported_net_liq_date = 19;
    {::_pbi::TcParser::FastMtS2,
     {410, 1, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.imported_net_liq_date_)}},
    // double prev_imported_net_liq = 20;
    {::_pbi::TcParser::FastF64S2,
     {417, 21, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.prev_imported_net_liq_)}},
    // .google.protobuf.Timestamp prev_imported_net_liq_date = 21;
    {::_pbi::TcParser::FastMtS2,
     {426, 2, 1, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.prev_imported_net_liq_date_)}},
    // double filled_delta = 22;
    {::_pbi::TcParser::FastF64S2,
     {433, 22, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.filled_delta_)}},
    // double working_delta = 23;
    {::_pbi::TcParser::FastF64S2,
     {441, 23, 0, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.working_delta_)}},
    // .google.protobuf.Timestamp margin_time = 24;
    {::_pbi::TcParser::FastMtS2,
     {450, 3, 2, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.margin_time_)}},
    // .google.protobuf.Timestamp alerting_time = 25;
    {::_pbi::TcParser::FastMtS2,
     {458, 4, 3, PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.alerting_time_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string account_id = 1;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.account_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .t4proto.v1.common.AccountStatus status = 2;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.status_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // double balance = 3;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.balance_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double rpl = 4;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.rpl_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double overnight_upl = 5;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.overnight_upl_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double margin = 6;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.margin_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double day_margin = 7;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.day_margin_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double full_margin = 8;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.full_margin_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double base_margin = 9;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.base_margin_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double alerting_margin = 10;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.alerting_margin_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double pre_trade_margin = 11;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.pre_trade_margin_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double mp = 12;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.mp_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double premium = 13;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.premium_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double long_mp = 14;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.long_mp_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double short_mp = 15;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.short_mp_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double fees_and_commissions = 16;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.fees_and_commissions_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double prev_margin = 17;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.prev_margin_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double imported_net_liq = 18;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.imported_net_liq_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // .google.protobuf.Timestamp imported_net_liq_date = 19;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.imported_net_liq_date_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double prev_imported_net_liq = 20;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.prev_imported_net_liq_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // .google.protobuf.Timestamp prev_imported_net_liq_date = 21;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.prev_imported_net_liq_date_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double filled_delta = 22;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.filled_delta_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // double working_delta = 23;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.working_delta_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // .google.protobuf.Timestamp margin_time = 24;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.margin_time_), _Internal::kHasBitsOffset + 3, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp alerting_time = 25;
    {PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.alerting_time_), _Internal::kHasBitsOffset + 4, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }},
  {{
    "\40\12\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "t4proto.v1.account.AccountUpdate"
    "account_id"
  }},
};
PROTOBUF_NOINLINE void AccountUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.account.AccountUpdate)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.account_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.imported_net_liq_date_ != nullptr);
      _impl_.imported_net_liq_date_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.prev_imported_net_liq_date_ != nullptr);
      _impl_.prev_imported_net_liq_date_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.margin_time_ != nullptr);
      _impl_.margin_time_->Clear();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.alerting_time_ != nullptr);
      _impl_.alerting_time_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000e0u) != 0) {
    ::memset(&_impl_.balance_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.overnight_upl_) -
        reinterpret_cast<char*>(&_impl_.balance_)) + sizeof(_impl_.overnight_upl_));
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    ::memset(&_impl_.margin_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.premium_) -
        reinterpret_cast<char*>(&_impl_.margin_)) + sizeof(_impl_.premium_));
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    ::memset(&_impl_.long_mp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.working_delta_) -
        reinterpret_cast<char*>(&_impl_.long_mp_)) + sizeof(_impl_.working_delta_));
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AccountUpdate::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AccountUpdate& this_ = static_cast<const AccountUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AccountUpdate::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AccountUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.account.AccountUpdate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string account_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_account_id().empty()) {
      const ::std::string& _s = this_._internal_account_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountUpdate.account_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // .t4proto.v1.common.AccountStatus status = 2;
  if ((this_._impl_._has_bits_[0] & 0x01000000u) != 0) {
    if (this_._internal_status() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          2, this_._internal_status(), target);
    }
  }

  // double balance = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_balance()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          3, this_._internal_balance(), target);
    }
  }

  // double rpl = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_rpl()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          4, this_._internal_rpl(), target);
    }
  }

  // double overnight_upl = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000080u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_overnight_upl()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          5, this_._internal_overnight_upl(), target);
    }
  }

  // double margin = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000100u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_margin()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          6, this_._internal_margin(), target);
    }
  }

  // double day_margin = 7;
  if ((this_._impl_._has_bits_[0] & 0x00000200u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_day_margin()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          7, this_._internal_day_margin(), target);
    }
  }

  // double full_margin = 8;
  if ((this_._impl_._has_bits_[0] & 0x00000400u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_full_margin()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          8, this_._internal_full_margin(), target);
    }
  }

  // double base_margin = 9;
  if ((this_._impl_._has_bits_[0] & 0x00000800u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_base_margin()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          9, this_._internal_base_margin(), target);
    }
  }

  // double alerting_margin = 10;
  if ((this_._impl_._has_bits_[0] & 0x00001000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_alerting_margin()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          10, this_._internal_alerting_margin(), target);
    }
  }

  // double pre_trade_margin = 11;
  if ((this_._impl_._has_bits_[0] & 0x00002000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_pre_trade_margin()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          11, this_._internal_pre_trade_margin(), target);
    }
  }

  // double mp = 12;
  if ((this_._impl_._has_bits_[0] & 0x00004000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_mp()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          12, this_._internal_mp(), target);
    }
  }

  // double premium = 13;
  if ((this_._impl_._has_bits_[0] & 0x00008000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_premium()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          13, this_._internal_premium(), target);
    }
  }

  // double long_mp = 14;
  if ((this_._impl_._has_bits_[0] & 0x00010000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_long_mp()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          14, this_._internal_long_mp(), target);
    }
  }

  // double short_mp = 15;
  if ((this_._impl_._has_bits_[0] & 0x00020000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_short_mp()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          15, this_._internal_short_mp(), target);
    }
  }

  // double fees_and_commissions = 16;
  if ((this_._impl_._has_bits_[0] & 0x00040000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_fees_and_commissions()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          16, this_._internal_fees_and_commissions(), target);
    }
  }

  // double prev_margin = 17;
  if ((this_._impl_._has_bits_[0] & 0x00080000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_prev_margin()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          17, this_._internal_prev_margin(), target);
    }
  }

  // double imported_net_liq = 18;
  if ((this_._impl_._has_bits_[0] & 0x00100000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_imported_net_liq()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          18, this_._internal_imported_net_liq(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .google.protobuf.Timestamp imported_net_liq_date = 19;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        19, *this_._impl_.imported_net_liq_date_, this_._impl_.imported_net_liq_date_->GetCachedSize(), target,
        stream);
  }

  // double prev_imported_net_liq = 20;
  if ((cached_has_bits & 0x00200000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_prev_imported_net_liq()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          20, this_._internal_prev_imported_net_liq(), target);
    }
  }

  // .google.protobuf.Timestamp prev_imported_net_liq_date = 21;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        21, *this_._impl_.prev_imported_net_liq_date_, this_._impl_.prev_imported_net_liq_date_->GetCachedSize(), target,
        stream);
  }

  // double filled_delta = 22;
  if ((cached_has_bits & 0x00400000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_filled_delta()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          22, this_._internal_filled_delta(), target);
    }
  }

  // double working_delta = 23;
  if ((cached_has_bits & 0x00800000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_working_delta()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          23, this_._internal_working_delta(), target);
    }
  }

  // .google.protobuf.Timestamp margin_time = 24;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        24, *this_._impl_.margin_time_, this_._impl_.margin_time_->GetCachedSize(), target,
        stream);
  }

  // .google.protobuf.Timestamp alerting_time = 25;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        25, *this_._impl_.alerting_time_, this_._impl_.alerting_time_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.account.AccountUpdate)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AccountUpdate::ByteSizeLong(const MessageLite& base) {
  const AccountUpdate& this_ = static_cast<const AccountUpdate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AccountUpdate::ByteSizeLong() const {
  const AccountUpdate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.account.AccountUpdate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string account_id = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_account_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_account_id());
      }
    }
    // .google.protobuf.Timestamp imported_net_liq_date = 19;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.imported_net_liq_date_);
    }
    // .google.protobuf.Timestamp prev_imported_net_liq_date = 21;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.prev_imported_net_liq_date_);
    }
    // .google.protobuf.Timestamp margin_time = 24;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.margin_time_);
    }
    // .google.protobuf.Timestamp alerting_time = 25;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.alerting_time_);
    }
    // double balance = 3;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_balance()) != 0) {
        total_size += 9;
      }
    }
    // double rpl = 4;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_rpl()) != 0) {
        total_size += 9;
      }
    }
    // double overnight_upl = 5;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_overnight_upl()) != 0) {
        total_size += 9;
      }
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    // double margin = 6;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_margin()) != 0) {
        total_size += 9;
      }
    }
    // double day_margin = 7;
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_day_margin()) != 0) {
        total_size += 9;
      }
    }
    // double full_margin = 8;
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_full_margin()) != 0) {
        total_size += 9;
      }
    }
    // double base_margin = 9;
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_base_margin()) != 0) {
        total_size += 9;
      }
    }
    // double alerting_margin = 10;
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_alerting_margin()) != 0) {
        total_size += 9;
      }
    }
    // double pre_trade_margin = 11;
    if ((cached_has_bits & 0x00002000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_pre_trade_margin()) != 0) {
        total_size += 9;
      }
    }
    // double mp = 12;
    if ((cached_has_bits & 0x00004000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_mp()) != 0) {
        total_size += 9;
      }
    }
    // double premium = 13;
    if ((cached_has_bits & 0x00008000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_premium()) != 0) {
        total_size += 9;
      }
    }
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    // double long_mp = 14;
    if ((cached_has_bits & 0x00010000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_long_mp()) != 0) {
        total_size += 9;
      }
    }
    // double short_mp = 15;
    if ((cached_has_bits & 0x00020000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_short_mp()) != 0) {
        total_size += 9;
      }
    }
    // double fees_and_commissions = 16;
    if ((cached_has_bits & 0x00040000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_fees_and_commissions()) != 0) {
        total_size += 10;
      }
    }
    // double prev_margin = 17;
    if ((cached_has_bits & 0x00080000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_prev_margin()) != 0) {
        total_size += 10;
      }
    }
    // double imported_net_liq = 18;
    if ((cached_has_bits & 0x00100000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_imported_net_liq()) != 0) {
        total_size += 10;
      }
    }
    // double prev_imported_net_liq = 20;
    if ((cached_has_bits & 0x00200000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_prev_imported_net_liq()) != 0) {
        total_size += 10;
      }
    }
    // double filled_delta = 22;
    if ((cached_has_bits & 0x00400000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_filled_delta()) != 0) {
        total_size += 10;
      }
    }
    // double working_delta = 23;
    if ((cached_has_bits & 0x00800000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_working_delta()) != 0) {
        total_size += 10;
      }
    }
  }
   {
    // .t4proto.v1.common.AccountStatus status = 2;
    if ((cached_has_bits & 0x01000000u) != 0) {
      if (this_._internal_status() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_status());
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AccountUpdate::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AccountUpdate*>(&to_msg);
  auto& from = static_cast<const AccountUpdate&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.account.AccountUpdate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_account_id().empty()) {
        _this->_internal_set_account_id(from._internal_account_id());
      } else {
        if (_this->_impl_.account_id_.IsDefault()) {
          _this->_internal_set_account_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.imported_net_liq_date_ != nullptr);
      if (_this->_impl_.imported_net_liq_date_ == nullptr) {
        _this->_impl_.imported_net_liq_date_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.imported_net_liq_date_);
      } else {
        _this->_impl_.imported_net_liq_date_->MergeFrom(*from._impl_.imported_net_liq_date_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.prev_imported_net_liq_date_ != nullptr);
      if (_this->_impl_.prev_imported_net_liq_date_ == nullptr) {
        _this->_impl_.prev_imported_net_liq_date_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.prev_imported_net_liq_date_);
      } else {
        _this->_impl_.prev_imported_net_liq_date_->MergeFrom(*from._impl_.prev_imported_net_liq_date_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.margin_time_ != nullptr);
      if (_this->_impl_.margin_time_ == nullptr) {
        _this->_impl_.margin_time_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.margin_time_);
      } else {
        _this->_impl_.margin_time_->MergeFrom(*from._impl_.margin_time_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.alerting_time_ != nullptr);
      if (_this->_impl_.alerting_time_ == nullptr) {
        _this->_impl_.alerting_time_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.alerting_time_);
      } else {
        _this->_impl_.alerting_time_->MergeFrom(*from._impl_.alerting_time_);
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_balance()) != 0) {
        _this->_impl_.balance_ = from._impl_.balance_;
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_rpl()) != 0) {
        _this->_impl_.rpl_ = from._impl_.rpl_;
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_overnight_upl()) != 0) {
        _this->_impl_.overnight_upl_ = from._impl_.overnight_upl_;
      }
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_margin()) != 0) {
        _this->_impl_.margin_ = from._impl_.margin_;
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_day_margin()) != 0) {
        _this->_impl_.day_margin_ = from._impl_.day_margin_;
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_full_margin()) != 0) {
        _this->_impl_.full_margin_ = from._impl_.full_margin_;
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_base_margin()) != 0) {
        _this->_impl_.base_margin_ = from._impl_.base_margin_;
      }
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_alerting_margin()) != 0) {
        _this->_impl_.alerting_margin_ = from._impl_.alerting_margin_;
      }
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_pre_trade_margin()) != 0) {
        _this->_impl_.pre_trade_margin_ = from._impl_.pre_trade_margin_;
      }
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_mp()) != 0) {
        _this->_impl_.mp_ = from._impl_.mp_;
      }
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_premium()) != 0) {
        _this->_impl_.premium_ = from._impl_.premium_;
      }
    }
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    if ((cached_has_bits & 0x00010000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_long_mp()) != 0) {
        _this->_impl_.long_mp_ = from._impl_.long_mp_;
      }
    }
    if ((cached_has_bits & 0x00020000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_short_mp()) != 0) {
        _this->_impl_.short_mp_ = from._impl_.short_mp_;
      }
    }
    if ((cached_has_bits & 0x00040000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_fees_and_commissions()) != 0) {
        _this->_impl_.fees_and_commissions_ = from._impl_.fees_and_commissions_;
      }
    }
    if ((cached_has_bits & 0x00080000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_prev_margin()) != 0) {
        _this->_impl_.prev_margin_ = from._impl_.prev_margin_;
      }
    }
    if ((cached_has_bits & 0x00100000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_imported_net_liq()) != 0) {
        _this->_impl_.imported_net_liq_ = from._impl_.imported_net_liq_;
      }
    }
    if ((cached_has_bits & 0x00200000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_prev_imported_net_liq()) != 0) {
        _this->_impl_.prev_imported_net_liq_ = from._impl_.prev_imported_net_liq_;
      }
    }
    if ((cached_has_bits & 0x00400000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_filled_delta()) != 0) {
        _this->_impl_.filled_delta_ = from._impl_.filled_delta_;
      }
    }
    if ((cached_has_bits & 0x00800000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_working_delta()) != 0) {
        _this->_impl_.working_delta_ = from._impl_.working_delta_;
      }
    }
  }
  if ((cached_has_bits & 0x01000000u) != 0) {
    if (from._internal_status() != 0) {
      _this->_impl_.status_ = from._impl_.status_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AccountUpdate::CopyFrom(const AccountUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.account.AccountUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AccountUpdate::InternalSwap(AccountUpdate* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_id_, &other->_impl_.account_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.status_)
      + sizeof(AccountUpdate::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(AccountUpdate, _impl_.imported_net_liq_date_)>(
          reinterpret_cast<char*>(&_impl_.imported_net_liq_date_),
          reinterpret_cast<char*>(&other->_impl_.imported_net_liq_date_));
}

::google::protobuf::Metadata AccountUpdate::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AccountDetails::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AccountDetails>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_._has_bits_);
};

AccountDetails::AccountDetails(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AccountDetails_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.account.AccountDetails)
}
PROTOBUF_NDEBUG_INLINE AccountDetails::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::t4proto::v1::account::AccountDetails& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        account_id_(arena, from.account_id_),
        account_name_(arena, from.account_name_),
        account_(arena, from.account_),
        firm_id_(arena, from.firm_id_),
        active_time_start_(arena, from.active_time_start_),
        active_time_stop_(arena, from.active_time_stop_),
        firm_(arena, from.firm_),
        display_name_(arena, from.display_name_),
        risk_details_(arena, from.risk_details_),
        group_name_(arena, from.group_name_) {}

AccountDetails::AccountDetails(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AccountDetails& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AccountDetails_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AccountDetails* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enabled_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, enabled_),
           offsetof(Impl_, warning_threshold_min_net_equity_) -
               offsetof(Impl_, enabled_) +
               sizeof(Impl_::warning_threshold_min_net_equity_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.account.AccountDetails)
}
PROTOBUF_NDEBUG_INLINE AccountDetails::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        account_id_(arena),
        account_name_(arena),
        account_(arena),
        firm_id_(arena),
        active_time_start_(arena),
        active_time_stop_(arena),
        firm_(arena),
        display_name_(arena),
        risk_details_(arena),
        group_name_(arena) {}

inline void AccountDetails::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, enabled_),
           0,
           offsetof(Impl_, warning_threshold_min_net_equity_) -
               offsetof(Impl_, enabled_) +
               sizeof(Impl_::warning_threshold_min_net_equity_));
}
AccountDetails::~AccountDetails() {
  // @@protoc_insertion_point(destructor:t4proto.v1.account.AccountDetails)
  SharedDtor(*this);
}
inline void AccountDetails::SharedDtor(MessageLite& self) {
  AccountDetails& this_ = static_cast<AccountDetails&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.account_id_.Destroy();
  this_._impl_.account_name_.Destroy();
  this_._impl_.account_.Destroy();
  this_._impl_.firm_id_.Destroy();
  this_._impl_.active_time_start_.Destroy();
  this_._impl_.active_time_stop_.Destroy();
  this_._impl_.firm_.Destroy();
  this_._impl_.display_name_.Destroy();
  this_._impl_.risk_details_.Destroy();
  this_._impl_.group_name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AccountDetails::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AccountDetails(arena);
}
constexpr auto AccountDetails::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AccountDetails),
                                            alignof(AccountDetails));
}
constexpr auto AccountDetails::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AccountDetails_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AccountDetails::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AccountDetails>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AccountDetails::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AccountDetails>(), &AccountDetails::ByteSizeLong,
              &AccountDetails::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_._cached_size_),
          false,
      },
      &AccountDetails::kDescriptorMethods,
      &descriptor_table_t4_2fv1_2faccount_2faccount_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AccountDetails_class_data_ =
        AccountDetails::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AccountDetails::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AccountDetails_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AccountDetails_class_data_.tc_table);
  return AccountDetails_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 36, 0, 181, 7>
AccountDetails::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_._has_bits_),
    0, // no _extensions_
    36, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    36,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    AccountDetails_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::account::AccountDetails>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string account_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.account_id_)}},
    // string account_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.account_name_)}},
    // string account = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.account_)}},
    // .t4proto.v1.common.AccountEnabled enabled = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AccountDetails, _impl_.enabled_), 10>(),
     {32, 10, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.enabled_)}},
    // bool deleted = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AccountDetails, _impl_.deleted_), 12>(),
     {40, 12, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.deleted_)}},
    // int32 max_clip_size = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AccountDetails, _impl_.max_clip_size_), 11>(),
     {48, 11, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.max_clip_size_)}},
    // bool pre_trade_disabled = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AccountDetails, _impl_.pre_trade_disabled_), 13>(),
     {56, 13, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.pre_trade_disabled_)}},
    // bool position_rollover = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AccountDetails, _impl_.position_rollover_), 14>(),
     {64, 14, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.position_rollover_)}},
    // bool pl_rollover = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AccountDetails, _impl_.pl_rollover_), 15>(),
     {72, 15, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.pl_rollover_)}},
    // string firm_id = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 3, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.firm_id_)}},
    // double min_balance = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 17, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.min_balance_)}},
    // int32 margin_pc = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AccountDetails, _impl_.margin_pc_), 16>(),
     {96, 16, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.margin_pc_)}},
    // double loss_limit = 13;
    {::_pbi::TcParser::FastF64S1,
     {105, 18, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.loss_limit_)}},
    // int32 loss_limit_pc = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AccountDetails, _impl_.loss_limit_pc_), 19>(),
     {112, 19, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.loss_limit_pc_)}},
    // int32 overnight_margin_pc = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AccountDetails, _impl_.overnight_margin_pc_), 20>(),
     {120, 20, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.overnight_margin_pc_)}},
    // bool order_routing = 16;
    {::_pbi::TcParser::FastV8S2,
     {384, 28, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.order_routing_)}},
    // string active_time_start = 17;
    {::_pbi::TcParser::FastUS2,
     {394, 4, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.active_time_start_)}},
    // string active_time_stop = 18;
    {::_pbi::TcParser::FastUS2,
     {402, 5, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.active_time_stop_)}},
    // int32 warning_threshold_pl = 19;
    {::_pbi::TcParser::FastV32S2,
     {408, 21, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.warning_threshold_pl_)}},
    // int32 warning_threshold_loss_limit = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 22, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.warning_threshold_loss_limit_)}},
    // int32 warning_threshold_margin = 21;
    {::_pbi::TcParser::FastV32S2,
     {424, 23, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.warning_threshold_margin_)}},
    // string firm = 22;
    {::_pbi::TcParser::FastUS2,
     {434, 6, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.firm_)}},
    // .t4proto.v1.common.AccountMode mode = 23;
    {::_pbi::TcParser::FastV32S2,
     {440, 24, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.mode_)}},
    // int32 max_account_position = 24;
    {::_pbi::TcParser::FastV32S2,
     {448, 26, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.max_account_position_)}},
    // double day_loss_limit = 25;
    {::_pbi::TcParser::FastF64S2,
     {457, 25, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.day_loss_limit_)}},
    // string display_name = 26;
    {::_pbi::TcParser::FastUS2,
     {466, 7, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.display_name_)}},
    // int32 wide_market = 27;
    {::_pbi::TcParser::FastV32S2,
     {472, 27, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.wide_market_)}},
    // bool use_pl_for_margin = 28;
    {::_pbi::TcParser::FastV8S2,
     {480, 29, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.use_pl_for_margin_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string risk_details = 30;
    {::_pbi::TcParser::FastUS2,
     {498, 8, 0, PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.risk_details_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    33, 0, 1,
    65520, 32,
    65535, 65535
  }}, {{
    // string account_id = 1;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.account_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string account_name = 2;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.account_name_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string account = 3;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.account_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .t4proto.v1.common.AccountEnabled enabled = 4;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.enabled_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // bool deleted = 5;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.deleted_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // int32 max_clip_size = 6;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.max_clip_size_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // bool pre_trade_disabled = 7;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.pre_trade_disabled_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool position_rollover = 8;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.position_rollover_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool pl_rollover = 9;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.pl_rollover_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // string firm_id = 10;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.firm_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double min_balance = 11;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.min_balance_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // int32 margin_pc = 12;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.margin_pc_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // double loss_limit = 13;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.loss_limit_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // int32 loss_limit_pc = 14;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.loss_limit_pc_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 overnight_margin_pc = 15;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.overnight_margin_pc_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // bool order_routing = 16;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.order_routing_), _Internal::kHasBitsOffset + 28, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // string active_time_start = 17;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.active_time_start_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string active_time_stop = 18;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.active_time_stop_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 warning_threshold_pl = 19;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.warning_threshold_pl_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 warning_threshold_loss_limit = 20;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.warning_threshold_loss_limit_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 warning_threshold_margin = 21;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.warning_threshold_margin_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // string firm = 22;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.firm_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .t4proto.v1.common.AccountMode mode = 23;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.mode_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // int32 max_account_position = 24;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.max_account_position_), _Internal::kHasBitsOffset + 26, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // double day_loss_limit = 25;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.day_loss_limit_), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // string display_name = 26;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.display_name_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 wide_market = 27;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.wide_market_), _Internal::kHasBitsOffset + 27, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // bool use_pl_for_margin = 28;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.use_pl_for_margin_), _Internal::kHasBitsOffset + 29, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .t4proto.v1.common.AccountMarginType margin_type = 29;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.margin_type_), _Internal::kHasBitsOffset + 32, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // string risk_details = 30;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.risk_details_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 price_banding = 31;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.price_banding_), _Internal::kHasBitsOffset + 33, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // int32 day_loss_limit_pc = 32;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.day_loss_limit_pc_), _Internal::kHasBitsOffset + 34, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // bool options_settlement = 33;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.options_settlement_), _Internal::kHasBitsOffset + 30, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // string group_name = 34;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.group_name_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool use_premium_for_margin = 35;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.use_premium_for_margin_), _Internal::kHasBitsOffset + 31, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // double warning_threshold_min_net_equity = 36;
    {PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.warning_threshold_min_net_equity_), _Internal::kHasBitsOffset + 35, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\41\12\14\7\0\0\0\0\0\0\7\0\0\0\0\0\0\21\20\0\0\0\4\0\0\0\14\0\0\0\14\0\0\0\12\0\0\0\0\0"
    "t4proto.v1.account.AccountDetails"
    "account_id"
    "account_name"
    "account"
    "firm_id"
    "active_time_start"
    "active_time_stop"
    "firm"
    "display_name"
    "risk_details"
    "group_name"
  }},
};
PROTOBUF_NOINLINE void AccountDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.account.AccountDetails)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.account_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.account_name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.account_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.firm_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.active_time_start_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _impl_.active_time_stop_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _impl_.firm_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _impl_.display_name_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _impl_.risk_details_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _impl_.group_name_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000fc00u) != 0) {
    ::memset(&_impl_.enabled_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.pl_rollover_) -
        reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.pl_rollover_));
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    ::memset(&_impl_.margin_pc_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.warning_threshold_margin_) -
        reinterpret_cast<char*>(&_impl_.margin_pc_)) + sizeof(_impl_.warning_threshold_margin_));
  }
  if ((cached_has_bits & 0xff000000u) != 0) {
    ::memset(&_impl_.mode_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.use_premium_for_margin_) -
        reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.use_premium_for_margin_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    ::memset(&_impl_.margin_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.warning_threshold_min_net_equity_) -
        reinterpret_cast<char*>(&_impl_.margin_type_)) + sizeof(_impl_.warning_threshold_min_net_equity_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AccountDetails::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AccountDetails& this_ = static_cast<const AccountDetails&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AccountDetails::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AccountDetails& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.account.AccountDetails)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string account_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_account_id().empty()) {
      const ::std::string& _s = this_._internal_account_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountDetails.account_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string account_name = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_account_name().empty()) {
      const ::std::string& _s = this_._internal_account_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountDetails.account_name");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string account = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_account().empty()) {
      const ::std::string& _s = this_._internal_account();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountDetails.account");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // .t4proto.v1.common.AccountEnabled enabled = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000400u) != 0) {
    if (this_._internal_enabled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          4, this_._internal_enabled(), target);
    }
  }

  // bool deleted = 5;
  if ((this_._impl_._has_bits_[0] & 0x00001000u) != 0) {
    if (this_._internal_deleted() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this_._internal_deleted(), target);
    }
  }

  // int32 max_clip_size = 6;
  if ((this_._impl_._has_bits_[0] & 0x00000800u) != 0) {
    if (this_._internal_max_clip_size() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<6>(
              stream, this_._internal_max_clip_size(), target);
    }
  }

  // bool pre_trade_disabled = 7;
  if ((this_._impl_._has_bits_[0] & 0x00002000u) != 0) {
    if (this_._internal_pre_trade_disabled() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          7, this_._internal_pre_trade_disabled(), target);
    }
  }

  // bool position_rollover = 8;
  if ((this_._impl_._has_bits_[0] & 0x00004000u) != 0) {
    if (this_._internal_position_rollover() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          8, this_._internal_position_rollover(), target);
    }
  }

  // bool pl_rollover = 9;
  if ((this_._impl_._has_bits_[0] & 0x00008000u) != 0) {
    if (this_._internal_pl_rollover() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          9, this_._internal_pl_rollover(), target);
    }
  }

  // string firm_id = 10;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!this_._internal_firm_id().empty()) {
      const ::std::string& _s = this_._internal_firm_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountDetails.firm_id");
      target = stream->WriteStringMaybeAliased(10, _s, target);
    }
  }

  // double min_balance = 11;
  if ((this_._impl_._has_bits_[0] & 0x00020000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_min_balance()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          11, this_._internal_min_balance(), target);
    }
  }

  // int32 margin_pc = 12;
  if ((this_._impl_._has_bits_[0] & 0x00010000u) != 0) {
    if (this_._internal_margin_pc() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<12>(
              stream, this_._internal_margin_pc(), target);
    }
  }

  // double loss_limit = 13;
  if ((this_._impl_._has_bits_[0] & 0x00040000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_loss_limit()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          13, this_._internal_loss_limit(), target);
    }
  }

  // int32 loss_limit_pc = 14;
  if ((this_._impl_._has_bits_[0] & 0x00080000u) != 0) {
    if (this_._internal_loss_limit_pc() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<14>(
              stream, this_._internal_loss_limit_pc(), target);
    }
  }

  // int32 overnight_margin_pc = 15;
  if ((this_._impl_._has_bits_[0] & 0x00100000u) != 0) {
    if (this_._internal_overnight_margin_pc() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<15>(
              stream, this_._internal_overnight_margin_pc(), target);
    }
  }

  // bool order_routing = 16;
  if ((this_._impl_._has_bits_[0] & 0x10000000u) != 0) {
    if (this_._internal_order_routing() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          16, this_._internal_order_routing(), target);
    }
  }

  // string active_time_start = 17;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (!this_._internal_active_time_start().empty()) {
      const ::std::string& _s = this_._internal_active_time_start();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountDetails.active_time_start");
      target = stream->WriteStringMaybeAliased(17, _s, target);
    }
  }

  // string active_time_stop = 18;
  if ((this_._impl_._has_bits_[0] & 0x00000020u) != 0) {
    if (!this_._internal_active_time_stop().empty()) {
      const ::std::string& _s = this_._internal_active_time_stop();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountDetails.active_time_stop");
      target = stream->WriteStringMaybeAliased(18, _s, target);
    }
  }

  // int32 warning_threshold_pl = 19;
  if ((this_._impl_._has_bits_[0] & 0x00200000u) != 0) {
    if (this_._internal_warning_threshold_pl() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(
          19, this_._internal_warning_threshold_pl(), target);
    }
  }

  // int32 warning_threshold_loss_limit = 20;
  if ((this_._impl_._has_bits_[0] & 0x00400000u) != 0) {
    if (this_._internal_warning_threshold_loss_limit() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(
          20, this_._internal_warning_threshold_loss_limit(), target);
    }
  }

  // int32 warning_threshold_margin = 21;
  if ((this_._impl_._has_bits_[0] & 0x00800000u) != 0) {
    if (this_._internal_warning_threshold_margin() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(
          21, this_._internal_warning_threshold_margin(), target);
    }
  }

  // string firm = 22;
  if ((this_._impl_._has_bits_[0] & 0x00000040u) != 0) {
    if (!this_._internal_firm().empty()) {
      const ::std::string& _s = this_._internal_firm();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountDetails.firm");
      target = stream->WriteStringMaybeAliased(22, _s, target);
    }
  }

  // .t4proto.v1.common.AccountMode mode = 23;
  if ((this_._impl_._has_bits_[0] & 0x01000000u) != 0) {
    if (this_._internal_mode() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          23, this_._internal_mode(), target);
    }
  }

  // int32 max_account_position = 24;
  if ((this_._impl_._has_bits_[0] & 0x04000000u) != 0) {
    if (this_._internal_max_account_position() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(
          24, this_._internal_max_account_position(), target);
    }
  }

  // double day_loss_limit = 25;
  if ((this_._impl_._has_bits_[0] & 0x02000000u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_day_loss_limit()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          25, this_._internal_day_loss_limit(), target);
    }
  }

  // string display_name = 26;
  if ((this_._impl_._has_bits_[0] & 0x00000080u) != 0) {
    if (!this_._internal_display_name().empty()) {
      const ::std::string& _s = this_._internal_display_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountDetails.display_name");
      target = stream->WriteStringMaybeAliased(26, _s, target);
    }
  }

  // int32 wide_market = 27;
  if ((this_._impl_._has_bits_[0] & 0x08000000u) != 0) {
    if (this_._internal_wide_market() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(
          27, this_._internal_wide_market(), target);
    }
  }

  // bool use_pl_for_margin = 28;
  if ((this_._impl_._has_bits_[0] & 0x20000000u) != 0) {
    if (this_._internal_use_pl_for_margin() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          28, this_._internal_use_pl_for_margin(), target);
    }
  }

  // .t4proto.v1.common.AccountMarginType margin_type = 29;
  if ((this_._impl_._has_bits_[1] & 0x00000001u) != 0) {
    if (this_._internal_margin_type() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          29, this_._internal_margin_type(), target);
    }
  }

  // string risk_details = 30;
  if ((this_._impl_._has_bits_[0] & 0x00000100u) != 0) {
    if (!this_._internal_risk_details().empty()) {
      const ::std::string& _s = this_._internal_risk_details();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountDetails.risk_details");
      target = stream->WriteStringMaybeAliased(30, _s, target);
    }
  }

  // int32 price_banding = 31;
  if ((this_._impl_._has_bits_[1] & 0x00000002u) != 0) {
    if (this_._internal_price_banding() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(
          31, this_._internal_price_banding(), target);
    }
  }

  // int32 day_loss_limit_pc = 32;
  if ((this_._impl_._has_bits_[1] & 0x00000004u) != 0) {
    if (this_._internal_day_loss_limit_pc() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(
          32, this_._internal_day_loss_limit_pc(), target);
    }
  }

  // bool options_settlement = 33;
  if ((this_._impl_._has_bits_[0] & 0x40000000u) != 0) {
    if (this_._internal_options_settlement() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          33, this_._internal_options_settlement(), target);
    }
  }

  // string group_name = 34;
  if ((this_._impl_._has_bits_[0] & 0x00000200u) != 0) {
    if (!this_._internal_group_name().empty()) {
      const ::std::string& _s = this_._internal_group_name();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountDetails.group_name");
      target = stream->WriteStringMaybeAliased(34, _s, target);
    }
  }

  // bool use_premium_for_margin = 35;
  if ((this_._impl_._has_bits_[0] & 0x80000000u) != 0) {
    if (this_._internal_use_premium_for_margin() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          35, this_._internal_use_premium_for_margin(), target);
    }
  }

  // double warning_threshold_min_net_equity = 36;
  if ((this_._impl_._has_bits_[1] & 0x00000008u) != 0) {
    if (::absl::bit_cast<::uint64_t>(this_._internal_warning_threshold_min_net_equity()) != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteDoubleToArray(
          36, this_._internal_warning_threshold_min_net_equity(), target);
    }
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.account.AccountDetails)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AccountDetails::ByteSizeLong(const MessageLite& base) {
  const AccountDetails& this_ = static_cast<const AccountDetails&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AccountDetails::ByteSizeLong() const {
  const AccountDetails& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.account.AccountDetails)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // string account_id = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_account_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_account_id());
      }
    }
    // string account_name = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_account_name().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_account_name());
      }
    }
    // string account = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_account().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_account());
      }
    }
    // string firm_id = 10;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_firm_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_firm_id());
      }
    }
    // string active_time_start = 17;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!this_._internal_active_time_start().empty()) {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_active_time_start());
      }
    }
    // string active_time_stop = 18;
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!this_._internal_active_time_stop().empty()) {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_active_time_stop());
      }
    }
    // string firm = 22;
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (!this_._internal_firm().empty()) {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_firm());
      }
    }
    // string display_name = 26;
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (!this_._internal_display_name().empty()) {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_display_name());
      }
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    // string risk_details = 30;
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (!this_._internal_risk_details().empty()) {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_risk_details());
      }
    }
    // string group_name = 34;
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (!this_._internal_group_name().empty()) {
        total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_group_name());
      }
    }
    // .t4proto.v1.common.AccountEnabled enabled = 4;
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (this_._internal_enabled() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_enabled());
      }
    }
    // int32 max_clip_size = 6;
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (this_._internal_max_clip_size() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_max_clip_size());
      }
    }
    // bool deleted = 5;
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (this_._internal_deleted() != 0) {
        total_size += 2;
      }
    }
    // bool pre_trade_disabled = 7;
    if ((cached_has_bits & 0x00002000u) != 0) {
      if (this_._internal_pre_trade_disabled() != 0) {
        total_size += 2;
      }
    }
    // bool position_rollover = 8;
    if ((cached_has_bits & 0x00004000u) != 0) {
      if (this_._internal_position_rollover() != 0) {
        total_size += 2;
      }
    }
    // bool pl_rollover = 9;
    if ((cached_has_bits & 0x00008000u) != 0) {
      if (this_._internal_pl_rollover() != 0) {
        total_size += 2;
      }
    }
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    // int32 margin_pc = 12;
    if ((cached_has_bits & 0x00010000u) != 0) {
      if (this_._internal_margin_pc() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_margin_pc());
      }
    }
    // double min_balance = 11;
    if ((cached_has_bits & 0x00020000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_min_balance()) != 0) {
        total_size += 9;
      }
    }
    // double loss_limit = 13;
    if ((cached_has_bits & 0x00040000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_loss_limit()) != 0) {
        total_size += 9;
      }
    }
    // int32 loss_limit_pc = 14;
    if ((cached_has_bits & 0x00080000u) != 0) {
      if (this_._internal_loss_limit_pc() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_loss_limit_pc());
      }
    }
    // int32 overnight_margin_pc = 15;
    if ((cached_has_bits & 0x00100000u) != 0) {
      if (this_._internal_overnight_margin_pc() != 0) {
        total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
            this_._internal_overnight_margin_pc());
      }
    }
    // int32 warning_threshold_pl = 19;
    if ((cached_has_bits & 0x00200000u) != 0) {
      if (this_._internal_warning_threshold_pl() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                        this_._internal_warning_threshold_pl());
      }
    }
    // int32 warning_threshold_loss_limit = 20;
    if ((cached_has_bits & 0x00400000u) != 0) {
      if (this_._internal_warning_threshold_loss_limit() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                        this_._internal_warning_threshold_loss_limit());
      }
    }
    // int32 warning_threshold_margin = 21;
    if ((cached_has_bits & 0x00800000u) != 0) {
      if (this_._internal_warning_threshold_margin() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                        this_._internal_warning_threshold_margin());
      }
    }
  }
  if ((cached_has_bits & 0xff000000u) != 0) {
    // .t4proto.v1.common.AccountMode mode = 23;
    if ((cached_has_bits & 0x01000000u) != 0) {
      if (this_._internal_mode() != 0) {
        total_size += 2 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_mode());
      }
    }
    // double day_loss_limit = 25;
    if ((cached_has_bits & 0x02000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_day_loss_limit()) != 0) {
        total_size += 10;
      }
    }
    // int32 max_account_position = 24;
    if ((cached_has_bits & 0x04000000u) != 0) {
      if (this_._internal_max_account_position() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                        this_._internal_max_account_position());
      }
    }
    // int32 wide_market = 27;
    if ((cached_has_bits & 0x08000000u) != 0) {
      if (this_._internal_wide_market() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                        this_._internal_wide_market());
      }
    }
    // bool order_routing = 16;
    if ((cached_has_bits & 0x10000000u) != 0) {
      if (this_._internal_order_routing() != 0) {
        total_size += 3;
      }
    }
    // bool use_pl_for_margin = 28;
    if ((cached_has_bits & 0x20000000u) != 0) {
      if (this_._internal_use_pl_for_margin() != 0) {
        total_size += 3;
      }
    }
    // bool options_settlement = 33;
    if ((cached_has_bits & 0x40000000u) != 0) {
      if (this_._internal_options_settlement() != 0) {
        total_size += 3;
      }
    }
    // bool use_premium_for_margin = 35;
    if ((cached_has_bits & 0x80000000u) != 0) {
      if (this_._internal_use_premium_for_margin() != 0) {
        total_size += 3;
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[1];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // .t4proto.v1.common.AccountMarginType margin_type = 29;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (this_._internal_margin_type() != 0) {
        total_size += 2 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_margin_type());
      }
    }
    // int32 price_banding = 31;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_price_banding() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                        this_._internal_price_banding());
      }
    }
    // int32 day_loss_limit_pc = 32;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_day_loss_limit_pc() != 0) {
        total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                        this_._internal_day_loss_limit_pc());
      }
    }
    // double warning_threshold_min_net_equity = 36;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint64_t>(this_._internal_warning_threshold_min_net_equity()) != 0) {
        total_size += 10;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AccountDetails::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AccountDetails*>(&to_msg);
  auto& from = static_cast<const AccountDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.account.AccountDetails)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_account_id().empty()) {
        _this->_internal_set_account_id(from._internal_account_id());
      } else {
        if (_this->_impl_.account_id_.IsDefault()) {
          _this->_internal_set_account_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_account_name().empty()) {
        _this->_internal_set_account_name(from._internal_account_name());
      } else {
        if (_this->_impl_.account_name_.IsDefault()) {
          _this->_internal_set_account_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_account().empty()) {
        _this->_internal_set_account(from._internal_account());
      } else {
        if (_this->_impl_.account_.IsDefault()) {
          _this->_internal_set_account("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_firm_id().empty()) {
        _this->_internal_set_firm_id(from._internal_firm_id());
      } else {
        if (_this->_impl_.firm_id_.IsDefault()) {
          _this->_internal_set_firm_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (!from._internal_active_time_start().empty()) {
        _this->_internal_set_active_time_start(from._internal_active_time_start());
      } else {
        if (_this->_impl_.active_time_start_.IsDefault()) {
          _this->_internal_set_active_time_start("");
        }
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      if (!from._internal_active_time_stop().empty()) {
        _this->_internal_set_active_time_stop(from._internal_active_time_stop());
      } else {
        if (_this->_impl_.active_time_stop_.IsDefault()) {
          _this->_internal_set_active_time_stop("");
        }
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      if (!from._internal_firm().empty()) {
        _this->_internal_set_firm(from._internal_firm());
      } else {
        if (_this->_impl_.firm_.IsDefault()) {
          _this->_internal_set_firm("");
        }
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      if (!from._internal_display_name().empty()) {
        _this->_internal_set_display_name(from._internal_display_name());
      } else {
        if (_this->_impl_.display_name_.IsDefault()) {
          _this->_internal_set_display_name("");
        }
      }
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      if (!from._internal_risk_details().empty()) {
        _this->_internal_set_risk_details(from._internal_risk_details());
      } else {
        if (_this->_impl_.risk_details_.IsDefault()) {
          _this->_internal_set_risk_details("");
        }
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      if (!from._internal_group_name().empty()) {
        _this->_internal_set_group_name(from._internal_group_name());
      } else {
        if (_this->_impl_.group_name_.IsDefault()) {
          _this->_internal_set_group_name("");
        }
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      if (from._internal_enabled() != 0) {
        _this->_impl_.enabled_ = from._impl_.enabled_;
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      if (from._internal_max_clip_size() != 0) {
        _this->_impl_.max_clip_size_ = from._impl_.max_clip_size_;
      }
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      if (from._internal_deleted() != 0) {
        _this->_impl_.deleted_ = from._impl_.deleted_;
      }
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      if (from._internal_pre_trade_disabled() != 0) {
        _this->_impl_.pre_trade_disabled_ = from._impl_.pre_trade_disabled_;
      }
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      if (from._internal_position_rollover() != 0) {
        _this->_impl_.position_rollover_ = from._impl_.position_rollover_;
      }
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      if (from._internal_pl_rollover() != 0) {
        _this->_impl_.pl_rollover_ = from._impl_.pl_rollover_;
      }
    }
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    if ((cached_has_bits & 0x00010000u) != 0) {
      if (from._internal_margin_pc() != 0) {
        _this->_impl_.margin_pc_ = from._impl_.margin_pc_;
      }
    }
    if ((cached_has_bits & 0x00020000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_min_balance()) != 0) {
        _this->_impl_.min_balance_ = from._impl_.min_balance_;
      }
    }
    if ((cached_has_bits & 0x00040000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_loss_limit()) != 0) {
        _this->_impl_.loss_limit_ = from._impl_.loss_limit_;
      }
    }
    if ((cached_has_bits & 0x00080000u) != 0) {
      if (from._internal_loss_limit_pc() != 0) {
        _this->_impl_.loss_limit_pc_ = from._impl_.loss_limit_pc_;
      }
    }
    if ((cached_has_bits & 0x00100000u) != 0) {
      if (from._internal_overnight_margin_pc() != 0) {
        _this->_impl_.overnight_margin_pc_ = from._impl_.overnight_margin_pc_;
      }
    }
    if ((cached_has_bits & 0x00200000u) != 0) {
      if (from._internal_warning_threshold_pl() != 0) {
        _this->_impl_.warning_threshold_pl_ = from._impl_.warning_threshold_pl_;
      }
    }
    if ((cached_has_bits & 0x00400000u) != 0) {
      if (from._internal_warning_threshold_loss_limit() != 0) {
        _this->_impl_.warning_threshold_loss_limit_ = from._impl_.warning_threshold_loss_limit_;
      }
    }
    if ((cached_has_bits & 0x00800000u) != 0) {
      if (from._internal_warning_threshold_margin() != 0) {
        _this->_impl_.warning_threshold_margin_ = from._impl_.warning_threshold_margin_;
      }
    }
  }
  if ((cached_has_bits & 0xff000000u) != 0) {
    if ((cached_has_bits & 0x01000000u) != 0) {
      if (from._internal_mode() != 0) {
        _this->_impl_.mode_ = from._impl_.mode_;
      }
    }
    if ((cached_has_bits & 0x02000000u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_day_loss_limit()) != 0) {
        _this->_impl_.day_loss_limit_ = from._impl_.day_loss_limit_;
      }
    }
    if ((cached_has_bits & 0x04000000u) != 0) {
      if (from._internal_max_account_position() != 0) {
        _this->_impl_.max_account_position_ = from._impl_.max_account_position_;
      }
    }
    if ((cached_has_bits & 0x08000000u) != 0) {
      if (from._internal_wide_market() != 0) {
        _this->_impl_.wide_market_ = from._impl_.wide_market_;
      }
    }
    if ((cached_has_bits & 0x10000000u) != 0) {
      if (from._internal_order_routing() != 0) {
        _this->_impl_.order_routing_ = from._impl_.order_routing_;
      }
    }
    if ((cached_has_bits & 0x20000000u) != 0) {
      if (from._internal_use_pl_for_margin() != 0) {
        _this->_impl_.use_pl_for_margin_ = from._impl_.use_pl_for_margin_;
      }
    }
    if ((cached_has_bits & 0x40000000u) != 0) {
      if (from._internal_options_settlement() != 0) {
        _this->_impl_.options_settlement_ = from._impl_.options_settlement_;
      }
    }
    if ((cached_has_bits & 0x80000000u) != 0) {
      if (from._internal_use_premium_for_margin() != 0) {
        _this->_impl_.use_premium_for_margin_ = from._impl_.use_premium_for_margin_;
      }
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (from._internal_margin_type() != 0) {
        _this->_impl_.margin_type_ = from._impl_.margin_type_;
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_price_banding() != 0) {
        _this->_impl_.price_banding_ = from._impl_.price_banding_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_day_loss_limit_pc() != 0) {
        _this->_impl_.day_loss_limit_pc_ = from._impl_.day_loss_limit_pc_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (::absl::bit_cast<::uint64_t>(from._internal_warning_threshold_min_net_equity()) != 0) {
        _this->_impl_.warning_threshold_min_net_equity_ = from._impl_.warning_threshold_min_net_equity_;
      }
    }
  }
  _this->_impl_._has_bits_.Or(from._impl_._has_bits_);
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AccountDetails::CopyFrom(const AccountDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.account.AccountDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AccountDetails::InternalSwap(AccountDetails* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_id_, &other->_impl_.account_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_name_, &other->_impl_.account_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_, &other->_impl_.account_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.firm_id_, &other->_impl_.firm_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.active_time_start_, &other->_impl_.active_time_start_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.active_time_stop_, &other->_impl_.active_time_stop_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.firm_, &other->_impl_.firm_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.display_name_, &other->_impl_.display_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.risk_details_, &other->_impl_.risk_details_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.group_name_, &other->_impl_.group_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.warning_threshold_min_net_equity_)
      + sizeof(AccountDetails::_impl_.warning_threshold_min_net_equity_)
      - PROTOBUF_FIELD_OFFSET(AccountDetails, _impl_.enabled_)>(
          reinterpret_cast<char*>(&_impl_.enabled_),
          reinterpret_cast<char*>(&other->_impl_.enabled_));
}

::google::protobuf::Metadata AccountDetails::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AccountSnapshotMessage::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::t4proto::v1::account::AccountSnapshotMessage, _impl_._oneof_case_);
};

void AccountSnapshotMessage::set_allocated_account_position(::t4proto::v1::account::AccountPosition* PROTOBUF_NULLABLE account_position) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (account_position) {
    ::google::protobuf::Arena* submessage_arena = account_position->GetArena();
    if (message_arena != submessage_arena) {
      account_position = ::google::protobuf::internal::GetOwnedMessage(message_arena, account_position, submessage_arena);
    }
    set_has_account_position();
    _impl_.payload_.account_position_ = account_position;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountSnapshotMessage.account_position)
}
void AccountSnapshotMessage::set_allocated_account_update(::t4proto::v1::account::AccountUpdate* PROTOBUF_NULLABLE account_update) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (account_update) {
    ::google::protobuf::Arena* submessage_arena = account_update->GetArena();
    if (message_arena != submessage_arena) {
      account_update = ::google::protobuf::internal::GetOwnedMessage(message_arena, account_update, submessage_arena);
    }
    set_has_account_update();
    _impl_.payload_.account_update_ = account_update;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountSnapshotMessage.account_update)
}
void AccountSnapshotMessage::set_allocated_account_details(::t4proto::v1::account::AccountDetails* PROTOBUF_NULLABLE account_details) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (account_details) {
    ::google::protobuf::Arena* submessage_arena = account_details->GetArena();
    if (message_arena != submessage_arena) {
      account_details = ::google::protobuf::internal::GetOwnedMessage(message_arena, account_details, submessage_arena);
    }
    set_has_account_details();
    _impl_.payload_.account_details_ = account_details;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountSnapshotMessage.account_details)
}
void AccountSnapshotMessage::set_allocated_account_currency(::t4proto::v1::account::AccountCurrency* PROTOBUF_NULLABLE account_currency) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (account_currency) {
    ::google::protobuf::Arena* submessage_arena = account_currency->GetArena();
    if (message_arena != submessage_arena) {
      account_currency = ::google::protobuf::internal::GetOwnedMessage(message_arena, account_currency, submessage_arena);
    }
    set_has_account_currency();
    _impl_.payload_.account_currency_ = account_currency;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountSnapshotMessage.account_currency)
}
void AccountSnapshotMessage::set_allocated_market_details(::t4proto::v1::market::MarketDetails* PROTOBUF_NULLABLE market_details) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (market_details) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(market_details)->GetArena();
    if (message_arena != submessage_arena) {
      market_details = ::google::protobuf::internal::GetOwnedMessage(message_arena, market_details, submessage_arena);
    }
    set_has_market_details();
    _impl_.payload_.market_details_ = market_details;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountSnapshotMessage.market_details)
}
void AccountSnapshotMessage::clear_market_details() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kMarketDetails) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.market_details_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.market_details_);
    }
    clear_has_payload();
  }
}
void AccountSnapshotMessage::set_allocated_order_update_multi(::t4proto::v1::orderrouting::OrderUpdateMulti* PROTOBUF_NULLABLE order_update_multi) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_payload();
  if (order_update_multi) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(order_update_multi)->GetArena();
    if (message_arena != submessage_arena) {
      order_update_multi = ::google::protobuf::internal::GetOwnedMessage(message_arena, order_update_multi, submessage_arena);
    }
    set_has_order_update_multi();
    _impl_.payload_.order_update_multi_ = order_update_multi;
  }
  // @@protoc_insertion_point(field_set_allocated:t4proto.v1.account.AccountSnapshotMessage.order_update_multi)
}
void AccountSnapshotMessage::clear_order_update_multi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kOrderUpdateMulti) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.order_update_multi_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.order_update_multi_);
    }
    clear_has_payload();
  }
}
AccountSnapshotMessage::AccountSnapshotMessage(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AccountSnapshotMessage_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.account.AccountSnapshotMessage)
}
PROTOBUF_NDEBUG_INLINE AccountSnapshotMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::t4proto::v1::account::AccountSnapshotMessage& from_msg)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

AccountSnapshotMessage::AccountSnapshotMessage(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AccountSnapshotMessage& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AccountSnapshotMessage_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AccountSnapshotMessage* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  switch (payload_case()) {
    case PAYLOAD_NOT_SET:
      break;
      case kAccountPosition:
        _impl_.payload_.account_position_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_.account_position_);
        break;
      case kAccountUpdate:
        _impl_.payload_.account_update_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_.account_update_);
        break;
      case kAccountDetails:
        _impl_.payload_.account_details_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_.account_details_);
        break;
      case kAccountCurrency:
        _impl_.payload_.account_currency_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_.account_currency_);
        break;
      case kMarketDetails:
        _impl_.payload_.market_details_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_.market_details_);
        break;
      case kOrderUpdateMulti:
        _impl_.payload_.order_update_multi_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_.order_update_multi_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.account.AccountSnapshotMessage)
}
PROTOBUF_NDEBUG_INLINE AccountSnapshotMessage::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : payload_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void AccountSnapshotMessage::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AccountSnapshotMessage::~AccountSnapshotMessage() {
  // @@protoc_insertion_point(destructor:t4proto.v1.account.AccountSnapshotMessage)
  SharedDtor(*this);
}
inline void AccountSnapshotMessage::SharedDtor(MessageLite& self) {
  AccountSnapshotMessage& this_ = static_cast<AccountSnapshotMessage&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  if (this_.has_payload()) {
    this_.clear_payload();
  }
  this_._impl_.~Impl_();
}

void AccountSnapshotMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:t4proto.v1.account.AccountSnapshotMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (payload_case()) {
    case kAccountPosition: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.account_position_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.account_position_);
      }
      break;
    }
    case kAccountUpdate: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.account_update_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.account_update_);
      }
      break;
    }
    case kAccountDetails: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.account_details_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.account_details_);
      }
      break;
    }
    case kAccountCurrency: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.account_currency_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.account_currency_);
      }
      break;
    }
    case kMarketDetails: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.market_details_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.market_details_);
      }
      break;
    }
    case kOrderUpdateMulti: {
      if (GetArena() == nullptr) {
        delete _impl_.payload_.order_update_multi_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.order_update_multi_);
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}


inline void* PROTOBUF_NONNULL AccountSnapshotMessage::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AccountSnapshotMessage(arena);
}
constexpr auto AccountSnapshotMessage::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(AccountSnapshotMessage),
                                            alignof(AccountSnapshotMessage));
}
constexpr auto AccountSnapshotMessage::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AccountSnapshotMessage_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AccountSnapshotMessage::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AccountSnapshotMessage>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AccountSnapshotMessage::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AccountSnapshotMessage>(), &AccountSnapshotMessage::ByteSizeLong,
              &AccountSnapshotMessage::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AccountSnapshotMessage, _impl_._cached_size_),
          false,
      },
      &AccountSnapshotMessage::kDescriptorMethods,
      &descriptor_table_t4_2fv1_2faccount_2faccount_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AccountSnapshotMessage_class_data_ =
        AccountSnapshotMessage::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AccountSnapshotMessage::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AccountSnapshotMessage_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AccountSnapshotMessage_class_data_.tc_table);
  return AccountSnapshotMessage_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 6, 6, 0, 2>
AccountSnapshotMessage::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967043,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    AccountSnapshotMessage_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::account::AccountSnapshotMessage>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .t4proto.v1.account.AccountPosition account_position = 3;
    {PROTOBUF_FIELD_OFFSET(AccountSnapshotMessage, _impl_.payload_.account_position_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.account.AccountUpdate account_update = 4;
    {PROTOBUF_FIELD_OFFSET(AccountSnapshotMessage, _impl_.payload_.account_update_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.account.AccountDetails account_details = 5;
    {PROTOBUF_FIELD_OFFSET(AccountSnapshotMessage, _impl_.payload_.account_details_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.account.AccountCurrency account_currency = 6;
    {PROTOBUF_FIELD_OFFSET(AccountSnapshotMessage, _impl_.payload_.account_currency_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.market.MarketDetails market_details = 7;
    {PROTOBUF_FIELD_OFFSET(AccountSnapshotMessage, _impl_.payload_.market_details_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .t4proto.v1.orderrouting.OrderUpdateMulti order_update_multi = 8;
    {PROTOBUF_FIELD_OFFSET(AccountSnapshotMessage, _impl_.payload_.order_update_multi_), _Internal::kOneofCaseOffset + 0, 5,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::t4proto::v1::account::AccountPosition>()},
      {::_pbi::TcParser::GetTable<::t4proto::v1::account::AccountUpdate>()},
      {::_pbi::TcParser::GetTable<::t4proto::v1::account::AccountDetails>()},
      {::_pbi::TcParser::GetTable<::t4proto::v1::account::AccountCurrency>()},
      {::_pbi::TcParser::GetTable<::t4proto::v1::market::MarketDetails>()},
      {::_pbi::TcParser::GetTable<::t4proto::v1::orderrouting::OrderUpdateMulti>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void AccountSnapshotMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.account.AccountSnapshotMessage)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AccountSnapshotMessage::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AccountSnapshotMessage& this_ = static_cast<const AccountSnapshotMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AccountSnapshotMessage::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AccountSnapshotMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.account.AccountSnapshotMessage)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  switch (this_.payload_case()) {
    case kAccountPosition: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          3, *this_._impl_.payload_.account_position_, this_._impl_.payload_.account_position_->GetCachedSize(), target,
          stream);
      break;
    }
    case kAccountUpdate: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          4, *this_._impl_.payload_.account_update_, this_._impl_.payload_.account_update_->GetCachedSize(), target,
          stream);
      break;
    }
    case kAccountDetails: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          5, *this_._impl_.payload_.account_details_, this_._impl_.payload_.account_details_->GetCachedSize(), target,
          stream);
      break;
    }
    case kAccountCurrency: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          6, *this_._impl_.payload_.account_currency_, this_._impl_.payload_.account_currency_->GetCachedSize(), target,
          stream);
      break;
    }
    case kMarketDetails: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          7, *this_._impl_.payload_.market_details_, this_._impl_.payload_.market_details_->GetCachedSize(), target,
          stream);
      break;
    }
    case kOrderUpdateMulti: {
      target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
          8, *this_._impl_.payload_.order_update_multi_, this_._impl_.payload_.order_update_multi_->GetCachedSize(), target,
          stream);
      break;
    }
    default:
      break;
  }
  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.account.AccountSnapshotMessage)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AccountSnapshotMessage::ByteSizeLong(const MessageLite& base) {
  const AccountSnapshotMessage& this_ = static_cast<const AccountSnapshotMessage&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AccountSnapshotMessage::ByteSizeLong() const {
  const AccountSnapshotMessage& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.account.AccountSnapshotMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  switch (this_.payload_case()) {
    // .t4proto.v1.account.AccountPosition account_position = 3;
    case kAccountPosition: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.account_position_);
      break;
    }
    // .t4proto.v1.account.AccountUpdate account_update = 4;
    case kAccountUpdate: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.account_update_);
      break;
    }
    // .t4proto.v1.account.AccountDetails account_details = 5;
    case kAccountDetails: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.account_details_);
      break;
    }
    // .t4proto.v1.account.AccountCurrency account_currency = 6;
    case kAccountCurrency: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.account_currency_);
      break;
    }
    // .t4proto.v1.market.MarketDetails market_details = 7;
    case kMarketDetails: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.market_details_);
      break;
    }
    // .t4proto.v1.orderrouting.OrderUpdateMulti order_update_multi = 8;
    case kOrderUpdateMulti: {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payload_.order_update_multi_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AccountSnapshotMessage::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AccountSnapshotMessage*>(&to_msg);
  auto& from = static_cast<const AccountSnapshotMessage&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.account.AccountSnapshotMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_payload();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kAccountPosition: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.account_position_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_.account_position_);
        } else {
          _this->_impl_.payload_.account_position_->MergeFrom(*from._impl_.payload_.account_position_);
        }
        break;
      }
      case kAccountUpdate: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.account_update_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_.account_update_);
        } else {
          _this->_impl_.payload_.account_update_->MergeFrom(*from._impl_.payload_.account_update_);
        }
        break;
      }
      case kAccountDetails: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.account_details_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_.account_details_);
        } else {
          _this->_impl_.payload_.account_details_->MergeFrom(*from._impl_.payload_.account_details_);
        }
        break;
      }
      case kAccountCurrency: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.account_currency_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_.account_currency_);
        } else {
          _this->_impl_.payload_.account_currency_->MergeFrom(*from._impl_.payload_.account_currency_);
        }
        break;
      }
      case kMarketDetails: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.market_details_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_.market_details_);
        } else {
          _this->_impl_.payload_.market_details_->MergeFrom(*from._impl_.payload_.market_details_);
        }
        break;
      }
      case kOrderUpdateMulti: {
        if (oneof_needs_init) {
          _this->_impl_.payload_.order_update_multi_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.payload_.order_update_multi_);
        } else {
          _this->_impl_.payload_.order_update_multi_->MergeFrom(*from._impl_.payload_.order_update_multi_);
        }
        break;
      }
      case PAYLOAD_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AccountSnapshotMessage::CopyFrom(const AccountSnapshotMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.account.AccountSnapshotMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AccountSnapshotMessage::InternalSwap(AccountSnapshotMessage* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.payload_, other->_impl_.payload_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AccountSnapshotMessage::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AccountSnapshot::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AccountSnapshot>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AccountSnapshot, _impl_._has_bits_);
};

AccountSnapshot::AccountSnapshot(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AccountSnapshot_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.account.AccountSnapshot)
}
PROTOBUF_NDEBUG_INLINE AccountSnapshot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::t4proto::v1::account::AccountSnapshot& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        messages_{visibility, arena, from.messages_},
        account_id_(arena, from.account_id_) {}

AccountSnapshot::AccountSnapshot(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AccountSnapshot& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AccountSnapshot_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AccountSnapshot* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, last_update_requested_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, last_update_requested_),
           offsetof(Impl_, due_to_connection_) -
               offsetof(Impl_, last_update_requested_) +
               sizeof(Impl_::due_to_connection_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.account.AccountSnapshot)
}
PROTOBUF_NDEBUG_INLINE AccountSnapshot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        messages_{visibility, arena},
        account_id_(arena) {}

inline void AccountSnapshot::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, last_update_requested_),
           0,
           offsetof(Impl_, due_to_connection_) -
               offsetof(Impl_, last_update_requested_) +
               sizeof(Impl_::due_to_connection_));
}
AccountSnapshot::~AccountSnapshot() {
  // @@protoc_insertion_point(destructor:t4proto.v1.account.AccountSnapshot)
  SharedDtor(*this);
}
inline void AccountSnapshot::SharedDtor(MessageLite& self) {
  AccountSnapshot& this_ = static_cast<AccountSnapshot&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.account_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AccountSnapshot::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AccountSnapshot(arena);
}
constexpr auto AccountSnapshot::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AccountSnapshot, _impl_.messages_) +
          decltype(AccountSnapshot::_impl_.messages_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(AccountSnapshot), alignof(AccountSnapshot), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AccountSnapshot::PlacementNew_,
                                 sizeof(AccountSnapshot),
                                 alignof(AccountSnapshot));
  }
}
constexpr auto AccountSnapshot::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AccountSnapshot_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AccountSnapshot::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AccountSnapshot>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AccountSnapshot::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AccountSnapshot>(), &AccountSnapshot::ByteSizeLong,
              &AccountSnapshot::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AccountSnapshot, _impl_._cached_size_),
          false,
      },
      &AccountSnapshot::kDescriptorMethods,
      &descriptor_table_t4_2fv1_2faccount_2faccount_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AccountSnapshot_class_data_ =
        AccountSnapshot::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AccountSnapshot::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AccountSnapshot_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AccountSnapshot_class_data_.tc_table);
  return AccountSnapshot_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 1, 53, 2>
AccountSnapshot::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AccountSnapshot, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    AccountSnapshot_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::account::AccountSnapshot>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string account_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AccountSnapshot, _impl_.account_id_)}},
    // int64 last_update_requested = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(AccountSnapshot, _impl_.last_update_requested_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(AccountSnapshot, _impl_.last_update_requested_)}},
    // int64 last_update_supplied = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(AccountSnapshot, _impl_.last_update_supplied_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(AccountSnapshot, _impl_.last_update_supplied_)}},
    // .t4proto.v1.common.AccountStatus status = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AccountSnapshot, _impl_.status_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(AccountSnapshot, _impl_.status_)}},
    // bool due_to_connection = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AccountSnapshot, _impl_.due_to_connection_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(AccountSnapshot, _impl_.due_to_connection_)}},
    // repeated .t4proto.v1.account.AccountSnapshotMessage messages = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(AccountSnapshot, _impl_.messages_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string account_id = 1;
    {PROTOBUF_FIELD_OFFSET(AccountSnapshot, _impl_.account_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 last_update_requested = 2;
    {PROTOBUF_FIELD_OFFSET(AccountSnapshot, _impl_.last_update_requested_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // int64 last_update_supplied = 3;
    {PROTOBUF_FIELD_OFFSET(AccountSnapshot, _impl_.last_update_supplied_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt64)},
    // .t4proto.v1.common.AccountStatus status = 4;
    {PROTOBUF_FIELD_OFFSET(AccountSnapshot, _impl_.status_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // bool due_to_connection = 5;
    {PROTOBUF_FIELD_OFFSET(AccountSnapshot, _impl_.due_to_connection_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // repeated .t4proto.v1.account.AccountSnapshotMessage messages = 6;
    {PROTOBUF_FIELD_OFFSET(AccountSnapshot, _impl_.messages_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::t4proto::v1::account::AccountSnapshotMessage>()},
  }},
  {{
    "\42\12\0\0\0\0\0\0"
    "t4proto.v1.account.AccountSnapshot"
    "account_id"
  }},
};
PROTOBUF_NOINLINE void AccountSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.account.AccountSnapshot)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.messages_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.account_id_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000001eu) != 0) {
    ::memset(&_impl_.last_update_requested_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.due_to_connection_) -
        reinterpret_cast<char*>(&_impl_.last_update_requested_)) + sizeof(_impl_.due_to_connection_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AccountSnapshot::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AccountSnapshot& this_ = static_cast<const AccountSnapshot&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AccountSnapshot::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AccountSnapshot& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.account.AccountSnapshot)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string account_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_account_id().empty()) {
      const ::std::string& _s = this_._internal_account_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountSnapshot.account_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // int64 last_update_requested = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (this_._internal_last_update_requested() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<2>(
              stream, this_._internal_last_update_requested(), target);
    }
  }

  // int64 last_update_supplied = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (this_._internal_last_update_supplied() != 0) {
      target =
          ::google::protobuf::internal::WireFormatLite::WriteInt64ToArrayWithField<3>(
              stream, this_._internal_last_update_supplied(), target);
    }
  }

  // .t4proto.v1.common.AccountStatus status = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (this_._internal_status() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteEnumToArray(
          4, this_._internal_status(), target);
    }
  }

  // bool due_to_connection = 5;
  if ((this_._impl_._has_bits_[0] & 0x00000010u) != 0) {
    if (this_._internal_due_to_connection() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this_._internal_due_to_connection(), target);
    }
  }

  // repeated .t4proto.v1.account.AccountSnapshotMessage messages = 6;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_messages_size());
       i < n; i++) {
    const auto& repfield = this_._internal_messages().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            6, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.account.AccountSnapshot)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AccountSnapshot::ByteSizeLong(const MessageLite& base) {
  const AccountSnapshot& this_ = static_cast<const AccountSnapshot&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AccountSnapshot::ByteSizeLong() const {
  const AccountSnapshot& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.account.AccountSnapshot)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .t4proto.v1.account.AccountSnapshotMessage messages = 6;
    {
      total_size += 1UL * this_._internal_messages_size();
      for (const auto& msg : this_._internal_messages()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // string account_id = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_account_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_account_id());
      }
    }
    // int64 last_update_requested = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (this_._internal_last_update_requested() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_last_update_requested());
      }
    }
    // int64 last_update_supplied = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (this_._internal_last_update_supplied() != 0) {
        total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
            this_._internal_last_update_supplied());
      }
    }
    // .t4proto.v1.common.AccountStatus status = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (this_._internal_status() != 0) {
        total_size += 1 +
                      ::_pbi::WireFormatLite::EnumSize(this_._internal_status());
      }
    }
    // bool due_to_connection = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (this_._internal_due_to_connection() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AccountSnapshot::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AccountSnapshot*>(&to_msg);
  auto& from = static_cast<const AccountSnapshot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.account.AccountSnapshot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_messages()->MergeFrom(
      from._internal_messages());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_account_id().empty()) {
        _this->_internal_set_account_id(from._internal_account_id());
      } else {
        if (_this->_impl_.account_id_.IsDefault()) {
          _this->_internal_set_account_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (from._internal_last_update_requested() != 0) {
        _this->_impl_.last_update_requested_ = from._impl_.last_update_requested_;
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (from._internal_last_update_supplied() != 0) {
        _this->_impl_.last_update_supplied_ = from._impl_.last_update_supplied_;
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (from._internal_status() != 0) {
        _this->_impl_.status_ = from._impl_.status_;
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      if (from._internal_due_to_connection() != 0) {
        _this->_impl_.due_to_connection_ = from._impl_.due_to_connection_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AccountSnapshot::CopyFrom(const AccountSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.account.AccountSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AccountSnapshot::InternalSwap(AccountSnapshot* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.messages_.InternalSwap(&other->_impl_.messages_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_id_, &other->_impl_.account_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountSnapshot, _impl_.due_to_connection_)
      + sizeof(AccountSnapshot::_impl_.due_to_connection_)
      - PROTOBUF_FIELD_OFFSET(AccountSnapshot, _impl_.last_update_requested_)>(
          reinterpret_cast<char*>(&_impl_.last_update_requested_),
          reinterpret_cast<char*>(&other->_impl_.last_update_requested_));
}

::google::protobuf::Metadata AccountSnapshot::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AccountProfit::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AccountProfit>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_._has_bits_);
};

void AccountProfit::clear_update_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.update_time_ != nullptr) _impl_.update_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
AccountProfit::AccountProfit(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AccountProfit_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.account.AccountProfit)
}
PROTOBUF_NDEBUG_INLINE AccountProfit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::t4proto::v1::account::AccountProfit& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        account_id_(arena, from.account_id_) {}

AccountProfit::AccountProfit(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AccountProfit& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AccountProfit_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AccountProfit* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.update_time_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.update_time_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, upl_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, upl_),
           offsetof(Impl_, is_alerting_full_margin_) -
               offsetof(Impl_, upl_) +
               sizeof(Impl_::is_alerting_full_margin_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.account.AccountProfit)
}
PROTOBUF_NDEBUG_INLINE AccountProfit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        account_id_(arena) {}

inline void AccountProfit::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, update_time_),
           0,
           offsetof(Impl_, is_alerting_full_margin_) -
               offsetof(Impl_, update_time_) +
               sizeof(Impl_::is_alerting_full_margin_));
}
AccountProfit::~AccountProfit() {
  // @@protoc_insertion_point(destructor:t4proto.v1.account.AccountProfit)
  SharedDtor(*this);
}
inline void AccountProfit::SharedDtor(MessageLite& self) {
  AccountProfit& this_ = static_cast<AccountProfit&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.account_id_.Destroy();
  delete this_._impl_.update_time_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AccountProfit::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AccountProfit(arena);
}
constexpr auto AccountProfit::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AccountProfit),
                                            alignof(AccountProfit));
}
constexpr auto AccountProfit::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AccountProfit_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AccountProfit::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AccountProfit>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AccountProfit::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AccountProfit>(), &AccountProfit::ByteSizeLong,
              &AccountProfit::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_._cached_size_),
          false,
      },
      &AccountProfit::kDescriptorMethods,
      &descriptor_table_t4_2fv1_2faccount_2faccount_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AccountProfit_class_data_ =
        AccountProfit::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AccountProfit::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AccountProfit_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AccountProfit_class_data_.tc_table);
  return AccountProfit_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 1, 59, 2>
AccountProfit::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    AccountProfit_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::account::AccountProfit>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string account_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.account_id_)}},
    // .google.protobuf.Timestamp update_time = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.update_time_)}},
    // optional double upl = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.upl_)}},
    // optional double upl_trade = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 3, 0, PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.upl_trade_)}},
    // optional double rpl = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 4, 0, PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.rpl_)}},
    // optional double day_upl = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 5, 0, PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.day_upl_)}},
    // optional double day_upl_trade = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 6, 0, PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.day_upl_trade_)}},
    // optional double day_rpl = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 7, 0, PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.day_rpl_)}},
    // optional int32 warning_pl = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AccountProfit, _impl_.warning_pl_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.warning_pl_)}},
    // optional int32 warning_loss_limit = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AccountProfit, _impl_.warning_loss_limit_), 9>(),
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.warning_loss_limit_)}},
    // optional int32 warning_margin = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AccountProfit, _impl_.warning_margin_), 10>(),
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.warning_margin_)}},
    // optional int32 total_working_orders = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AccountProfit, _impl_.total_working_orders_), 11>(),
     {96, 11, 0, PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.total_working_orders_)}},
    // optional int32 total_working_volume = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AccountProfit, _impl_.total_working_volume_), 12>(),
     {104, 12, 0, PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.total_working_volume_)}},
    // optional bool is_alerting_live_margin = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AccountProfit, _impl_.is_alerting_live_margin_), 13>(),
     {112, 13, 0, PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.is_alerting_live_margin_)}},
    // optional bool is_alerting_full_margin = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AccountProfit, _impl_.is_alerting_full_margin_), 14>(),
     {120, 14, 0, PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.is_alerting_full_margin_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string account_id = 1;
    {PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.account_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp update_time = 2;
    {PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.update_time_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional double upl = 3;
    {PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.upl_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double upl_trade = 4;
    {PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.upl_trade_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double rpl = 5;
    {PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.rpl_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double day_upl = 6;
    {PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.day_upl_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double day_upl_trade = 7;
    {PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.day_upl_trade_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double day_rpl = 8;
    {PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.day_rpl_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional int32 warning_pl = 9;
    {PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.warning_pl_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 warning_loss_limit = 10;
    {PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.warning_loss_limit_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 warning_margin = 11;
    {PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.warning_margin_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 total_working_orders = 12;
    {PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.total_working_orders_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 total_working_volume = 13;
    {PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.total_working_volume_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool is_alerting_live_margin = 14;
    {PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.is_alerting_live_margin_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool is_alerting_full_margin = 15;
    {PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.is_alerting_full_margin_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }},
  {{
    "\40\12\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "t4proto.v1.account.AccountProfit"
    "account_id"
  }},
};
PROTOBUF_NOINLINE void AccountProfit::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.account.AccountProfit)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.account_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.update_time_ != nullptr);
      _impl_.update_time_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000fcu) != 0) {
    ::memset(&_impl_.upl_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.day_rpl_) -
        reinterpret_cast<char*>(&_impl_.upl_)) + sizeof(_impl_.day_rpl_));
  }
  if ((cached_has_bits & 0x00007f00u) != 0) {
    ::memset(&_impl_.warning_pl_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.is_alerting_full_margin_) -
        reinterpret_cast<char*>(&_impl_.warning_pl_)) + sizeof(_impl_.is_alerting_full_margin_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AccountProfit::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AccountProfit& this_ = static_cast<const AccountProfit&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AccountProfit::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AccountProfit& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.account.AccountProfit)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string account_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_account_id().empty()) {
      const ::std::string& _s = this_._internal_account_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountProfit.account_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .google.protobuf.Timestamp update_time = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.update_time_, this_._impl_.update_time_->GetCachedSize(), target,
        stream);
  }

  // optional double upl = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        3, this_._internal_upl(), target);
  }

  // optional double upl_trade = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        4, this_._internal_upl_trade(), target);
  }

  // optional double rpl = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        5, this_._internal_rpl(), target);
  }

  // optional double day_upl = 6;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        6, this_._internal_day_upl(), target);
  }

  // optional double day_upl_trade = 7;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        7, this_._internal_day_upl_trade(), target);
  }

  // optional double day_rpl = 8;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        8, this_._internal_day_rpl(), target);
  }

  // optional int32 warning_pl = 9;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<9>(
            stream, this_._internal_warning_pl(), target);
  }

  // optional int32 warning_loss_limit = 10;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<10>(
            stream, this_._internal_warning_loss_limit(), target);
  }

  // optional int32 warning_margin = 11;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<11>(
            stream, this_._internal_warning_margin(), target);
  }

  // optional int32 total_working_orders = 12;
  if ((cached_has_bits & 0x00000800u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<12>(
            stream, this_._internal_total_working_orders(), target);
  }

  // optional int32 total_working_volume = 13;
  if ((cached_has_bits & 0x00001000u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<13>(
            stream, this_._internal_total_working_volume(), target);
  }

  // optional bool is_alerting_live_margin = 14;
  if ((cached_has_bits & 0x00002000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        14, this_._internal_is_alerting_live_margin(), target);
  }

  // optional bool is_alerting_full_margin = 15;
  if ((cached_has_bits & 0x00004000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        15, this_._internal_is_alerting_full_margin(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.account.AccountProfit)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AccountProfit::ByteSizeLong(const MessageLite& base) {
  const AccountProfit& this_ = static_cast<const AccountProfit&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AccountProfit::ByteSizeLong() const {
  const AccountProfit& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.account.AccountProfit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x000000fcu & cached_has_bits) * 9;
  total_size += ::absl::popcount(0x00006000u & cached_has_bits) * 2;
  if ((cached_has_bits & 0x00000003u) != 0) {
    // string account_id = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_account_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_account_id());
      }
    }
    // .google.protobuf.Timestamp update_time = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.update_time_);
    }
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    // optional int32 warning_pl = 9;
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_warning_pl());
    }
    // optional int32 warning_loss_limit = 10;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_warning_loss_limit());
    }
    // optional int32 warning_margin = 11;
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_warning_margin());
    }
    // optional int32 total_working_orders = 12;
    if ((cached_has_bits & 0x00000800u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_total_working_orders());
    }
    // optional int32 total_working_volume = 13;
    if ((cached_has_bits & 0x00001000u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_total_working_volume());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AccountProfit::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AccountProfit*>(&to_msg);
  auto& from = static_cast<const AccountProfit&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.account.AccountProfit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_account_id().empty()) {
        _this->_internal_set_account_id(from._internal_account_id());
      } else {
        if (_this->_impl_.account_id_.IsDefault()) {
          _this->_internal_set_account_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.update_time_ != nullptr);
      if (_this->_impl_.update_time_ == nullptr) {
        _this->_impl_.update_time_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.update_time_);
      } else {
        _this->_impl_.update_time_->MergeFrom(*from._impl_.update_time_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.upl_ = from._impl_.upl_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.upl_trade_ = from._impl_.upl_trade_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.rpl_ = from._impl_.rpl_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.day_upl_ = from._impl_.day_upl_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.day_upl_trade_ = from._impl_.day_upl_trade_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.day_rpl_ = from._impl_.day_rpl_;
    }
  }
  if ((cached_has_bits & 0x00007f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.warning_pl_ = from._impl_.warning_pl_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.warning_loss_limit_ = from._impl_.warning_loss_limit_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.warning_margin_ = from._impl_.warning_margin_;
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_impl_.total_working_orders_ = from._impl_.total_working_orders_;
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _this->_impl_.total_working_volume_ = from._impl_.total_working_volume_;
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _this->_impl_.is_alerting_live_margin_ = from._impl_.is_alerting_live_margin_;
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      _this->_impl_.is_alerting_full_margin_ = from._impl_.is_alerting_full_margin_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AccountProfit::CopyFrom(const AccountProfit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.account.AccountProfit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AccountProfit::InternalSwap(AccountProfit* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_id_, &other->_impl_.account_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.is_alerting_full_margin_)
      + sizeof(AccountProfit::_impl_.is_alerting_full_margin_)
      - PROTOBUF_FIELD_OFFSET(AccountProfit, _impl_.update_time_)>(
          reinterpret_cast<char*>(&_impl_.update_time_),
          reinterpret_cast<char*>(&other->_impl_.update_time_));
}

::google::protobuf::Metadata AccountProfit::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AccountPositionProfit::_Internal {
 public:
  using HasBits =
      decltype(::std::declval<AccountPositionProfit>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_._has_bits_);
};

void AccountPositionProfit::clear_update_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.update_time_ != nullptr) _impl_.update_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
AccountPositionProfit::AccountPositionProfit(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AccountPositionProfit_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:t4proto.v1.account.AccountPositionProfit)
}
PROTOBUF_NDEBUG_INLINE AccountPositionProfit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::t4proto::v1::account::AccountPositionProfit& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        account_id_(arena, from.account_id_),
        exchange_id_(arena, from.exchange_id_),
        contract_id_(arena, from.contract_id_),
        market_id_(arena, from.market_id_) {}

AccountPositionProfit::AccountPositionProfit(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const AccountPositionProfit& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, AccountPositionProfit_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AccountPositionProfit* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.update_time_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.update_time_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, net_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, net_),
           offsetof(Impl_, is_implied_) -
               offsetof(Impl_, net_) +
               sizeof(Impl_::is_implied_));

  // @@protoc_insertion_point(copy_constructor:t4proto.v1.account.AccountPositionProfit)
}
PROTOBUF_NDEBUG_INLINE AccountPositionProfit::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        account_id_(arena),
        exchange_id_(arena),
        contract_id_(arena),
        market_id_(arena) {}

inline void AccountPositionProfit::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, update_time_),
           0,
           offsetof(Impl_, is_implied_) -
               offsetof(Impl_, update_time_) +
               sizeof(Impl_::is_implied_));
}
AccountPositionProfit::~AccountPositionProfit() {
  // @@protoc_insertion_point(destructor:t4proto.v1.account.AccountPositionProfit)
  SharedDtor(*this);
}
inline void AccountPositionProfit::SharedDtor(MessageLite& self) {
  AccountPositionProfit& this_ = static_cast<AccountPositionProfit&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.account_id_.Destroy();
  this_._impl_.exchange_id_.Destroy();
  this_._impl_.contract_id_.Destroy();
  this_._impl_.market_id_.Destroy();
  delete this_._impl_.update_time_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL AccountPositionProfit::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) AccountPositionProfit(arena);
}
constexpr auto AccountPositionProfit::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AccountPositionProfit),
                                            alignof(AccountPositionProfit));
}
constexpr auto AccountPositionProfit::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_AccountPositionProfit_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &AccountPositionProfit::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<AccountPositionProfit>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &AccountPositionProfit::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<AccountPositionProfit>(), &AccountPositionProfit::ByteSizeLong,
              &AccountPositionProfit::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_._cached_size_),
          false,
      },
      &AccountPositionProfit::kDescriptorMethods,
      &descriptor_table_t4_2fv1_2faccount_2faccount_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const
    ::google::protobuf::internal::ClassDataFull AccountPositionProfit_class_data_ =
        AccountPositionProfit::InternalGenerateClassData_();

PROTOBUF_ATTRIBUTE_WEAK const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL
AccountPositionProfit::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&AccountPositionProfit_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(AccountPositionProfit_class_data_.tc_table);
  return AccountPositionProfit_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 23, 1, 106, 2>
AccountPositionProfit::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_._has_bits_),
    0, // no _extensions_
    23, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4286578688,  // skipmap
    offsetof(decltype(_table_), field_entries),
    23,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    AccountPositionProfit_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::t4proto::v1::account::AccountPositionProfit>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string account_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.account_id_)}},
    // string exchange_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.exchange_id_)}},
    // string contract_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.contract_id_)}},
    // string market_id = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 3, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.market_id_)}},
    // bool delayed = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AccountPositionProfit, _impl_.delayed_), 19>(),
     {40, 19, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.delayed_)}},
    // .google.protobuf.Timestamp update_time = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 4, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.update_time_)}},
    // bool is_options = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AccountPositionProfit, _impl_.is_options_), 20>(),
     {56, 20, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.is_options_)}},
    // bool has_data = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AccountPositionProfit, _impl_.has_data_), 21>(),
     {64, 21, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.has_data_)}},
    // bool is_implied = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AccountPositionProfit, _impl_.is_implied_), 22>(),
     {72, 22, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.is_implied_)}},
    // optional double net = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 5, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.net_)}},
    // optional double upl = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 6, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.upl_)}},
    // optional double upl_trade = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 7, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.upl_trade_)}},
    // optional double rpl = 13;
    {::_pbi::TcParser::FastF64S1,
     {105, 8, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.rpl_)}},
    // optional double upl_usd = 14;
    {::_pbi::TcParser::FastF64S1,
     {113, 9, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.upl_usd_)}},
    // optional double upl_trade_usd = 15;
    {::_pbi::TcParser::FastF64S1,
     {121, 10, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.upl_trade_usd_)}},
    // optional double rpl_usd = 16;
    {::_pbi::TcParser::FastF64S2,
     {385, 11, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.rpl_usd_)}},
    // optional double day_net = 17;
    {::_pbi::TcParser::FastF64S2,
     {393, 12, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.day_net_)}},
    // optional double day_rpl = 18;
    {::_pbi::TcParser::FastF64S2,
     {401, 13, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.day_rpl_)}},
    // optional double day_rpl_usd = 19;
    {::_pbi::TcParser::FastF64S2,
     {409, 14, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.day_rpl_usd_)}},
    // optional double day_upl = 20;
    {::_pbi::TcParser::FastF64S2,
     {417, 15, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.day_upl_)}},
    // optional double day_upl_trade = 21;
    {::_pbi::TcParser::FastF64S2,
     {425, 16, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.day_upl_trade_)}},
    // optional double day_upl_usd = 22;
    {::_pbi::TcParser::FastF64S2,
     {433, 17, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.day_upl_usd_)}},
    // optional double day_upl_trade_usd = 23;
    {::_pbi::TcParser::FastF64S2,
     {441, 18, 0, PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.day_upl_trade_usd_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string account_id = 1;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.account_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange_id = 2;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.exchange_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string contract_id = 3;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.contract_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string market_id = 4;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.market_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool delayed = 5;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.delayed_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // .google.protobuf.Timestamp update_time = 6;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.update_time_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool is_options = 7;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.is_options_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool has_data = 8;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.has_data_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // bool is_implied = 9;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.is_implied_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional double net = 10;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.net_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double upl = 11;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.upl_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double upl_trade = 12;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.upl_trade_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double rpl = 13;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.rpl_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double upl_usd = 14;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.upl_usd_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double upl_trade_usd = 15;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.upl_trade_usd_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double rpl_usd = 16;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.rpl_usd_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double day_net = 17;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.day_net_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double day_rpl = 18;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.day_rpl_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double day_rpl_usd = 19;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.day_rpl_usd_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double day_upl = 20;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.day_upl_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double day_upl_trade = 21;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.day_upl_trade_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double day_upl_usd = 22;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.day_upl_usd_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
    // optional double day_upl_trade_usd = 23;
    {PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.day_upl_trade_usd_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kDouble)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }},
  {{
    "\50\12\13\13\11\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "t4proto.v1.account.AccountPositionProfit"
    "account_id"
    "exchange_id"
    "contract_id"
    "market_id"
  }},
};
PROTOBUF_NOINLINE void AccountPositionProfit::Clear() {
// @@protoc_insertion_point(message_clear_start:t4proto.v1.account.AccountPositionProfit)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.account_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.exchange_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.contract_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.market_id_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.update_time_ != nullptr);
      _impl_.update_time_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000e0u) != 0) {
    ::memset(&_impl_.net_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.upl_trade_) -
        reinterpret_cast<char*>(&_impl_.net_)) + sizeof(_impl_.upl_trade_));
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    ::memset(&_impl_.rpl_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.day_upl_) -
        reinterpret_cast<char*>(&_impl_.rpl_)) + sizeof(_impl_.day_upl_));
  }
  if ((cached_has_bits & 0x007f0000u) != 0) {
    ::memset(&_impl_.day_upl_trade_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.is_implied_) -
        reinterpret_cast<char*>(&_impl_.day_upl_trade_)) + sizeof(_impl_.is_implied_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL AccountPositionProfit::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const AccountPositionProfit& this_ = static_cast<const AccountPositionProfit&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL AccountPositionProfit::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const AccountPositionProfit& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:t4proto.v1.account.AccountPositionProfit)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string account_id = 1;
  if ((this_._impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!this_._internal_account_id().empty()) {
      const ::std::string& _s = this_._internal_account_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountPositionProfit.account_id");
      target = stream->WriteStringMaybeAliased(1, _s, target);
    }
  }

  // string exchange_id = 2;
  if ((this_._impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!this_._internal_exchange_id().empty()) {
      const ::std::string& _s = this_._internal_exchange_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountPositionProfit.exchange_id");
      target = stream->WriteStringMaybeAliased(2, _s, target);
    }
  }

  // string contract_id = 3;
  if ((this_._impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!this_._internal_contract_id().empty()) {
      const ::std::string& _s = this_._internal_contract_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountPositionProfit.contract_id");
      target = stream->WriteStringMaybeAliased(3, _s, target);
    }
  }

  // string market_id = 4;
  if ((this_._impl_._has_bits_[0] & 0x00000008u) != 0) {
    if (!this_._internal_market_id().empty()) {
      const ::std::string& _s = this_._internal_market_id();
      ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "t4proto.v1.account.AccountPositionProfit.market_id");
      target = stream->WriteStringMaybeAliased(4, _s, target);
    }
  }

  // bool delayed = 5;
  if ((this_._impl_._has_bits_[0] & 0x00080000u) != 0) {
    if (this_._internal_delayed() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          5, this_._internal_delayed(), target);
    }
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // .google.protobuf.Timestamp update_time = 6;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.update_time_, this_._impl_.update_time_->GetCachedSize(), target,
        stream);
  }

  // bool is_options = 7;
  if ((cached_has_bits & 0x00100000u) != 0) {
    if (this_._internal_is_options() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          7, this_._internal_is_options(), target);
    }
  }

  // bool has_data = 8;
  if ((cached_has_bits & 0x00200000u) != 0) {
    if (this_._internal_has_data() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          8, this_._internal_has_data(), target);
    }
  }

  // bool is_implied = 9;
  if ((cached_has_bits & 0x00400000u) != 0) {
    if (this_._internal_is_implied() != 0) {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(
          9, this_._internal_is_implied(), target);
    }
  }

  // optional double net = 10;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        10, this_._internal_net(), target);
  }

  // optional double upl = 11;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        11, this_._internal_upl(), target);
  }

  // optional double upl_trade = 12;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        12, this_._internal_upl_trade(), target);
  }

  // optional double rpl = 13;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        13, this_._internal_rpl(), target);
  }

  // optional double upl_usd = 14;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        14, this_._internal_upl_usd(), target);
  }

  // optional double upl_trade_usd = 15;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        15, this_._internal_upl_trade_usd(), target);
  }

  // optional double rpl_usd = 16;
  if ((cached_has_bits & 0x00000800u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        16, this_._internal_rpl_usd(), target);
  }

  // optional double day_net = 17;
  if ((cached_has_bits & 0x00001000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        17, this_._internal_day_net(), target);
  }

  // optional double day_rpl = 18;
  if ((cached_has_bits & 0x00002000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        18, this_._internal_day_rpl(), target);
  }

  // optional double day_rpl_usd = 19;
  if ((cached_has_bits & 0x00004000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        19, this_._internal_day_rpl_usd(), target);
  }

  // optional double day_upl = 20;
  if ((cached_has_bits & 0x00008000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        20, this_._internal_day_upl(), target);
  }

  // optional double day_upl_trade = 21;
  if ((cached_has_bits & 0x00010000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        21, this_._internal_day_upl_trade(), target);
  }

  // optional double day_upl_usd = 22;
  if ((cached_has_bits & 0x00020000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        22, this_._internal_day_upl_usd(), target);
  }

  // optional double day_upl_trade_usd = 23;
  if ((cached_has_bits & 0x00040000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(
        23, this_._internal_day_upl_trade_usd(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:t4proto.v1.account.AccountPositionProfit)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t AccountPositionProfit::ByteSizeLong(const MessageLite& base) {
  const AccountPositionProfit& this_ = static_cast<const AccountPositionProfit&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t AccountPositionProfit::ByteSizeLong() const {
  const AccountPositionProfit& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:t4proto.v1.account.AccountPositionProfit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x0007f800u & cached_has_bits) * 10;
  total_size += ::absl::popcount(0x000007e0u & cached_has_bits) * 9;
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // string account_id = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!this_._internal_account_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_account_id());
      }
    }
    // string exchange_id = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!this_._internal_exchange_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_exchange_id());
      }
    }
    // string contract_id = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!this_._internal_contract_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_contract_id());
      }
    }
    // string market_id = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!this_._internal_market_id().empty()) {
        total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                        this_._internal_market_id());
      }
    }
    // .google.protobuf.Timestamp update_time = 6;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.update_time_);
    }
  }
  if ((cached_has_bits & 0x00780000u) != 0) {
    // bool delayed = 5;
    if ((cached_has_bits & 0x00080000u) != 0) {
      if (this_._internal_delayed() != 0) {
        total_size += 2;
      }
    }
    // bool is_options = 7;
    if ((cached_has_bits & 0x00100000u) != 0) {
      if (this_._internal_is_options() != 0) {
        total_size += 2;
      }
    }
    // bool has_data = 8;
    if ((cached_has_bits & 0x00200000u) != 0) {
      if (this_._internal_has_data() != 0) {
        total_size += 2;
      }
    }
    // bool is_implied = 9;
    if ((cached_has_bits & 0x00400000u) != 0) {
      if (this_._internal_is_implied() != 0) {
        total_size += 2;
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void AccountPositionProfit::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AccountPositionProfit*>(&to_msg);
  auto& from = static_cast<const AccountPositionProfit&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:t4proto.v1.account.AccountPositionProfit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      if (!from._internal_account_id().empty()) {
        _this->_internal_set_account_id(from._internal_account_id());
      } else {
        if (_this->_impl_.account_id_.IsDefault()) {
          _this->_internal_set_account_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      if (!from._internal_exchange_id().empty()) {
        _this->_internal_set_exchange_id(from._internal_exchange_id());
      } else {
        if (_this->_impl_.exchange_id_.IsDefault()) {
          _this->_internal_set_exchange_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      if (!from._internal_contract_id().empty()) {
        _this->_internal_set_contract_id(from._internal_contract_id());
      } else {
        if (_this->_impl_.contract_id_.IsDefault()) {
          _this->_internal_set_contract_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      if (!from._internal_market_id().empty()) {
        _this->_internal_set_market_id(from._internal_market_id());
      } else {
        if (_this->_impl_.market_id_.IsDefault()) {
          _this->_internal_set_market_id("");
        }
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.update_time_ != nullptr);
      if (_this->_impl_.update_time_ == nullptr) {
        _this->_impl_.update_time_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.update_time_);
      } else {
        _this->_impl_.update_time_->MergeFrom(*from._impl_.update_time_);
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.net_ = from._impl_.net_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.upl_ = from._impl_.upl_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.upl_trade_ = from._impl_.upl_trade_;
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.rpl_ = from._impl_.rpl_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.upl_usd_ = from._impl_.upl_usd_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.upl_trade_usd_ = from._impl_.upl_trade_usd_;
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_impl_.rpl_usd_ = from._impl_.rpl_usd_;
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _this->_impl_.day_net_ = from._impl_.day_net_;
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _this->_impl_.day_rpl_ = from._impl_.day_rpl_;
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      _this->_impl_.day_rpl_usd_ = from._impl_.day_rpl_usd_;
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      _this->_impl_.day_upl_ = from._impl_.day_upl_;
    }
  }
  if ((cached_has_bits & 0x007f0000u) != 0) {
    if ((cached_has_bits & 0x00010000u) != 0) {
      _this->_impl_.day_upl_trade_ = from._impl_.day_upl_trade_;
    }
    if ((cached_has_bits & 0x00020000u) != 0) {
      _this->_impl_.day_upl_usd_ = from._impl_.day_upl_usd_;
    }
    if ((cached_has_bits & 0x00040000u) != 0) {
      _this->_impl_.day_upl_trade_usd_ = from._impl_.day_upl_trade_usd_;
    }
    if ((cached_has_bits & 0x00080000u) != 0) {
      if (from._internal_delayed() != 0) {
        _this->_impl_.delayed_ = from._impl_.delayed_;
      }
    }
    if ((cached_has_bits & 0x00100000u) != 0) {
      if (from._internal_is_options() != 0) {
        _this->_impl_.is_options_ = from._impl_.is_options_;
      }
    }
    if ((cached_has_bits & 0x00200000u) != 0) {
      if (from._internal_has_data() != 0) {
        _this->_impl_.has_data_ = from._impl_.has_data_;
      }
    }
    if ((cached_has_bits & 0x00400000u) != 0) {
      if (from._internal_is_implied() != 0) {
        _this->_impl_.is_implied_ = from._impl_.is_implied_;
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AccountPositionProfit::CopyFrom(const AccountPositionProfit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:t4proto.v1.account.AccountPositionProfit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AccountPositionProfit::InternalSwap(AccountPositionProfit* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using ::std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_id_, &other->_impl_.account_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_id_, &other->_impl_.exchange_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.contract_id_, &other->_impl_.contract_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.market_id_, &other->_impl_.market_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.is_implied_)
      + sizeof(AccountPositionProfit::_impl_.is_implied_)
      - PROTOBUF_FIELD_OFFSET(AccountPositionProfit, _impl_.update_time_)>(
          reinterpret_cast<char*>(&_impl_.update_time_),
          reinterpret_cast<char*>(&other->_impl_.update_time_));
}

::google::protobuf::Metadata AccountPositionProfit::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace account
}  // namespace v1
}  // namespace t4proto
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_t4_2fv1_2faccount_2faccount_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
